"use strict";
/**
 * „Éá„Éê„ÉÉ„Ç∞„É¶„Éº„ÉÜ„Ç£„É™„ÉÜ„Ç£
 * Áí∞Â¢ÉÂ§âÊï∞RIMOR_DEBUG„Åß„Éá„Éê„ÉÉ„Ç∞„É¨„Éô„É´„ÇíÂà∂Âæ°
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.debug = exports.DebugLogger = exports.DebugLevel = void 0;
var DebugLevel;
(function (DebugLevel) {
    DebugLevel[DebugLevel["NONE"] = 0] = "NONE";
    DebugLevel[DebugLevel["ERROR"] = 1] = "ERROR";
    DebugLevel[DebugLevel["WARN"] = 2] = "WARN";
    DebugLevel[DebugLevel["INFO"] = 3] = "INFO";
    DebugLevel[DebugLevel["VERBOSE"] = 4] = "VERBOSE";
    DebugLevel[DebugLevel["TRACE"] = 5] = "TRACE";
})(DebugLevel || (exports.DebugLevel = DebugLevel = {}));
class DebugLogger {
    static debugLevel = DebugLevel.NONE;
    static initialized = false;
    /**
     * „Éá„Éê„ÉÉ„Ç∞„É¨„Éô„É´„ÅÆÂàùÊúüÂåñ
     */
    static initialize() {
        if (this.initialized)
            return;
        // „ÉÜ„Çπ„ÉàÁí∞Â¢É„Åß„ÅØËá™ÂãïÁöÑ„Å´„É≠„Ç∞„ÇíÁÑ°ÂäπÂåñÔºàRIMOR_DEBUG„ÅåÊòéÁ§∫ÁöÑ„Å´Ë®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑÂ†¥ÂêàÔºâ
        if (process.env.NODE_ENV === 'test' && !process.env.RIMOR_DEBUG) {
            this.debugLevel = DebugLevel.NONE;
            this.initialized = true;
            return;
        }
        const debugEnv = process.env.RIMOR_DEBUG?.toLowerCase();
        switch (debugEnv) {
            case 'trace':
                this.debugLevel = DebugLevel.TRACE;
                break;
            case 'verbose':
                this.debugLevel = DebugLevel.VERBOSE;
                break;
            case 'info':
                this.debugLevel = DebugLevel.INFO;
                break;
            case 'warn':
                this.debugLevel = DebugLevel.WARN;
                break;
            case 'error':
                this.debugLevel = DebugLevel.ERROR;
                break;
            case 'true':
            case '1':
                this.debugLevel = DebugLevel.INFO;
                break;
            default:
                this.debugLevel = DebugLevel.NONE;
        }
        this.initialized = true;
        if (this.debugLevel > DebugLevel.NONE) {
            console.log(`üêõ Rimor Debug Mode: ${DebugLevel[this.debugLevel]}`);
        }
    }
    /**
     * „Éá„Éê„ÉÉ„Ç∞„É¨„Éô„É´„ÅÆÂèñÂæó
     */
    static getLevel() {
        if (!this.initialized) {
            this.initialize();
        }
        return this.debugLevel;
    }
    /**
     * „Éá„Éê„ÉÉ„Ç∞„É¨„Éô„É´„ÅÆË®≠ÂÆö
     */
    static setLevel(level) {
        this.debugLevel = level;
        this.initialized = true;
    }
    /**
     * „Ç®„É©„Éº„É¨„Éô„É´„ÅÆ„É≠„Ç∞
     */
    static error(message, ...args) {
        if (this.getLevel() >= DebugLevel.ERROR) {
            console.error(`üî¥ [ERROR] ${new Date().toISOString()} ${message}`, ...args);
        }
    }
    /**
     * Ë≠¶Âëä„É¨„Éô„É´„ÅÆ„É≠„Ç∞
     */
    static warn(message, ...args) {
        if (this.getLevel() >= DebugLevel.WARN) {
            console.warn(`üü° [WARN]  ${new Date().toISOString()} ${message}`, ...args);
        }
    }
    /**
     * ÊÉÖÂ†±„É¨„Éô„É´„ÅÆ„É≠„Ç∞
     */
    static info(message, ...args) {
        if (this.getLevel() >= DebugLevel.INFO) {
            console.log(`üîµ [INFO]  ${new Date().toISOString()} ${message}`, ...args);
        }
    }
    /**
     * Ë©≥Á¥∞„É¨„Éô„É´„ÅÆ„É≠„Ç∞
     */
    static verbose(message, ...args) {
        if (this.getLevel() >= DebugLevel.VERBOSE) {
            console.log(`üü¢ [VERB]  ${new Date().toISOString()} ${message}`, ...args);
        }
    }
    /**
     * „Éà„É¨„Éº„Çπ„É¨„Éô„É´„ÅÆ„É≠„Ç∞
     */
    static trace(message, ...args) {
        if (this.getLevel() >= DebugLevel.TRACE) {
            console.log(`‚ö™ [TRACE] ${new Date().toISOString()} ${message}`, ...args);
        }
    }
    /**
     * ÂÆüË°åÊôÇÈñì„ÅÆÊ∏¨ÂÆö
     */
    static time(label) {
        if (this.getLevel() >= DebugLevel.VERBOSE) {
            console.time(`‚è±Ô∏è  [TIME]  ${label}`);
        }
    }
    /**
     * ÂÆüË°åÊôÇÈñì„ÅÆÊ∏¨ÂÆöÁµÇ‰∫Ü
     */
    static timeEnd(label) {
        if (this.getLevel() >= DebugLevel.VERBOSE) {
            console.timeEnd(`‚è±Ô∏è  [TIME]  ${label}`);
        }
    }
    /**
     * „Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„ÅÆË©≥Á¥∞Ë°®Á§∫
     */
    static inspect(label, obj) {
        if (this.getLevel() >= DebugLevel.TRACE) {
            console.log(`üîç [INSPECT] ${label}:`);
            console.dir(obj, { depth: 3, colors: true });
        }
    }
    /**
     * „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÊ∏¨ÂÆö„ÅÆ„Éò„É´„Éë„Éº
     */
    static async measureAsync(label, fn) {
        if (this.getLevel() >= DebugLevel.VERBOSE) {
            const start = Date.now();
            this.verbose(`Starting: ${label}`);
            try {
                const result = await fn();
                const duration = Date.now() - start;
                this.verbose(`Completed: ${label} (${duration}ms)`);
                return result;
            }
            catch (error) {
                const duration = Date.now() - start;
                this.error(`Failed: ${label} (${duration}ms)`, error);
                throw error;
            }
        }
        else {
            return await fn();
        }
    }
    /**
     * ÂêåÊúüÈñ¢Êï∞„ÅÆ„Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÊ∏¨ÂÆö
     */
    static measure(label, fn) {
        if (this.getLevel() >= DebugLevel.VERBOSE) {
            const start = Date.now();
            this.verbose(`Starting: ${label}`);
            try {
                const result = fn();
                const duration = Date.now() - start;
                this.verbose(`Completed: ${label} (${duration}ms)`);
                return result;
            }
            catch (error) {
                const duration = Date.now() - start;
                this.error(`Failed: ${label} (${duration}ms)`, error);
                throw error;
            }
        }
        else {
            return fn();
        }
    }
    /**
     * Êù°‰ª∂‰ªò„Åç„É≠„Ç∞
     */
    static logIf(condition, level, message, ...args) {
        if (!condition)
            return;
        switch (level) {
            case DebugLevel.ERROR:
                this.error(message, ...args);
                break;
            case DebugLevel.WARN:
                this.warn(message, ...args);
                break;
            case DebugLevel.INFO:
                this.info(message, ...args);
                break;
            case DebugLevel.VERBOSE:
                this.verbose(message, ...args);
                break;
            case DebugLevel.TRACE:
                this.trace(message, ...args);
                break;
        }
    }
}
exports.DebugLogger = DebugLogger;
/**
 * ‰æøÂà©„Å™„Éá„Éê„ÉÉ„Ç∞Èñ¢Êï∞„ÅÆ„Ç®„ÇØ„Çπ„Éù„Éº„Éà
 */
exports.debug = {
    error: DebugLogger.error.bind(DebugLogger),
    warn: DebugLogger.warn.bind(DebugLogger),
    info: DebugLogger.info.bind(DebugLogger),
    verbose: DebugLogger.verbose.bind(DebugLogger),
    trace: DebugLogger.trace.bind(DebugLogger),
    time: DebugLogger.time.bind(DebugLogger),
    timeEnd: DebugLogger.timeEnd.bind(DebugLogger),
    inspect: DebugLogger.inspect.bind(DebugLogger),
    measureAsync: DebugLogger.measureAsync.bind(DebugLogger),
    measure: DebugLogger.measure.bind(DebugLogger),
    logIf: DebugLogger.logIf.bind(DebugLogger),
    getLevel: DebugLogger.getLevel.bind(DebugLogger),
    setLevel: DebugLogger.setLevel.bind(DebugLogger)
};
// Ëá™ÂãïÂàùÊúüÂåñ
DebugLogger.initialize();
//# sourceMappingURL=debug.js.map