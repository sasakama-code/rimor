name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]

    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit

    - name: Run lint check
      run: npm run lint
      continue-on-error: true  # MVPÊúüÈñì‰∏≠„ÅØlint„Ç®„É©„Éº„ÅßCI„ÇíÊ≠¢„ÇÅ„Å™„ÅÑ

    - name: Build TypeScript
      run: npm run build

    - name: Run tests
      run: npm test

    - name: Run Rimor self-analysis (experimental)
      run: |
        echo "üîç Running Rimor self-analysis..."
        if node dist/index.js analyze ./src --format=json > rimor-results.json 2>&1; then
          echo "‚úÖ Rimor analysis completed successfully"
          if [ -f rimor-results.json ]; then
            ISSUES=$(cat rimor-results.json | jq '.summary.issuesFound' 2>/dev/null || echo "unknown")
            COVERAGE=$(cat rimor-results.json | jq '.summary.testCoverage' 2>/dev/null || echo "unknown")
            echo "üìä Results: $ISSUES issues found, $COVERAGE% test coverage"
          fi
        else
          echo "‚ö†Ô∏è Rimor analysis failed, continuing CI without quality gate"
          echo "This is expected during initial CI setup phase"
        fi
      continue-on-error: true

    - name: Upload Rimor results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: rimor-analysis-node-${{ matrix.node-version }}
        path: rimor-results.json
        if-no-files-found: ignore

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run comprehensive security check
      run: npm run security-check

    - name: Check for outdated packages
      run: npm outdated || true

  publish-dry-run:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build
      run: npm run build

    - name: Test npm package
      run: npm pack --dry-run