name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  issues: write

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false  # 全てのNode.jsバージョンでテストを実行（互換性問題の検出のため）
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: |
        # Run audit and save results
        npm audit --audit-level=high --json > audit-results.json || true
        # Check for high severity vulnerabilities using jq
        if [ -f audit-results.json ]; then
          # Validate JSON before processing
          if ! jq empty audit-results.json >/dev/null 2>&1; then
            echo "::error::Invalid JSON produced by npm audit"
            exit 1
          fi
          
          # Extract vulnerability counts
          HIGH_VULNS=$(jq '.metadata.vulnerabilities.high // 0' audit-results.json)
          if [ $? -ne 0 ]; then
            echo "::error::Failed to parse high severity vulnerabilities from JSON"
            exit 1
          fi
          
          CRITICAL_VULNS=$(jq '.metadata.vulnerabilities.critical // 0' audit-results.json)
          if [ $? -ne 0 ]; then
            echo "::error::Failed to parse critical severity vulnerabilities from JSON"
            exit 1
          fi
          
          # Ensure vulnerability counts are successfully extracted
          if [ -z "$HIGH_VULNS" ] || [ -z "$CRITICAL_VULNS" ]; then
            echo "::error::Failed to parse vulnerability counts"
            exit 1
          fi
          
          echo "Found $HIGH_VULNS high severity vulnerabilities"
          echo "Found $CRITICAL_VULNS critical severity vulnerabilities"
          if [ "$CRITICAL_VULNS" -gt 0 ] || [ "$HIGH_VULNS" -gt 0 ]; then
            echo "::error::Security audit failed: Found $CRITICAL_VULNS critical and $HIGH_VULNS high severity vulnerabilities"
            exit 1
          fi
        else
          echo "::error::Failed to generate audit results"
          exit 1
        fi
    - name: Upload audit results
      if: always() && hashFiles('audit-results.json') != ''
      uses: actions/upload-artifact@v4
      with:
        name: security-audit-${{ matrix.node-version }}
        path: audit-results.json
        if-no-files-found: ignore

    - name: Build TypeScript
      run: npm run build

    - name: Run tests
      env:
        NODE_OPTIONS: '--max-old-space-size=2048'
      run: npm test

    - name: Upload AI Error Report
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: ai-error-report-${{ matrix.node-version }}
        path: |
          .rimor/reports/test-errors-ai.md
          .rimor/reports/test-errors-ai.json
    - name: Post AI Error Report Summary to PR
      if: failure() && github.event_name == 'pull_request'
      uses: actions/github-script@v7
      continue-on-error: true
      env:
        NODE_VERSION: ${{ matrix.node-version }}
      with:
        script: |
          const fs = require('fs');
          const summaryPath = '.rimor/reports/test-errors-ai-summary.md';
          
          if (fs.existsSync(summaryPath)) {
            const summary = fs.readFileSync(summaryPath, 'utf8');
            
            // アーティファクトへのリンクを追加
            const runUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            const artifactsMessage = `\n\n📎 **アーティファクト**: [このワークフロー実行のアーティファクト](${runUrl})から \`ai-error-report-${process.env.NODE_VERSION}\` をダウンロードして詳細を確認してください。`;
            
            const body = `## 🤖 AI Error Report (Node.js ${process.env.NODE_VERSION})\n\n${summary}${artifactsMessage}`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: body
            });
          }

    - name: Run quality check
      run: |
        # Run analysis and save results in JSON format
        # 実行して終了コードを取得
        npm run analyze:src:json > analysis-results.json
        ANALYSIS_EXIT_CODE=$?
        # 0=成功, 1=問題検出 とみなし >1 のみ異常終了扱い
        if [ "$ANALYSIS_EXIT_CODE" -gt 1 ]; then
          echo "::error::Quality analysis tool failed with exit code $ANALYSIS_EXIT_CODE"
          exit 1
        fi
        if [ -f analysis-results.json ]; then
          # Validate JSON before processing
          if ! jq empty analysis-results.json 2>/dev/null; then
            echo "::error::Invalid JSON in analysis-results.json"
            exit 1
          fi
          
          # Extract issue counts by severity
          CRITICAL_ISSUES=$(jq '[.issues[] | select(.severity == "critical")] | length' analysis-results.json)
          if [ $? -ne 0 ]; then
            echo "::error::Failed to parse critical issues from JSON"
            exit 1
          fi
          
          HIGH_ISSUES=$(jq '[.issues[] | select(.severity == "high")] | length' analysis-results.json)
          if [ $? -ne 0 ]; then
            echo "::error::Failed to parse high issues from JSON"
            exit 1
          fi
          
          MEDIUM_ISSUES=$(jq '[.issues[] | select(.severity == "medium")] | length' analysis-results.json)
          if [ $? -ne 0 ]; then
            echo "::error::Failed to parse medium issues from JSON"
            exit 1
          fi
          
          LOW_ISSUES=$(jq '[.issues[] | select(.severity == "low")] | length' analysis-results.json)
          if [ $? -ne 0 ]; then
            echo "::error::Failed to parse low issues from JSON"
            exit 1
          fi
          
          # Display issue summary
          echo "Quality Analysis Results:"
          echo "  Critical: $CRITICAL_ISSUES"
          echo "  High: $HIGH_ISSUES"
          echo "  Medium: $MEDIUM_ISSUES"
          echo "  Low: $LOW_ISSUES"
          # Apply thresholds
          if [ "$CRITICAL_ISSUES" -gt 0 ]; then
            echo "::error::Found $CRITICAL_ISSUES critical issues - build failed"
            exit 1
          elif [ "$HIGH_ISSUES" -gt 5 ]; then
            echo "::error::Found $HIGH_ISSUES high severity issues (threshold: 5) - build failed"
            exit 1
          elif [ "$MEDIUM_ISSUES" -gt 20 ]; then
            echo "::warning::Found $MEDIUM_ISSUES medium severity issues (threshold: 20)"
          fi

          echo "Quality check passed"
        else
          echo "::error::Analysis tool failed to generate results file"
          exit 1
        fi

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build TypeScript for security check
      run: npm run build

    - name: Run security check
      run: npm run security-check

  publish-dry-run:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build
      run: npm run build

    - name: Test npm package
      run: npm pack --dry-run
