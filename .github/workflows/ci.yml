name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  pull-requests: write

jobs:
  # ジョブ1: ビルドと基本検証
  build-and-verify:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build TypeScript
      run: npm run build

    - name: Type check
      run: npx tsc --noEmit

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ matrix.node-version }}
        path: dist/
        retention-days: 1

  # ジョブ2: セキュリティ監査（TaintTyper含む）
  security-audit:
    runs-on: ubuntu-latest
    needs: build-and-verify
    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-20.x
        path: dist/

    - name: Run comprehensive security check
      run: npm run security-check

    - name: Upload security audit results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-audit-results
        path: |
          .rimor/reports/security/audit-results.json
          .rimor/reports/security/security-analysis-report.json
        if-no-files-found: ignore

  # ジョブ3: 品質監査（dogfooding）
  quality-audit:
    runs-on: ubuntu-latest
    needs: build-and-verify
    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-20.x
        path: dist/

    - name: Run quality audit (dogfooding)
      run: |
        # 新しい品質監査スクリプトを実行
        if [ -f scripts/quality-audit.js ]; then
          node scripts/quality-audit.js
        else
          # 暫定的に既存の品質チェックを実行
          mkdir -p .rimor/reports/quality
          npm run analyze:src:json > .rimor/reports/quality/quality-audit-results.json
          ANALYSIS_EXIT_CODE=$?
          
          if [ "$ANALYSIS_EXIT_CODE" -gt 1 ]; then
            echo "::error::Quality audit failed with exit code $ANALYSIS_EXIT_CODE"
            exit 1
          fi
          
          # 結果の分析
          if [ -f .rimor/reports/quality/quality-audit-results.json ]; then
            if ! jq empty .rimor/reports/quality/quality-audit-results.json 2>/dev/null; then
              echo "::error::Invalid JSON in quality-audit-results.json"
              exit 1
            fi
            
            TOTAL_ISSUES=$(jq '.issues | length' .rimor/reports/quality/quality-audit-results.json)
            echo "Total quality issues found: $TOTAL_ISSUES"
            
            # 品質スコアの表示（存在する場合）
            if jq -e '.qualityScore' .rimor/reports/quality/quality-audit-results.json >/dev/null 2>&1; then
              QUALITY_SCORE=$(jq '.qualityScore' .rimor/reports/quality/quality-audit-results.json)
              echo "Overall quality score: $QUALITY_SCORE"
            fi
          fi
        fi

    - name: Upload quality audit results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: quality-audit-results
        path: |
          .rimor/reports/quality/quality-audit-results.json
          .rimor/reports/quality/dogfooding-report.json
        if-no-files-found: ignore

  # ジョブ4: テスト実行
  test:
    runs-on: ubuntu-latest
    needs: [security-audit, quality-audit]
    strategy:
      fail-fast: false
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-${{ matrix.node-version }}
        path: dist/

    - name: Run tests
      env:
        NODE_OPTIONS: '--max-old-space-size=2048'
        DISABLE_SECURITY_VALIDATION_LOGS: 'true'
      run: npm test

    - name: Upload AI Error Report
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: ai-error-report-${{ matrix.node-version }}
        path: |
          .rimor/reports/test-errors-ai.md
          .rimor/reports/test-errors-ai.json

    - name: Post AI Error Report Summary to PR
      if: failure() && github.event_name == 'pull_request'
      uses: actions/github-script@v7
      continue-on-error: true
      env:
        NODE_VERSION: ${{ matrix.node-version }}
      with:
        script: |
          const fs = require('fs');
          const summaryPath = '.rimor/reports/test-errors-ai-summary.md';
          
          if (fs.existsSync(summaryPath)) {
            const summary = fs.readFileSync(summaryPath, 'utf8');
            
            // アーティファクトへのリンクを追加
            const runUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            const artifactsMessage = `\n\n📎 **アーティファクト**: [このワークフロー実行のアーティファクト](${runUrl})から \`ai-error-report-${process.env.NODE_VERSION}\` をダウンロードして詳細を確認してください。`;
            
            const body = `## 🤖 AI Error Report (Node.js ${process.env.NODE_VERSION})\n\n${summary}${artifactsMessage}`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: body
            });
          }

  # npm公開の準備（mainブランチのみ）
  publish-dry-run:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-20.x
        path: dist/

    - name: Test npm package
      run: npm pack --dry-run