name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  issues: write

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false  # 全てのNode.jsバージョンでテストを実行（互換性問題の検出のため）
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: |
        # Run audit and save results
        npm audit --audit-level=high --json > audit-results.json || true
        # Check for high severity vulnerabilities using jq
        if [ -f audit-results.json ]; then
          HIGH_VULNS=$(jq '.metadata.vulnerabilities.high // 0' audit-results.json)
          CRITICAL_VULNS=$(jq '.metadata.vulnerabilities.critical // 0' audit-results.json)
          echo "Found $HIGH_VULNS high severity vulnerabilities"
          echo "Found $CRITICAL_VULNS critical severity vulnerabilities"
          if [ "$CRITICAL_VULNS" -gt 0 ] || [ "$HIGH_VULNS" -gt 0 ]; then
            echo "::error::Security audit failed: Found $CRITICAL_VULNS critical and $HIGH_VULNS high severity vulnerabilities"
            exit 1
          fi
        else
          echo "::error::Failed to generate audit results"
          exit 1
        fi
    - name: Upload audit results
      if: always() && hashFiles('audit-results.json') != ''
      uses: actions/upload-artifact@v4
      with:
        name: security-audit-${{ matrix.node-version }}
        path: audit-results.json
        if-no-files-found: ignore

    - name: Build TypeScript
      run: npm run build

    - name: Run tests
      env:
        NODE_OPTIONS: '--max-old-space-size=2048'
      run: npm test

    - name: Upload AI Error Report
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: ai-error-report-${{ matrix.node-version }}
        path: |
          .rimor/reports/test-errors-ai.md
          .rimor/reports/test-errors-ai.json
    - name: Post AI Error Report to PR
      if: failure() && github.event_name == 'pull_request'
      uses: actions/github-script@v7
      env:
        NODE_VERSION: ${{ matrix.node-version }}
      with:
        script: |
          const fs = require('fs');
          const reportPath = '.rimor/reports/test-errors-ai.md';
          if (fs.existsSync(reportPath)) {
            const report = fs.readFileSync(reportPath, 'utf8');
            const truncatedReport = report.length > 65000
              ? report.substring(0, 65000) + '\n\n... [トランケートされました]'
              : report;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: `## 🤖 AI Error Report (Node.js ${process.env.NODE_VERSION})\n\n${truncatedReport}`
            });
          }

    - name: Run quality check
      run: |
        # Run analysis and save results in JSON format
        ANALYSIS_EXIT_CODE=0
        npm run analyze:src:json > analysis-results.json || ANALYSIS_EXIT_CODE=$?
        # Check if analysis tool crashed
        if [ "$ANALYSIS_EXIT_CODE" -ne 0 ]; then
          echo "::error::Analysis tool crashed with exit code $ANALYSIS_EXIT_CODE"
          exit 1
        fi
        if [ -f analysis-results.json ]; then
          # Extract issue counts by severity
          CRITICAL_ISSUES=$(jq '[.issues[] | select(.severity == "critical")] | length' analysis-results.json 2>/dev/null || echo "0")
          HIGH_ISSUES=$(jq '[.issues[] | select(.severity == "high")] | length' analysis-results.json 2>/dev/null || echo "0")
          MEDIUM_ISSUES=$(jq '[.issues[] | select(.severity == "medium")] | length' analysis-results.json 2>/dev/null || echo "0")
          LOW_ISSUES=$(jq '[.issues[] | select(.severity == "low")] | length' analysis-results.json 2>/dev/null || echo "0")
          # Display issue summary
          echo "Quality Analysis Results:"
          echo "  Critical: $CRITICAL_ISSUES"
          echo "  High: $HIGH_ISSUES"
          echo "  Medium: $MEDIUM_ISSUES"
          echo "  Low: $LOW_ISSUES"
          # Apply thresholds
          if [ "$CRITICAL_ISSUES" -gt 0 ]; then
            echo "::error::Found $CRITICAL_ISSUES critical issues - build failed"
            exit 1
          elif [ "$HIGH_ISSUES" -gt 5 ]; then
            echo "::error::Found $HIGH_ISSUES high severity issues (threshold: 5) - build failed"
            exit 1
          elif [ "$MEDIUM_ISSUES" -gt 20 ]; then
            echo "::warning::Found $MEDIUM_ISSUES medium severity issues (threshold: 20)"
          fi

          echo "Quality check passed"
        else
          echo "::error::Analysis tool failed to generate results file"
          exit 1
        fi

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build TypeScript for security check
      run: npm run build

    - name: Run security check
      run: npm run security-check

  publish-dry-run:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build
      run: npm run build

    - name: Test npm package
      run: npm pack --dry-run
