name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]

    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit

    - name: Run lint check
      run: npm run lint
      continue-on-error: true  # MVP期間中はlintエラーでCIを止めない

    - name: Clean generated files before build
      run: |
        echo "🧹 Cleaning test-generated files before build..."
        rm -rf src/plugins/generated/ || true
        rm -rf dist/ || true
        mkdir -p src/plugins/generated/
        echo "✅ Build準備完了 - 生成ファイルをクリーンアップしました"

    - name: Build TypeScript
      run: npm run build

    - name: Run tests
      run: |
        echo "🧪 Starting test execution..."
        timeout 300 npm test || {
          echo "❌ Tests failed or timed out after 5 minutes"
          exit 1
        }
        echo "✅ Tests completed successfully"

    - name: Run Rimor self-analysis (REQUIRED)
      run: |
        echo "🔍 Running Rimor self-analysis..."
        
        # CI環境での実行確認
        echo "📋 Checking CI environment..."
        echo "   - Node.js version: $(node --version)"
        echo "   - NPM version: $(npm --version)"
        echo "   - Current directory: $(pwd)"
        echo "   - dist/index.js exists: $([ -f dist/index.js ] && echo 'YES' || echo 'NO')"
        echo "   - dist/index.js executable: $([ -x dist/index.js ] && echo 'YES' || echo 'NO')"
        
        # 実行権限を確実に設定
        chmod +x dist/index.js || echo "Warning: Could not set executable permission"
        
        # Rimor実行（エラーハンドリング強化）
        echo "🚀 Executing Rimor analysis..."
        if node dist/index.js analyze ./src --format=json > rimor-results.json 2>&1; then
          echo "✅ Rimor analysis completed successfully"
          echo "📄 Generated rimor-results.json:"
          cat rimor-results.json
        else
          echo "❌ Rimor analysis failed, creating fallback results..."
          # フォールバック用のJSONファイル生成
          cat > rimor-results.json << 'EOF'
{
  "summary": {
    "totalFiles": 0,
    "issuesFound": 1,
    "testCoverage": 0,
    "executionTime": 0
  },
  "issues": [
    {
      "type": "ci-execution-error",
      "severity": "error",
      "message": "CI環境でのRimor実行に失敗しました"
    }
  ],
  "config": {
    "targetPath": "./src",
    "enabledPlugins": ["fallback"],
    "format": "json"
  }
}
EOF
          echo "📄 Fallback rimor-results.json created:"
          cat rimor-results.json
        fi

    - name: Upload Rimor results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: rimor-analysis-node-${{ matrix.node-version }}
        path: rimor-results.json

    - name: Quality Gate - Test Coverage Check
      run: |
        echo "🔍 Checking quality standards..."
        
        # JSONファイル存在確認（デバッグ情報追加）
        echo "📋 Debug information:"
        echo "   - Current directory: $(pwd)"
        echo "   - rimor-results.json exists: $([ -f rimor-results.json ] && echo 'YES' || echo 'NO')"
        if [ -f rimor-results.json ]; then
          echo "   - File size: $(stat -f%z rimor-results.json 2>/dev/null || stat -c%s rimor-results.json 2>/dev/null || echo 'unknown') bytes"
        fi
        
        if [ ! -f rimor-results.json ]; then
          echo "❌ rimor-results.json not found - creating emergency fallback"
          cat > rimor-results.json << 'EOF'
{
  "summary": {
    "totalFiles": 0,
    "issuesFound": 99,
    "testCoverage": 0,
    "executionTime": 0
  },
  "issues": [
    {
      "type": "missing-results-file",
      "severity": "error", 
      "message": "rimor-results.jsonファイルが見つかりませんでした"
    }
  ],
  "config": {
    "targetPath": "./src",
    "enabledPlugins": ["emergency-fallback"],
    "format": "json"
  }
}
EOF
        fi
        
        # Install jq if not available
        if ! command -v jq &> /dev/null; then
          echo "Installing jq..."
          sudo apt-get update && sudo apt-get install -y jq
        fi
        
        # JSON解析（エラーハンドリング強化）
        echo "📊 Parsing JSON results..."
        if ! jq empty rimor-results.json 2>/dev/null; then
          echo "❌ Invalid JSON format detected, fixing..."
          echo '{"summary":{"totalFiles":0,"issuesFound":99,"testCoverage":0,"executionTime":0},"issues":[{"type":"json-parse-error","severity":"error","message":"JSON解析エラーが発生しました"}],"config":{"targetPath":"./src","enabledPlugins":["json-error-fallback"],"format":"json"}}' > rimor-results.json
        fi
        
        ISSUES=$(cat rimor-results.json | jq -r '.summary.issuesFound // 99')
        COVERAGE=$(cat rimor-results.json | jq -r '.summary.testCoverage // 0')
        
        echo "📊 Analysis Results:"
        echo "   - Issues found: $ISSUES"
        echo "   - Test coverage: $COVERAGE%"
        
        # MVP期間中は品質問題があってもwarningとして処理
        if [ "$ISSUES" -gt 0 ]; then
          echo "⚠️  QUALITY WARNING: $ISSUES test quality issues found (MVP期間中は継続)"
          echo "   今後改善が必要な項目:"
          cat rimor-results.json | jq '.issues[]'
          echo "   ※ MVP期間中のため警告扱いで継続します"
        fi
        
        # MVP期間中はテストカバレッジ基準も緩和
        if [ "$COVERAGE" -lt 60 ]; then
          echo "❌ QUALITY GATE FAILED: Test coverage is $COVERAGE% (MVP最低基準: 60%)"
          echo "   テストカバレッジが不足しています"
          exit 1
        elif [ "$COVERAGE" -lt 80 ]; then
          echo "⚠️  COVERAGE WARNING: Test coverage is $COVERAGE% (目標: 80%)"
          echo "   ※ MVP期間中のため60%以上で継続します"
        fi
        
        echo "✅ QUALITY GATE PASSED: MVP期間基準を満たしています"
        if [ "$ISSUES" -eq 0 ]; then
          echo "   - テスト品質問題: なし ✅"
        else
          echo "   - テスト品質問題: $ISSUES件 (警告扱い) ⚠️"
        fi
        echo "   - テストカバレッジ: $COVERAGE% (≥60%) ✅"

    - name: Clean test artifacts after analysis
      run: |
        echo "🧹 Cleaning test-generated files..."
        rm -rf src/plugins/generated/ || true
        find . -name "*.d.ts.map" -type f -delete || true
        find . -name "*.js.map" -type f -delete || true
        echo "✅ テスト後クリーンアップ完了"

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Clean generated files before build
      run: |
        echo "🧹 Cleaning test-generated files before security check..."
        rm -rf src/plugins/generated/
        mkdir -p src/plugins/generated/
        echo "✅ Cleanup completed"

    - name: Build TypeScript for security check
      run: npm run build

    - name: Run comprehensive security check
      run: npm run security-check

    - name: Check for outdated packages
      run: npm outdated || true

  publish-dry-run:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build
      run: npm run build

    - name: Test npm package
      run: npm pack --dry-run