name: 🏥 Release Health Monitor

on:
  schedule:
    # 毎日午前9時（JST）と午後9時（JST）に実行
    - cron: '0 0,12 * * *'  # UTC: 00:00, 12:00 = JST: 09:00, 21:00
  workflow_dispatch:  # 手動実行も可能
    inputs:
      detailed_check:
        description: 'Run detailed health analysis'
        required: false
        default: 'false'
        type: boolean

jobs:
  health-monitor:
    name: 🔍 Health Status Monitor
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      issues: write  # Issue作成権限（問題検出時）
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🏥 Run health check
        id: health-check
        run: |
          echo "🏥 Running Rimor Release Health Check..."
          node scripts/release-health-check.js > health-report.txt 2>&1
          HEALTH_STATUS=$?
          
          echo "health_status=$HEALTH_STATUS" >> $GITHUB_OUTPUT
          
          # 結果をGitHub Outputに保存
          if [ $HEALTH_STATUS -eq 0 ]; then
            echo "result=healthy" >> $GITHUB_OUTPUT
          else
            echo "result=unhealthy" >> $GITHUB_OUTPUT
          fi
          
          # レポート内容を確認
          cat health-report.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: 📊 Upload health report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: health-report-${{ github.run_number }}
          path: health-report.txt
          retention-days: 30

      - name: 🚨 Create issue on critical failure
        if: steps.health-check.outputs.result == 'unhealthy'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const healthReport = fs.readFileSync('health-report.txt', 'utf8');
            
            const issueTitle = `🚨 Release Health Check Failed - ${new Date().toISOString().split('T')[0]}`;
            const issueBody = `## 🚨 Critical Health Issues Detected
            
            **Detected at:** ${new Date().toLocaleString()}
            **Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
            ### 📋 Health Report
            \`\`\`
            ${healthReport}
            \`\`\`
            
            ### 🛠️ Immediate Actions Required
            
            1. **Check npm package availability**
               - Verify package can be installed: \`npm install -g rimor\`
               - Test CLI functionality: \`rimor --version\`
            
            2. **Review recent releases**
               - Check latest release: https://github.com/${{ github.repository }}/releases/latest
               - Verify GitHub Actions: ${{ github.server_url }}/${{ github.repository }}/actions
            
            3. **Monitor user reports**
               - Check for new issues: ${{ github.server_url }}/${{ github.repository }}/issues
               - Review npm download statistics
            
            ### 🔗 Useful Commands
            \`\`\`bash
            # Manual health check
            npm run health-check
            
            # Check package status
            npm view rimor
            
            # Test installation
            npm install -g rimor@latest
            rimor --version
            \`\`\`
            
            **Auto-generated by Release Health Monitor**
            `;
            
            // 既存の健康チェック関連Issueがあるかチェック
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'health-check,critical'
            });
            
            // 24時間以内の健康チェックissueがない場合のみ作成
            const oneDayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);
            const recentHealthIssues = existingIssues.data.filter(issue => 
              new Date(issue.created_at) > oneDayAgo && 
              issue.title.includes('Release Health Check Failed')
            );
            
            if (recentHealthIssues.length === 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issueTitle,
                body: issueBody,
                labels: ['health-check', 'critical', 'automated']
              });
              
              console.log('🚨 Critical health issue created');
            } else {
              console.log('⚠️ Recent health issue already exists, skipping creation');
            }

      - name: 💬 Add comment to existing issue
        if: steps.health-check.outputs.result == 'unhealthy'
        uses: actions/github-script@v6
        with:
          script: |
            // 最新の健康チェックissueにコメント追加
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'health-check,critical',
              sort: 'created',
              direction: 'desc',
              per_page: 1
            });
            
            if (existingIssues.data.length > 0) {
              const latestIssue = existingIssues.data[0];
              const commentBody = `### 📊 Health Check Update - ${new Date().toLocaleString()}
              
              🚨 Health check failed again.
              
              **Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
              **Report Artifact:** [health-report-${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
              
              Please investigate and resolve the underlying issues.`;
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: latestIssue.number,
                body: commentBody
              });
            }

      - name: ✅ Health check success notification
        if: steps.health-check.outputs.result == 'healthy'
        run: |
          echo "🎉 Health check passed successfully!"
          echo "📊 All systems operational"
          echo "🔗 Report available in artifacts"
          
          # Slack notification (optional)
          # curl -X POST -H 'Content-type: application/json' \
          #   --data '{"text":"✅ Rimor health check passed at '"$(date)"'"}' \
          #   $SLACK_WEBHOOK_URL

  # Extended monitoring job (runs less frequently)
  extended-monitoring:
    name: 📈 Extended Health Analysis
    runs-on: ubuntu-latest
    if: github.event.inputs.detailed_check == 'true' || github.event.schedule
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: 📈 Collect extended metrics
        run: |
          echo "📈 Extended Health Metrics Collection"
          echo "===================================="
          
          # Package download trends
          echo "📊 NPM Download Analysis:"
          PACKAGE_STATS=$(curl -s "https://api.npmjs.org/downloads/range/last-month/rimor" || echo '{"error": "API unavailable"}')
          echo "$PACKAGE_STATS" | jq -r '.downloads[]? | "\(.day): \(.downloads) downloads"' | tail -7 || echo "Download data unavailable"
          
          # Repository activity
          echo ""  
          echo "🐙 Repository Activity:"
          echo "- Commits (last 30 days): $(git log --since='30 days ago' --oneline | wc -l)"
          echo "- Contributors (last 30 days): $(git log --since='30 days ago' --format='%ae' | sort -u | wc -l)"
          
          # Size analysis
          echo ""
          echo "📦 Package Size Analysis:"
          npm pack --dry-run 2>&1 | grep -E "(npm notice|total files|unpacked size)" || echo "Size analysis unavailable"
          
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📊 Generate weekly summary
        if: github.event.schedule && contains(github.event.schedule, '0 0')  # Daily midnight run only
        run: |
          echo "📊 Weekly Health Summary - $(date +%Y-%m-%d)"
          echo "========================================="
          
          # This could be expanded to generate comprehensive weekly reports
          echo "🎯 Key Metrics:"
          echo "- Health checks this week: Tracked in Actions history"
          echo "- Package stability: Monitor via npm statistics"
          echo "- Issue resolution rate: Track via GitHub Issues"
          
          echo ""
          echo "📋 Recommendations:"
          echo "- Continue regular monitoring"
          echo "- Review any recurring issues"
          echo "- Update health check thresholds if needed"