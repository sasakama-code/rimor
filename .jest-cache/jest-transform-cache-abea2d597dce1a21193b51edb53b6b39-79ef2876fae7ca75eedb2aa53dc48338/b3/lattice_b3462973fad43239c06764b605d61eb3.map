{"file":"/Users/sasakama/Projects/Rimor/src/security/types/lattice.ts","mappings":"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","names":[],"sources":["/Users/sasakama/Projects/Rimor/src/security/types/lattice.ts"],"sourcesContent":["/**\n * 型ベースセキュリティ解析 - セキュリティ格子システム\n * Dorothy Denningの格子理論を実装し、セキュリティ不変条件を管理\n */\n\nimport {\n  TaintLevel,\n  TaintSource,\n  SecuritySink,\n  SanitizerType,\n  TaintMetadata,\n  TaintLattice\n} from './taint';\nimport {\n  SecurityType,\n  TestStatement,\n  Variable,\n  SecurityIssue,\n  PotentialVulnerability\n} from './security';\nimport {\n  SeverityLevel\n} from '../../types/common-types';\nimport {\n  Position,\n  FlowPath\n} from './flow-types';\n\n/**\n * セキュリティ格子の実装\n * Dorothy Denning (1976) の格子モデルに基づく\n */\nexport class SecurityLattice {\n  private lattice: Map<string, TaintLevel> = new Map();\n  private metadata: Map<string, TaintMetadata> = new Map();\n\n  /**\n   * 変数の汚染レベルを設定\n   */\n  setTaintLevel(variable: string, level: TaintLevel, metadata?: TaintMetadata): void {\n    this.lattice.set(variable, level);\n    if (metadata) {\n      this.metadata.set(variable, metadata);\n    }\n  }\n\n  /**\n   * 変数の汚染レベルを取得\n   */\n  getTaintLevel(variable: string): TaintLevel {\n    return this.lattice.get(variable) ?? 'untainted';\n  }\n\n  /**\n   * 変数のメタデータを取得\n   */\n  getMetadata(variable: string): TaintMetadata | undefined {\n    return this.metadata.get(variable);\n  }\n\n  /**\n   * 格子の結合演算（join）\n   */\n  join(a: TaintLevel, b: TaintLevel): TaintLevel {\n    return TaintLattice.join(a, b);\n  }\n\n  /**\n   * 格子の交わり演算（meet）\n   */\n  meet(a: TaintLevel, b: TaintLevel): TaintLevel {\n    return TaintLattice.meet(a, b);\n  }\n\n  /**\n   * 単調性を保証する転送関数\n   * Volpano-Smith-Irvine型システムの転送関数を実装\n   */\n  transferFunction(stmt: TestStatement, input: TaintLevel): TaintLevel {\n    switch (stmt.type) {\n      case 'sanitizer':\n        // サニタイザー適用 - 汚染レベルを下げる\n        return 'untainted';\n\n      case 'userInput':\n        // ユーザー入力 - 最高レベルの汚染\n        return 'tainted';\n\n      case 'assignment':\n        // 代入 - 右辺の汚染を左辺に伝播\n        if (stmt.rhs) {\n          const rhsTaint = this.evaluateExpression(stmt.rhs);\n          return this.join(input, rhsTaint);\n        }\n        return input;\n\n      case 'methodCall':\n        // メソッド呼び出し - 引数の汚染を考慮\n        if (stmt.method && this.isSanitizer(stmt.method)) {\n          return 'untainted';\n        }\n        return this.propagateMethodTaint(stmt, input);\n\n      case 'assertion':\n        // アサーション - セキュリティチェックが必要\n        return this.validateAssertionSecurity(stmt, input);\n\n      default:\n        // 保守的な伝播\n        return input;\n    }\n  }\n\n  /**\n   * 式の汚染レベルを評価\n   */\n  private evaluateExpression(expression: string): TaintLevel {\n    // 簡単な式解析（実際の実装ではASTパースが必要）\n    const variables = this.extractVariables(expression);\n    if (variables.length === 0) {\n      return 'untainted';\n    }\n\n    // すべての変数の汚染レベルを結合\n    const untainted: TaintLevel = 'untainted';\n    return variables.reduce<TaintLevel>(\n      (acc, variable) => this.join(acc, this.getTaintLevel(variable)),\n      untainted\n    );\n  }\n\n  /**\n   * 変数を抽出（簡易実装）\n   */\n  private extractVariables(expression: string): string[] {\n    // 実際の実装では適切な字句解析が必要\n    const matches = expression.match(/\\b[a-zA-Z_][a-zA-Z0-9_]*\\b/g) || [];\n    return matches.filter(match => !this.isKeyword(match));\n  }\n\n  /**\n   * キーワードかどうかを判定\n   */\n  private isKeyword(word: string): boolean {\n    const keywords = ['const', 'let', 'var', 'function', 'if', 'else', 'for', 'while', 'return'];\n    return keywords.includes(word);\n  }\n\n  /**\n   * サニタイザーかどうかを判定\n   */\n  private isSanitizer(methodName: string): boolean {\n    const sanitizers = [\n      'escape', 'sanitize', 'validate', 'clean', 'filter',\n      'htmlEscape', 'sqlEscape', 'jsEscape', 'urlEncode'\n    ];\n    return sanitizers.some(sanitizer => \n      methodName.toLowerCase().includes(sanitizer.toLowerCase())\n    );\n  }\n\n  /**\n   * メソッド呼び出しの汚染伝播\n   */\n  private propagateMethodTaint(stmt: TestStatement, input: TaintLevel): TaintLevel {\n    if (!stmt.arguments) {\n      return input;\n    }\n\n    // 引数の最大汚染レベルを取得\n    const argTaints = stmt.arguments.map(arg => \n      typeof arg === 'string' ? this.evaluateExpression(arg) : 'untainted'\n    );\n\n    const maxArgTaint = argTaints.reduce(\n      (max, taint) => this.join(max, taint),\n      'untainted' as TaintLevel\n    );\n\n    return this.join(input, maxArgTaint);\n  }\n\n  /**\n   * アサーションのセキュリティ検証\n   */\n  private validateAssertionSecurity(stmt: TestStatement, input: TaintLevel): TaintLevel {\n    if (!stmt.actual) {\n      return input;\n    }\n\n    const actualTaint = this.evaluateExpression(stmt.actual);\n    \n    // 汚染されたデータを直接アサートしている場合は警告\n    if (actualTaint >= 'tainted' && !stmt.isNegativeAssertion) {\n      // セキュリティ問題として記録（実際の実装では適切なロギングが必要）\n      console.warn(`Potentially unsafe assertion: testing tainted data at line ${stmt.location.line}`);\n    }\n\n    return this.join(input, actualTaint);\n  }\n\n  /**\n   * セキュリティ不変条件の検証\n   */\n  verifySecurityInvariants(): SecurityViolation[] {\n    const violations: SecurityViolation[] = [];\n\n    for (const [variable, taintLevel] of this.lattice.entries()) {\n      const metadata = this.metadata.get(variable);\n      if (!metadata) continue;\n\n      // 汚染されたデータがサニタイズされずにシンクに到達していないかチェック\n      if (this.reachesSecuritySink(variable, metadata) && \n          taintLevel >= 'tainted') {\n        violations.push({\n          type: 'unsanitized-taint-flow',\n          severity: this.calculateSeverity(taintLevel, metadata),\n          message: `Unsanitized taint flow detected for variable ${variable}`,\n          variable,\n          taintLevel,\n          metadata,\n          suggestedFix: this.generateSanitizationSuggestion(metadata)\n        });\n      }\n    }\n\n    return violations;\n  }\n\n  /**\n   * セキュリティシンクに到達するかどうかを判定\n   */\n  private reachesSecuritySink(variable: string, metadata: TaintMetadata): boolean {\n    // 実装では、データフローグラフを使用してシンクへの到達性を判定\n    return metadata.sinks.length > 0;\n  }\n\n  /**\n   * セキュリティシンクかどうかを判定\n   */\n  private isSecuritySink(description: string): boolean {\n    const sinks = ['expect(', 'assert(', 'query(', 'innerHTML', 'eval(', 'exec('];\n    return sinks.some(sink => description.includes(sink));\n  }\n\n  /**\n   * 重要度を計算\n   */\n  private calculateSeverity(\n    taintLevel: TaintLevel, \n    metadata: TaintMetadata\n  ): SeverityLevel {\n    const primarySource = metadata.sources[0];\n    if (taintLevel === 'tainted' && \n        primarySource === TaintSource.USER_INPUT) {\n      return 'critical';\n    }\n    if (taintLevel >= 'tainted') {\n      return 'high';\n    }\n    if (taintLevel === 'possibly_tainted') {\n      return 'medium';\n    }\n    return 'low';\n  }\n\n  /**\n   * サニタイズ提案の生成\n   */\n  private generateSanitizationSuggestion(metadata: TaintMetadata): string {\n    const primarySource = metadata.sources[0];\n    switch (primarySource) {\n      case TaintSource.USER_INPUT:\n        return '入力値をescape()またはvalidate()でサニタイズしてください';\n      case TaintSource.EXTERNAL_API:\n        return 'API応答をJSON.parse()で安全にパースしてください';\n      case TaintSource.DATABASE:\n        return 'データベース値をsqlEscape()でエスケープしてください';\n      default:\n        return '適切なサニタイザーを適用してください';\n    }\n  }\n\n  /**\n   * 格子の状態をクリア\n   */\n  clear(): void {\n    this.lattice.clear();\n    this.metadata.clear();\n  }\n\n  /**\n   * 格子の状態をコピー\n   */\n  clone(): SecurityLattice {\n    const clone = new SecurityLattice();\n    clone.lattice = new Map(this.lattice);\n    clone.metadata = new Map(this.metadata);\n    return clone;\n  }\n}\n\n/**\n * セキュリティ違反\n */\nexport interface SecurityViolation {\n  /** 違反の種別 */\n  type: 'taint' | 'type' | 'flow' | 'invariant' | 'unsanitized-taint-flow' | 'missing-sanitizer' | 'unsafe-assertion' | 'sql-injection' | 'xss' | 'command-injection';\n  /** 重要度 */\n  severity: SeverityLevel;\n  /** メッセージ */\n  message: string;\n  /** 位置 */\n  location?: Position;\n  /** パス */\n  path?: FlowPath;\n  /** 修正提案 */\n  fix?: string;\n  suggestedFix?: string;\n  /** 関連する変数 */\n  variable?: string;\n  /** 汚染レベル */\n  taintLevel?: TaintLevel;\n  /** メタデータ */\n  metadata?: TaintMetadata;\n}\n\n/**\n * 格子分析の統計情報\n */\nexport interface LatticeAnalysisStats {\n  /** 解析された変数数 */\n  variablesAnalyzed: number;\n  /** 汚染された変数数 */\n  taintedVariables: number;\n  /** 検出された違反数 */\n  violationsFound: number;\n  /** 解析時間（ms） */\n  analysisTime: number;\n  /** 格子の高さ（複雑さの指標） */\n  latticeHeight: number;\n}"],"version":3}