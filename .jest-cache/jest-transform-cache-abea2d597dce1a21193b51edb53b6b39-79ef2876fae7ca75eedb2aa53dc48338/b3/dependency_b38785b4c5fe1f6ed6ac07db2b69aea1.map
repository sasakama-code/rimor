{"file":"/Users/sasakama/Projects/Rimor/src/analyzers/dependency.ts","mappings":"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","names":[],"sources":["/Users/sasakama/Projects/Rimor/src/analyzers/dependency.ts"],"sourcesContent":["import { DependencyAnalysis, ProjectDependency, FileDependency, CyclicDependency, DependencyUsage, VersionConstraint } from './types';\nimport { PackageJsonConfig } from '../core/types';\nimport { PackageLockDependency } from './dependency-types';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { PathSecurity } from '../utils/pathSecurity';\nimport { PackageAnalyzer } from './dependency-analysis/package-analyzer';\nimport { UsageAnalyzer } from './dependency-analysis/usage-analyzer';\nimport { ProjectDependencyAnalyzer } from './dependency-analysis/project-deps';\nimport { FileDependencyAnalyzer } from './dependency-analysis/file-deps';\nimport { CircularDependencyDetector } from './dependency-analysis/circular-detector';\n\n/**\n * 依存関係分析器（ファサードパターン）\n * 後方互換性を維持しながら新しい分析クラスに処理を委譲\n * プロジェクトの依存関係を分析し、循環依存、未使用・不足している依存関係を検出\n */\nexport class DependencyAnalyzer {\n  private readonly SUPPORTED_EXTENSIONS = ['.ts', '.js', '.tsx', '.jsx', '.mjs', '.cjs'];\n  private readonly IGNORE_PATTERNS = [\n    'node_modules',\n    'dist',\n    'build',\n    '.git',\n    '.vscode',\n    '.idea',\n    'coverage'\n  ];\n  \n  // 新しい分析クラスのインスタンス\n  private packageAnalyzer: PackageAnalyzer;\n  private usageAnalyzer: UsageAnalyzer;\n  private projectDepsAnalyzer: ProjectDependencyAnalyzer;\n  private fileDepsAnalyzer: FileDependencyAnalyzer;\n  private circularDetector: CircularDependencyDetector;\n  \n  constructor() {\n    this.packageAnalyzer = new PackageAnalyzer();\n    this.usageAnalyzer = new UsageAnalyzer();\n    this.projectDepsAnalyzer = new ProjectDependencyAnalyzer();\n    this.fileDepsAnalyzer = new FileDependencyAnalyzer();\n    this.circularDetector = new CircularDependencyDetector();\n  }\n\n  /**\n   * プロジェクトの依存関係を包括的に分析\n   */\n  async analyzeDependencies(projectPath: string): Promise<DependencyAnalysis> {\n    if (!fs.existsSync(projectPath)) {\n      throw new Error(`Project path does not exist: ${projectPath}`);\n    }\n\n    const packageJsonPath = path.join(projectPath, 'package.json');\n    let packageJson: Partial<PackageJsonConfig> = {};\n\n    // package.jsonの読み込み\n    try {\n      if (fs.existsSync(packageJsonPath)) {\n        const content = fs.readFileSync(packageJsonPath, 'utf-8');\n        packageJson = JSON.parse(content) as PackageJsonConfig;\n      }\n    } catch (error) {\n      // package.jsonが不正な場合は空のオブジェクトを使用\n      packageJson = {};\n    }\n\n    // ロックファイルの情報を取得\n    const lockFileInfo = await this.parseLockFiles(projectPath);\n\n    // 依存関係情報を抽出\n    const projectDependencies = await this.extractProjectDependencies(packageJson as PackageJsonConfig, lockFileInfo, projectPath);\n    const fileDependencies = await this.analyzeFileDependencies(projectPath);\n\n    // 循環依存の検出\n    const cyclicDependencies = await this.detectCyclicDependencies(projectPath);\n\n    // 未使用・不足依存関係の検出\n    const unusedDependencies = await this.findUnusedDependencies(projectPath);\n    const missingDependencies = await this.findMissingDependencies(projectPath);\n\n    return {\n      projectDependencies,\n      fileDependencies,\n      cyclicDependencies,\n      unusedDependencies,\n      missingDependencies,\n      devDependencies: projectDependencies.filter(dep => dep.type === 'development'),\n      peerDependencies: projectDependencies.filter(dep => dep.type === 'peer')\n    };\n  }\n\n  /**\n   * 循環依存を検出\n   */\n  async detectCyclicDependencies(projectPath: string): Promise<CyclicDependency[]> {\n    const fileDependencies = await this.analyzeFileDependencies(projectPath);\n    const cyclicDeps: CyclicDependency[] = [];\n\n    // 依存関係グラフを構築\n    const dependencyGraph = new Map<string, Set<string>>();\n    \n    fileDependencies.forEach(dep => {\n      if (!dependencyGraph.has(dep.file)) {\n        dependencyGraph.set(dep.file, new Set());\n      }\n      dep.dependsOn.forEach(dependency => {\n        const dependencies = dependencyGraph.get(dep.file);\n        if (dependencies) {\n          dependencies.add(dependency);\n        }\n      });\n    });\n\n    // DFSで循環依存を検出\n    const visited = new Set<string>();\n    const recursionStack = new Set<string>();\n\n    const detectCycles = (node: string, path: string[]): void => {\n      if (recursionStack.has(node)) {\n        // 循環を発見\n        const cycleStart = path.indexOf(node);\n        const cycleFiles = path.slice(cycleStart);\n        \n        cyclicDeps.push({\n          files: [...cycleFiles, node],\n          severity: 'warning',\n          suggestion: 'Consider refactoring to break the circular dependency'\n        });\n        return;\n      }\n\n      if (visited.has(node)) {\n        return;\n      }\n\n      visited.add(node);\n      recursionStack.add(node);\n\n      const dependencies = dependencyGraph.get(node) || new Set();\n      dependencies.forEach(dep => {\n        detectCycles(dep, [...path, node]);\n      });\n\n      recursionStack.delete(node);\n    };\n\n    Array.from(dependencyGraph.keys()).forEach((file: string) => {\n      if (!visited.has(file)) {\n        detectCycles(file, []);\n      }\n    });\n\n    return cyclicDeps;\n  }\n\n  /**\n   * 未使用の依存関係を検出\n   * PackageAnalyzerに処理を委譲\n   */\n  async findUnusedDependencies(projectPath: string): Promise<string[]> {\n    // 新しい実装に委譲\n    return this.packageAnalyzer.findUnusedDependencies(projectPath);\n  }\n\n  /**\n   * 未使用の依存関係を検出（旧実装）\n   * @deprecated 新しいPackageAnalyzerを使用してください\n   */\n  private async findUnusedDependenciesLegacy(projectPath: string): Promise<string[]> {\n    const packageJsonPath = path.join(projectPath, 'package.json');\n    if (!fs.existsSync(packageJsonPath)) {\n      return [];\n    }\n\n    let packageJson: PackageJsonConfig;\n    try {\n      const content = fs.readFileSync(packageJsonPath, 'utf-8');\n      packageJson = JSON.parse(content) as PackageJsonConfig;\n    } catch {\n      return [];\n    }\n\n    const allDependencies = {\n      ...packageJson.dependencies || {},\n      ...packageJson.devDependencies || {},\n      ...packageJson.peerDependencies || {},\n      ...packageJson.optionalDependencies || {}\n    };\n\n    // ファイル内で実際に使用されている依存関係を調査\n    const usedDependencies = await this.findUsedDependencies(projectPath);\n    \n    // 未使用の依存関係を特定\n    const unusedDeps: string[] = [];\n    \n    Object.keys(allDependencies).forEach(dep => {\n      if (!usedDependencies.has(dep)) {\n        // 特殊ケース: 一部の依存関係は直接importされないが必要\n        if (!this.isImplicitlyUsed(dep, packageJson)) {\n          unusedDeps.push(dep);\n        }\n      }\n    });\n\n    return unusedDeps;\n  }\n\n  /**\n   * 不足している依存関係を検出\n   * PackageAnalyzerに処理を委譲\n   */\n  async findMissingDependencies(projectPath: string): Promise<string[]> {\n    // 新しい実装に委譲\n    return this.packageAnalyzer.findMissingDependencies(projectPath);\n  }\n\n  /**\n   * 不足している依存関係を検出（旧実装）\n   * @deprecated 新しいPackageAnalyzerを使用してください\n   */\n  private async findMissingDependenciesLegacy(projectPath: string): Promise<string[]> {\n    const packageJsonPath = path.join(projectPath, 'package.json');\n    let installedDependencies = new Set<string>();\n\n    if (fs.existsSync(packageJsonPath)) {\n      try {\n        const content = fs.readFileSync(packageJsonPath, 'utf-8');\n        const packageJson = JSON.parse(content);\n        \n        Object.keys(packageJson.dependencies || {}).forEach(dep => installedDependencies.add(dep));\n        Object.keys(packageJson.devDependencies || {}).forEach(dep => installedDependencies.add(dep));\n        Object.keys(packageJson.peerDependencies || {}).forEach(dep => installedDependencies.add(dep));\n        Object.keys(packageJson.optionalDependencies || {}).forEach(dep => installedDependencies.add(dep));\n      } catch {\n        // パッケージファイルの読み込みに失敗した場合\n      }\n    }\n\n    // 実際にimportされている依存関係を調査\n    const usedDependencies = await this.findUsedDependencies(projectPath);\n    \n    const missingDeps: string[] = [];\n    \n    usedDependencies.forEach(dep => {\n      if (!installedDependencies.has(dep) && !this.isBuiltIn(dep) && !this.isRelativeImport(dep)) {\n        missingDeps.push(dep);\n      }\n    });\n\n    return missingDeps;\n  }\n\n  /**\n   * バージョン制約を分析\n   * PackageAnalyzerに処理を委譲\n   */\n  async analyzeVersionConstraints(projectPath: string): Promise<VersionConstraint[]> {\n    // 新しい実装に委譲\n    const results = await this.packageAnalyzer.analyzeVersionConstraints(projectPath);\n    // 型を変換\n    return results.map(r => ({\n      package: r.package,\n      declaredVersion: r.constraint,\n      constraint: this.mapConstraintType(r.type),\n      hasVulnerability: r.isRisky,\n      suggestion: r.isRisky ? 'より安定したバージョン制約を検討してください' : undefined\n    }));\n  }\n\n  /**\n   * 制約タイプをマッピング\n   * @private\n   */\n  private mapConstraintType(type: string): 'exact' | 'range' | 'caret' | 'tilde' | 'wildcard' {\n    switch (type) {\n      case 'exact': return 'exact';\n      case 'caret': return 'caret';\n      case 'tilde': return 'tilde';\n      case 'range': return 'range';\n      case 'any': return 'wildcard';\n      default: return 'range';\n    }\n  }\n\n  /**\n   * バージョン制約を分析（旧実装）\n   * @deprecated 新しいPackageAnalyzerを使用してください\n   */\n  private async analyzeVersionConstraintsLegacy(projectPath: string): Promise<VersionConstraint[]> {\n    const packageJsonPath = path.join(projectPath, 'package.json');\n    if (!fs.existsSync(packageJsonPath)) {\n      return [];\n    }\n\n    let packageJson: PackageJsonConfig;\n    try {\n      const content = fs.readFileSync(packageJsonPath, 'utf-8');\n      packageJson = JSON.parse(content) as PackageJsonConfig;\n    } catch {\n      return [];\n    }\n\n    const lockFileInfo = await this.parseLockFiles(projectPath);\n    const constraints: VersionConstraint[] = [];\n\n    const allDependencies = {\n      ...packageJson.dependencies || {},\n      ...packageJson.devDependencies || {}\n    };\n\n    Object.entries(allDependencies).forEach(([name, declared]) => {\n      const installed = lockFileInfo.get(name);\n      \n      constraints.push({\n        package: name,\n        declaredVersion: declared as string,\n        installedVersion: installed,\n        constraint: this.getVersionConstraintType(declared as string),\n        hasVulnerability: false,\n        suggestion: installed ? undefined : 'パッケージがインストールされていません'\n      });\n    });\n\n    return constraints;\n  }\n\n  /**\n   * パッケージマネージャーを検出\n   * PackageAnalyzerに処理を委譲\n   */\n  async detectPackageManager(projectPath: string): Promise<string> {\n    // 新しい実装に委譲\n    return this.packageAnalyzer.detectPackageManager(projectPath);\n  }\n\n  /**\n   * パッケージマネージャーを検出（旧実装）\n   * @deprecated 新しいPackageAnalyzerを使用してください\n   */\n  private async detectPackageManagerLegacy(projectPath: string): Promise<string> {\n    // yarn.lockがあればyarn\n    if (fs.existsSync(path.join(projectPath, 'yarn.lock'))) {\n      return 'yarn';\n    }\n    \n    // pnpm-lock.yamlがあればpnpm\n    if (fs.existsSync(path.join(projectPath, 'pnpm-lock.yaml'))) {\n      return 'pnpm';\n    }\n    \n    // package-lock.jsonがあればnpm\n    if (fs.existsSync(path.join(projectPath, 'package-lock.json'))) {\n      return 'npm';\n    }\n    \n    return 'unknown';\n  }\n\n  // Private helper methods\n\n  private async extractProjectDependencies(\n    packageJson: PackageJsonConfig, \n    lockFileInfo: Map<string, string>, \n    projectPath: string\n  ): Promise<ProjectDependency[]> {\n    const dependencies: ProjectDependency[] = [];\n    const usageMap = await this.analyzeDependencyUsage(projectPath);\n\n    // Production dependencies\n    Object.entries(packageJson.dependencies || {}).forEach(([name, version]) => {\n      dependencies.push({\n        name,\n        version: version as string,\n        type: 'production',\n        installedVersion: lockFileInfo.get(name),\n        usage: usageMap.get(name) || []\n      });\n    });\n\n    // Development dependencies\n    Object.entries(packageJson.devDependencies || {}).forEach(([name, version]) => {\n      dependencies.push({\n        name,\n        version: version as string,\n        type: 'development',\n        installedVersion: lockFileInfo.get(name),\n        usage: usageMap.get(name) || []\n      });\n    });\n\n    // Peer dependencies\n    Object.entries(packageJson.peerDependencies || {}).forEach(([name, version]) => {\n      dependencies.push({\n        name,\n        version: version as string,\n        type: 'peer',\n        installedVersion: lockFileInfo.get(name),\n        usage: usageMap.get(name) || []\n      });\n    });\n\n    // Optional dependencies\n    Object.entries(packageJson.optionalDependencies || {}).forEach(([name, version]) => {\n      dependencies.push({\n        name,\n        version: version as string,\n        type: 'optional',\n        installedVersion: lockFileInfo.get(name),\n        usage: usageMap.get(name) || []\n      });\n    });\n\n    return dependencies;\n  }\n\n  private async analyzeFileDependencies(projectPath: string): Promise<FileDependency[]> {\n    const fileDependencies: FileDependency[] = [];\n    const files = await this.findSourceFiles(projectPath);\n    \n    for (const file of files) {\n      try {\n        const content = fs.readFileSync(file, 'utf-8');\n        const imports = this.extractImports(content);\n        const exports = this.extractExports(content);\n        \n        // 相対パスのimportを解決\n        const resolvedDependsOn = imports\n          .filter(imp => this.isRelativeImport(imp))\n          .map(imp => this.resolveRelativePath(file, imp, projectPath))\n          .filter((resolved): resolved is string => resolved !== null);\n\n        fileDependencies.push({\n          file: path.relative(projectPath, file),\n          imports,\n          exports,\n          dependsOn: resolvedDependsOn,\n          dependedBy: [] // これは後で計算\n        });\n      } catch (error) {\n        // ファイル読み込みエラーは無視\n      }\n    }\n\n    // dependedByを計算\n    fileDependencies.forEach(fileDep => {\n      fileDep.dependsOn.forEach(dependency => {\n        const dependedFile = fileDependencies.find(fd => \n          path.resolve(projectPath, fd.file) === path.resolve(projectPath, dependency)\n        );\n        if (dependedFile) {\n          dependedFile.dependedBy.push(fileDep.file);\n        }\n      });\n    });\n\n    return fileDependencies;\n  }\n\n  private async parseLockFiles(projectPath: string): Promise<Map<string, string>> {\n    const lockInfo = new Map<string, string>();\n\n    // yarn.lockをパース\n    const yarnLockPath = path.join(projectPath, 'yarn.lock');\n    if (fs.existsSync(yarnLockPath)) {\n      try {\n        const content = fs.readFileSync(yarnLockPath, 'utf-8');\n        const packages = this.parseYarnLock(content);\n        packages.forEach((version, name) => {\n          lockInfo.set(name, version);\n        });\n      } catch (error) {\n        // yarn.lockの解析に失敗した場合は無視\n      }\n    }\n\n    // package-lock.jsonをパース\n    const packageLockPath = path.join(projectPath, 'package-lock.json');\n    if (fs.existsSync(packageLockPath)) {\n      try {\n        const content = fs.readFileSync(packageLockPath, 'utf-8');\n        const packageLock = JSON.parse(content);\n        const packages = this.parsePackageLock(packageLock);\n        packages.forEach((version, name) => {\n          if (!lockInfo.has(name)) { // yarn.lockを優先\n            lockInfo.set(name, version);\n          }\n        });\n      } catch (error) {\n        // package-lock.jsonの解析に失敗した場合は無視\n      }\n    }\n\n    return lockInfo;\n  }\n\n  private parseYarnLock(content: string): Map<string, string> {\n    const packages = new Map<string, string>();\n    const lines = content.split('\\n');\n    let currentPackage: string | null = null;\n    \n    for (const line of lines) {\n      const trimmed = line.trim();\n      \n      // パッケージ名の行をチェック\n      if (trimmed.includes('@') && trimmed.endsWith(':')) {\n        const match = trimmed.match(/^([^@]+)@/);\n        if (match) {\n          currentPackage = match[1];\n        }\n      }\n      \n      // バージョン情報の行をチェック\n      if (currentPackage && trimmed.startsWith('version ')) {\n        const version = trimmed.replace('version ', '').replace(/\"/g, '');\n        packages.set(currentPackage, version);\n        currentPackage = null;\n      }\n    }\n    \n    return packages;\n  }\n\n  private parsePackageLock(packageLock: Record<string, unknown>): Map<string, string> {\n    const packages = new Map<string, string>();\n    \n    if (packageLock.packages) {\n      Object.entries(packageLock.packages).forEach(([path, info]: [string, unknown]) => {\n        if (path && path.startsWith('node_modules/')) {\n          const name = path.replace('node_modules/', '');\n          const packageInfo = info as PackageLockDependency;\n          if (packageInfo?.version) {\n            packages.set(name, packageInfo.version);\n          }\n        }\n      });\n    }\n    \n    return packages;\n  }\n\n  private async findSourceFiles(projectPath: string): Promise<string[]> {\n    const files: string[] = [];\n    \n    const walkDir = (dir: string) => {\n      const entries = fs.readdirSync(dir, { withFileTypes: true });\n      \n      for (const entry of entries) {\n        const fullPath = path.join(dir, entry.name);\n        \n        if (entry.isDirectory()) {\n          if (!this.IGNORE_PATTERNS.some(pattern => entry.name.includes(pattern))) {\n            walkDir(fullPath);\n          }\n        } else if (entry.isFile()) {\n          const ext = path.extname(entry.name);\n          if (this.SUPPORTED_EXTENSIONS.includes(ext)) {\n            files.push(fullPath);\n          }\n        }\n      }\n    };\n    \n    walkDir(projectPath);\n    return files;\n  }\n\n  private extractImports(content: string): string[] {\n    const imports: string[] = [];\n    const patterns = [\n      /import\\s+.*?\\s+from\\s+['\"]([^'\"]+)['\"]/g,\n      /import\\s+['\"]([^'\"]+)['\"]/g,\n      /require\\s*\\(\\s*['\"]([^'\"]+)['\"]\\s*\\)/g,\n      /import\\s*\\(\\s*['\"]([^'\"]+)['\"]\\s*\\)/g\n    ];\n\n    patterns.forEach(pattern => {\n      let match;\n      while ((match = pattern.exec(content)) !== null) {\n        imports.push(match[1]);\n      }\n    });\n\n    return [...new Set(imports)]; // 重複を除去\n  }\n\n  private extractExports(content: string): string[] {\n    const exports: string[] = [];\n    const patterns = [\n      /export\\s+.*?\\s+from\\s+['\"]([^'\"]+)['\"]/g,\n      /export\\s+\\{[^}]*\\}\\s+from\\s+['\"]([^'\"]+)['\"]/g,\n      /export\\s*\\*\\s+from\\s+['\"]([^'\"]+)['\"]/g\n    ];\n\n    patterns.forEach(pattern => {\n      let match;\n      while ((match = pattern.exec(content)) !== null) {\n        exports.push(match[1]);\n      }\n    });\n\n    return [...new Set(exports)]; // 重複を除去\n  }\n\n  private async findUsedDependencies(projectPath: string): Promise<Set<string>> {\n    const usedDeps = new Set<string>();\n    const files = await this.findSourceFiles(projectPath);\n    \n    for (const file of files) {\n      try {\n        const content = fs.readFileSync(file, 'utf-8');\n        const imports = this.extractImports(content);\n        \n        imports.forEach(imp => {\n          if (!this.isRelativeImport(imp)) {\n            // スコープパッケージの場合は適切に分割\n            const packageName = imp.startsWith('@') \n              ? imp.split('/').slice(0, 2).join('/')\n              : imp.split('/')[0];\n            usedDeps.add(packageName);\n          }\n        });\n      } catch (error) {\n        // ファイル読み込みエラーは無視\n      }\n    }\n    \n    return usedDeps;\n  }\n\n  private async analyzeDependencyUsage(projectPath: string): Promise<Map<string, DependencyUsage[]>> {\n    const usageMap = new Map<string, DependencyUsage[]>();\n    const files = await this.findSourceFiles(projectPath);\n    \n    for (const file of files) {\n      try {\n        const content = fs.readFileSync(file, 'utf-8');\n        const lines = content.split('\\n');\n        \n        lines.forEach((line, index) => {\n          const imports = this.extractImports(line);\n          imports.forEach(imp => {\n            if (!this.isRelativeImport(imp)) {\n              const packageName = imp.startsWith('@') \n                ? imp.split('/').slice(0, 2).join('/')\n                : imp.split('/')[0];\n              \n              if (!usageMap.has(packageName)) {\n                usageMap.set(packageName, []);\n              }\n              \n              usageMap.get(packageName)!.push({\n                file: path.relative(projectPath, file),\n                imports: [imp],\n                line: index + 1\n              });\n            }\n          });\n        });\n      } catch (error) {\n        // ファイル読み込みエラーは無視\n      }\n    }\n    \n    return usageMap;\n  }\n\n  private isRelativeImport(importPath: string): boolean {\n    return importPath.startsWith('./') || importPath.startsWith('../');\n  }\n\n  private isBuiltIn(moduleName: string): boolean {\n    const builtInModules = [\n      'fs', 'path', 'os', 'crypto', 'http', 'https', 'url', 'util',\n      'stream', 'events', 'buffer', 'child_process', 'cluster',\n      'dgram', 'dns', 'net', 'readline', 'repl', 'tls', 'tty',\n      'v8', 'vm', 'worker_threads', 'zlib'\n    ];\n    return builtInModules.includes(moduleName);\n  }\n\n  /**\n   * バージョン制約のタイプを判定\n   */\n  private getVersionConstraintType(version: string): 'exact' | 'range' | 'caret' | 'tilde' | 'wildcard' {\n    if (version.startsWith('^')) return 'caret';\n    if (version.startsWith('~')) return 'tilde';\n    if (version.includes('*') || version.includes('x')) return 'wildcard';\n    if (version.includes('>') || version.includes('<') || version.includes('||')) return 'range';\n    return 'exact';\n  }\n\n  private isImplicitlyUsed(packageName: string, packageJson: PackageJsonConfig): boolean {\n    // TypeScriptの型定義パッケージ\n    if (packageName.startsWith('@types/')) {\n      return true;\n    }\n    \n    // テストフレームワーク\n    const testFrameworks = ['jest', 'mocha', 'jasmine', 'karma'];\n    if (testFrameworks.includes(packageName)) {\n      return true;\n    }\n    \n    // ビルドツール\n    const buildTools = ['webpack', 'rollup', 'parcel', 'vite', 'typescript'];\n    if (buildTools.includes(packageName)) {\n      return true;\n    }\n    \n    return false;\n  }\n\n  private resolveRelativePath(fromFile: string, importPath: string, projectPath: string): string | null {\n    try {\n      const fromDir = path.dirname(fromFile);\n      let resolvedPath = path.resolve(fromDir, importPath);\n      \n      // セキュリティ: パス検証\n      if (!PathSecurity.validateProjectPath(resolvedPath, projectPath)) {\n        return null;\n      }\n      \n      // 拡張子がない場合は補完を試行\n      if (!path.extname(resolvedPath)) {\n        for (const ext of this.SUPPORTED_EXTENSIONS) {\n          const withExt = resolvedPath + ext;\n          if (!PathSecurity.validateProjectPath(withExt, projectPath)) {\n            continue; // セキュリティチェック失敗\n          }\n          if (fs.existsSync(withExt)) {\n            resolvedPath = withExt;\n            break;\n          }\n        }\n        \n        // index.* ファイルも試行\n        const indexPath = path.join(resolvedPath, 'index');\n        for (const ext of this.SUPPORTED_EXTENSIONS) {\n          const withExt = indexPath + ext;\n          if (!PathSecurity.validateProjectPath(withExt, projectPath)) {\n            continue; // セキュリティチェック失敗\n          }\n          if (fs.existsSync(withExt)) {\n            resolvedPath = withExt;\n            break;\n          }\n        }\n      }\n      \n      if (fs.existsSync(resolvedPath)) {\n        return path.relative(projectPath, resolvedPath);\n      }\n    } catch (error) {\n      // パス解決エラーは無視\n    }\n    \n    return null;\n  }\n\n  private checkVersionSatisfies(declared: string, installed: string): boolean {\n    // 簡単なバージョンチェック（実際の実装ではsemverライブラリを使用するべき）\n    const cleanDeclared = declared.replace(/[\\^~]/, '');\n    const cleanInstalled = installed;\n    \n    // 基本的なバージョン比較\n    try {\n      const declaredParts = cleanDeclared.split('.').map(Number);\n      const installedParts = cleanInstalled.split('.').map(Number);\n      \n      // メジャーバージョンが一致しているかチェック\n      return declaredParts[0] === installedParts[0];\n    } catch {\n      return false;\n    }\n  }\n}"],"version":3}