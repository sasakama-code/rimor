6f0ca6a5862006093d12b34e8aa2af8b
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.DependencyAnalyzer = void 0;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const pathSecurity_1 = require("../utils/pathSecurity");
const package_analyzer_1 = require("./dependency-analysis/package-analyzer");
const usage_analyzer_1 = require("./dependency-analysis/usage-analyzer");
const project_deps_1 = require("./dependency-analysis/project-deps");
const file_deps_1 = require("./dependency-analysis/file-deps");
const circular_detector_1 = require("./dependency-analysis/circular-detector");
/**
 * 依存関係分析器（ファサードパターン）
 * 後方互換性を維持しながら新しい分析クラスに処理を委譲
 * プロジェクトの依存関係を分析し、循環依存、未使用・不足している依存関係を検出
 */
class DependencyAnalyzer {
    SUPPORTED_EXTENSIONS = ['.ts', '.js', '.tsx', '.jsx', '.mjs', '.cjs'];
    IGNORE_PATTERNS = [
        'node_modules',
        'dist',
        'build',
        '.git',
        '.vscode',
        '.idea',
        'coverage'
    ];
    // 新しい分析クラスのインスタンス
    packageAnalyzer;
    usageAnalyzer;
    projectDepsAnalyzer;
    fileDepsAnalyzer;
    circularDetector;
    constructor() {
        this.packageAnalyzer = new package_analyzer_1.PackageAnalyzer();
        this.usageAnalyzer = new usage_analyzer_1.UsageAnalyzer();
        this.projectDepsAnalyzer = new project_deps_1.ProjectDependencyAnalyzer();
        this.fileDepsAnalyzer = new file_deps_1.FileDependencyAnalyzer();
        this.circularDetector = new circular_detector_1.CircularDependencyDetector();
    }
    /**
     * プロジェクトの依存関係を包括的に分析
     */
    async analyzeDependencies(projectPath) {
        if (!fs.existsSync(projectPath)) {
            throw new Error(`Project path does not exist: ${projectPath}`);
        }
        const packageJsonPath = path.join(projectPath, 'package.json');
        let packageJson = {};
        // package.jsonの読み込み
        try {
            if (fs.existsSync(packageJsonPath)) {
                const content = fs.readFileSync(packageJsonPath, 'utf-8');
                packageJson = JSON.parse(content);
            }
        }
        catch (error) {
            // package.jsonが不正な場合は空のオブジェクトを使用
            packageJson = {};
        }
        // ロックファイルの情報を取得
        const lockFileInfo = await this.parseLockFiles(projectPath);
        // 依存関係情報を抽出
        const projectDependencies = await this.extractProjectDependencies(packageJson, lockFileInfo, projectPath);
        const fileDependencies = await this.analyzeFileDependencies(projectPath);
        // 循環依存の検出
        const cyclicDependencies = await this.detectCyclicDependencies(projectPath);
        // 未使用・不足依存関係の検出
        const unusedDependencies = await this.findUnusedDependencies(projectPath);
        const missingDependencies = await this.findMissingDependencies(projectPath);
        return {
            projectDependencies,
            fileDependencies,
            cyclicDependencies,
            unusedDependencies,
            missingDependencies,
            devDependencies: projectDependencies.filter(dep => dep.type === 'development'),
            peerDependencies: projectDependencies.filter(dep => dep.type === 'peer')
        };
    }
    /**
     * 循環依存を検出
     */
    async detectCyclicDependencies(projectPath) {
        const fileDependencies = await this.analyzeFileDependencies(projectPath);
        const cyclicDeps = [];
        // 依存関係グラフを構築
        const dependencyGraph = new Map();
        fileDependencies.forEach(dep => {
            if (!dependencyGraph.has(dep.file)) {
                dependencyGraph.set(dep.file, new Set());
            }
            dep.dependsOn.forEach(dependency => {
                const dependencies = dependencyGraph.get(dep.file);
                if (dependencies) {
                    dependencies.add(dependency);
                }
            });
        });
        // DFSで循環依存を検出
        const visited = new Set();
        const recursionStack = new Set();
        const detectCycles = (node, path) => {
            if (recursionStack.has(node)) {
                // 循環を発見
                const cycleStart = path.indexOf(node);
                const cycleFiles = path.slice(cycleStart);
                cyclicDeps.push({
                    files: [...cycleFiles, node],
                    severity: 'warning',
                    suggestion: 'Consider refactoring to break the circular dependency'
                });
                return;
            }
            if (visited.has(node)) {
                return;
            }
            visited.add(node);
            recursionStack.add(node);
            const dependencies = dependencyGraph.get(node) || new Set();
            dependencies.forEach(dep => {
                detectCycles(dep, [...path, node]);
            });
            recursionStack.delete(node);
        };
        Array.from(dependencyGraph.keys()).forEach((file) => {
            if (!visited.has(file)) {
                detectCycles(file, []);
            }
        });
        return cyclicDeps;
    }
    /**
     * 未使用の依存関係を検出
     * PackageAnalyzerに処理を委譲
     */
    async findUnusedDependencies(projectPath) {
        // 新しい実装に委譲
        return this.packageAnalyzer.findUnusedDependencies(projectPath);
    }
    /**
     * 未使用の依存関係を検出（旧実装）
     * @deprecated 新しいPackageAnalyzerを使用してください
     */
    async findUnusedDependenciesLegacy(projectPath) {
        const packageJsonPath = path.join(projectPath, 'package.json');
        if (!fs.existsSync(packageJsonPath)) {
            return [];
        }
        let packageJson;
        try {
            const content = fs.readFileSync(packageJsonPath, 'utf-8');
            packageJson = JSON.parse(content);
        }
        catch {
            return [];
        }
        const allDependencies = {
            ...packageJson.dependencies || {},
            ...packageJson.devDependencies || {},
            ...packageJson.peerDependencies || {},
            ...packageJson.optionalDependencies || {}
        };
        // ファイル内で実際に使用されている依存関係を調査
        const usedDependencies = await this.findUsedDependencies(projectPath);
        // 未使用の依存関係を特定
        const unusedDeps = [];
        Object.keys(allDependencies).forEach(dep => {
            if (!usedDependencies.has(dep)) {
                // 特殊ケース: 一部の依存関係は直接importされないが必要
                if (!this.isImplicitlyUsed(dep, packageJson)) {
                    unusedDeps.push(dep);
                }
            }
        });
        return unusedDeps;
    }
    /**
     * 不足している依存関係を検出
     * PackageAnalyzerに処理を委譲
     */
    async findMissingDependencies(projectPath) {
        // 新しい実装に委譲
        return this.packageAnalyzer.findMissingDependencies(projectPath);
    }
    /**
     * 不足している依存関係を検出（旧実装）
     * @deprecated 新しいPackageAnalyzerを使用してください
     */
    async findMissingDependenciesLegacy(projectPath) {
        const packageJsonPath = path.join(projectPath, 'package.json');
        let installedDependencies = new Set();
        if (fs.existsSync(packageJsonPath)) {
            try {
                const content = fs.readFileSync(packageJsonPath, 'utf-8');
                const packageJson = JSON.parse(content);
                Object.keys(packageJson.dependencies || {}).forEach(dep => installedDependencies.add(dep));
                Object.keys(packageJson.devDependencies || {}).forEach(dep => installedDependencies.add(dep));
                Object.keys(packageJson.peerDependencies || {}).forEach(dep => installedDependencies.add(dep));
                Object.keys(packageJson.optionalDependencies || {}).forEach(dep => installedDependencies.add(dep));
            }
            catch {
                // パッケージファイルの読み込みに失敗した場合
            }
        }
        // 実際にimportされている依存関係を調査
        const usedDependencies = await this.findUsedDependencies(projectPath);
        const missingDeps = [];
        usedDependencies.forEach(dep => {
            if (!installedDependencies.has(dep) && !this.isBuiltIn(dep) && !this.isRelativeImport(dep)) {
                missingDeps.push(dep);
            }
        });
        return missingDeps;
    }
    /**
     * バージョン制約を分析
     * PackageAnalyzerに処理を委譲
     */
    async analyzeVersionConstraints(projectPath) {
        // 新しい実装に委譲
        const results = await this.packageAnalyzer.analyzeVersionConstraints(projectPath);
        // 型を変換
        return results.map(r => ({
            package: r.package,
            declaredVersion: r.constraint,
            constraint: this.mapConstraintType(r.type),
            hasVulnerability: r.isRisky,
            suggestion: r.isRisky ? 'より安定したバージョン制約を検討してください' : undefined
        }));
    }
    /**
     * 制約タイプをマッピング
     * @private
     */
    mapConstraintType(type) {
        switch (type) {
            case 'exact': return 'exact';
            case 'caret': return 'caret';
            case 'tilde': return 'tilde';
            case 'range': return 'range';
            case 'any': return 'wildcard';
            default: return 'range';
        }
    }
    /**
     * バージョン制約を分析（旧実装）
     * @deprecated 新しいPackageAnalyzerを使用してください
     */
    async analyzeVersionConstraintsLegacy(projectPath) {
        const packageJsonPath = path.join(projectPath, 'package.json');
        if (!fs.existsSync(packageJsonPath)) {
            return [];
        }
        let packageJson;
        try {
            const content = fs.readFileSync(packageJsonPath, 'utf-8');
            packageJson = JSON.parse(content);
        }
        catch {
            return [];
        }
        const lockFileInfo = await this.parseLockFiles(projectPath);
        const constraints = [];
        const allDependencies = {
            ...packageJson.dependencies || {},
            ...packageJson.devDependencies || {}
        };
        Object.entries(allDependencies).forEach(([name, declared]) => {
            const installed = lockFileInfo.get(name);
            constraints.push({
                package: name,
                declaredVersion: declared,
                installedVersion: installed,
                constraint: this.getVersionConstraintType(declared),
                hasVulnerability: false,
                suggestion: installed ? undefined : 'パッケージがインストールされていません'
            });
        });
        return constraints;
    }
    /**
     * パッケージマネージャーを検出
     * PackageAnalyzerに処理を委譲
     */
    async detectPackageManager(projectPath) {
        // 新しい実装に委譲
        return this.packageAnalyzer.detectPackageManager(projectPath);
    }
    /**
     * パッケージマネージャーを検出（旧実装）
     * @deprecated 新しいPackageAnalyzerを使用してください
     */
    async detectPackageManagerLegacy(projectPath) {
        // yarn.lockがあればyarn
        if (fs.existsSync(path.join(projectPath, 'yarn.lock'))) {
            return 'yarn';
        }
        // pnpm-lock.yamlがあればpnpm
        if (fs.existsSync(path.join(projectPath, 'pnpm-lock.yaml'))) {
            return 'pnpm';
        }
        // package-lock.jsonがあればnpm
        if (fs.existsSync(path.join(projectPath, 'package-lock.json'))) {
            return 'npm';
        }
        return 'unknown';
    }
    // Private helper methods
    async extractProjectDependencies(packageJson, lockFileInfo, projectPath) {
        const dependencies = [];
        const usageMap = await this.analyzeDependencyUsage(projectPath);
        // Production dependencies
        Object.entries(packageJson.dependencies || {}).forEach(([name, version]) => {
            dependencies.push({
                name,
                version: version,
                type: 'production',
                installedVersion: lockFileInfo.get(name),
                usage: usageMap.get(name) || []
            });
        });
        // Development dependencies
        Object.entries(packageJson.devDependencies || {}).forEach(([name, version]) => {
            dependencies.push({
                name,
                version: version,
                type: 'development',
                installedVersion: lockFileInfo.get(name),
                usage: usageMap.get(name) || []
            });
        });
        // Peer dependencies
        Object.entries(packageJson.peerDependencies || {}).forEach(([name, version]) => {
            dependencies.push({
                name,
                version: version,
                type: 'peer',
                installedVersion: lockFileInfo.get(name),
                usage: usageMap.get(name) || []
            });
        });
        // Optional dependencies
        Object.entries(packageJson.optionalDependencies || {}).forEach(([name, version]) => {
            dependencies.push({
                name,
                version: version,
                type: 'optional',
                installedVersion: lockFileInfo.get(name),
                usage: usageMap.get(name) || []
            });
        });
        return dependencies;
    }
    async analyzeFileDependencies(projectPath) {
        const fileDependencies = [];
        const files = await this.findSourceFiles(projectPath);
        for (const file of files) {
            try {
                const content = fs.readFileSync(file, 'utf-8');
                const imports = this.extractImports(content);
                const exports = this.extractExports(content);
                // 相対パスのimportを解決
                const resolvedDependsOn = imports
                    .filter(imp => this.isRelativeImport(imp))
                    .map(imp => this.resolveRelativePath(file, imp, projectPath))
                    .filter((resolved) => resolved !== null);
                fileDependencies.push({
                    file: path.relative(projectPath, file),
                    imports,
                    exports,
                    dependsOn: resolvedDependsOn,
                    dependedBy: [] // これは後で計算
                });
            }
            catch (error) {
                // ファイル読み込みエラーは無視
            }
        }
        // dependedByを計算
        fileDependencies.forEach(fileDep => {
            fileDep.dependsOn.forEach(dependency => {
                const dependedFile = fileDependencies.find(fd => path.resolve(projectPath, fd.file) === path.resolve(projectPath, dependency));
                if (dependedFile) {
                    dependedFile.dependedBy.push(fileDep.file);
                }
            });
        });
        return fileDependencies;
    }
    async parseLockFiles(projectPath) {
        const lockInfo = new Map();
        // yarn.lockをパース
        const yarnLockPath = path.join(projectPath, 'yarn.lock');
        if (fs.existsSync(yarnLockPath)) {
            try {
                const content = fs.readFileSync(yarnLockPath, 'utf-8');
                const packages = this.parseYarnLock(content);
                packages.forEach((version, name) => {
                    lockInfo.set(name, version);
                });
            }
            catch (error) {
                // yarn.lockの解析に失敗した場合は無視
            }
        }
        // package-lock.jsonをパース
        const packageLockPath = path.join(projectPath, 'package-lock.json');
        if (fs.existsSync(packageLockPath)) {
            try {
                const content = fs.readFileSync(packageLockPath, 'utf-8');
                const packageLock = JSON.parse(content);
                const packages = this.parsePackageLock(packageLock);
                packages.forEach((version, name) => {
                    if (!lockInfo.has(name)) { // yarn.lockを優先
                        lockInfo.set(name, version);
                    }
                });
            }
            catch (error) {
                // package-lock.jsonの解析に失敗した場合は無視
            }
        }
        return lockInfo;
    }
    parseYarnLock(content) {
        const packages = new Map();
        const lines = content.split('\n');
        let currentPackage = null;
        for (const line of lines) {
            const trimmed = line.trim();
            // パッケージ名の行をチェック
            if (trimmed.includes('@') && trimmed.endsWith(':')) {
                const match = trimmed.match(/^([^@]+)@/);
                if (match) {
                    currentPackage = match[1];
                }
            }
            // バージョン情報の行をチェック
            if (currentPackage && trimmed.startsWith('version ')) {
                const version = trimmed.replace('version ', '').replace(/"/g, '');
                packages.set(currentPackage, version);
                currentPackage = null;
            }
        }
        return packages;
    }
    parsePackageLock(packageLock) {
        const packages = new Map();
        if (packageLock.packages) {
            Object.entries(packageLock.packages).forEach(([path, info]) => {
                if (path && path.startsWith('node_modules/')) {
                    const name = path.replace('node_modules/', '');
                    const packageInfo = info;
                    if (packageInfo?.version) {
                        packages.set(name, packageInfo.version);
                    }
                }
            });
        }
        return packages;
    }
    async findSourceFiles(projectPath) {
        const files = [];
        const walkDir = (dir) => {
            const entries = fs.readdirSync(dir, { withFileTypes: true });
            for (const entry of entries) {
                const fullPath = path.join(dir, entry.name);
                if (entry.isDirectory()) {
                    if (!this.IGNORE_PATTERNS.some(pattern => entry.name.includes(pattern))) {
                        walkDir(fullPath);
                    }
                }
                else if (entry.isFile()) {
                    const ext = path.extname(entry.name);
                    if (this.SUPPORTED_EXTENSIONS.includes(ext)) {
                        files.push(fullPath);
                    }
                }
            }
        };
        walkDir(projectPath);
        return files;
    }
    extractImports(content) {
        const imports = [];
        const patterns = [
            /import\s+.*?\s+from\s+['"]([^'"]+)['"]/g,
            /import\s+['"]([^'"]+)['"]/g,
            /require\s*\(\s*['"]([^'"]+)['"]\s*\)/g,
            /import\s*\(\s*['"]([^'"]+)['"]\s*\)/g
        ];
        patterns.forEach(pattern => {
            let match;
            while ((match = pattern.exec(content)) !== null) {
                imports.push(match[1]);
            }
        });
        return [...new Set(imports)]; // 重複を除去
    }
    extractExports(content) {
        const exports = [];
        const patterns = [
            /export\s+.*?\s+from\s+['"]([^'"]+)['"]/g,
            /export\s+\{[^}]*\}\s+from\s+['"]([^'"]+)['"]/g,
            /export\s*\*\s+from\s+['"]([^'"]+)['"]/g
        ];
        patterns.forEach(pattern => {
            let match;
            while ((match = pattern.exec(content)) !== null) {
                exports.push(match[1]);
            }
        });
        return [...new Set(exports)]; // 重複を除去
    }
    async findUsedDependencies(projectPath) {
        const usedDeps = new Set();
        const files = await this.findSourceFiles(projectPath);
        for (const file of files) {
            try {
                const content = fs.readFileSync(file, 'utf-8');
                const imports = this.extractImports(content);
                imports.forEach(imp => {
                    if (!this.isRelativeImport(imp)) {
                        // スコープパッケージの場合は適切に分割
                        const packageName = imp.startsWith('@')
                            ? imp.split('/').slice(0, 2).join('/')
                            : imp.split('/')[0];
                        usedDeps.add(packageName);
                    }
                });
            }
            catch (error) {
                // ファイル読み込みエラーは無視
            }
        }
        return usedDeps;
    }
    async analyzeDependencyUsage(projectPath) {
        const usageMap = new Map();
        const files = await this.findSourceFiles(projectPath);
        for (const file of files) {
            try {
                const content = fs.readFileSync(file, 'utf-8');
                const lines = content.split('\n');
                lines.forEach((line, index) => {
                    const imports = this.extractImports(line);
                    imports.forEach(imp => {
                        if (!this.isRelativeImport(imp)) {
                            const packageName = imp.startsWith('@')
                                ? imp.split('/').slice(0, 2).join('/')
                                : imp.split('/')[0];
                            if (!usageMap.has(packageName)) {
                                usageMap.set(packageName, []);
                            }
                            usageMap.get(packageName).push({
                                file: path.relative(projectPath, file),
                                imports: [imp],
                                line: index + 1
                            });
                        }
                    });
                });
            }
            catch (error) {
                // ファイル読み込みエラーは無視
            }
        }
        return usageMap;
    }
    isRelativeImport(importPath) {
        return importPath.startsWith('./') || importPath.startsWith('../');
    }
    isBuiltIn(moduleName) {
        const builtInModules = [
            'fs', 'path', 'os', 'crypto', 'http', 'https', 'url', 'util',
            'stream', 'events', 'buffer', 'child_process', 'cluster',
            'dgram', 'dns', 'net', 'readline', 'repl', 'tls', 'tty',
            'v8', 'vm', 'worker_threads', 'zlib'
        ];
        return builtInModules.includes(moduleName);
    }
    /**
     * バージョン制約のタイプを判定
     */
    getVersionConstraintType(version) {
        if (version.startsWith('^'))
            return 'caret';
        if (version.startsWith('~'))
            return 'tilde';
        if (version.includes('*') || version.includes('x'))
            return 'wildcard';
        if (version.includes('>') || version.includes('<') || version.includes('||'))
            return 'range';
        return 'exact';
    }
    isImplicitlyUsed(packageName, packageJson) {
        // TypeScriptの型定義パッケージ
        if (packageName.startsWith('@types/')) {
            return true;
        }
        // テストフレームワーク
        const testFrameworks = ['jest', 'mocha', 'jasmine', 'karma'];
        if (testFrameworks.includes(packageName)) {
            return true;
        }
        // ビルドツール
        const buildTools = ['webpack', 'rollup', 'parcel', 'vite', 'typescript'];
        if (buildTools.includes(packageName)) {
            return true;
        }
        return false;
    }
    resolveRelativePath(fromFile, importPath, projectPath) {
        try {
            const fromDir = path.dirname(fromFile);
            let resolvedPath = path.resolve(fromDir, importPath);
            // セキュリティ: パス検証
            if (!pathSecurity_1.PathSecurity.validateProjectPath(resolvedPath, projectPath)) {
                return null;
            }
            // 拡張子がない場合は補完を試行
            if (!path.extname(resolvedPath)) {
                for (const ext of this.SUPPORTED_EXTENSIONS) {
                    const withExt = resolvedPath + ext;
                    if (!pathSecurity_1.PathSecurity.validateProjectPath(withExt, projectPath)) {
                        continue; // セキュリティチェック失敗
                    }
                    if (fs.existsSync(withExt)) {
                        resolvedPath = withExt;
                        break;
                    }
                }
                // index.* ファイルも試行
                const indexPath = path.join(resolvedPath, 'index');
                for (const ext of this.SUPPORTED_EXTENSIONS) {
                    const withExt = indexPath + ext;
                    if (!pathSecurity_1.PathSecurity.validateProjectPath(withExt, projectPath)) {
                        continue; // セキュリティチェック失敗
                    }
                    if (fs.existsSync(withExt)) {
                        resolvedPath = withExt;
                        break;
                    }
                }
            }
            if (fs.existsSync(resolvedPath)) {
                return path.relative(projectPath, resolvedPath);
            }
        }
        catch (error) {
            // パス解決エラーは無視
        }
        return null;
    }
    checkVersionSatisfies(declared, installed) {
        // 簡単なバージョンチェック（実際の実装ではsemverライブラリを使用するべき）
        const cleanDeclared = declared.replace(/[\^~]/, '');
        const cleanInstalled = installed;
        // 基本的なバージョン比較
        try {
            const declaredParts = cleanDeclared.split('.').map(Number);
            const installedParts = cleanInstalled.split('.').map(Number);
            // メジャーバージョンが一致しているかチェック
            return declaredParts[0] === installedParts[0];
        }
        catch {
            return false;
        }
    }
}
exports.DependencyAnalyzer = DependencyAnalyzer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,