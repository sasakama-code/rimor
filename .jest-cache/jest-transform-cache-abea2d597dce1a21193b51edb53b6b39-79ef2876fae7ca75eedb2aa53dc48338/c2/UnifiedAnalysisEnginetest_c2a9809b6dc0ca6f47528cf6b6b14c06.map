{"file":"/Users/sasakama/Projects/Rimor/test/core/UnifiedAnalysisEngine.test.ts","mappings":";;AAAA,gFAA6E;AAK7E;;;;;;;;;GASG;AACH,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;IACrC,IAAI,MAA6B,CAAC;IAElC,UAAU,CAAC,GAAG,EAAE;QACd,MAAM,GAAG,IAAI,6CAAqB,EAAE,CAAC;IACvC,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,GAAG,EAAE;QACb,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;QACrC,EAAE,CAAC,iBAAiB,EAAE,GAAG,EAAE;YACzB,MAAM,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,6CAAqB,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0BAA0B,EAAE,GAAG,EAAE;YAClC,MAAM,UAAU,GAAY;gBAC1B,IAAI,EAAE,YAAY;gBAClB,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,EAAE,CAAC;aACzC,CAAC;YAEF,MAAM,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC;QAChE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oBAAoB,EAAE,GAAG,EAAE;YAC5B,MAAM,OAAO,GAAY;gBACvB,IAAI,EAAE,SAAS;gBACf,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,EAAE,CAAC;aACzC,CAAC;YACF,MAAM,OAAO,GAAY;gBACvB,IAAI,EAAE,SAAS;gBACf,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,EAAE,CAAC;aACzC,CAAC;YAEF,MAAM,CAAC,GAAG,EAAE;gBACV,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;gBAC/B,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;YACjC,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC;QACnB,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,cAAc,EAAE,KAAK,IAAI,EAAE;YAC5B,MAAM,QAAQ,GAAG,iBAAiB,CAAC;YACnC,MAAM,SAAS,GAAU;gBACvB,EAAE,EAAE,cAAc;gBAClB,IAAI,EAAE,OAAO;gBACb,OAAO,EAAE,YAAY;gBACrB,IAAI,EAAE,eAAe;gBACrB,QAAQ,EAAE,eAAe;gBACzB,IAAI,EAAE,CAAC;gBACP,MAAM,EAAE,CAAC;gBACT,QAAQ,EAAE,MAAM;gBAChB,QAAQ,EAAE,cAAuB;aAClC,CAAC;YAEF,MAAM,UAAU,GAAY;gBAC1B,IAAI,EAAE,YAAY;gBAClB,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,CAAC,SAAS,CAAC,CAAC;aAClD,CAAC;YAEF,MAAM,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;YAElC,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YAE9C,MAAM,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC;YAC7B,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC;YACpD,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC;YACpC,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC;QACzD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gBAAgB,EAAE,KAAK,IAAI,EAAE;YAC9B,MAAM,QAAQ,GAAG,iBAAiB,CAAC;YACnC,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YAE9C,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,WAAW,EAAE,CAAC;YAC3C,MAAM,CAAC,OAAO,MAAM,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACnD,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC;QACzD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,+BAA+B,EAAE,GAAG,EAAE;QAC7C,EAAE,CAAC,mCAAmC,EAAE,GAAG,EAAE;YAC3C,MAAM,iBAAiB,GAAuB;gBAC5C,EAAE,EAAE,gBAAgB;gBACpB,IAAI,EAAE,eAAe;gBACrB,OAAO,EAAE,OAAO;gBAChB,IAAI,EAAE,MAAM;gBACZ,YAAY,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,IAAI,CAAC;gBAC7C,cAAc,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,EAAE,CAAC;gBAC/C,eAAe,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC;oBACzC,OAAO,EAAE,EAAE;oBACX,UAAU,EAAE,EAAE,YAAY,EAAE,EAAE,EAAE,WAAW,EAAE,EAAE,EAAE,eAAe,EAAE,EAAE,EAAE;oBACtE,SAAS,EAAE,EAAE,YAAY,EAAE,EAAE,EAAE,WAAW,EAAE,EAAE,EAAE,eAAe,EAAE,EAAE,EAAE;oBACrE,UAAU,EAAE,GAAG;iBAChB,CAAC;gBACF,mBAAmB,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,EAAE,CAAC;aACnD,CAAC;YAEF,MAAM,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,qBAAqB,CAAC,iBAAiB,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC;QAC9E,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;YAC9C,MAAM,QAAQ,GAAG,iBAAiB,CAAC;YACnC,MAAM,iBAAiB,GAAuB;gBAC5C,EAAE,EAAE,gBAAgB;gBACpB,IAAI,EAAE,eAAe;gBACrB,OAAO,EAAE,OAAO;gBAChB,IAAI,EAAE,MAAM;gBACZ,YAAY,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,IAAI,CAAC;gBAC7C,cAAc,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,CAAC;wBAC3C,IAAI,EAAE,SAAS;wBACf,IAAI,EAAE,cAAc;wBACpB,QAAQ,EAAE,EAAE,IAAI,EAAE,eAAe,EAAE,IAAI,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE;wBACvD,UAAU,EAAE,GAAG;qBAChB,CAAC,CAAC;gBACH,eAAe,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC;oBACzC,OAAO,EAAE,EAAE;oBACX,SAAS,EAAE,EAAE,YAAY,EAAE,EAAE,EAAE,WAAW,EAAE,EAAE,EAAE,eAAe,EAAE,EAAE,EAAE;oBACrE,UAAU,EAAE,IAAI;iBACjB,CAAC;gBACF,mBAAmB,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,CAAC;wBAC9C,IAAI,EAAE,YAAY;wBAClB,QAAQ,EAAE,MAAM;wBAChB,WAAW,EAAE,uBAAuB;wBACpC,MAAM,EAAE,EAAE;qBACX,CAAC,CAAC;aACJ,CAAC;YAEF,MAAM,CAAC,qBAAqB,CAAC,iBAAiB,CAAC,CAAC;YAEhD,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC;YAEzD,MAAM,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC;YAC7B,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACvC,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,WAAW,EAAE,CAAC;YAC7C,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,WAAW,EAAE,CAAC;YAC7C,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC;YACjE,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC;YAChE,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,WAAW,EAAE,CAAC;YAC7C,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACzD,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC;QACzD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,aAAa,EAAE,KAAK,IAAI,EAAE;YAC3B,MAAM,SAAS,GAAG,CAAC,iBAAiB,EAAE,oBAAoB,EAAE,oBAAoB,CAAC,CAAC;YAElF,MAAM,iBAAiB,GAAuB;gBAC5C,EAAE,EAAE,gBAAgB;gBACpB,IAAI,EAAE,eAAe;gBACrB,OAAO,EAAE,OAAO;gBAChB,IAAI,EAAE,MAAM;gBACZ,YAAY,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,IAAI,CAAC;gBAC7C,cAAc,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,EAAE,CAAC;gBAC/C,eAAe,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC;oBACzC,OAAO,EAAE,EAAE;oBACX,SAAS,EAAE,EAAE,YAAY,EAAE,EAAE,EAAE,WAAW,EAAE,EAAE,EAAE,eAAe,EAAE,EAAE,EAAE;oBACrE,UAAU,EAAE,IAAI;iBACjB,CAAC;gBACF,mBAAmB,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,EAAE,CAAC;aACnD,CAAC;YAEF,MAAM,CAAC,qBAAqB,CAAC,iBAAiB,CAAC,CAAC;YAEhD,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;YAEpD,MAAM,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC;YAC7B,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;YACjD,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC;YACtD,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC;YACrD,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC,WAAW,EAAE,CAAC;YAC/C,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC;YACrE,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC;YAChE,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC;YAChE,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC;QAClE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,UAAU,EAAE,GAAG,EAAE;QACxB,EAAE,CAAC,4BAA4B,EAAE,KAAK,IAAI,EAAE;YAC1C,MAAM,gBAAgB,GAAY;gBAChC,IAAI,EAAE,cAAc;gBACpB,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,CAAC;wBACpC,IAAI,EAAE,OAAO;wBACb,OAAO,EAAE,cAAc;wBACvB,IAAI,EAAE,eAAe;wBACrB,IAAI,EAAE,CAAC;wBACP,MAAM,EAAE,CAAC;wBACT,QAAQ,EAAE,MAAM;qBACjB,CAAC,CAAC;aACJ,CAAC;YAEF,MAAM,iBAAiB,GAAuB;gBAC5C,EAAE,EAAE,gBAAgB;gBACpB,IAAI,EAAE,eAAe;gBACrB,OAAO,EAAE,OAAO;gBAChB,IAAI,EAAE,MAAM;gBACZ,YAAY,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,IAAI,CAAC;gBAC7C,cAAc,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,EAAE,CAAC;gBAC/C,eAAe,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC;oBACzC,OAAO,EAAE,EAAE;oBACX,UAAU,EAAE,EAAE,YAAY,EAAE,EAAE,EAAE,WAAW,EAAE,EAAE,EAAE,eAAe,EAAE,EAAE,EAAE;oBACtE,SAAS,EAAE,EAAE,YAAY,EAAE,EAAE,EAAE,WAAW,EAAE,EAAE,EAAE,eAAe,EAAE,EAAE,EAAE;oBACrE,UAAU,EAAE,GAAG;iBAChB,CAAC;gBACF,mBAAmB,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,EAAE,CAAC;aACnD,CAAC;YAEF,MAAM,CAAC,cAAc,CAAC,gBAAgB,CAAC,CAAC;YACxC,MAAM,CAAC,qBAAqB,CAAC,iBAAiB,CAAC,CAAC;YAEhD,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,cAAc,CAAC,iBAAiB,CAAC,CAAC;YAE9D,MAAM,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC;YAC7B,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,WAAW,EAAE,CAAC;YAC3C,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,WAAW,EAAE,CAAC;YAC7C,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,WAAW,EAAE,CAAC;YAC3C,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,WAAW,EAAE,CAAC;YACvC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uBAAuB,EAAE,GAAG,EAAE;YAC/B,MAAM,CAAC,MAAM,CAAC,cAAc,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAExC,MAAM,UAAU,GAAY;gBAC1B,IAAI,EAAE,YAAY;gBAClB,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,EAAE,CAAC;aACzC,CAAC;YAEF,MAAM,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;YAClC,MAAM,CAAC,MAAM,CAAC,cAAc,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAExC,MAAM,iBAAiB,GAAuB;gBAC5C,EAAE,EAAE,gBAAgB;gBACpB,IAAI,EAAE,eAAe;gBACrB,OAAO,EAAE,OAAO;gBAChB,IAAI,EAAE,MAAM;gBACZ,YAAY,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,IAAI,CAAC;gBAC7C,cAAc,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,EAAE,CAAC;gBAC/C,eAAe,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC;oBACzC,OAAO,EAAE,EAAE;oBACX,UAAU,EAAE,EAAE,YAAY,EAAE,EAAE,EAAE,WAAW,EAAE,EAAE,EAAE,eAAe,EAAE,EAAE,EAAE;oBACtE,SAAS,EAAE,EAAE,YAAY,EAAE,EAAE,EAAE,WAAW,EAAE,EAAE,EAAE,eAAe,EAAE,EAAE,EAAE;oBACrE,UAAU,EAAE,GAAG;iBAChB,CAAC;gBACF,mBAAmB,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,EAAE,CAAC;aACnD,CAAC;YAEF,MAAM,CAAC,qBAAqB,CAAC,iBAAiB,CAAC,CAAC;YAChD,MAAM,CAAC,MAAM,CAAC,cAAc,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,eAAe,EAAE,KAAK,IAAI,EAAE;YAC7B,MAAM,OAAO,GAAG;gBACd,OAAO,EAAE,IAAI;gBACb,WAAW,EAAE,CAAC,gBAAgB,CAAC;gBAC/B,iBAAiB,EAAE,IAAI;aACxB,CAAC;YAEF,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;YAE1B,MAAM,MAAM,GAAG,MAAM,CAAC,gBAAgB,EAAE,CAAC;YACzC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAClC,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC;YACvD,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mBAAmB,EAAE,KAAK,IAAI,EAAE;YACjC,MAAM,WAAW,GAAY;gBAC3B,IAAI,EAAE,aAAa;gBACnB,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,IAAI,KAAK,CAAC,cAAc,CAAC,CAAC;aAChE,CAAC;YAEF,MAAM,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;YAEnC,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;YAEvD,oBAAoB;YACpB,MAAM,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC;YAC7B,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC;YACpC,MAAM,CAAC,MAAM,CAAC,MAAO,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YACjD,MAAM,CAAC,MAAM,CAAC,MAAO,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;YACzD,MAAM,CAAC,MAAM,CAAC,MAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,YAAY,EAAE,GAAG,EAAE;QAC1B,EAAE,CAAC,2BAA2B,EAAE,GAAG,EAAE;YACnC,yBAAyB;YACzB,MAAM,aAAa,GAAG,MAAM,CAAC,mBAAmB,CAAC,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC;YAChF,MAAM,eAAe,GAAG,aAAa,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CACpD,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC;gBAC1B,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC;gBAC3B,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC;gBAC5B,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC;gBACtB,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC;gBAC5B,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC;gBAC1B,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC;gBAC1B,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC;gBACtB,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAK,kBAAkB;gBAChD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAU,sBAAsB;gBACrD,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAM,qBAAqB;gBACpD,MAAM,KAAK,aAAa,CACzB,CAAC;YAEF,yBAAyB;YACzB,MAAM,kBAAkB,GAAG,aAAa,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CACvD,CAAC,eAAe,CAAC,QAAQ,CAAC,MAAM,CAAC,CAClC,CAAC;YAEF,2BAA2B;YAC3B,IAAI,kBAAkB,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;gBAClC,OAAO,CAAC,GAAG,CAAC,6BAA6B,EAAE,kBAAkB,CAAC,CAAC;YACjE,CAAC;YAED,MAAM,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2BAA2B,EAAE,GAAG,EAAE;YACnC,uBAAuB;YACvB,MAAM,YAAY,GAAuB;gBACvC,EAAE,EAAE,QAAQ;gBACZ,IAAI,EAAE,cAAc;gBACpB,OAAO,EAAE,OAAO;gBAChB,IAAI,EAAE,QAAe;gBACrB,YAAY,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,IAAI,CAAC;gBAC7C,cAAc,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,EAAE,CAAC;gBAC/C,eAAe,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE,UAAU,EAAE,EAAE,EAAE,UAAU,EAAE,GAAG,EAAE,CAAC;gBAC5F,mBAAmB,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,EAAE,CAAC;aACnD,CAAC;YAEF,yBAAyB;YACzB,MAAM,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,qBAAqB,CAAC,YAAY,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC;QACzE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yBAAyB,EAAE,KAAK,IAAI,EAAE;YACvC,uBAAuB;YACvB,MAAM,OAAO,GAAY;gBACvB,IAAI,EAAE,SAAS;gBACf,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,EAAE,CAAC;aACzC,CAAC;YAEF,MAAM,OAAO,GAAY;gBACvB,IAAI,EAAE,SAAS;gBACf,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,EAAE,CAAC;aACzC,CAAC;YAEF,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;YAC/B,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;YAE/B,0BAA0B;YAC1B,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;YACvD,MAAM,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC;QAC/B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+BAA+B,EAAE,GAAG,EAAE;YACvC,kCAAkC;YAClC,MAAM,aAAa,GAAY;gBAC7B,IAAI,EAAE,eAAe;gBACrB,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,EAAE,CAAC;aACzC,CAAC;YAEF,oBAAoB;YACpB,MAAM,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC;QACnE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yBAAyB,EAAE,GAAG,EAAE;YACjC,4BAA4B;YAC5B,MAAM,UAAU,GAAY;gBAC1B,IAAI,EAAE,YAAY;gBAClB,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE;aACnB,CAAC;YAEF,oBAAoB;YACpB,MAAM,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC;QAChE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,YAAY,EAAE,GAAG,EAAE;QAC1B,EAAE,CAAC,yBAAyB,EAAE,KAAK,IAAI,EAAE;YACvC,uCAAuC;YACvC,MAAM,WAAW,GAAY;gBAC3B,IAAI,EAAE,aAAa;gBACnB,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,GAAG,EAAE,CACzC,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAC1D;aACF,CAAC;YAEF,MAAM,WAAW,GAAY;gBAC3B,IAAI,EAAE,aAAa;gBACnB,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,GAAG,EAAE,CACzC,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAC1D;aACF,CAAC;YAEF,MAAM,WAAW,GAAY;gBAC3B,IAAI,EAAE,aAAa;gBACnB,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,GAAG,EAAE,CACzC,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAC1D;aACF,CAAC;YAEF,MAAM,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;YACnC,MAAM,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;YACnC,MAAM,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;YAEnC,YAAY;YACZ,MAAM,CAAC,SAAS,CAAC,EAAE,iBAAiB,EAAE,KAAK,EAAE,CAAC,CAAC;YAC/C,MAAM,eAAe,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YACnC,MAAM,MAAM,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;YACxC,MAAM,cAAc,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,eAAe,CAAC;YAEpD,SAAS;YACT,MAAM,CAAC,SAAS,CAAC,EAAE,iBAAiB,EAAE,IAAI,EAAE,CAAC,CAAC;YAC9C,MAAM,aAAa,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YACjC,MAAM,MAAM,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;YACxC,MAAM,YAAY,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,aAAa,CAAC;YAEhD,mBAAmB;YACnB,6BAA6B;YAC7B,MAAM,CAAC,YAAY,CAAC,CAAC,YAAY,CAAC,cAAc,GAAG,GAAG,CAAC,CAAC;YAExD,mBAAmB;YACnB,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,gBAAgB,EAAE,CAAC;YAC/C,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,gBAAgB,EAAE,CAAC;YAC/C,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,gBAAgB,EAAE,CAAC;QACjD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/sasakama/Projects/Rimor/test/core/UnifiedAnalysisEngine.test.ts"],"sourcesContent":["import { UnifiedAnalysisEngine } from '../../src/core/UnifiedAnalysisEngine';\nimport { IPlugin, ITestQualityPlugin, ProjectContext, TestFile, Issue } from '../../src/core/types';\nimport * as path from 'path';\nimport * as fs from 'fs';\n\n/**\n * UnifiedAnalysisEngine テストスイート\n * t_wadaのTDDメソッドに従って実装\n * \n * テスト対象:\n * 1. 既存analyzer.tsの機能が保持される\n * 2. 既存analyzerExtended.tsの機能が保持される\n * 3. 統合による新機能が正しく動作する\n * 4. SOLID原則に従った設計になっている\n */\ndescribe('UnifiedAnalysisEngine', () => {\n  let engine: UnifiedAnalysisEngine;\n\n  beforeEach(() => {\n    engine = new UnifiedAnalysisEngine();\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('基本機能（analyzer.tsから継承）', () => {\n    it('インスタンスが正しく作成される', () => {\n      expect(engine).toBeInstanceOf(UnifiedAnalysisEngine);\n    });\n\n    it('レガシープラグイン（IPlugin）を登録できる', () => {\n      const mockPlugin: IPlugin = {\n        name: 'TestPlugin',\n        analyze: jest.fn().mockResolvedValue([])\n      };\n\n      expect(() => engine.registerPlugin(mockPlugin)).not.toThrow();\n    });\n\n    it('複数のレガシープラグインを登録できる', () => {\n      const plugin1: IPlugin = {\n        name: 'Plugin1',\n        analyze: jest.fn().mockResolvedValue([])\n      };\n      const plugin2: IPlugin = {\n        name: 'Plugin2',\n        analyze: jest.fn().mockResolvedValue([])\n      };\n\n      expect(() => {\n        engine.registerPlugin(plugin1);\n        engine.registerPlugin(plugin2);\n      }).not.toThrow();\n    });\n\n    it('基本的な分析を実行できる', async () => {\n      const testPath = './test/fixtures';\n      const mockIssue: Issue = {\n        id: 'test-issue-1',\n        type: 'error',\n        message: 'Test issue',\n        file: '/test/file.ts',\n        filePath: '/test/file.ts',\n        line: 1,\n        column: 1,\n        severity: 'high',\n        category: 'test-quality' as const\n      };\n\n      const mockPlugin: IPlugin = {\n        name: 'TestPlugin',\n        analyze: jest.fn().mockResolvedValue([mockIssue])\n      };\n\n      engine.registerPlugin(mockPlugin);\n      \n      const result = await engine.analyze(testPath);\n      \n      expect(result).toBeDefined();\n      expect(result.totalFiles).toBeGreaterThanOrEqual(0);\n      expect(result.issues).toBeDefined();\n      expect(result.executionTime).toBeGreaterThanOrEqual(0);\n    });\n\n    it('分析結果に実行時間が含まれる', async () => {\n      const testPath = './test/fixtures';\n      const result = await engine.analyze(testPath);\n      \n      expect(result.executionTime).toBeDefined();\n      expect(typeof result.executionTime).toBe('number');\n      expect(result.executionTime).toBeGreaterThanOrEqual(0);\n    });\n  });\n\n  describe('拡張機能（analyzerExtended.tsから継承）', () => {\n    it('品質プラグイン（ITestQualityPlugin）を登録できる', () => {\n      const mockQualityPlugin: ITestQualityPlugin = {\n        id: 'quality-plugin',\n        name: 'QualityPlugin',\n        version: '1.0.0',\n        type: 'core',\n        isApplicable: jest.fn().mockReturnValue(true),\n        detectPatterns: jest.fn().mockResolvedValue([]),\n        evaluateQuality: jest.fn().mockReturnValue({\n          overall: 80,\n          dimensions: { completeness: 80, correctness: 80, maintainability: 80 },\n          breakdown: { completeness: 80, correctness: 80, maintainability: 80 },\n          confidence: 0.9\n        }),\n        suggestImprovements: jest.fn().mockReturnValue([])\n      };\n\n      expect(() => engine.registerQualityPlugin(mockQualityPlugin)).not.toThrow();\n    });\n\n    it('拡張分析（analyzeWithQuality）を実行できる', async () => {\n      const testPath = './test/fixtures';\n      const mockQualityPlugin: ITestQualityPlugin = {\n        id: 'quality-plugin',\n        name: 'QualityPlugin',\n        version: '1.0.0',\n        type: 'core',\n        isApplicable: jest.fn().mockReturnValue(true),\n        detectPatterns: jest.fn().mockResolvedValue([{\n          type: 'pattern',\n          name: 'test-pattern',\n          location: { file: '/test/file.ts', line: 1, column: 1 },\n          confidence: 0.9\n        }]),\n        evaluateQuality: jest.fn().mockReturnValue({\n          overall: 85,\n          breakdown: { completeness: 90, correctness: 85, maintainability: 80 },\n          confidence: 0.95\n        }),\n        suggestImprovements: jest.fn().mockReturnValue([{\n          type: 'suggestion',\n          priority: 'high',\n          description: 'Improve test coverage',\n          impact: 10\n        }])\n      };\n\n      engine.registerQualityPlugin(mockQualityPlugin);\n      \n      const result = await engine.analyzeWithQuality(testPath);\n      \n      expect(result).toBeDefined();\n      expect(result.filePath).toBe(testPath);\n      expect(result.qualityAnalysis).toBeDefined();\n      expect(result.aggregatedScore).toBeDefined();\n      expect(result.aggregatedScore.overall).toBeGreaterThanOrEqual(0);\n      expect(result.aggregatedScore.overall).toBeLessThanOrEqual(100);\n      expect(result.recommendations).toBeDefined();\n      expect(Array.isArray(result.recommendations)).toBe(true);\n      expect(result.executionTime).toBeGreaterThanOrEqual(0);\n    });\n\n    it('バッチ分析を実行できる', async () => {\n      const testPaths = ['./test/fixtures', './test/integration', './test/performance'];\n      \n      const mockQualityPlugin: ITestQualityPlugin = {\n        id: 'quality-plugin',\n        name: 'QualityPlugin',\n        version: '1.0.0',\n        type: 'core',\n        isApplicable: jest.fn().mockReturnValue(true),\n        detectPatterns: jest.fn().mockResolvedValue([]),\n        evaluateQuality: jest.fn().mockReturnValue({\n          overall: 75,\n          breakdown: { completeness: 75, correctness: 75, maintainability: 75 },\n          confidence: 0.85\n        }),\n        suggestImprovements: jest.fn().mockReturnValue([])\n      };\n\n      engine.registerQualityPlugin(mockQualityPlugin);\n      \n      const result = await engine.analyzeBatch(testPaths);\n      \n      expect(result).toBeDefined();\n      expect(result.totalFiles).toBe(testPaths.length);\n      expect(result.averageScore).toBeGreaterThanOrEqual(0);\n      expect(result.averageScore).toBeLessThanOrEqual(100);\n      expect(result.scoreDistribution).toBeDefined();\n      expect(result.scoreDistribution.excellent).toBeGreaterThanOrEqual(0);\n      expect(result.scoreDistribution.good).toBeGreaterThanOrEqual(0);\n      expect(result.scoreDistribution.fair).toBeGreaterThanOrEqual(0);\n      expect(result.scoreDistribution.poor).toBeGreaterThanOrEqual(0);\n    });\n  });\n\n  describe('統合による新機能', () => {\n    it('レガシープラグインと品質プラグインを同時に使用できる', async () => {\n      const mockLegacyPlugin: IPlugin = {\n        name: 'LegacyPlugin',\n        analyze: jest.fn().mockResolvedValue([{\n          type: 'error',\n          message: 'Legacy issue',\n          file: '/test/file.ts',\n          line: 1,\n          column: 1,\n          severity: 'high'\n        }])\n      };\n\n      const mockQualityPlugin: ITestQualityPlugin = {\n        id: 'quality-plugin',\n        name: 'QualityPlugin',\n        version: '1.0.0',\n        type: 'core',\n        isApplicable: jest.fn().mockReturnValue(true),\n        detectPatterns: jest.fn().mockResolvedValue([]),\n        evaluateQuality: jest.fn().mockReturnValue({\n          overall: 80,\n          dimensions: { completeness: 80, correctness: 80, maintainability: 80 },\n          breakdown: { completeness: 80, correctness: 80, maintainability: 80 },\n          confidence: 0.9\n        }),\n        suggestImprovements: jest.fn().mockReturnValue([])\n      };\n\n      engine.registerPlugin(mockLegacyPlugin);\n      engine.registerQualityPlugin(mockQualityPlugin);\n\n      const result = await engine.analyzeUnified('./test/fixtures');\n      \n      expect(result).toBeDefined();\n      expect(result.basicAnalysis).toBeDefined();\n      expect(result.qualityAnalysis).toBeDefined();\n      expect(result.combinedScore).toBeDefined();\n      expect(result.allIssues).toBeDefined();\n      expect(result.allIssues.length).toBeGreaterThan(0);\n    });\n\n    it('プラグインマネージャーの統合機能が動作する', () => {\n      expect(engine.getPluginCount()).toBe(0);\n      \n      const mockPlugin: IPlugin = {\n        name: 'TestPlugin',\n        analyze: jest.fn().mockResolvedValue([])\n      };\n      \n      engine.registerPlugin(mockPlugin);\n      expect(engine.getPluginCount()).toBe(1);\n      \n      const mockQualityPlugin: ITestQualityPlugin = {\n        id: 'quality-plugin',\n        name: 'QualityPlugin',\n        version: '1.0.0',\n        type: 'core',\n        isApplicable: jest.fn().mockReturnValue(true),\n        detectPatterns: jest.fn().mockResolvedValue([]),\n        evaluateQuality: jest.fn().mockReturnValue({\n          overall: 80,\n          dimensions: { completeness: 80, correctness: 80, maintainability: 80 },\n          breakdown: { completeness: 80, correctness: 80, maintainability: 80 },\n          confidence: 0.9\n        }),\n        suggestImprovements: jest.fn().mockReturnValue([])\n      };\n      \n      engine.registerQualityPlugin(mockQualityPlugin);\n      expect(engine.getPluginCount()).toBe(2);\n    });\n\n    it('設定オプションを適用できる', async () => {\n      const options = {\n        timeout: 5000,\n        skipPlugins: ['skip-plugin-id'],\n        parallelExecution: true\n      };\n\n      engine.configure(options);\n      \n      const config = engine.getConfiguration();\n      expect(config.timeout).toBe(5000);\n      expect(config.skipPlugins).toContain('skip-plugin-id');\n      expect(config.parallelExecution).toBe(true);\n    });\n\n    it('エラーハンドリングが適切に動作する', async () => {\n      const errorPlugin: IPlugin = {\n        name: 'ErrorPlugin',\n        analyze: jest.fn().mockRejectedValue(new Error('Plugin error'))\n      };\n\n      engine.registerPlugin(errorPlugin);\n      \n      const result = await engine.analyze('./test/fixtures');\n      \n      // エラーが発生してもクラッシュしない\n      expect(result).toBeDefined();\n      expect(result.errors).toBeDefined();\n      expect(result.errors!.length).toBeGreaterThan(0);\n      expect(result.errors![0].pluginName).toBe('ErrorPlugin');\n      expect(result.errors![0].error).toBe('Plugin error');\n    });\n  });\n\n  describe('SOLID原則の遵守', () => {\n    it('単一責任原則: 分析エンジンは分析のみを責務とする', () => {\n      // エンジンが分析以外の責務を持たないことを確認\n      const engineMethods = Object.getOwnPropertyNames(Object.getPrototypeOf(engine));\n      const analysisMethods = engineMethods.filter(method => \n        method.includes('analyze') || \n        method.includes('register') || \n        method.includes('configure') ||\n        method.includes('get') ||\n        method.includes('aggregate') ||\n        method.includes('collect') ||\n        method.includes('extract') ||\n        method.includes('run') ||\n        method.includes('should') ||  // shouldRunPlugin\n        method.includes('is') ||       // isLowQualityPattern\n        method.includes('create') ||   // createQualityIssue\n        method === 'constructor'\n      );\n      \n      // 分析関連以外のメソッドが存在しないことを確認\n      const nonAnalysisMethods = engineMethods.filter(method => \n        !analysisMethods.includes(method)\n      );\n      \n      // デバッグ用：どのメソッドが分析以外と判定されたか\n      if (nonAnalysisMethods.length > 0) {\n        console.log('Non-analysis methods found:', nonAnalysisMethods);\n      }\n      \n      expect(nonAnalysisMethods.length).toBe(0);\n    });\n\n    it('開放閉鎖原則: 新しいプラグインタイプを追加できる', () => {\n      // カスタムプラグインインターフェースを実装\n      const customPlugin: ITestQualityPlugin = {\n        id: 'custom',\n        name: 'CustomPlugin',\n        version: '1.0.0',\n        type: 'custom' as any,\n        isApplicable: jest.fn().mockReturnValue(true),\n        detectPatterns: jest.fn().mockResolvedValue([]),\n        evaluateQuality: jest.fn().mockReturnValue({ overall: 80, dimensions: {}, confidence: 0.8 }),\n        suggestImprovements: jest.fn().mockReturnValue([])\n      };\n\n      // 新しいプラグインタイプを登録できることを確認\n      expect(() => engine.registerQualityPlugin(customPlugin)).not.toThrow();\n    });\n\n    it('リスコフの置換原則: プラグインは互換性を保つ', async () => {\n      // IPluginを実装した異なるプラグイン\n      const plugin1: IPlugin = {\n        name: 'Plugin1',\n        analyze: jest.fn().mockResolvedValue([])\n      };\n      \n      const plugin2: IPlugin = {\n        name: 'Plugin2',\n        analyze: jest.fn().mockResolvedValue([])\n      };\n\n      engine.registerPlugin(plugin1);\n      engine.registerPlugin(plugin2);\n      \n      // 両方のプラグインが同じように動作することを確認\n      const result = await engine.analyze('./test/fixtures');\n      expect(result).toBeDefined();\n    });\n\n    it('インターフェース分離原則: 必要なインターフェースのみ依存', () => {\n      // エンジンが必要最小限のインターフェースのみを要求することを確認\n      const minimalPlugin: IPlugin = {\n        name: 'MinimalPlugin',\n        analyze: jest.fn().mockResolvedValue([])\n      };\n\n      // 最小限の実装でも動作することを確認\n      expect(() => engine.registerPlugin(minimalPlugin)).not.toThrow();\n    });\n\n    it('依存性逆転原則: 抽象に依存し具象に依存しない', () => {\n      // エンジンがインターフェースに依存していることを確認\n      const mockPlugin: IPlugin = {\n        name: 'MockPlugin',\n        analyze: jest.fn()\n      };\n\n      // モックでも正常に動作することを確認\n      expect(() => engine.registerPlugin(mockPlugin)).not.toThrow();\n    });\n  });\n\n  describe('パフォーマンステスト', () => {\n    it('並列実行が有効な場合、パフォーマンスが向上する', async () => {\n      // 異なる名前のプラグインを作成（同じ名前だと重複登録されない可能性がある）\n      const slowPlugin1: IPlugin = {\n        name: 'SlowPlugin1',\n        analyze: jest.fn().mockImplementation(() => \n          new Promise(resolve => setTimeout(() => resolve([]), 50))\n        )\n      };\n      \n      const slowPlugin2: IPlugin = {\n        name: 'SlowPlugin2',\n        analyze: jest.fn().mockImplementation(() => \n          new Promise(resolve => setTimeout(() => resolve([]), 50))\n        )\n      };\n      \n      const slowPlugin3: IPlugin = {\n        name: 'SlowPlugin3',\n        analyze: jest.fn().mockImplementation(() => \n          new Promise(resolve => setTimeout(() => resolve([]), 50))\n        )\n      };\n\n      engine.registerPlugin(slowPlugin1);\n      engine.registerPlugin(slowPlugin2);\n      engine.registerPlugin(slowPlugin3);\n\n      // シーケンシャル実行\n      engine.configure({ parallelExecution: false });\n      const sequentialStart = Date.now();\n      await engine.analyze('./test/fixtures');\n      const sequentialTime = Date.now() - sequentialStart;\n\n      // パラレル実行\n      engine.configure({ parallelExecution: true });\n      const parallelStart = Date.now();\n      await engine.analyze('./test/fixtures');\n      const parallelTime = Date.now() - parallelStart;\n\n      // パラレル実行の方が速いことを確認\n      // 並列実行の効果を検証（少なくとも20%高速化を期待）\n      expect(parallelTime).toBeLessThan(sequentialTime * 0.8);\n      \n      // 各プラグインが呼ばれたことを確認\n      expect(slowPlugin1.analyze).toHaveBeenCalled();\n      expect(slowPlugin2.analyze).toHaveBeenCalled();\n      expect(slowPlugin3.analyze).toHaveBeenCalled();\n    });\n  });\n});"],"version":3}