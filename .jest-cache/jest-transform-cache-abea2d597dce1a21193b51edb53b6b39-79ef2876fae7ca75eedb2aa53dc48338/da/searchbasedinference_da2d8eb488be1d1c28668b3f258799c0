af4af9f6e7a34f8e57ae3d86570f4794
"use strict";
/**
 * 探索ベース型推論エンジン
 * arXiv:2504.18529v2 "Practical Type-Based Taint Checking and Inference" Section 6の実装
 *
 * このエンジンは、プログラムコードから自動的に型クオリファイアを推論します。
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.InferenceResultFormatter = exports.ConstraintSolver = exports.SearchBasedInferenceEngine = void 0;
const ts = __importStar(require("typescript"));
const checker_framework_types_1 = require("../types/checker-framework-types");
/**
 * 探索ベース推論エンジン
 * 論文のAlgorithm 1を実装
 */
class SearchBasedInferenceEngine {
    typeChecker = null;
    sourceFile = null;
    maxIterations = 1000;
    convergenceThreshold = 0.95;
    /**
     * TypeScriptのソースコードから型クオリファイアを推論
     */
    async inferTypes(sourceCode, fileName = 'temp.ts') {
        // TypeScript ASTを生成
        this.sourceFile = ts.createSourceFile(fileName, sourceCode, ts.ScriptTarget.Latest, true);
        // 構文エラーをチェック
        const diagnostics = this.sourceFile.parseDiagnostics;
        if (diagnostics && diagnostics.length > 0) {
            const errorMessages = diagnostics.map((d) => ts.flattenDiagnosticMessageText(d.messageText, '\n')).join('; ');
            throw new Error(`Syntax error in source file: ${errorMessages}`);
        }
        // 初期状態を作成
        const state = {
            typeMap: new Map(),
            constraints: [],
            confidence: new Map(),
            searchHistory: []
        };
        // Phase 1: 制約の生成
        this.generateConstraints(this.sourceFile, state);
        // Phase 2: 初期型の推定
        this.assignInitialTypes(state);
        // Phase 3: 探索ベースの最適化
        await this.optimizeTypes(state);
        // Phase 4: 制約の検証
        this.validateConstraints(state);
        return state;
    }
    /**
     * Phase 1: 制約の生成
     * 論文のSection 6.1に対応
     */
    generateConstraints(node, state) {
        // 関数宣言から制約を生成
        if (ts.isFunctionDeclaration(node) || ts.isMethodDeclaration(node)) {
            this.generateFunctionConstraints(node, state);
        }
        // パラメータから制約を生成
        if (ts.isParameter(node)) {
            this.generateParameterConstraints(node, state);
        }
        // 変数宣言から制約を生成
        if (ts.isVariableDeclaration(node)) {
            this.generateVariableConstraints(node, state);
        }
        // 代入文から制約を生成
        if (ts.isBinaryExpression(node) && node.operatorToken.kind === ts.SyntaxKind.EqualsToken) {
            this.generateAssignmentConstraints(node, state);
        }
        // メソッド呼び出しから制約を生成
        if (ts.isCallExpression(node)) {
            this.generateMethodCallConstraints(node, state);
        }
        // 条件文から制約を生成
        if (ts.isIfStatement(node)) {
            this.generateConditionalConstraints(node, state);
        }
        // 子ノードを再帰的に処理
        ts.forEachChild(node, child => this.generateConstraints(child, state));
    }
    /**
     * 関数宣言から制約を生成
     */
    generateFunctionConstraints(node, state) {
        // パラメータの処理
        if (node.parameters) {
            node.parameters.forEach(param => {
                const paramName = param.name.getText();
                // ユーザー入力を示唆する名前のパラメータは@Taintedとして推論
                if (this.isUserInputName(paramName)) {
                    state.typeMap.set(paramName, '@Tainted');
                    state.confidence.set(paramName, 0.8);
                }
                else {
                    state.typeMap.set(paramName, '@PolyTaint');
                    state.confidence.set(paramName, 0.5);
                }
            });
        }
    }
    /**
     * パラメータから制約を生成
     */
    generateParameterConstraints(node, state) {
        const paramName = node.name.getText();
        if (!state.typeMap.has(paramName)) {
            // ユーザー入力を示唆する名前のパラメータ
            if (this.isUserInputName(paramName)) {
                state.typeMap.set(paramName, '@Tainted');
                state.confidence.set(paramName, 0.8);
            }
            else {
                state.typeMap.set(paramName, '@PolyTaint');
                state.confidence.set(paramName, 0.5);
            }
        }
    }
    /**
     * 変数宣言から制約を生成
     */
    generateVariableConstraints(node, state) {
        const varName = node.name.getText();
        const initializer = node.initializer;
        // 変数を型マップに追加（初期値なしでも）
        if (!state.typeMap.has(varName)) {
            state.typeMap.set(varName, '@PolyTaint');
            state.confidence.set(varName, 0.5);
        }
        if (!initializer)
            return;
        // ユーザー入力の検出
        if (this.isUserInput(initializer)) {
            state.constraints.push({
                type: 'equality',
                lhs: varName,
                rhs: '@Tainted',
                location: this.getLocation(node)
            });
            state.typeMap.set(varName, '@Tainted');
            state.confidence.set(varName, 0.9);
        }
        // リテラルの検出
        else if (ts.isStringLiteral(initializer) || ts.isNumericLiteral(initializer)) {
            state.constraints.push({
                type: 'equality',
                lhs: varName,
                rhs: '@Untainted',
                location: this.getLocation(node)
            });
            state.typeMap.set(varName, '@Untainted');
            state.confidence.set(varName, 1.0);
        }
        // 他の変数からの代入
        else if (ts.isIdentifier(initializer)) {
            const rhsName = initializer.getText();
            state.constraints.push({
                type: 'subtype',
                lhs: rhsName,
                rhs: varName,
                location: this.getLocation(node)
            });
            // 右辺の型を直接コピー（型の伝播）
            const rhsType = state.typeMap.get(rhsName);
            if (rhsType && rhsType !== '@PolyTaint') {
                state.typeMap.set(varName, rhsType);
                state.confidence.set(varName, state.confidence.get(rhsName) || 0.8);
            }
            else {
                state.confidence.set(varName, 0.8);
            }
        }
        // メソッド呼び出しの検出
        else if (ts.isCallExpression(initializer)) {
            const methodName = initializer.expression.getText();
            // サニタイザーの検出
            if (this.isSanitizer(initializer)) {
                state.constraints.push({
                    type: 'equality',
                    lhs: varName,
                    rhs: '@Untainted',
                    location: this.getLocation(node)
                });
                state.confidence.set(varName, 0.95);
            }
            // ユーザー入力取得関数の検出
            else if (this.isUserInput(initializer)) {
                state.constraints.push({
                    type: 'equality',
                    lhs: varName,
                    rhs: '@Tainted',
                    location: this.getLocation(node)
                });
                state.confidence.set(varName, 0.9);
            }
            // その他のメソッド呼び出し
            else {
                // 引数が汚染されていれば結果も汚染される可能性
                state.confidence.set(varName, 0.6);
            }
        }
    }
    /**
     * 代入文から制約を生成
     */
    generateAssignmentConstraints(node, state) {
        const lhs = node.left.getText();
        const rhs = node.right;
        if (ts.isIdentifier(rhs)) {
            // 変数から変数への代入
            state.constraints.push({
                type: 'subtype',
                lhs: rhs.getText(),
                rhs: lhs,
                location: this.getLocation(node)
            });
        }
        else if (this.isSanitizer(rhs)) {
            // サニタイザーの適用
            state.constraints.push({
                type: 'equality',
                lhs: lhs,
                rhs: '@Untainted',
                location: this.getLocation(node)
            });
            state.confidence.set(lhs, 0.95);
        }
    }
    /**
     * メソッド呼び出しから制約を生成
     */
    generateMethodCallConstraints(node, state) {
        const methodName = node.expression.getText();
        // セキュリティ関連メソッドのパターンマッチング
        if (this.isSecuritySink(methodName)) {
            // 引数は@Untaintedである必要がある
            node.arguments.forEach((arg, index) => {
                if (ts.isIdentifier(arg)) {
                    state.constraints.push({
                        type: 'subtype',
                        lhs: arg.getText(),
                        rhs: '@Untainted',
                        location: this.getLocation(arg)
                    });
                }
            });
        }
    }
    /**
     * 条件文から制約を生成（フロー感度）
     */
    generateConditionalConstraints(node, state) {
        const condition = node.expression;
        // 検証条件の検出
        if (this.isValidationCheck(condition)) {
            // then節では変数が@Untaintedになる可能性
            const validatedVar = this.extractValidatedVariable(condition);
            if (validatedVar) {
                state.constraints.push({
                    type: 'flow',
                    lhs: validatedVar,
                    rhs: '@Untainted',
                    location: this.getLocation(node.thenStatement)
                });
            }
        }
    }
    /**
     * Phase 2: 初期型の推定
     * 論文のSection 6.2に対応
     */
    assignInitialTypes(state) {
        // すべての変数を収集
        const variables = new Set();
        state.constraints.forEach(c => {
            if (typeof c.lhs === 'string')
                variables.add(c.lhs);
            if (typeof c.rhs === 'string' && !c.rhs.startsWith('@'))
                variables.add(c.rhs);
        });
        // デフォルトは@Tainted（保守的）
        variables.forEach(variable => {
            if (!state.typeMap.has(variable)) {
                state.typeMap.set(variable, '@Tainted');
                // 信頼度が設定されていない場合のみデフォルト値を設定
                if (!state.confidence.has(variable)) {
                    state.confidence.set(variable, 0.5);
                }
            }
        });
        // 明示的な制約から初期型を設定
        state.constraints.forEach(constraint => {
            if (constraint.type === 'equality' && typeof constraint.lhs === 'string') {
                state.typeMap.set(constraint.lhs, constraint.rhs);
            }
        });
    }
    /**
     * Phase 3: 探索ベースの最適化
     * 論文のAlgorithm 1の実装
     */
    async optimizeTypes(state) {
        let iteration = 0;
        let converged = false;
        while (!converged && iteration < this.maxIterations) {
            iteration++;
            // 現在の解の評価
            const currentScore = this.evaluateSolution(state);
            // 候補となる型の変更を生成
            const candidates = this.generateCandidates(state);
            // 最良の変更を選択
            let bestCandidate = null;
            let bestScore = currentScore;
            for (const candidate of candidates) {
                // 変更を適用
                this.applyCandidate(candidate, state);
                // 新しい解を評価
                const newScore = this.evaluateSolution(state);
                if (newScore > bestScore) {
                    bestScore = newScore;
                    bestCandidate = candidate;
                }
                // 変更を元に戻す
                this.revertCandidate(candidate, state);
            }
            // 最良の変更を適用
            if (bestCandidate) {
                this.applyCandidate(bestCandidate, state);
                this.recordSearchStep(bestCandidate, state);
            }
            else {
                // 改善が見つからない場合は収束
                converged = true;
                // 探索が実行されたことを記録（候補が評価された場合）
                if (candidates.length > 0 && state.searchHistory.length === 0) {
                    state.searchHistory.push({
                        variable: 'optimization_complete',
                        previousType: null,
                        newType: '@Tainted',
                        reason: 'no_improvement_found',
                        timestamp: Date.now()
                    });
                }
            }
            // 収束判定
            if (bestScore > this.convergenceThreshold) {
                converged = true;
            }
        }
    }
    /**
     * 候補となる型の変更を生成
     */
    generateCandidates(state) {
        const candidates = [];
        // 各変数について可能な型変更を生成
        state.typeMap.forEach((currentType, variable) => {
            // @PolyTaint -> 具体的な型への解決
            if (currentType === '@PolyTaint') {
                // 制約から推論される型を試す
                let hasUserInputConstraint = false;
                let hasUntaintedConstraint = false;
                state.constraints.forEach(constraint => {
                    if (constraint.type === 'subtype' && constraint.rhs === variable) {
                        const lhsType = typeof constraint.lhs === 'string'
                            ? state.typeMap.get(constraint.lhs)
                            : constraint.lhs;
                        if (lhsType === '@Tainted')
                            hasUserInputConstraint = true;
                        if (lhsType === '@Untainted')
                            hasUntaintedConstraint = true;
                    }
                });
                if (hasUserInputConstraint) {
                    candidates.push({
                        variable,
                        oldType: '@PolyTaint',
                        newType: '@Tainted',
                        reason: 'inferred_from_constraint'
                    });
                }
                else if (hasUntaintedConstraint) {
                    candidates.push({
                        variable,
                        oldType: '@PolyTaint',
                        newType: '@Untainted',
                        reason: 'inferred_from_constraint'
                    });
                }
                else {
                    // デフォルトは両方の可能性を試す
                    candidates.push({
                        variable,
                        oldType: '@PolyTaint',
                        newType: '@Tainted',
                        reason: 'default_tainted'
                    });
                    candidates.push({
                        variable,
                        oldType: '@PolyTaint',
                        newType: '@Untainted',
                        reason: 'default_untainted'
                    });
                }
            }
            // @Tainted -> @Untainted への昇格を試みる
            else if (currentType === '@Tainted') {
                candidates.push({
                    variable,
                    oldType: '@Tainted',
                    newType: '@Untainted',
                    reason: 'promotion'
                });
            }
            // @Untainted -> @Tainted への降格（制約違反の解消のため）
            else if (currentType === '@Untainted') {
                candidates.push({
                    variable,
                    oldType: '@Untainted',
                    newType: '@Tainted',
                    reason: 'demotion'
                });
            }
        });
        return candidates;
    }
    /**
     * 解の評価関数
     * 論文のSection 6.3で説明されているヒューリスティクス
     */
    evaluateSolution(state) {
        let score = 0;
        let totalConstraints = state.constraints.length;
        let satisfiedConstraints = 0;
        // 制約の満足度を評価
        state.constraints.forEach(constraint => {
            if (this.isConstraintSatisfied(constraint, state)) {
                satisfiedConstraints++;
                score += 1.0;
            }
            else {
                // 制約違反のペナルティ
                score -= 0.5;
            }
        });
        // @Untaintedの数を最大化（セキュリティを保ちつつ）
        let untaintedCount = 0;
        state.typeMap.forEach(type => {
            if (type === '@Untainted') {
                untaintedCount++;
                score += 0.1;
            }
        });
        // 信頼度による重み付け
        let confidenceBonus = 0;
        state.typeMap.forEach((type, variable) => {
            const confidence = state.confidence.get(variable) || 0.5;
            confidenceBonus += confidence * 0.05;
        });
        score += confidenceBonus;
        // 正規化
        return score / (totalConstraints + state.typeMap.size);
    }
    /**
     * 制約が満たされているかチェック
     */
    isConstraintSatisfied(constraint, state) {
        const lhsType = typeof constraint.lhs === 'string'
            ? state.typeMap.get(constraint.lhs) || '@Tainted'
            : constraint.lhs;
        const rhsType = typeof constraint.rhs === 'string' && !constraint.rhs.startsWith('@')
            ? state.typeMap.get(constraint.rhs) || '@Tainted'
            : constraint.rhs;
        switch (constraint.type) {
            case 'subtype':
                return checker_framework_types_1.SubtypingChecker.isSubtype(lhsType, rhsType);
            case 'equality':
                return lhsType === rhsType;
            case 'flow':
                // フロー制約は特殊処理
                return true; // 簡略化のため常に満たされるとする
            default:
                return false;
        }
    }
    /**
     * Phase 4: 制約の検証
     */
    validateConstraints(state) {
        const violations = [];
        state.constraints.forEach(constraint => {
            if (!this.isConstraintSatisfied(constraint, state)) {
                violations.push(constraint);
            }
        });
        if (violations.length > 0) {
            console.warn(`Found ${violations.length} unsatisfied constraints`);
            // 必要に応じてエラー処理
        }
    }
    /**
     * ヘルパーメソッド群
     */
    isUserInput(node) {
        const text = node.getText();
        const patterns = ['req.body', 'req.query', 'req.params', 'getUserInput', 'prompt'];
        return patterns.some(pattern => text.includes(pattern));
    }
    isSanitizer(node) {
        const text = node.getText();
        const patterns = ['sanitize', 'escape', 'validate', 'clean', 'purify'];
        return patterns.some(pattern => text.includes(pattern));
    }
    isSecuritySink(methodName) {
        const sinks = ['executeQuery', 'innerHTML', 'eval', 'exec', 'query'];
        return sinks.some(sink => methodName.includes(sink));
    }
    isValidationCheck(condition) {
        const text = condition.getText();
        return text.includes('isValid') || text.includes('validate') || text.includes('check');
    }
    extractValidatedVariable(condition) {
        // 簡略化: 最初の識別子を返す
        let variable = null;
        const visit = (node) => {
            if (ts.isIdentifier(node) && !variable) {
                variable = node.getText();
            }
            ts.forEachChild(node, visit);
        };
        visit(condition);
        return variable;
    }
    getLocation(node) {
        const sourceFile = this.sourceFile;
        const { line, character } = sourceFile.getLineAndCharacterOfPosition(node.getStart());
        return {
            file: sourceFile.fileName,
            line: line + 1,
            column: character + 1
        };
    }
    applyCandidate(candidate, state) {
        state.typeMap.set(candidate.variable, candidate.newType);
    }
    revertCandidate(candidate, state) {
        state.typeMap.set(candidate.variable, candidate.oldType);
    }
    recordSearchStep(candidate, state) {
        state.searchHistory.push({
            variable: candidate.variable,
            previousType: candidate.oldType,
            newType: candidate.newType,
            reason: candidate.reason,
            timestamp: Date.now()
        });
    }
    /**
     * ユーザー入力を示唆する名前かどうかを判定
     */
    isUserInputName(name) {
        const userInputPatterns = [
            /^user/i,
            /input/i,
            /request/i,
            /query/i,
            /param/i,
            /arg/i,
            /data$/i,
            /value$/i
        ];
        return userInputPatterns.some(pattern => pattern.test(name));
    }
}
exports.SearchBasedInferenceEngine = SearchBasedInferenceEngine;
/**
 * 制約ソルバー
 * 論文のSection 6.4で説明されている制約解決アルゴリズム
 */
class ConstraintSolver {
    /**
     * 制約システムを解く
     */
    solve(constraints, initialTypes) {
        const solution = new Map(initialTypes);
        const unsatisfiable = [];
        let iterations = 0;
        let changed = true;
        // 固定点に達するまで繰り返す
        while (changed && iterations < 100) {
            changed = false;
            iterations++;
            for (const constraint of constraints) {
                if (!this.processConstraint(constraint, solution)) {
                    unsatisfiable.push(constraint);
                }
                else {
                    changed = true;
                }
            }
        }
        return {
            success: unsatisfiable.length === 0,
            solution,
            unsatisfiableConstraints: unsatisfiable,
            iterations
        };
    }
    processConstraint(constraint, solution) {
        const lhsType = typeof constraint.lhs === 'string'
            ? solution.get(constraint.lhs) || '@Tainted'
            : constraint.lhs;
        const rhsType = typeof constraint.rhs === 'string' && !constraint.rhs.startsWith('@')
            ? solution.get(constraint.rhs) || '@Tainted'
            : constraint.rhs;
        switch (constraint.type) {
            case 'subtype':
                // lhs <: rhs を満たすように調整
                if (!checker_framework_types_1.SubtypingChecker.isSubtype(lhsType, rhsType)) {
                    if (typeof constraint.rhs === 'string' && !constraint.rhs.startsWith('@')) {
                        // rhsを@Taintedに変更
                        solution.set(constraint.rhs, '@Tainted');
                        return true;
                    }
                    return false;
                }
                // 制約が満たされている場合、より具体的な型を伝播させることも可能
                // x <: y かつ x = @Untainted の場合、y も @Untainted にできる
                if (lhsType === '@Untainted' && rhsType === '@Tainted' &&
                    typeof constraint.rhs === 'string' && !constraint.rhs.startsWith('@')) {
                    solution.set(constraint.rhs, '@Untainted');
                    return true;
                }
                return true;
            case 'equality':
                // lhs = rhs を強制
                if (typeof constraint.lhs === 'string') {
                    solution.set(constraint.lhs, rhsType);
                    return true;
                }
                return lhsType === rhsType;
            default:
                return true;
        }
    }
}
exports.ConstraintSolver = ConstraintSolver;
/**
 * 推論結果のフォーマッター
 */
class InferenceResultFormatter {
    /**
     * 推論結果を人間が読みやすい形式に変換
     */
    static format(state) {
        const lines = [];
        lines.push('=== Type Inference Results ===');
        lines.push('');
        // 変数の型
        lines.push('Variable Types:');
        state.typeMap.forEach((type, variable) => {
            const confidence = state.confidence.get(variable) || 0;
            lines.push(`  ${variable}: ${type} (confidence: ${(confidence * 100).toFixed(0)}%)`);
        });
        lines.push('');
        lines.push(`Total Constraints: ${state.constraints.length}`);
        // 制約の満足度
        let satisfied = 0;
        state.constraints.forEach(c => {
            if (new SearchBasedInferenceEngine()['isConstraintSatisfied'](c, state)) {
                satisfied++;
            }
        });
        lines.push(`Satisfied Constraints: ${satisfied}/${state.constraints.length}`);
        // 探索履歴
        if (state.searchHistory.length > 0) {
            lines.push('');
            lines.push('Search History:');
            state.searchHistory.slice(-5).forEach(step => {
                lines.push(`  ${step.variable}: ${step.previousType} -> ${step.newType} (${step.reason})`);
            });
        }
        return lines.join('\n');
    }
}
exports.InferenceResultFormatter = InferenceResultFormatter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,