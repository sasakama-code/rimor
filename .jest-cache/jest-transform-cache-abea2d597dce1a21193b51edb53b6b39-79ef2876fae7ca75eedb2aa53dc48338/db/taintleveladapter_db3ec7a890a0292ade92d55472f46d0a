97128fb673d6c9e91f2c71c484ea61b3
"use strict";
/**
 * TaintLevel列挙型から新型システムへの互換アダプター
 * arXiv:2504.18529v2への段階的移行をサポート
 *
 * このアダプターは、既存のTaintLevelベースのコードを
 * 新しい@Tainted/@Untaintedアノテーションシステムに
 * 段階的に移行するためのブリッジとして機能します。
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MigrationTracker = exports.MigrationHelper = exports.TaintLevelAdapter = void 0;
const checker_framework_types_1 = require("../types/checker-framework-types");
/**
 * TaintLevel互換アダプター
 * Dorothy Denningの格子理論から新しい型システムへの変換を提供
 */
class TaintLevelAdapter {
    /**
     * TaintLevelから型クオリファイアへの変換
     * 格子理論の多段階レベルを二値システムにマッピング
     */
    static toTaintQualifier(level) {
        // CLEAN/UNTAINTEDは@Untaintedにマップ
        if (level === 'untainted' || level === 'sanitized') {
            return '@Untainted';
        }
        // その他すべては@Taintedにマップ
        return '@Tainted';
    }
    /**
     * TaintLevelから具体的な型への変換
     * 信頼度情報を保持しながら新型システムに変換
     */
    static toQualifiedType(value, level, source, metadata) {
        // 信頼度の計算（0.0-1.0の範囲）
        const confidence = this.calculateConfidence(level);
        if (level === 'untainted' || level === 'sanitized') {
            return checker_framework_types_1.TypeConstructors.untainted(value, 'legacy-clean');
        }
        else {
            const sourceStr = source || (metadata?.sources && metadata.sources[0]) || 'legacy-taint';
            return checker_framework_types_1.TypeConstructors.tainted(value, sourceStr, confidence);
        }
    }
    /**
     * 新型システムからTaintLevelへの逆変換
     * 内部実装での格子理論使用のため
     */
    static fromQualifiedType(qualified) {
        if (qualified.__brand === '@Untainted') {
            return 'untainted';
        }
        else if (qualified.__brand === '@Tainted') {
            const tainted = qualified;
            return this.confidenceToTaintLevel(tainted.__confidence);
        }
        else {
            // @PolyTaintは文脈依存なので、保守的にPOSSIBLY_TAINTEDとする
            return 'possibly_tainted';
        }
    }
    /**
     * TaintLevelから信頼度への変換
     */
    static calculateConfidence(level) {
        switch (level) {
            case 'untainted':
            case 'sanitized':
                return 0.0;
            case 'possibly_tainted':
                return 0.25;
            case 'unknown':
                return 0.5;
            case 'tainted':
                return 0.75;
            case 'highly_tainted':
                return 1.0;
            default:
                return 0.5; // デフォルトは中間値
        }
    }
    /**
     * 信頼度からTaintLevelへの逆変換
     */
    static confidenceToTaintLevel(confidence) {
        if (confidence <= 0.0) {
            return 'untainted';
        }
        else if (confidence <= 0.25) {
            return 'possibly_tainted';
        }
        else if (confidence <= 0.5) {
            return 'unknown';
        }
        else if (confidence <= 0.75) {
            return 'tainted';
        }
        else {
            return 'highly_tainted';
        }
    }
    /**
     * 格子演算の互換実装
     * 新型システムで格子理論の演算を再現
     */
    static join(a, b) {
        // 両方が@Untaintedの場合のみ@Untainted
        if (a.__brand === '@Untainted' && b.__brand === '@Untainted') {
            return a;
        }
        // いずれかが@Taintedなら結果も@Tainted
        if (a.__brand === '@Tainted') {
            return a;
        }
        else if (b.__brand === '@Tainted') {
            return b;
        }
        // PolyTaintが含まれる場合は保守的に@Tainted
        return checker_framework_types_1.TypeConstructors.tainted(a.__value, 'join-operation', 0.5);
    }
    /**
     * 格子演算のmeet操作
     */
    static meet(a, b) {
        // いずれかが@Untaintedなら結果も@Untainted
        if (a.__brand === '@Untainted') {
            return a;
        }
        else if (b.__brand === '@Untainted') {
            return b;
        }
        // 両方が@Taintedの場合、より低い信頼度を選択
        if (a.__brand === '@Tainted' && b.__brand === '@Tainted') {
            const aConf = a.__confidence;
            const bConf = b.__confidence;
            if (aConf <= bConf) {
                return a;
            }
            else {
                return b;
            }
        }
        return a;
    }
    /**
     * レガシーコードのための便利メソッド
     * TaintLevelベースの比較を新型システムで実行
     */
    static isMoreTaintedThan(a, b) {
        const aLevel = this.fromQualifiedType(a);
        const bLevel = this.fromQualifiedType(b);
        return aLevel > bLevel;
    }
    /**
     * バッチ変換用のヘルパー
     * 複数の値を一括で変換
     */
    static batchConvert(values) {
        return values.map(({ value, level, source }) => this.toQualifiedType(value, level, source));
    }
    /**
     * デバッグ用の文字列表現
     */
    static toString(qualified) {
        if (qualified.__brand === '@Untainted') {
            return 'Untainted (safe)';
        }
        else if (qualified.__brand === '@Tainted') {
            const tainted = qualified;
            return `Tainted (source: ${tainted.__source}, confidence: ${tainted.__confidence})`;
        }
        else {
            return 'PolyTaint (context-dependent)';
        }
    }
}
exports.TaintLevelAdapter = TaintLevelAdapter;
/**
 * 移行支援ユーティリティ
 */
class MigrationHelper {
    /**
     * レガシーAPIの互換実装
     * 既存コードの最小限の変更で新システムを使用可能に
     */
    static createLegacyCompatibleAPI() {
        return {
            // TaintLevel定数の互換実装
            TaintLevel: {
                UNTAINTED: '@Untainted',
                POSSIBLY_TAINTED: '@Tainted',
                LIKELY_TAINTED: '@Tainted',
                DEFINITELY_TAINTED: '@Tainted',
                HIGHLY_TAINTED: '@Tainted'
            },
            // 格子演算の互換実装
            TaintLattice: {
                join: TaintLevelAdapter.join,
                meet: TaintLevelAdapter.meet,
                lessThanOrEqual: (a, b) => !TaintLevelAdapter.isMoreTaintedThan(a, b)
            }
        };
    }
    /**
     * 段階的移行のためのデコレータ
     * 既存メソッドを新型システムで自動的にラップ
     */
    static wrapLegacyMethod(method) {
        return (...args) => {
            const legacyResult = method(...args);
            return TaintLevelAdapter.toTaintQualifier(legacyResult);
        };
    }
}
exports.MigrationHelper = MigrationHelper;
/**
 * 移行状況の追跡
 */
class MigrationTracker {
    static migrationStats = new Map();
    static recordMigration(fileName, total, migrated) {
        this.migrationStats.set(fileName, {
            total,
            migrated,
            lastUpdated: new Date()
        });
    }
    static getMigrationProgress() {
        let totalItems = 0;
        let migratedItems = 0;
        const fileStats = [];
        for (const [file, stats] of this.migrationStats) {
            totalItems += stats.total;
            migratedItems += stats.migrated;
            fileStats.push({
                file,
                progress: stats.total > 0 ? (stats.migrated / stats.total) * 100 : 0
            });
        }
        return {
            overallProgress: totalItems > 0 ? (migratedItems / totalItems) * 100 : 0,
            fileStats
        };
    }
}
exports.MigrationTracker = MigrationTracker;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,