{"file":"/Users/sasakama/Projects/Rimor/src/testing/error-context.ts","mappings":"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","names":[],"sources":["/Users/sasakama/Projects/Rimor/src/testing/error-context.ts"],"sourcesContent":["import * as fs from 'fs';\nimport * as path from 'path';\nimport { ErrorInfo, ErrorType } from '../utils/errorHandler';\nimport { CodeContextAnalyzer } from '../analyzers/code-context';\nimport { Issue } from '../core/types';\n\n/**\n * テストエラーのコンテキスト情報\n * Context Engineeringの原則に基づいて構造化\n */\nexport interface TestErrorContext {\n  // 基本情報\n  timestamp: string;\n  testFile: string;\n  testName: string;\n  errorType: ErrorType;\n  \n  // エラー詳細\n  error: {\n    message: string;\n    stack?: string;\n    actual?: unknown;\n    expected?: unknown;\n  };\n  \n  // コードコンテキスト（Select Context）\n  codeContext: {\n    failedLine: number;\n    failedCode: string;\n    surroundingCode: {\n      before: string;\n      after: string;\n    };\n    testStructure: TestStructure;\n  };\n  \n  // 環境情報（Write Context）\n  environment: {\n    nodeVersion: string;\n    jestVersion?: string;\n    ciEnvironment: boolean;\n    memoryUsage: NodeJS.MemoryUsage;\n  };\n  \n  // 関連ファイル（Isolate Context）\n  relatedFiles: {\n    sourceFile?: string;\n    dependencies: string[];\n    configFiles: string[];\n  };\n  \n  // CIトレーサビリティ情報（オプション）\n  ciTraceability?: unknown;\n  \n  // 推奨アクション（Compress Context）\n  suggestedActions: SuggestedAction[];\n}\n\ninterface TestStructure {\n  describes: string[];\n  currentTest: string;\n  hooks: string[];\n}\n\ninterface SuggestedAction {\n  priority: 'high' | 'medium' | 'low';\n  action: string;\n  reasoning: string;\n  codeSnippet?: string;\n}\n\n/**\n * テストエラーコンテキスト収集器\n * Context Engineeringの手法を使用してエラー情報を収集・構造化\n */\nexport class TestErrorContextCollector {\n  private codeAnalyzer: CodeContextAnalyzer;\n  private readonly MAX_STACK_LINES = 10;\n  private readonly MAX_CODE_LINES = 15;\n  \n  constructor() {\n    this.codeAnalyzer = new CodeContextAnalyzer();\n  }\n  \n  /**\n   * テストエラーのコンテキストを収集\n   */\n  async collectErrorContext(\n    error: Error | unknown,\n    testPath: string,\n    testName: string,\n    projectPath: string\n  ): Promise<TestErrorContext> {\n    const timestamp = new Date().toISOString();\n    \n    // エラー情報の抽出\n    const errorDetails = this.extractErrorDetails(error);\n    \n    // コードコンテキストの収集\n    const codeContext = await this.extractCodeContext(\n      error,\n      testPath,\n      testName,\n      projectPath\n    );\n    \n    // 環境情報の収集\n    const environment = this.collectEnvironmentInfo();\n    \n    // 関連ファイルの検出\n    const relatedFiles = await this.findRelatedFiles(\n      testPath,\n      projectPath\n    );\n    \n    // 推奨アクションの生成\n    const suggestedActions = this.generateSuggestedActions(\n      errorDetails,\n      codeContext,\n      testPath\n    );\n    \n    return {\n      timestamp,\n      testFile: testPath,\n      testName,\n      errorType: this.determineErrorType(error),\n      error: errorDetails,\n      codeContext,\n      environment,\n      relatedFiles,\n      suggestedActions\n    };\n  }\n  \n  /**\n   * エラー詳細の抽出\n   */\n  private extractErrorDetails(error: Error | unknown): TestErrorContext['error'] {\n    // エラーオブジェクトの型ガード\n    const isErrorLike = (e: unknown): e is { message?: string; stack?: string } => {\n      return e !== null && typeof e === 'object';\n    };\n    \n    const details: TestErrorContext['error'] = {\n      message: (isErrorLike(error) && error.message) ? error.message : String(error),\n      stack: isErrorLike(error) ? error.stack : undefined\n    };\n    \n    // Jest特有のエラー情報を抽出\n    if (error && typeof error === 'object' && error !== null) {\n      const errorObj = error as Record<string, unknown>;\n      \n      if ('matcherResult' in errorObj && errorObj.matcherResult && typeof errorObj.matcherResult === 'object') {\n        const matcherResult = errorObj.matcherResult as Record<string, unknown>;\n        details.actual = matcherResult.actual;\n        details.expected = matcherResult.expected;\n      } else if ('actual' in errorObj && 'expected' in errorObj) {\n        details.actual = errorObj.actual;\n        details.expected = errorObj.expected;\n      }\n    }\n    \n    // スタックトレースの最適化（Context Compression）\n    if (details.stack) {\n      details.stack = this.optimizeStackTrace(details.stack);\n    }\n    \n    return details;\n  }\n  \n  /**\n   * コードコンテキストの抽出\n   */\n  private async extractCodeContext(\n    error: Error | unknown,\n    testPath: string,\n    testName: string,\n    projectPath: string\n  ): Promise<TestErrorContext['codeContext']> {\n    const failedLine = this.extractFailedLine(error);\n    const testContent = await this.readFileContent(testPath);\n    const lines = testContent.split('\\n');\n    \n    // 失敗した行のコード\n    const failedCode = lines[failedLine - 1] || '';\n    \n    // 周辺コード（Context Selection）\n    const beforeStart = Math.max(0, failedLine - this.MAX_CODE_LINES);\n    const afterEnd = Math.min(lines.length, failedLine + this.MAX_CODE_LINES);\n    \n    const surroundingCode = {\n      before: lines.slice(beforeStart, failedLine - 1).join('\\n'),\n      after: lines.slice(failedLine, afterEnd).join('\\n')\n    };\n    \n    // テスト構造の分析\n    const testStructure = this.analyzeTestStructure(testContent, testName);\n    \n    return {\n      failedLine,\n      failedCode,\n      surroundingCode,\n      testStructure\n    };\n  }\n  \n  /**\n   * 環境情報の収集\n   */\n  private collectEnvironmentInfo(): TestErrorContext['environment'] {\n    return {\n      nodeVersion: process.version,\n      jestVersion: this.getJestVersion(),\n      ciEnvironment: process.env.CI === 'true',\n      memoryUsage: process.memoryUsage()\n    };\n  }\n  \n  /**\n   * 関連ファイルの検出\n   */\n  private async findRelatedFiles(\n    testPath: string,\n    projectPath: string\n  ): Promise<TestErrorContext['relatedFiles']> {\n    const relatedFiles: TestErrorContext['relatedFiles'] = {\n      dependencies: [],\n      configFiles: []\n    };\n    \n    // ソースファイルの検出\n    const sourceFile = this.findSourceFile(testPath);\n    if (sourceFile && fs.existsSync(sourceFile)) {\n      relatedFiles.sourceFile = sourceFile;\n    }\n    \n    // インポートの解析\n    try {\n      const testContent = await this.readFileContent(testPath);\n      relatedFiles.dependencies = this.extractImports(testContent);\n    } catch (error) {\n      // エラーは無視\n    }\n    \n    // 設定ファイルの検出\n    const configFiles = [\n      'jest.config.js',\n      'jest.config.mjs',\n      'jest.setup.js',\n      'tsconfig.json',\n      '.eslintrc.js'\n    ];\n    \n    for (const configFile of configFiles) {\n      const configPath = path.join(projectPath, configFile);\n      if (fs.existsSync(configPath)) {\n        relatedFiles.configFiles.push(configFile);\n      }\n    }\n    \n    return relatedFiles;\n  }\n  \n  /**\n   * 推奨アクションの生成（Context Compression）\n   */\n  private generateSuggestedActions(\n    errorDetails: TestErrorContext['error'],\n    codeContext: TestErrorContext['codeContext'],\n    testPath: string\n  ): SuggestedAction[] {\n    const actions: SuggestedAction[] = [];\n    \n    // エラーメッセージに基づくアクション\n    if (errorDetails.message.includes('Cannot find module')) {\n      actions.push({\n        priority: 'high',\n        action: 'モジュールのインストールまたはパスの修正',\n        reasoning: 'モジュールが見つからないエラーです',\n        codeSnippet: 'npm install <missing-module>'\n      });\n    }\n    \n    if (errorDetails.message.includes('Expected') && errorDetails.message.includes('Received')) {\n      actions.push({\n        priority: 'medium',\n        action: 'アサーションの期待値を確認',\n        reasoning: '期待値と実際の値が一致していません',\n        codeSnippet: `expect(actual).toBe(${errorDetails.expected})`\n      });\n    }\n    \n    if (errorDetails.message.includes('TypeError')) {\n      actions.push({\n        priority: 'high',\n        action: '型エラーの修正',\n        reasoning: '型の不一致またはnull/undefined参照の可能性',\n        codeSnippet: '// null チェックを追加: if (value != null) { ... }'\n      });\n    }\n    \n    // コードコンテキストに基づくアクション\n    if (codeContext.failedCode.includes('async') && !codeContext.failedCode.includes('await')) {\n      actions.push({\n        priority: 'medium',\n        action: 'awaitキーワードの追加',\n        reasoning: '非同期関数の呼び出しにawaitが不足している可能性',\n        codeSnippet: 'await ' + codeContext.failedCode.trim()\n      });\n    }\n    \n    return actions;\n  }\n  \n  // ヘルパーメソッド\n  \n  private determineErrorType(error: Error | any): ErrorType {\n    if (!error) return ErrorType.UNKNOWN;\n    \n    const message = error.message || String(error);\n    \n    if (message.includes('Cannot find module') || message.includes('ENOENT')) {\n      return ErrorType.FILE_NOT_FOUND;\n    }\n    if (message.includes('timeout') || message.includes('Timeout')) {\n      return ErrorType.TIMEOUT;\n    }\n    if (message.includes('parse') || message.includes('SyntaxError')) {\n      return ErrorType.PARSE_ERROR;\n    }\n    \n    return ErrorType.UNKNOWN;\n  }\n  \n  private extractFailedLine(error: Error | unknown): number {\n    // 型ガードを使用してstackプロパティの存在を確認\n    const hasStack = (e: unknown): e is { stack: string } => {\n      return e !== null && \n             typeof e === 'object' && \n             'stack' in e && \n             typeof (e as Record<string, unknown>).stack === 'string';\n    };\n    \n    if (!hasStack(error)) return 1;\n    \n    const stackLines = error.stack.split('\\n');\n    for (const line of stackLines) {\n      const match = line.match(/:(\\d+):\\d+\\)$/);\n      if (match) {\n        return parseInt(match[1], 10);\n      }\n    }\n    \n    return 1;\n  }\n  \n  private optimizeStackTrace(stack: string): string {\n    const lines = stack.split('\\n');\n    const relevantLines = lines\n      .filter(line => !line.includes('node_modules'))\n      .slice(0, this.MAX_STACK_LINES);\n    \n    return relevantLines.join('\\n');\n  }\n  \n  private async readFileContent(filePath: string): Promise<string> {\n    try {\n      return await fs.promises.readFile(filePath, 'utf-8');\n    } catch (error) {\n      return '';\n    }\n  }\n  \n  private analyzeTestStructure(content: string, testName: string): TestStructure {\n    const describes: string[] = [];\n    const hooks: string[] = [];\n    \n    // describe ブロックの抽出\n    const describeRegex = /describe\\(['\"`](.*?)['\"`]/g;\n    let match;\n    while ((match = describeRegex.exec(content)) !== null) {\n      describes.push(match[1]);\n    }\n    \n    // フックの検出\n    const hookPatterns = ['beforeEach', 'afterEach', 'beforeAll', 'afterAll'];\n    for (const hook of hookPatterns) {\n      if (content.includes(`${hook}(`)) {\n        hooks.push(hook);\n      }\n    }\n    \n    return {\n      describes,\n      currentTest: testName,\n      hooks\n    };\n  }\n  \n  private findSourceFile(testPath: string): string | undefined {\n    // テストファイルから対応するソースファイルを推測\n    const sourceFile = testPath\n      .replace(/\\.test\\.(ts|js)$/, '.$1')\n      .replace(/\\.spec\\.(ts|js)$/, '.$1')\n      .replace('/__tests__/', '/');\n    \n    return fs.existsSync(sourceFile) ? sourceFile : undefined;\n  }\n  \n  private extractImports(content: string): string[] {\n    const imports: string[] = [];\n    const importRegex = /import\\s+.*?\\s+from\\s+['\"`](.*?)['\"`]/g;\n    let match;\n    \n    while ((match = importRegex.exec(content)) !== null) {\n      if (!match[1].startsWith('.')) {\n        imports.push(match[1]);\n      }\n    }\n    \n    return [...new Set(imports)];\n  }\n  \n  private getJestVersion(): string | undefined {\n    try {\n      const packageJsonPath = path.join(process.cwd(), 'package.json');\n      const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf-8'));\n      return packageJson.devDependencies?.jest || packageJson.dependencies?.jest;\n    } catch (error) {\n      return undefined;\n    }\n  }\n}"],"version":3}