0f3a4a26881e249419bf1f0f5d9eb9bb
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestErrorContextCollector = void 0;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const errorHandler_1 = require("../utils/errorHandler");
const code_context_1 = require("../analyzers/code-context");
/**
 * テストエラーコンテキスト収集器
 * Context Engineeringの手法を使用してエラー情報を収集・構造化
 */
class TestErrorContextCollector {
    codeAnalyzer;
    MAX_STACK_LINES = 10;
    MAX_CODE_LINES = 15;
    constructor() {
        this.codeAnalyzer = new code_context_1.CodeContextAnalyzer();
    }
    /**
     * テストエラーのコンテキストを収集
     */
    async collectErrorContext(error, testPath, testName, projectPath) {
        const timestamp = new Date().toISOString();
        // エラー情報の抽出
        const errorDetails = this.extractErrorDetails(error);
        // コードコンテキストの収集
        const codeContext = await this.extractCodeContext(error, testPath, testName, projectPath);
        // 環境情報の収集
        const environment = this.collectEnvironmentInfo();
        // 関連ファイルの検出
        const relatedFiles = await this.findRelatedFiles(testPath, projectPath);
        // 推奨アクションの生成
        const suggestedActions = this.generateSuggestedActions(errorDetails, codeContext, testPath);
        return {
            timestamp,
            testFile: testPath,
            testName,
            errorType: this.determineErrorType(error),
            error: errorDetails,
            codeContext,
            environment,
            relatedFiles,
            suggestedActions
        };
    }
    /**
     * エラー詳細の抽出
     */
    extractErrorDetails(error) {
        // エラーオブジェクトの型ガード
        const isErrorLike = (e) => {
            return e !== null && typeof e === 'object';
        };
        const details = {
            message: (isErrorLike(error) && error.message) ? error.message : String(error),
            stack: isErrorLike(error) ? error.stack : undefined
        };
        // Jest特有のエラー情報を抽出
        if (error && typeof error === 'object' && error !== null) {
            const errorObj = error;
            if ('matcherResult' in errorObj && errorObj.matcherResult && typeof errorObj.matcherResult === 'object') {
                const matcherResult = errorObj.matcherResult;
                details.actual = matcherResult.actual;
                details.expected = matcherResult.expected;
            }
            else if ('actual' in errorObj && 'expected' in errorObj) {
                details.actual = errorObj.actual;
                details.expected = errorObj.expected;
            }
        }
        // スタックトレースの最適化（Context Compression）
        if (details.stack) {
            details.stack = this.optimizeStackTrace(details.stack);
        }
        return details;
    }
    /**
     * コードコンテキストの抽出
     */
    async extractCodeContext(error, testPath, testName, projectPath) {
        const failedLine = this.extractFailedLine(error);
        const testContent = await this.readFileContent(testPath);
        const lines = testContent.split('\n');
        // 失敗した行のコード
        const failedCode = lines[failedLine - 1] || '';
        // 周辺コード（Context Selection）
        const beforeStart = Math.max(0, failedLine - this.MAX_CODE_LINES);
        const afterEnd = Math.min(lines.length, failedLine + this.MAX_CODE_LINES);
        const surroundingCode = {
            before: lines.slice(beforeStart, failedLine - 1).join('\n'),
            after: lines.slice(failedLine, afterEnd).join('\n')
        };
        // テスト構造の分析
        const testStructure = this.analyzeTestStructure(testContent, testName);
        return {
            failedLine,
            failedCode,
            surroundingCode,
            testStructure
        };
    }
    /**
     * 環境情報の収集
     */
    collectEnvironmentInfo() {
        return {
            nodeVersion: process.version,
            jestVersion: this.getJestVersion(),
            ciEnvironment: process.env.CI === 'true',
            memoryUsage: process.memoryUsage()
        };
    }
    /**
     * 関連ファイルの検出
     */
    async findRelatedFiles(testPath, projectPath) {
        const relatedFiles = {
            dependencies: [],
            configFiles: []
        };
        // ソースファイルの検出
        const sourceFile = this.findSourceFile(testPath);
        if (sourceFile && fs.existsSync(sourceFile)) {
            relatedFiles.sourceFile = sourceFile;
        }
        // インポートの解析
        try {
            const testContent = await this.readFileContent(testPath);
            relatedFiles.dependencies = this.extractImports(testContent);
        }
        catch (error) {
            // エラーは無視
        }
        // 設定ファイルの検出
        const configFiles = [
            'jest.config.js',
            'jest.config.mjs',
            'jest.setup.js',
            'tsconfig.json',
            '.eslintrc.js'
        ];
        for (const configFile of configFiles) {
            const configPath = path.join(projectPath, configFile);
            if (fs.existsSync(configPath)) {
                relatedFiles.configFiles.push(configFile);
            }
        }
        return relatedFiles;
    }
    /**
     * 推奨アクションの生成（Context Compression）
     */
    generateSuggestedActions(errorDetails, codeContext, testPath) {
        const actions = [];
        // エラーメッセージに基づくアクション
        if (errorDetails.message.includes('Cannot find module')) {
            actions.push({
                priority: 'high',
                action: 'モジュールのインストールまたはパスの修正',
                reasoning: 'モジュールが見つからないエラーです',
                codeSnippet: 'npm install <missing-module>'
            });
        }
        if (errorDetails.message.includes('Expected') && errorDetails.message.includes('Received')) {
            actions.push({
                priority: 'medium',
                action: 'アサーションの期待値を確認',
                reasoning: '期待値と実際の値が一致していません',
                codeSnippet: `expect(actual).toBe(${errorDetails.expected})`
            });
        }
        if (errorDetails.message.includes('TypeError')) {
            actions.push({
                priority: 'high',
                action: '型エラーの修正',
                reasoning: '型の不一致またはnull/undefined参照の可能性',
                codeSnippet: '// null チェックを追加: if (value != null) { ... }'
            });
        }
        // コードコンテキストに基づくアクション
        if (codeContext.failedCode.includes('async') && !codeContext.failedCode.includes('await')) {
            actions.push({
                priority: 'medium',
                action: 'awaitキーワードの追加',
                reasoning: '非同期関数の呼び出しにawaitが不足している可能性',
                codeSnippet: 'await ' + codeContext.failedCode.trim()
            });
        }
        return actions;
    }
    // ヘルパーメソッド
    determineErrorType(error) {
        if (!error)
            return errorHandler_1.ErrorType.UNKNOWN;
        const message = error.message || String(error);
        if (message.includes('Cannot find module') || message.includes('ENOENT')) {
            return errorHandler_1.ErrorType.FILE_NOT_FOUND;
        }
        if (message.includes('timeout') || message.includes('Timeout')) {
            return errorHandler_1.ErrorType.TIMEOUT;
        }
        if (message.includes('parse') || message.includes('SyntaxError')) {
            return errorHandler_1.ErrorType.PARSE_ERROR;
        }
        return errorHandler_1.ErrorType.UNKNOWN;
    }
    extractFailedLine(error) {
        // 型ガードを使用してstackプロパティの存在を確認
        const hasStack = (e) => {
            return e !== null &&
                typeof e === 'object' &&
                'stack' in e &&
                typeof e.stack === 'string';
        };
        if (!hasStack(error))
            return 1;
        const stackLines = error.stack.split('\n');
        for (const line of stackLines) {
            const match = line.match(/:(\d+):\d+\)$/);
            if (match) {
                return parseInt(match[1], 10);
            }
        }
        return 1;
    }
    optimizeStackTrace(stack) {
        const lines = stack.split('\n');
        const relevantLines = lines
            .filter(line => !line.includes('node_modules'))
            .slice(0, this.MAX_STACK_LINES);
        return relevantLines.join('\n');
    }
    async readFileContent(filePath) {
        try {
            return await fs.promises.readFile(filePath, 'utf-8');
        }
        catch (error) {
            return '';
        }
    }
    analyzeTestStructure(content, testName) {
        const describes = [];
        const hooks = [];
        // describe ブロックの抽出
        const describeRegex = /describe\(['"`](.*?)['"`]/g;
        let match;
        while ((match = describeRegex.exec(content)) !== null) {
            describes.push(match[1]);
        }
        // フックの検出
        const hookPatterns = ['beforeEach', 'afterEach', 'beforeAll', 'afterAll'];
        for (const hook of hookPatterns) {
            if (content.includes(`${hook}(`)) {
                hooks.push(hook);
            }
        }
        return {
            describes,
            currentTest: testName,
            hooks
        };
    }
    findSourceFile(testPath) {
        // テストファイルから対応するソースファイルを推測
        const sourceFile = testPath
            .replace(/\.test\.(ts|js)$/, '.$1')
            .replace(/\.spec\.(ts|js)$/, '.$1')
            .replace('/__tests__/', '/');
        return fs.existsSync(sourceFile) ? sourceFile : undefined;
    }
    extractImports(content) {
        const imports = [];
        const importRegex = /import\s+.*?\s+from\s+['"`](.*?)['"`]/g;
        let match;
        while ((match = importRegex.exec(content)) !== null) {
            if (!match[1].startsWith('.')) {
                imports.push(match[1]);
            }
        }
        return [...new Set(imports)];
    }
    getJestVersion() {
        try {
            const packageJsonPath = path.join(process.cwd(), 'package.json');
            const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf-8'));
            return packageJson.devDependencies?.jest || packageJson.dependencies?.jest;
        }
        catch (error) {
            return undefined;
        }
    }
}
exports.TestErrorContextCollector = TestErrorContextCollector;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL3Nhc2FrYW1hL1Byb2plY3RzL1JpbW9yL3NyYy90ZXN0aW5nL2Vycm9yLWNvbnRleHQudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsdUNBQXlCO0FBQ3pCLDJDQUE2QjtBQUM3Qix3REFBNkQ7QUFDN0QsNERBQWdFO0FBb0VoRTs7O0dBR0c7QUFDSCxNQUFhLHlCQUF5QjtJQUM1QixZQUFZLENBQXNCO0lBQ3pCLGVBQWUsR0FBRyxFQUFFLENBQUM7SUFDckIsY0FBYyxHQUFHLEVBQUUsQ0FBQztJQUVyQztRQUNFLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxrQ0FBbUIsRUFBRSxDQUFDO0lBQ2hELENBQUM7SUFFRDs7T0FFRztJQUNILEtBQUssQ0FBQyxtQkFBbUIsQ0FDdkIsS0FBc0IsRUFDdEIsUUFBZ0IsRUFDaEIsUUFBZ0IsRUFDaEIsV0FBbUI7UUFFbkIsTUFBTSxTQUFTLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUUzQyxXQUFXO1FBQ1gsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRXJELGVBQWU7UUFDZixNQUFNLFdBQVcsR0FBRyxNQUFNLElBQUksQ0FBQyxrQkFBa0IsQ0FDL0MsS0FBSyxFQUNMLFFBQVEsRUFDUixRQUFRLEVBQ1IsV0FBVyxDQUNaLENBQUM7UUFFRixVQUFVO1FBQ1YsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLHNCQUFzQixFQUFFLENBQUM7UUFFbEQsWUFBWTtRQUNaLE1BQU0sWUFBWSxHQUFHLE1BQU0sSUFBSSxDQUFDLGdCQUFnQixDQUM5QyxRQUFRLEVBQ1IsV0FBVyxDQUNaLENBQUM7UUFFRixhQUFhO1FBQ2IsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsd0JBQXdCLENBQ3BELFlBQVksRUFDWixXQUFXLEVBQ1gsUUFBUSxDQUNULENBQUM7UUFFRixPQUFPO1lBQ0wsU0FBUztZQUNULFFB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QUFJLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFFTyxjQUFjO1FBQ3BCLElBQUksQ0FBQztZQUNILE1BQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLGNBQWMsQ0FBQyxDQUFDO1lBQ2pFLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxlQUFlLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUMxRSxPQUFPLFdBQVcsQ0FBQyxlQUFlLEVBQUUsSUFBSSxJQUFJLFdBQVcsQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDO1FBQzdFLENBQUM7UUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1lBQ2YsT0FBTyxTQUFTLENBQUM7UUFDbkIsQ0FBQztJQUNILENBQUM7Q0FDRjtBQXRXRCw4REFzV0MiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL3Nhc2FrYW1hL1Byb2plY3RzL1JpbW9yL3NyYy90ZXN0aW5nL2Vycm9yLWNvbnRleHQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IEVycm9ySW5mbywgRXJyb3JUeXBlIH0gZnJvbSAnLi4vdXRpbHMvZXJyb3JIYW5kbGVyJztcbmltcG9ydCB7IENvZGVDb250ZXh0QW5hbHl6ZXIgfSBmcm9tICcuLi9hbmFseXplcnMvY29kZS1jb250ZXh0JztcbmltcG9ydCB7IElzc3VlIH0gZnJvbSAnLi4vY29yZS90eXBlcyc7XG5cbi8qKlxuICog44OG44K544OI44Ko44Op44O844Gu44Kz44Oz44OG44Kt44K544OI5oOF5aCxXG4gKiBDb250ZXh0IEVuZ2luZWVyaW5n44Gu5Y6f5YmH44Gr5Z+644Gl44GE44Gm5qeL6YCg5YyWXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVGVzdEVycm9yQ29udGV4dCB7XG4gIC8vIOWfuuacrOaDheWgsVxuICB0aW1lc3RhbXA6IHN0cmluZztcbiAgdGVzdEZpbGU6IHN0cmluZztcbiAgdGVzdE5hbWU6IHN0cmluZztcbiAgZXJyb3JUeXBlOiBFcnJvclR5cGU7XG4gIFxuICAvLyDjgqjjg6njg7zoqbPntLBcbiAgZXJyb3I6IHtcbiAgICBtZXNzYWdlOiBzdHJpbmc7XG4gICAgc3RhY2s/OiBzdHJpbmc7XG4gICAgYWN0dWFsPzogdW5rbm93bjtcbiAgICBleHBlY3RlZD86IHVua25vd247XG4gIH07XG4gIFxuICAvLyDjgrPjg7zjg4njgrPjg7Pjg4bjgq3jgrnjg4jvvIhTZWxlY3QgQ29udGV4dO+8iVxuICBjb2RlQ29udGV4dDoge1xuICAgIGZhaWxlZExpbmU6IG51bWJlcjtcbiAgICBmYWlsZWRDb2RlOiBzdHJpbmc7XG4gICAgc3Vycm91bmRpbmdDb2RlOiB7XG4gICAgICBiZWZvcmU6IHN0cmluZztcbiAgICAgIGFmdGVyOiBzdHJpbmc7XG4gICAgfTtcbiAgICB0ZXN0U3RydWN0dXJlOiBUZXN0U3RydWN0dXJlO1xuICB9O1xuICBcbiAgLy8g55Kw5aKD5oOF5aCx77yIV3JpdGUgQ29udGV4dO+8iVxuICBlbnZpcm9ubWVudDoge1xuICAgIG5vZGVWZXJzaW9uOiBzdHJpbmc7XG4gICAgamVzdFZlcnNpb24/OiBzdHJpbmc7XG4gICAgY2lFbnZpcm9ubWVudDogYm9vbGVhbjtcbiAgICBtZW1vcnlVc2FnZTogTm9kZUpTLk1lbW9yeVVzYWdlO1xuICB9O1xuICBcbiAgLy8g6Zai6YCj44OV44Kh44Kk44Or77yISXNvbGF0ZSBDb250ZXh077yJXG4gIHJlbGF0ZWRGaWxlczoge1xuICAgIHNvdXJjZUZpbGU/OiBzdHJpbmc7XG4gICAgZGVwZW5kZW5jaWVzOiBzdHJpbmdbXTtcbiAgICBjb25maWdGaWxlczogc3RyaW5nW107XG4gIH07XG4gIFxuICAvLyBDSeODiOODrOODvOOCteODk+ODquODhuOCo+aDheWgse+8iOOCquODl+OCt+ODp+ODs++8iVxuICBjaVRyYWNlYWJpbGl0eT86IHVua25vd247XG4gIFxuICAvLyDmjqjlpajjgqLjgq/jgrfjg6fjg7PvvIhDb21wcmVzcyBDb250ZXh077yJXG4gIHN1Z2dlc3RlZEFjdGlvbnM6IFN1Z2dlc3RlZEFjdGlvbltdO1xufVxuXG5pbnRlcmZhY2UgVGVzdFN0cnVjdHVyZSB7XG4gIGRlc2NyaWJlczogc3RyaW5nW107XG4gIGN1cnJlbnRUZXN0OiBzdHJpbmc7XG4gIGhvb2tzOiBzdHJpbmdbXTtcbn1cblxuaW50ZXJmYWNlIFN1Z2dlc3RlZEFjdGlvbiB7XG4gIHByaW9yaXR5OiAnaGlnaCcgfCAnbWVkaXVtJyB8ICdsb3cnO1xuICBhY3Rpb246IHN0cmluZztcbiAgcmVhc29uaW5nOiBzdHJpbmc7XG4gIGNvZGVTbmlwcGV0Pzogc3RyaW5nO1xufVxuXG4vKipcbiAqIOODhuOCueODiOOCqOODqeODvOOCs+ODs+ODhuOCreOCueODiOWPjumbhuWZqFxuICogQ29udGV4dCBFbmdpbmVlcmluZ+OBruaJi+azleOCkuS9v+eUqOOBl+OBpuOCqOODqeODvOaDheWgseOCkuWPjumbhuODu+ani+mAoOWMllxuICovXG5leHBvcnQgY2xhc3MgVGVzdEVycm9yQ29udGV4dENvbGxlY3RvciB7XG4gIHByaXZhdGUgY29kZUFuYWx5emVyOiBDb2RlQ29udGV4dEFuYWx5emVyO1xuICBwcml2YXRlIHJlYWRvbmx5IE1BWF9TVEFDS19MSU5FUyA9IDEwO1xuICBwcml2YXRlIHJlYWRvbmx5IE1BWF9DT0RFX0xJTkVTID0gMTU7XG4gIFxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmNvZGVBbmFseXplciA9IG5ldyBDb2RlQ29udGV4dEFuYWx5emVyKCk7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiDjg4bjgrnjg4jjgqjjg6njg7zjga7jgrPjg7Pjg4bjgq3jgrnjg4jjgpLlj47pm4ZcbiAgICovXG4gIGFzeW5jIGNvbGxlY3RFcnJvckNvbnRleHQoXG4gICAgZXJyb3I6IEVycm9yIHwgdW5rbm93bixcbiAgICB0ZXN0UGF0aDogc3RyaW5nLFxuICAgIHRlc3ROYW1lOiBzdHJpbmcsXG4gICAgcHJvamVjdFBhdGg6IHN0cmluZ1xuICApOiBQcm9taXNlPFRlc3RFcnJvckNvbnRleHQ+IHtcbiAgICBjb25zdCB0aW1lc3RhbXAgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCk7XG4gICAgXG4gICAgLy8g44Ko44Op44O85oOF5aCx44Gu5oq95Ye6XG4gICAgY29uc3QgZXJyb3JEZXRhaWxzID0gdGhpcy5leHRyYWN0RXJyb3JEZXRhaWxzKGVycm9yKTtcbiAgICBcbiAgICAvLyDjgrPjg7zjg4njgrPjg7Pjg4bjgq3jgrnjg4jjga7lj47pm4ZcbiAgICBjb25zdCBjb2RlQ29udGV4dCA9IGF3YWl0IHRoaXMuZXh0cmFjdENvZGVDb250ZXh0KFxuICAgICAgZXJyb3IsXG4gICAgICB0ZXN0UGF0aCxcbiAgICAgIHRlc3ROYW1lLFxuICAgICAgcHJvamVjdFBhdGhcbiAgICApO1xuICAgIFxuICAgIC8vIOeSsOWig+aDheWgseOBruWPjumbhlxuICAgIGNvbnN0IGVudmlyb25tZW50ID0gdGhpcy5jb2xsZWN0RW52aXJvbm1lbnRJbmZvKCk7XG4gICAgXG4gICAgLy8g6Zai6YCj44OV44Kh44Kk44Or44Gu5qSc5Ye6XG4gICAgY29uc3QgcmVsYXRlZEZpbGVzID0gYXdhaXQgdGhpcy5maW5kUmVsYXRlZEZpbGVzKFxuICAgICAgdGVzdFBhdGgsXG4gICAgICBwcm9qZWN0UGF0aFxuICAgICk7XG4gICAgXG4gICAgLy8g5o6o5aWo44Ki44Kv44K344On44Oz44Gu55Sf5oiQXG4gICAgY29uc3Qgc3VnZ2VzdGVkQWN0aW9ucyA9IHRoaXMuZ2VuZXJhdGVTdWdnZXN0ZWRBY3Rpb25zKFxuICAgICAgZXJyb3JEZXRhaWxzLFxuICAgICAgY29kZUNvbnRleHQsXG4gICAgICB0ZXN0UGF0aFxuICAgICk7XG4gICAgXG4gICAgcmV0dXJuIHtcbiAgICAgIHRpbWVzdGFtcCxcbiAgICAgIHRlc3RGaWxlOiB0ZXN0UGF0aCxcbiAgICAgIHRlc3ROYW1lLFxuICAgICAgZXJyb3JUeXBlOiB0aGlzLmRldGVybWluZUVycm9yVHlwZShlcnJvciksXG4gICAgICBlcnJvcjogZXJyb3JEZXRhaWxzLFxuICAgICAgY29kZUNvbnRleHQsXG4gICAgICBlbnZpcm9ubWVudCxcbiAgICAgIHJlbGF0ZWRGaWxlcyxcbiAgICAgIHN1Z2dlc3RlZEFjdGlvbnNcbiAgICB9O1xuICB9XG4gIFxuICAvKipcbiAgICog44Ko44Op44O86Kmz57Sw44Gu5oq95Ye6XG4gICAqL1xuICBwcml2YXRlIGV4dHJhY3RFcnJvckRldGFpbHMoZXJyb3I6IEVycm9yIHwgdW5rbm93bik6IFRlc3RFcnJvckNvbnRleHRbJ2Vycm9yJ10ge1xuICAgIC8vIOOCqOODqeODvOOCquODluOCuOOCp+OCr+ODiOOBruWei+OCrOODvOODiVxuICAgIGNvbnN0IGlzRXJyb3JMaWtlID0gKGU6IHVua25vd24pOiBlIGlzIHsgbWVzc2FnZT86IHN0cmluZzsgc3RhY2s/OiBzdHJpbmcgfSA9PiB7XG4gICAgICByZXR1cm4gZSAhPT0gbnVsbCAmJiB0eXBlb2YgZSA9PT0gJ29iamVjdCc7XG4gICAgfTtcbiAgICBcbiAgICBjb25zdCBkZXRhaWxzOiBUZXN0RXJyb3JDb250ZXh0WydlcnJvciddID0ge1xuICAgICAgbWVzc2FnZTogKGlzRXJyb3JMaWtlKGVycm9yKSAmJiBlcnJvci5tZXNzYWdlKSA/IGVycm9yLm1lc3NhZ2UgOiBTdHJpbmcoZXJyb3IpLFxuICAgICAgc3RhY2s6IGlzRXJyb3JMaWtlKGVycm9yKSA/IGVycm9yLnN0YWNrIDogdW5kZWZpbmVkXG4gICAgfTtcbiAgICBcbiAgICAvLyBKZXN054m55pyJ44Gu44Ko44Op44O85oOF5aCx44KS5oq95Ye6XG4gICAgaWYgKGVycm9yICYmIHR5cGVvZiBlcnJvciA9PT0gJ29iamVjdCcgJiYgZXJyb3IgIT09IG51bGwpIHtcbiAgICAgIGNvbnN0IGVycm9yT2JqID0gZXJyb3IgYXMgUmVjb3JkPHN0cmluZywgdW5rbm93bj47XG4gICAgICBcbiAgICAgIGlmICgnbWF0Y2hlclJlc3VsdCcgaW4gZXJyb3JPYmogJiYgZXJyb3JPYmoubWF0Y2hlclJlc3VsdCAmJiB0eXBlb2YgZXJyb3JPYmoubWF0Y2hlclJlc3VsdCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgY29uc3QgbWF0Y2hlclJlc3VsdCA9IGVycm9yT2JqLm1hdGNoZXJSZXN1bHQgYXMgUmVjb3JkPHN0cmluZywgdW5rbm93bj47XG4gICAgICAgIGRldGFpbHMuYWN0dWFsID0gbWF0Y2hlclJlc3VsdC5hY3R1YWw7XG4gICAgICAgIGRldGFpbHMuZXhwZWN0ZWQgPSBtYXRjaGVyUmVzdWx0LmV4cGVjdGVkO1xuICAgICAgfSBlbHNlIGlmICgnYWN0dWFsJyBpbiBlcnJvck9iaiAmJiAnZXhwZWN0ZWQnIGluIGVycm9yT2JqKSB7XG4gICAgICAgIGRldGFpbHMuYWN0dWFsID0gZXJyb3JPYmouYWN0dWFsO1xuICAgICAgICBkZXRhaWxzLmV4cGVjdGVkID0gZXJyb3JPYmouZXhwZWN0ZWQ7XG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIC8vIOOCueOCv+ODg+OCr+ODiOODrOODvOOCueOBruacgOmBqeWMlu+8iENvbnRleHQgQ29tcHJlc3Npb27vvIlcbiAgICBpZiAoZGV0YWlscy5zdGFjaykge1xuICAgICAgZGV0YWlscy5zdGFjayA9IHRoaXMub3B0aW1pemVTdGFja1RyYWNlKGRldGFpbHMuc3RhY2spO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gZGV0YWlscztcbiAgfVxuICBcbiAgLyoqXG4gICAqIOOCs+ODvOODieOCs+ODs+ODhuOCreOCueODiOOBruaKveWHulxuICAgKi9cbiAgcHJpdmF0ZSBhc3luYyBleHRyYWN0Q29kZUNvbnRleHQoXG4gICAgZXJyb3I6IEVycm9yIHwgdW5rbm93bixcbiAgICB0ZXN0UGF0aDogc3RyaW5nLFxuICAgIHRlc3ROYW1lOiBzdHJpbmcsXG4gICAgcHJvamVjdFBhdGg6IHN0cmluZ1xuICApOiBQcm9taXNlPFRlc3RFcnJvckNvbnRleHRbJ2NvZGVDb250ZXh0J10+IHtcbiAgICBjb25zdCBmYWlsZWRMaW5lID0gdGhpcy5leHRyYWN0RmFpbGVkTGluZShlcnJvcik7XG4gICAgY29uc3QgdGVzdENvbnRlbnQgPSBhd2FpdCB0aGlzLnJlYWRGaWxlQ29udGVudCh0ZXN0UGF0aCk7XG4gICAgY29uc3QgbGluZXMgPSB0ZXN0Q29udGVudC5zcGxpdCgnXFxuJyk7XG4gICAgXG4gICAgLy8g5aSx5pWX44GX44Gf6KGM44Gu44Kz44O844OJXG4gICAgY29uc3QgZmFpbGVkQ29kZSA9IGxpbmVzW2ZhaWxlZExpbmUgLSAxXSB8fCAnJztcbiAgICBcbiAgICAvLyDlkajovrrjgrPjg7zjg4nvvIhDb250ZXh0IFNlbGVjdGlvbu+8iVxuICAgIGNvbnN0IGJlZm9yZVN0YXJ0ID0gTWF0aC5tYXgoMCwgZmFpbGVkTGluZSAtIHRoaXMuTUFYX0NPREVfTElORVMpO1xuICAgIGNvbnN0IGFmdGVyRW5kID0gTWF0aC5taW4obGluZXMubGVuZ3RoLCBmYWlsZWRMaW5lICsgdGhpcy5NQVhfQ09ERV9MSU5FUyk7XG4gICAgXG4gICAgY29uc3Qgc3Vycm91bmRpbmdDb2RlID0ge1xuICAgICAgYmVmb3JlOiBsaW5lcy5zbGljZShiZWZvcmVTdGFydCwgZmFpbGVkTGluZSAtIDEpLmpvaW4oJ1xcbicpLFxuICAgICAgYWZ0ZXI6IGxpbmVzLnNsaWNlKGZhaWxlZExpbmUsIGFmdGVyRW5kKS5qb2luKCdcXG4nKVxuICAgIH07XG4gICAgXG4gICAgLy8g44OG44K544OI5qeL6YCg44Gu5YiG5p6QXG4gICAgY29uc3QgdGVzdFN0cnVjdHVyZSA9IHRoaXMuYW5hbHl6ZVRlc3RTdHJ1Y3R1cmUodGVzdENvbnRlbnQsIHRlc3ROYW1lKTtcbiAgICBcbiAgICByZXR1cm4ge1xuICAgICAgZmFpbGVkTGluZSxcbiAgICAgIGZhaWxlZENvZGUsXG4gICAgICBzdXJyb3VuZGluZ0NvZGUsXG4gICAgICB0ZXN0U3RydWN0dXJlXG4gICAgfTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIOeSsOWig+aDheWgseOBruWPjumbhlxuICAgKi9cbiAgcHJpdmF0ZSBjb2xsZWN0RW52aXJvbm1lbnRJbmZvKCk6IFRlc3RFcnJvckNvbnRleHRbJ2Vudmlyb25tZW50J10ge1xuICAgIHJldHVybiB7XG4gICAgICBub2RlVmVyc2lvbjogcHJvY2Vzcy52ZXJzaW9uLFxuICAgICAgamVzdFZlcnNpb246IHRoaXMuZ2V0SmVzdFZlcnNpb24oKSxcbiAgICAgIGNpRW52aXJvbm1lbnQ6IHByb2Nlc3MuZW52LkNJID09PSAndHJ1ZScsXG4gICAgICBtZW1vcnlVc2FnZTogcHJvY2Vzcy5tZW1vcnlVc2FnZSgpXG4gICAgfTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIOmWoumAo+ODleOCoeOCpOODq+OBruaknOWHulxuICAgKi9cbiAgcHJpdmF0ZSBhc3luYyBmaW5kUmVsYXRlZEZpbGVzKFxuICAgIHRlc3RQYXRoOiBzdHJpbmcsXG4gICAgcHJvamVjdFBhdGg6IHN0cmluZ1xuICApOiBQcm9taXNlPFRlc3RFcnJvckNvbnRleHRbJ3JlbGF0ZWRGaWxlcyddPiB7XG4gICAgY29uc3QgcmVsYXRlZEZpbGVzOiBUZXN0RXJyb3JDb250ZXh0WydyZWxhdGVkRmlsZXMnXSA9IHtcbiAgICAgIGRlcGVuZGVuY2llczogW10sXG4gICAgICBjb25maWdGaWxlczogW11cbiAgICB9O1xuICAgIFxuICAgIC8vIOOCveODvOOCueODleOCoeOCpOODq+OBruaknOWHulxuICAgIGNvbnN0IHNvdXJjZUZpbGUgPSB0aGlzLmZpbmRTb3VyY2VGaWxlKHRlc3RQYXRoKTtcbiAgICBpZiAoc291cmNlRmlsZSAmJiBmcy5leGlzdHNTeW5jKHNvdXJjZUZpbGUpKSB7XG4gICAgICByZWxhdGVkRmlsZXMuc291cmNlRmlsZSA9IHNvdXJjZUZpbGU7XG4gICAgfVxuICAgIFxuICAgIC8vIOOCpOODs+ODneODvOODiOOBruino+aekFxuICAgIHRyeSB7XG4gICAgICBjb25zdCB0ZXN0Q29udGVudCA9IGF3YWl0IHRoaXMucmVhZEZpbGVDb250ZW50KHRlc3RQYXRoKTtcbiAgICAgIHJlbGF0ZWRGaWxlcy5kZXBlbmRlbmNpZXMgPSB0aGlzLmV4dHJhY3RJbXBvcnRzKHRlc3RDb250ZW50KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgLy8g44Ko44Op44O844Gv54Sh6KaWXG4gICAgfVxuICAgIFxuICAgIC8vIOioreWumuODleOCoeOCpOODq+OBruaknOWHulxuICAgIGNvbnN0IGNvbmZpZ0ZpbGVzID0gW1xuICAgICAgJ2plc3QuY29uZmlnLmpzJyxcbiAgICAgICdqZXN0LmNvbmZpZy5tanMnLFxuICAgICAgJ2plc3Quc2V0dXAuanMnLFxuICAgICAgJ3RzY29uZmlnLmpzb24nLFxuICAgICAgJy5lc2xpbnRyYy5qcydcbiAgICBdO1xuICAgIFxuICAgIGZvciAoY29uc3QgY29uZmlnRmlsZSBvZiBjb25maWdGaWxlcykge1xuICAgICAgY29uc3QgY29uZmlnUGF0aCA9IHBhdGguam9pbihwcm9qZWN0UGF0aCwgY29uZmlnRmlsZSk7XG4gICAgICBpZiAoZnMuZXhpc3RzU3luYyhjb25maWdQYXRoKSkge1xuICAgICAgICByZWxhdGVkRmlsZXMuY29uZmlnRmlsZXMucHVzaChjb25maWdGaWxlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIHJlbGF0ZWRGaWxlcztcbiAgfVxuICBcbiAgLyoqXG4gICAqIOaOqOWlqOOCouOCr+OCt+ODp+ODs+OBrueUn+aIkO+8iENvbnRleHQgQ29tcHJlc3Npb27vvIlcbiAgICovXG4gIHByaXZhdGUgZ2VuZXJhdGVTdWdnZXN0ZWRBY3Rpb25zKFxuICAgIGVycm9yRGV0YWlsczogVGVzdEVycm9yQ29udGV4dFsnZXJyb3InXSxcbiAgICBjb2RlQ29udGV4dDogVGVzdEVycm9yQ29udGV4dFsnY29kZUNvbnRleHQnXSxcbiAgICB0ZXN0UGF0aDogc3RyaW5nXG4gICk6IFN1Z2dlc3RlZEFjdGlvbltdIHtcbiAgICBjb25zdCBhY3Rpb25zOiBTdWdnZXN0ZWRBY3Rpb25bXSA9IFtdO1xuICAgIFxuICAgIC8vIOOCqOODqeODvOODoeODg+OCu+ODvOOCuOOBq+WfuuOBpeOBj+OCouOCr+OCt+ODp+ODs1xuICAgIGlmIChlcnJvckRldGFpbHMubWVzc2FnZS5pbmNsdWRlcygnQ2Fubm90IGZpbmQgbW9kdWxlJykpIHtcbiAgICAgIGFjdGlvbnMucHVzaCh7XG4gICAgICAgIHByaW9yaXR5OiAnaGlnaCcsXG4gICAgICAgIGFjdGlvbjogJ+ODouOCuOODpeODvOODq+OBruOCpOODs+OCueODiOODvOODq+OBvuOBn+OBr+ODkeOCueOBruS/ruatoycsXG4gICAgICAgIHJlYXNvbmluZzogJ+ODouOCuOODpeODvOODq+OBjOimi+OBpOOBi+OCieOBquOBhOOCqOODqeODvOOBp+OBmScsXG4gICAgICAgIGNvZGVTbmlwcGV0OiAnbnBtIGluc3RhbGwgPG1pc3NpbmctbW9kdWxlPidcbiAgICAgIH0pO1xuICAgIH1cbiAgICBcbiAgICBpZiAoZXJyb3JEZXRhaWxzLm1lc3NhZ2UuaW5jbHVkZXMoJ0V4cGVjdGVkJykgJiYgZXJyb3JEZXRhaWxzLm1lc3NhZ2UuaW5jbHVkZXMoJ1JlY2VpdmVkJykpIHtcbiAgICAgIGFjdGlvbnMucHVzaCh7XG4gICAgICAgIHByaW9yaXR5OiAnbWVkaXVtJyxcbiAgICAgICAgYWN0aW9uOiAn44Ki44K144O844K344On44Oz44Gu5pyf5b6F5YCk44KS56K66KqNJyxcbiAgICAgICAgcmVhc29uaW5nOiAn5pyf5b6F5YCk44Go5a6f6Zqb44Gu5YCk44GM5LiA6Ie044GX44Gm44GE44G+44Gb44KTJyxcbiAgICAgICAgY29kZVNuaXBwZXQ6IGBleHBlY3QoYWN0dWFsKS50b0JlKCR7ZXJyb3JEZXRhaWxzLmV4cGVjdGVkfSlgXG4gICAgICB9KTtcbiAgICB9XG4gICAgXG4gICAgaWYgKGVycm9yRGV0YWlscy5tZXNzYWdlLmluY2x1ZGVzKCdUeXBlRXJyb3InKSkge1xuICAgICAgYWN0aW9ucy5wdXNoKHtcbiAgICAgICAgcHJpb3JpdHk6ICdoaWdoJyxcbiAgICAgICAgYWN0aW9uOiAn5Z6L44Ko44Op44O844Gu5L+u5q2jJyxcbiAgICAgICAgcmVhc29uaW5nOiAn5Z6L44Gu5LiN5LiA6Ie044G+44Gf44GvbnVsbC91bmRlZmluZWTlj4Lnhafjga7lj6/og73mgKcnLFxuICAgICAgICBjb2RlU25pcHBldDogJy8vIG51bGwg44OB44Kn44OD44Kv44KS6L+95YqgOiBpZiAodmFsdWUgIT0gbnVsbCkgeyAuLi4gfSdcbiAgICAgIH0pO1xuICAgIH1cbiAgICBcbiAgICAvLyDjgrPjg7zjg4njgrPjg7Pjg4bjgq3jgrnjg4jjgavln7rjgaXjgY/jgqLjgq/jgrfjg6fjg7NcbiAgICBpZiAoY29kZUNvbnRleHQuZmFpbGVkQ29kZS5pbmNsdWRlcygnYXN5bmMnKSAmJiAhY29kZUNvbnRleHQuZmFpbGVkQ29kZS5pbmNsdWRlcygnYXdhaXQnKSkge1xuICAgICAgYWN0aW9ucy5wdXNoKHtcbiAgICAgICAgcHJpb3JpdHk6ICdtZWRpdW0nLFxuICAgICAgICBhY3Rpb246ICdhd2FpdOOCreODvOODr+ODvOODieOBrui/veWKoCcsXG4gICAgICAgIHJlYXNvbmluZzogJ+mdnuWQjOacn+mWouaVsOOBruWRvOOBs+WHuuOBl+OBq2F3YWl044GM5LiN6Laz44GX44Gm44GE44KL5Y+v6IO95oCnJyxcbiAgICAgICAgY29kZVNuaXBwZXQ6ICdhd2FpdCAnICsgY29kZUNvbnRleHQuZmFpbGVkQ29kZS50cmltKClcbiAgICAgIH0pO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gYWN0aW9ucztcbiAgfVxuICBcbiAgLy8g44OY44Or44OR44O844Oh44K944OD44OJXG4gIFxuICBwcml2YXRlIGRldGVybWluZUVycm9yVHlwZShlcnJvcjogRXJyb3IgfCBhbnkpOiBFcnJvclR5cGUge1xuICAgIGlmICghZXJyb3IpIHJldHVybiBFcnJvclR5cGUuVU5LTk9XTjtcbiAgICBcbiAgICBjb25zdCBtZXNzYWdlID0gZXJyb3IubWVzc2FnZSB8fCBTdHJpbmcoZXJyb3IpO1xuICAgIFxuICAgIGlmIChtZXNzYWdlLmluY2x1ZGVzKCdDYW5ub3QgZmluZCBtb2R1bGUnKSB8fCBtZXNzYWdlLmluY2x1ZGVzKCdFTk9FTlQnKSkge1xuICAgICAgcmV0dXJuIEVycm9yVHlwZS5GSUxFX05PVF9GT1VORDtcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2UuaW5jbHVkZXMoJ3RpbWVvdXQnKSB8fCBtZXNzYWdlLmluY2x1ZGVzKCdUaW1lb3V0JykpIHtcbiAgICAgIHJldHVybiBFcnJvclR5cGUuVElNRU9VVDtcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2UuaW5jbHVkZXMoJ3BhcnNlJykgfHwgbWVzc2FnZS5pbmNsdWRlcygnU3ludGF4RXJyb3InKSkge1xuICAgICAgcmV0dXJuIEVycm9yVHlwZS5QQVJTRV9FUlJPUjtcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIEVycm9yVHlwZS5VTktOT1dOO1xuICB9XG4gIFxuICBwcml2YXRlIGV4dHJhY3RGYWlsZWRMaW5lKGVycm9yOiBFcnJvciB8IHVua25vd24pOiBudW1iZXIge1xuICAgIC8vIOWei+OCrOODvOODieOCkuS9v+eUqOOBl+OBpnN0YWNr44OX44Ot44OR44OG44Kj44Gu5a2Y5Zyo44KS56K66KqNXG4gICAgY29uc3QgaGFzU3RhY2sgPSAoZTogdW5rbm93bik6IGUgaXMgeyBzdGFjazogc3RyaW5nIH0gPT4ge1xuICAgICAgcmV0dXJuIGUgIT09IG51bGwgJiYgXG4gICAgICAgICAgICAgdHlwZW9mIGUgPT09ICdvYmplY3QnICYmIFxuICAgICAgICAgICAgICdzdGFjaycgaW4gZSAmJiBcbiAgICAgICAgICAgICB0eXBlb2YgKGUgYXMgUmVjb3JkPHN0cmluZywgdW5rbm93bj4pLnN0YWNrID09PSAnc3RyaW5nJztcbiAgICB9O1xuICAgIFxuICAgIGlmICghaGFzU3RhY2soZXJyb3IpKSByZXR1cm4gMTtcbiAgICBcbiAgICBjb25zdCBzdGFja0xpbmVzID0gZXJyb3Iuc3RhY2suc3BsaXQoJ1xcbicpO1xuICAgIGZvciAoY29uc3QgbGluZSBvZiBzdGFja0xpbmVzKSB7XG4gICAgICBjb25zdCBtYXRjaCA9IGxpbmUubWF0Y2goLzooXFxkKyk6XFxkK1xcKSQvKTtcbiAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICByZXR1cm4gcGFyc2VJbnQobWF0Y2hbMV0sIDEwKTtcbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIDE7XG4gIH1cbiAgXG4gIHByaXZhdGUgb3B0aW1pemVTdGFja1RyYWNlKHN0YWNrOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGNvbnN0IGxpbmVzID0gc3RhY2suc3BsaXQoJ1xcbicpO1xuICAgIGNvbnN0IHJlbGV2YW50TGluZXMgPSBsaW5lc1xuICAgICAgLmZpbHRlcihsaW5lID0+ICFsaW5lLmluY2x1ZGVzKCdub2RlX21vZHVsZXMnKSlcbiAgICAgIC5zbGljZSgwLCB0aGlzLk1BWF9TVEFDS19MSU5FUyk7XG4gICAgXG4gICAgcmV0dXJuIHJlbGV2YW50TGluZXMuam9pbignXFxuJyk7XG4gIH1cbiAgXG4gIHByaXZhdGUgYXN5bmMgcmVhZEZpbGVDb250ZW50KGZpbGVQYXRoOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgZnMucHJvbWlzZXMucmVhZEZpbGUoZmlsZVBhdGgsICd1dGYtOCcpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICB9XG4gIFxuICBwcml2YXRlIGFuYWx5emVUZXN0U3RydWN0dXJlKGNvbnRlbnQ6IHN0cmluZywgdGVzdE5hbWU6IHN0cmluZyk6IFRlc3RTdHJ1Y3R1cmUge1xuICAgIGNvbnN0IGRlc2NyaWJlczogc3RyaW5nW10gPSBbXTtcbiAgICBjb25zdCBob29rczogc3RyaW5nW10gPSBbXTtcbiAgICBcbiAgICAvLyBkZXNjcmliZSDjg5bjg63jg4Pjgq/jga7mir3lh7pcbiAgICBjb25zdCBkZXNjcmliZVJlZ2V4ID0gL2Rlc2NyaWJlXFwoWydcImBdKC4qPylbJ1wiYF0vZztcbiAgICBsZXQgbWF0Y2g7XG4gICAgd2hpbGUgKChtYXRjaCA9IGRlc2NyaWJlUmVnZXguZXhlYyhjb250ZW50KSkgIT09IG51bGwpIHtcbiAgICAgIGRlc2NyaWJlcy5wdXNoKG1hdGNoWzFdKTtcbiAgICB9XG4gICAgXG4gICAgLy8g44OV44OD44Kv44Gu5qSc5Ye6XG4gICAgY29uc3QgaG9va1BhdHRlcm5zID0gWydiZWZvcmVFYWNoJywgJ2FmdGVyRWFjaCcsICdiZWZvcmVBbGwnLCAnYWZ0ZXJBbGwnXTtcbiAgICBmb3IgKGNvbnN0IGhvb2sgb2YgaG9va1BhdHRlcm5zKSB7XG4gICAgICBpZiAoY29udGVudC5pbmNsdWRlcyhgJHtob29rfShgKSkge1xuICAgICAgICBob29rcy5wdXNoKGhvb2spO1xuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICByZXR1cm4ge1xuICAgICAgZGVzY3JpYmVzLFxuICAgICAgY3VycmVudFRlc3Q6IHRlc3ROYW1lLFxuICAgICAgaG9va3NcbiAgICB9O1xuICB9XG4gIFxuICBwcml2YXRlIGZpbmRTb3VyY2VGaWxlKHRlc3RQYXRoOiBzdHJpbmcpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICAgIC8vIOODhuOCueODiOODleOCoeOCpOODq+OBi+OCieWvvuW/nOOBmeOCi+OCveODvOOCueODleOCoeOCpOODq+OCkuaOqOa4rFxuICAgIGNvbnN0IHNvdXJjZUZpbGUgPSB0ZXN0UGF0aFxuICAgICAgLnJlcGxhY2UoL1xcLnRlc3RcXC4odHN8anMpJC8sICcuJDEnKVxuICAgICAgLnJlcGxhY2UoL1xcLnNwZWNcXC4odHN8anMpJC8sICcuJDEnKVxuICAgICAgLnJlcGxhY2UoJy9fX3Rlc3RzX18vJywgJy8nKTtcbiAgICBcbiAgICByZXR1cm4gZnMuZXhpc3RzU3luYyhzb3VyY2VGaWxlKSA/IHNvdXJjZUZpbGUgOiB1bmRlZmluZWQ7XG4gIH1cbiAgXG4gIHByaXZhdGUgZXh0cmFjdEltcG9ydHMoY29udGVudDogc3RyaW5nKTogc3RyaW5nW10ge1xuICAgIGNvbnN0IGltcG9ydHM6IHN0cmluZ1tdID0gW107XG4gICAgY29uc3QgaW1wb3J0UmVnZXggPSAvaW1wb3J0XFxzKy4qP1xccytmcm9tXFxzK1snXCJgXSguKj8pWydcImBdL2c7XG4gICAgbGV0IG1hdGNoO1xuICAgIFxuICAgIHdoaWxlICgobWF0Y2ggPSBpbXBvcnRSZWdleC5leGVjKGNvbnRlbnQpKSAhPT0gbnVsbCkge1xuICAgICAgaWYgKCFtYXRjaFsxXS5zdGFydHNXaXRoKCcuJykpIHtcbiAgICAgICAgaW1wb3J0cy5wdXNoKG1hdGNoWzFdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIFsuLi5uZXcgU2V0KGltcG9ydHMpXTtcbiAgfVxuICBcbiAgcHJpdmF0ZSBnZXRKZXN0VmVyc2lvbigpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBwYWNrYWdlSnNvblBhdGggPSBwYXRoLmpvaW4ocHJvY2Vzcy5jd2QoKSwgJ3BhY2thZ2UuanNvbicpO1xuICAgICAgY29uc3QgcGFja2FnZUpzb24gPSBKU09OLnBhcnNlKGZzLnJlYWRGaWxlU3luYyhwYWNrYWdlSnNvblBhdGgsICd1dGYtOCcpKTtcbiAgICAgIHJldHVybiBwYWNrYWdlSnNvbi5kZXZEZXBlbmRlbmNpZXM/Lmplc3QgfHwgcGFja2FnZUpzb24uZGVwZW5kZW5jaWVzPy5qZXN0O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxufSJdLCJ2ZXJzaW9uIjozfQ==