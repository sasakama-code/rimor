{"file":"/Users/sasakama/Projects/Rimor/test/cli/commands/analyze-ai-json.test.helper.ts","mappings":"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","names":[],"sources":["/Users/sasakama/Projects/Rimor/test/cli/commands/analyze-ai-json.test.helper.ts"],"sourcesContent":["/**\n * AI JSON Command テスト用ヘルパー\n * 共通のDIコンテナセットアップとモック化を提供\n */\n\nimport { Container } from 'inversify';\nimport { TYPES } from '../../../src/container';\nimport { CLISecurity } from '../../../src/security/CLISecurity';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\n/**\n * テスト用DIコンテナを作成\n */\nexport function createTestContainer(): Container {\n  const testContainer = new Container();\n  \n  // AnalysisEngine のモック\n  testContainer.bind(TYPES.AnalysisEngine).toConstantValue({\n    analyze: jest.fn().mockResolvedValue({\n      projectPath: '',\n      issues: [\n        {\n          file: 'test.ts',\n          line: 1,\n          message: 'テスト用のissue',\n          severity: 'medium'\n        }\n      ],\n      totalFiles: 1,\n      analysisTime: 100,\n      cacheHitRate: 0\n    })\n  });\n  \n  // Reporter のモック\n  testContainer.bind(TYPES.Reporter).toConstantValue({\n    generateAnalysisReport: jest.fn().mockResolvedValue({\n      success: true,\n      outputPath: 'test-report.html',\n      content: 'Test report content'\n    }),\n    generateCombinedReport: jest.fn().mockResolvedValue({\n      success: true,\n      outputPath: 'test-report.html', \n      content: 'Test report content'\n    }),\n    printToConsole: jest.fn()\n  });\n  \n  // SecurityAuditor のモック\n  testContainer.bind(TYPES.SecurityAuditor).toConstantValue({\n    audit: jest.fn().mockResolvedValue(null)\n  });\n  \n  // PluginManager のモック\n  testContainer.bind(TYPES.PluginManager).toConstantValue({\n    register: jest.fn(),\n    getAll: jest.fn().mockReturnValue([])\n  });\n  \n  return testContainer;\n}\n\n/**\n * テスト用CLISecurityモックを作成\n */\nexport function createMockCliSecurity(): CLISecurity {\n  return {\n    validateAllArguments: jest.fn().mockReturnValue({\n      isValid: true,\n      allErrors: [],\n      allWarnings: [],\n      allSecurityIssues: [],\n      sanitizedArgs: {\n        path: null, // オリジナルのpathを使用\n        format: null // オリジナルのformatを使用\n      },\n      path: { isValid: true, sanitizedValue: '', errors: [], warnings: [], securityIssues: [] },\n      format: { isValid: true, sanitizedValue: '', errors: [], warnings: [], securityIssues: [] },\n      outputFile: { isValid: true, sanitizedValue: '', errors: [], warnings: [], securityIssues: [] }\n    })\n  } as any;\n}\n\n/**\n * テスト用のプロジェクト作成ヘルパー\n */\nexport function createTestProject(baseDir: string, projectName: string = 'test-project'): string {\n  const projectDir = path.join(baseDir, projectName);\n  fs.mkdirSync(projectDir, { recursive: true });\n  \n  // package.json\n  fs.writeFileSync(\n    path.join(projectDir, 'package.json'),\n    JSON.stringify({\n      name: projectName,\n      version: '1.0.0',\n      devDependencies: {\n        jest: '^27.0.0'\n      }\n    }, null, 2)\n  );\n  \n  // ソースファイル\n  const srcDir = path.join(projectDir, 'src');\n  fs.mkdirSync(srcDir, { recursive: true });\n  \n  fs.writeFileSync(\n    path.join(srcDir, 'index.ts'),\n    `export function add(a: number, b: number): number {\n  return a + b;\n}\n\nexport function multiply(a: number, b: number): number {\n  return a * b;\n}`\n  );\n  \n  // テストファイル\n  const testDir = path.join(projectDir, 'test');\n  fs.mkdirSync(testDir, { recursive: true });\n  \n  fs.writeFileSync(\n    path.join(testDir, 'index.test.ts'),\n    `import { add } from '../src/index';\n\ndescribe('add', () => {\n  it('should add two numbers', () => {\n    // Missing assertion\n    const result = add(1, 2);\n  });\n});`\n  );\n  \n  return projectDir;\n}\n\n/**\n * process.exitのモックSpyを作成\n */\nexport function createProcessExitSpy() {\n  return jest.spyOn(process, 'exit').mockImplementation((code?: string | number | null) => {\n    // テスト環境では実際に終了せず、エラーを投げる\n    throw new Error(`Process.exit called with code ${code}`);\n  });\n}\n\n/**\n * 相対パスに変換してセキュリティ検証を回避\n */\nexport function getRelativePath(absolutePath: string): string {\n  return path.relative(process.cwd(), absolutePath);\n}"],"version":3}