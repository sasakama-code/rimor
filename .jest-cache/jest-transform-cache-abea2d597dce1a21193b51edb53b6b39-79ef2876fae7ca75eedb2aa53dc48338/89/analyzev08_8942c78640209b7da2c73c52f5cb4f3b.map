{"file":"/Users/sasakama/Projects/Rimor/src/cli/commands/analyze-v0.8.ts","mappings":"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","names":[],"sources":["/Users/sasakama/Projects/Rimor/src/cli/commands/analyze-v0.8.ts"],"sourcesContent":["/**\n * Analyze Command v0.8.0\n * Context Engineering対応の新しい分析コマンド\n */\n\nimport { container, initializeContainer, TYPES } from '../../container';\nimport { IAnalysisEngine } from '../../core/interfaces/IAnalysisEngine';\nimport { IReporter, ReportFormat, ReportOptions } from '../../core/interfaces/IReporter';\nimport { ISecurityAuditor } from '../../core/interfaces/ISecurityAuditor';\nimport { OutputFormatter } from '../output';\nimport { errorHandler } from '../../utils/errorHandler';\nimport { cleanupManager } from '../../utils/cleanupManager';\nimport { CLISecurity, DEFAULT_CLI_SECURITY_LIMITS } from '../../security/CLISecurity';\nimport { PathSecurity } from '../../utils/pathSecurity';\nimport {\n  AIJsonOutput,\n  AIRisk,\n  AnalysisResultWithPlugins,\n  PluginResult,\n  Detection,\n  TaintFlowData,\n  TaintSummaryData,\n  convertToAIJson\n} from './analyze-types';\nimport { Issue, TaintAnalysisResult, TaintFlow, ProjectAnalysisResult } from '../../core/types';\nimport { TaintLevel } from '../../core/types/analysis-types';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nexport interface AnalyzeOptions {\n  verbose?: boolean;\n  path: string;\n  format?: 'text' | 'json' | 'markdown' | 'html' | 'ai-json';\n  \n  // v0.8.0 新オプション\n  outputJson?: string;      // JSON出力先ファイル\n  outputMarkdown?: string;  // Markdown出力先ファイル\n  outputHtml?: string;      // HTML出力先ファイル\n  outputAiJson?: string;    // AI JSON出力先ファイル (Issue #58)\n  annotate?: boolean;       // インラインアノテーション生成\n  annotateFormat?: 'inline' | 'block';  // アノテーション形式\n  annotateOutput?: string;  // アノテーション出力先ディレクトリ\n  preview?: boolean;        // アノテーションプレビューモード\n  \n  // 既存オプション\n  parallel?: boolean;\n  batchSize?: number;\n  concurrency?: number;\n  cache?: boolean;\n  clearCache?: boolean;\n  showCacheStats?: boolean;\n  performance?: boolean;\n  showPerformanceReport?: boolean;\n  \n  // v0.8.0 追加オプション\n  severity?: string[];      // フィルタする重要度\n  includeDetails?: boolean; // 詳細情報を含む\n  includeRecommendations?: boolean; // 推奨事項を含む\n}\n\nexport class AnalyzeCommandV8 {\n  private cliSecurity: CLISecurity;\n  private container: typeof container;\n  private generatedHtmlPath?: string; // HTMLレポートパスを保持\n\n  constructor(customContainer?: typeof container, customCliSecurity?: CLISecurity) {\n    this.cliSecurity = customCliSecurity || new CLISecurity(process.cwd(), DEFAULT_CLI_SECURITY_LIMITS);\n    this.container = customContainer || initializeContainer();\n  }\n  \n  async execute(options: AnalyzeOptions): Promise<void> {\n    // CLI引数の検証\n    const cliValidation = this.cliSecurity.validateAllArguments({\n      path: options.path,\n      format: options.format,\n      outputFile: options.outputJson || options.outputMarkdown || options.outputHtml\n    });\n\n    // セキュリティ問題への対応\n    if (cliValidation.allSecurityIssues.length > 0) {\n      console.error(await OutputFormatter.error('🛡️  セキュリティ問題を検出しました:'));\n      for (const issue of cliValidation.allSecurityIssues) {\n        console.error(await OutputFormatter.error(`  - ${issue}`));\n      }\n    }\n\n    // エラーがある場合は実行停止\n    if (!cliValidation.isValid) {\n      console.error(await OutputFormatter.error('❌ CLI引数の検証に失敗しました:'));\n      for (const error of cliValidation.allErrors) {\n        console.error(await OutputFormatter.error(`  - ${error}`));\n      }\n      process.exit(1);\n    }\n\n    // 警告の表示\n    if (cliValidation.allWarnings.length > 0) {\n      console.warn(await OutputFormatter.warning('⚠️  以下の警告があります:'));\n      for (const warning of cliValidation.allWarnings) {\n        console.warn(await OutputFormatter.warning(`  - ${warning}`));\n      }\n    }\n\n    // サニタイズされた引数を使用\n    const sanitizedOptions: AnalyzeOptions = {\n      ...options,\n      path: cliValidation.sanitizedArgs.path || options.path,\n      format: (cliValidation.sanitizedArgs.format || options.format) as AnalyzeOptions['format']\n    };\n\n    // クリーンアップ実行\n    await cleanupManager.performStartupCleanup();\n    \n    try {\n      const targetPath = path.resolve(sanitizedOptions.path);\n      \n      // パスの存在確認\n      if (!fs.existsSync(targetPath)) {\n        console.error(await OutputFormatter.error(`指定されたパスが存在しません: ${targetPath}`));\n        process.exit(1);\n      }\n      \n      // DIコンテナからサービスを取得\n      const analysisEngine = this.container.get<IAnalysisEngine>(TYPES.AnalysisEngine);\n      const reporter = this.container.get<IReporter>(TYPES.Reporter);\n      const securityAuditor = this.container.get<ISecurityAuditor>(TYPES.SecurityAuditor);\n      \n      // 初期化\n      if ('initialize' in reporter && typeof (reporter as Record<string, unknown>).initialize === 'function') {\n        await (reporter as { initialize(): Promise<void> }).initialize();\n      }\n      \n      // 進行状況の表示（PIIマスキング適用）\n      if (!sanitizedOptions.outputJson && !sanitizedOptions.outputMarkdown && !sanitizedOptions.outputHtml && sanitizedOptions.format !== 'json') {\n        console.log(await OutputFormatter.header(\"Rimor v0.8.0 - Context Engineering\"));\n        const maskedPath = PathSecurity.toRelativeOrMasked(targetPath);\n        console.log(await OutputFormatter.info(`分析対象: ${maskedPath}`));\n        \n        if (sanitizedOptions.verbose) {\n          console.log(await OutputFormatter.info(\"分析モード: v0.8.0 (DI Container + Context Engineering)\"));\n        }\n      }\n      \n      // 分析実行\n      const analysisResult = await analysisEngine.analyze(targetPath);\n      \n      // セキュリティ監査実行（オプション）\n      let securityResult = null;\n      if (options.includeDetails) {\n        securityResult = await securityAuditor.audit(targetPath);\n      }\n      \n      // アノテーション生成モード\n      if (sanitizedOptions.annotate) {\n        await this.generateAnnotations(analysisResult, reporter, sanitizedOptions);\n        return;\n      }\n      \n      // JSON出力\n      if (sanitizedOptions.outputJson) {\n        const reportOptions: ReportOptions = {\n          format: ReportFormat.JSON,\n          outputPath: sanitizedOptions.outputJson,\n          includeDetails: sanitizedOptions.includeDetails,\n          includeRecommendations: sanitizedOptions.includeRecommendations\n        };\n        \n        let result;\n        if (securityResult) {\n          result = await reporter.generateCombinedReport!(\n            analysisResult,\n            securityResult,\n            reportOptions\n          );\n        } else {\n          result = await reporter.generateAnalysisReport(analysisResult, reportOptions);\n        }\n        \n        if (result.success) {\n          console.log(await OutputFormatter.success(`JSONレポートを生成しました: ${result.outputPath}`));\n        } else {\n          console.error(await OutputFormatter.error(`JSONレポート生成に失敗しました: ${result.error}`));\n        }\n      }\n      \n      // Markdown出力\n      if (sanitizedOptions.outputMarkdown) {\n        const reportOptions: ReportOptions = {\n          format: ReportFormat.MARKDOWN,\n          outputPath: sanitizedOptions.outputMarkdown,\n          includeDetails: sanitizedOptions.includeDetails,\n          includeSummary: true,\n          includeRecommendations: sanitizedOptions.includeRecommendations\n        };\n        \n        let result;\n        if (securityResult) {\n          result = await reporter.generateCombinedReport!(\n            analysisResult,\n            securityResult,\n            reportOptions\n          );\n        } else {\n          result = await reporter.generateAnalysisReport(analysisResult, reportOptions);\n        }\n        \n        if (result.success) {\n          console.log(await OutputFormatter.success(`Markdownレポートを生成しました: ${result.outputPath}`));\n        } else {\n          console.error(await OutputFormatter.error(`Markdownレポート生成に失敗しました: ${result.error}`));\n        }\n      }\n      \n      // HTML出力\n      if (sanitizedOptions.outputHtml) {\n        const reportOptions: ReportOptions = {\n          format: ReportFormat.HTML,\n          outputPath: sanitizedOptions.outputHtml,\n          includeDetails: sanitizedOptions.includeDetails,\n          includeSummary: true,\n          includeRecommendations: sanitizedOptions.includeRecommendations\n        };\n        \n        let result;\n        if (securityResult) {\n          result = await reporter.generateCombinedReport!(\n            analysisResult,\n            securityResult,\n            reportOptions\n          );\n        } else {\n          result = await reporter.generateAnalysisReport(analysisResult, reportOptions);\n        }\n        \n        if (result.success) {\n          // HTMLレポートパスを保存（AI JSON生成時に使用）\n          this.generatedHtmlPath = result.outputPath;\n          console.log(await OutputFormatter.success(`HTMLレポートを生成しました: ${result.outputPath}`));\n        } else {\n          console.error(await OutputFormatter.error(`HTMLレポート生成に失敗しました: ${result.error}`));\n        }\n      }\n      \n      // AI JSON出力 (Issue #58)\n      if (sanitizedOptions.format === 'ai-json' || sanitizedOptions.outputAiJson) {\n        await this.generateAIJson(analysisResult, sanitizedOptions);\n        return;\n      }\n      \n      // デフォルト出力（コンソール）\n      if (!sanitizedOptions.outputJson && !sanitizedOptions.outputMarkdown && !sanitizedOptions.outputHtml) {\n        const format = sanitizedOptions.format || 'text';\n        const reportOptions: ReportOptions = {\n          format: format === 'text' ? ReportFormat.TEXT : \n                  format === 'json' ? ReportFormat.JSON :\n                  format === 'markdown' ? ReportFormat.MARKDOWN :\n                  ReportFormat.TEXT,\n          includeDetails: sanitizedOptions.includeDetails,\n          includeSummary: true,\n          includeRecommendations: sanitizedOptions.includeRecommendations\n        };\n        \n        let result;\n        if (securityResult) {\n          result = await reporter.generateCombinedReport!(\n            analysisResult,\n            securityResult,\n            reportOptions\n          );\n        } else {\n          result = await reporter.generateAnalysisReport(analysisResult, reportOptions);\n        }\n        \n        if (result.success && result.content) {\n          // JSON形式の場合は直接出力（フォーマッターを通さない）\n          if (sanitizedOptions.format === 'json') {\n            console.log(result.content);\n          } else {\n            reporter.printToConsole(result.content);\n          }\n        } else if (!result.success) {\n          console.error(await OutputFormatter.error(`レポート生成に失敗しました: ${result.error}`));\n        }\n      }\n      \n      // 終了コード設定\n      if (analysisResult.issues.length > 0) {\n        process.exit(1);\n      }\n      \n    } catch (error) {\n      console.error(\"Original error:\", error);\n      const errorInfo = errorHandler.handleError(\n        error,\n        undefined,\n        \"分析中にエラーが発生しました\"\n      );\n      console.error(await OutputFormatter.error(errorInfo.message));\n      process.exit(1);\n    }\n  }\n  \n  /**\n   * AI JSON生成 (Issue #58)\n   * UnifiedAnalysisResultをAI向けJSON形式に変換して出力\n   */\n  private async generateAIJson(\n    analysisResult: AnalysisResultWithPlugins,\n    options: AnalyzeOptions\n  ): Promise<void> {\n    try {\n      // 簡易実装: 分析結果から直接AI JSONを生成\n      const issueCount = analysisResult?.issues?.length || 0;\n      const score = issueCount === 0 ? 100 : Math.max(0, 100 - issueCount * 10);\n      const grade = score >= 90 ? 'A' : score >= 80 ? 'B' : score >= 70 ? 'C' : score >= 60 ? 'D' : 'F';\n      \n      const aiJson: AIJsonOutput = {\n        overallAssessment: `プロジェクト品質評価結果:\\n総合スコア: ${score}/100\\nグレード: ${grade}\\n\\n検出された問題: ${issueCount}件`,\n        keyRisks: (analysisResult?.issues?.slice(0, 10).map((issue) => {\n          const risk: AIRisk = {\n            problem: issue.message || '問題が検出されました',\n            riskLevel: this.mapSeverityToRiskLevel(issue.severity),\n            context: {\n              filePath: issue.file || 'unknown',\n              codeSnippet: '',\n              startLine: issue.line || 0,\n              endLine: issue.line || 0\n            },\n            suggestedAction: {\n              type: 'ADD_MISSING_TEST',\n              description: 'テストを追加してください',\n              example: ''\n            }\n          };\n          return risk;\n        }) || []) as AIRisk[],\n        fullReportUrl: options.outputHtml || '.rimor/reports/index.html'\n      };\n      \n      // 出力\n      if (options.outputAiJson) {\n        const outputPath = path.resolve(options.outputAiJson);\n        const outputDir = path.dirname(outputPath);\n        \n        if (!fs.existsSync(outputDir)) {\n          fs.mkdirSync(outputDir, { recursive: true });\n        }\n        \n        fs.writeFileSync(outputPath, JSON.stringify(aiJson, null, 2));\n        console.log(await OutputFormatter.success(`AI JSONレポートを生成しました: ${outputPath}`));\n      } else {\n        // コンソール出力\n        console.log(JSON.stringify(aiJson, null, 2));\n      }\n    } catch (error) {\n      // エラーの詳細を出力\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      console.error(await OutputFormatter.error(`AI JSON生成に失敗しました: ${errorMessage}`));\n      \n      // スタックトレースも出力（verboseモード時）\n      if (options.verbose && error instanceof Error) {\n        console.error('詳細:', error.stack);\n      }\n      \n      // エラーコード1で終了\n      process.exit(1);\n    }\n  }\n  \n  /**\n   * アノテーション生成処理\n   */\n  private async generateAnnotations(\n    analysisResult: AnalysisResultWithPlugins,\n    reporter: IReporter & { generateAnnotations?: Function; printToConsole?: Function },\n    options: AnalyzeOptions\n  ): Promise<void> {\n    // StructuredReporterImplのgenerateAnnotationsメソッドを使用\n    if ('generateAnnotations' in reporter) {\n      const annotationOptions = {\n        outputDir: options.annotateOutput,\n        overwrite: false,\n        preview: options.preview,\n        format: options.annotateFormat || 'inline',\n        includeDataFlow: options.includeDetails\n      };\n      \n      const result = await (reporter.generateAnnotations as Function)(\n        analysisResult,\n        annotationOptions\n      );\n      \n      if (result.success) {\n        if (options.preview) {\n          console.log(await OutputFormatter.header(\"アノテーションプレビュー\"));\n          if (reporter.printToConsole) {\n            reporter.printToConsole(result.content!);\n          }\n        } else {\n          console.log(await OutputFormatter.success(\"アノテーションを生成しました\"));\n          if (reporter.printToConsole) {\n            reporter.printToConsole(result.content!);\n          }\n        }\n      } else {\n        console.error(await OutputFormatter.error(`アノテーション生成に失敗しました: ${result.error}`));\n      }\n    } else {\n      console.error(await OutputFormatter.error(\"このバージョンのReporterはアノテーション生成をサポートしていません\"));\n    }\n  }\n  \n  /**\n   * Taint解析結果を取得\n   * @param targetPath 分析対象パス\n   * @param analysisResult 既存の分析結果\n   * @returns TaintAnalysisResult\n   */\n  private async getTaintAnalysisResult(targetPath: string, analysisResult: AnalysisResultWithPlugins): Promise<TaintAnalysisResult> {\n    try {\n      // 既存の分析結果からTaint関連の情報を抽出\n      if (analysisResult?.pluginResults?.['taint-analysis']) {\n        // 既にTaint解析が実行されている場合はその結果を使用\n        return this.convertToTaintAnalysisResult(analysisResult.pluginResults['taint-analysis']);\n      }\n      \n      // 分析結果からissuesを基にTaintAnalysisResultを生成\n      // 実際のTaint解析は重いため、既存の分析結果から変換する\n      if (analysisResult?.issues && Array.isArray(analysisResult.issues)) {\n        return this.convertIssuesToTaintResult(analysisResult.issues);\n      }\n      \n      // フォールバック: デフォルト値を返す\n      return this.getDefaultTaintResult();\n      \n    } catch (error) {\n      // エラー時はフォールバック\n      console.warn('Taint解析結果の取得に失敗しました。デフォルト値を使用します。', error);\n      return this.getDefaultTaintResult();\n    }\n  }\n  \n  /**\n   * デフォルトのTaintAnalysisResultを返す\n   */\n  private getDefaultTaintResult(): TaintAnalysisResult {\n    return {\n      flows: [],\n      summary: {\n        totalFlows: 0,\n        criticalFlows: 0,\n        highFlows: 0,\n        mediumFlows: 0,\n        lowFlows: 0,\n        sourcesCount: 0,\n        sinksCount: 0,\n        sanitizersCount: 0\n      },\n      recommendations: []\n    };\n  }\n  \n  /**\n   * 分析結果のissuesをTaintAnalysisResult形式に変換\n   */\n  private convertIssuesToTaintResult(issues: Issue[]): TaintAnalysisResult {\n    // セキュリティ関連のissueをTaintフローとして扱う\n    const securityIssues = issues.filter(issue => \n      issue.type?.includes('security') || \n      issue.type?.includes('taint') ||\n      issue.type?.includes('injection') ||\n      issue.type?.includes('xss') ||\n      issue.type?.includes('sql') ||\n      issue.severity === 'critical' ||\n      issue.severity === 'high'\n    );\n    \n    const flows: TaintFlow[] = securityIssues.map((issue, index) => ({\n      id: `flow-${index}`,\n      source: 'user-input',\n      sink: this.inferSinkFromIssue(issue),\n      taintLevel: this.mapSeverityToLevel(issue.severity) as TaintLevel,\n      path: [],\n      confidence: 0.8,\n      location: {\n        file: issue.file || 'unknown',\n        line: issue.line || 0\n      }\n    }));\n    \n    const summary = {\n      totalFlows: flows.length,\n      criticalFlows: flows.filter(f => f.taintLevel === 'critical').length,\n      highFlows: flows.filter(f => f.taintLevel === 'high').length,\n      mediumFlows: flows.filter(f => f.taintLevel === 'medium').length,\n      lowFlows: flows.filter(f => f.taintLevel === 'low').length,\n      sourcesCount: flows.length > 0 ? 1 : 0,\n      sinksCount: new Set(flows.map(f => f.sink)).size,\n      sanitizersCount: 0\n    };\n    \n    return { flows, summary, recommendations: [] } as TaintAnalysisResult;\n  }\n  \n  /**\n   * issueからsinkのタイプを推論\n   */\n  private inferSinkFromIssue(issue: Issue): string {\n    const type = issue.type?.toLowerCase() || '';\n    if (type.includes('sql')) return 'database';\n    if (type.includes('xss')) return 'html-output';\n    if (type.includes('command')) return 'shell-command';\n    if (type.includes('file')) return 'file-system';\n    return 'unknown-sink';\n  }\n  \n  /**\n   * プラグイン結果をTaintAnalysisResult形式に変換\n   */\n  private convertToTaintAnalysisResult(pluginResults: PluginResult): TaintAnalysisResult {\n    // プラグイン結果からTaintAnalysisResult形式への変換\n    const flows: TaintFlow[] = pluginResults.detections?.map((detection) => ({\n      id: detection.patternId,\n      source: detection.metadata?.source || 'unknown',\n      sink: detection.metadata?.sink || 'unknown',\n      taintLevel: this.mapSeverityToLevel(detection.severity) as TaintLevel,\n      path: [],\n      confidence: 0.8,\n      location: detection.location\n    })) || [];\n    \n    const summary = {\n      totalFlows: flows.length,\n      criticalFlows: flows.filter((f) => f.taintLevel === 'critical').length,\n      highFlows: flows.filter((f) => f.taintLevel === 'high').length,\n      mediumFlows: flows.filter((f) => f.taintLevel === 'medium').length,\n      lowFlows: flows.filter((f) => f.taintLevel === 'low').length,\n      sourcesCount: new Set(flows.map((f) => f.source)).size,\n      sinksCount: new Set(flows.map((f) => f.sink)).size,\n      sanitizersCount: 0\n    };\n    \n    return { flows, summary, recommendations: [] } as TaintAnalysisResult;\n  }\n  \n  /**\n   * プロジェクト解析結果をTaintAnalysisResult形式に変換\n   */\n  private convertProjectAnalysisToTaintResult(projectAnalysis: ProjectAnalysisResult): TaintAnalysisResult {\n    // プロジェクト解析結果からの変換ロジック\n    const flows: TaintFlow[] = projectAnalysis.issues?.map((issue) => ({\n      id: `flow-${Math.random()}`,\n      source: 'user-input',\n      sink: 'database',\n      taintLevel: this.mapSeverityToLevel(issue.severity) as TaintLevel,\n      path: [],\n      confidence: 0.8\n    })) || [];\n    \n    const summary = {\n      totalFlows: flows.length,\n      criticalFlows: flows.filter((f) => f.taintLevel === 'critical').length,\n      highFlows: flows.filter((f) => f.taintLevel === 'high').length,\n      mediumFlows: flows.filter((f) => f.taintLevel === 'medium').length,\n      lowFlows: flows.filter((f) => f.taintLevel === 'low').length,\n      sourcesCount: 0,\n      sinksCount: 0,\n      sanitizersCount: 0\n    };\n    \n    return { flows, summary, recommendations: [] } as TaintAnalysisResult;\n  }\n  \n  /**\n   * 重要度レベルのマッピング\n   */\n  private mapSeverityToLevel(severity?: string): TaintLevel {\n    const mapping: Record<string, string> = {\n      'error': 'critical',\n      'critical': 'critical',\n      'high': 'high',\n      'warning': 'medium',\n      'medium': 'medium',\n      'info': 'low',\n      'low': 'low'\n    };\n    const key = severity?.toLowerCase();\n    return (key && mapping[key] ? mapping[key] : 'medium') as TaintLevel;\n  }\n\n  /**\n   * Severityをリスクレベルにマッピング\n   */\n  private mapSeverityToRiskLevel(severity?: string): 'CRITICAL' | 'HIGH' | 'MEDIUM' | 'LOW' {\n    switch (severity?.toLowerCase()) {\n      case 'error':\n      case 'critical':\n        return 'CRITICAL';\n      case 'high':\n      case 'warning':\n        return 'HIGH';\n      case 'medium':\n        return 'MEDIUM';\n      case 'info':\n      case 'low':\n      default:\n        return 'LOW';\n    }\n  }\n}"],"version":3}