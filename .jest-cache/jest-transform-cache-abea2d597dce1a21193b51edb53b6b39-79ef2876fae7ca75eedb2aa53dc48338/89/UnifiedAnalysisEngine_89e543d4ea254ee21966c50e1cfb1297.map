{"file":"/Users/sasakama/Projects/Rimor/src/core/UnifiedAnalysisEngine.ts","mappings":"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","names":[],"sources":["/Users/sasakama/Projects/Rimor/src/core/UnifiedAnalysisEngine.ts"],"sourcesContent":["import { \n  IPlugin, \n  ITestQualityPlugin, \n  Issue, \n  ProjectContext,\n  TestFile,\n  DetectionResult,\n  QualityScore,\n  Improvement,\n  PluginResult\n} from './types';\nimport { UnifiedPluginManager } from './UnifiedPluginManager';\nimport { findTestFiles } from './fileDiscovery';\nimport { debug } from '../utils/debug';\nimport * as fs from 'fs/promises';\nimport * as path from 'path';\n\n/**\n * UnifiedAnalysisEngine\n * \n * analyzer.tsとanalyzerExtended.tsの機能を統合した統一分析エンジン\n * SOLID原則に準拠した設計\n * \n * @version 0.9.0\n */\n\n// 定数定義（マジックナンバーの除去）\nconst DEFAULT_TIMEOUT_MS = 30000;\nconst SCORE_THRESHOLD = {\n  EXCELLENT: 90,\n  GOOD: 70,\n  FAIR: 50\n} as const;\nconst MAX_DEPTH = 20;\nconst LOW_QUALITY_CONFIDENCE_THRESHOLD = 0.5;\nconst PRIORITY_ORDER: Record<string, number> = {\n  critical: 0,\n  high: 1,\n  medium: 2,\n  low: 3\n} as const;\n\n// analyzer.tsのAnalysisResult型\nexport interface BasicAnalysisResult {\n  totalFiles: number;\n  issues: Issue[];\n  executionTime: number;\n  errors?: Array<{ pluginName: string; error: string }>;\n}\n\n// analyzerExtended.tsのExtendedAnalysisResult型\nexport interface ExtendedAnalysisResult {\n  filePath: string;\n  qualityAnalysis: QualityAnalysisResult;\n  aggregatedScore: QualityScore;\n  recommendations: Improvement[];\n  executionTime: number;\n}\n\n// 統合分析結果型\nexport interface UnifiedAnalysisResult {\n  basicAnalysis: BasicAnalysisResult;\n  qualityAnalysis?: QualityAnalysisResult;\n  combinedScore?: QualityScore;\n  allIssues: Issue[];\n}\n\n// バッチ分析サマリー型\nexport interface BatchAnalysisSummary {\n  totalFiles: number;\n  averageScore: number;\n  scoreDistribution: {\n    excellent: number;\n    good: number;\n    fair: number;\n    poor: number;\n  };\n  files: ExtendedAnalysisResult[];\n  executionTime: number;\n}\n\n// 品質分析結果型\nexport interface QualityAnalysisResult {\n  pluginResults: PluginResult[];\n  executionStats: {\n    totalPlugins: number;\n    successfulPlugins: number;\n    failedPlugins: number;\n    totalExecutionTime: number;\n  };\n}\n\n// 設定オプション型\nexport interface AnalysisOptions {\n  timeout?: number;\n  skipPlugins?: string[];\n  parallelExecution?: boolean;\n}\n\n/**\n * 統一分析エンジンクラス\n */\nexport class UnifiedAnalysisEngine {\n  private legacyPluginManager: UnifiedPluginManager;\n  private qualityPluginManager: UnifiedPluginManager;\n  private configuration: AnalysisOptions;\n  private customPlugins: Map<string, IPlugin | ITestQualityPlugin>;\n\n  constructor() {\n    this.legacyPluginManager = new UnifiedPluginManager();\n    this.qualityPluginManager = new UnifiedPluginManager();\n    this.customPlugins = new Map();\n    this.configuration = {\n      timeout: DEFAULT_TIMEOUT_MS,\n      skipPlugins: [],\n      parallelExecution: false\n    };\n  }\n\n  /**\n   * レガシープラグイン（IPlugin）の登録\n   */\n  registerPlugin(plugin: IPlugin): void {\n    this.legacyPluginManager.register(plugin);\n  }\n\n  /**\n   * 品質プラグイン（ITestQualityPlugin）の登録\n   */\n  registerQualityPlugin(plugin: ITestQualityPlugin): void {\n    this.qualityPluginManager.registerPlugin(plugin);\n  }\n\n  /**\n   * カスタムプラグインの登録（拡張性のため）\n   */\n  registerCustomPlugin(plugin: IPlugin | ITestQualityPlugin): void {\n    // 開放閉鎖原則に従い、新しいプラグインタイプを追加可能にする\n    if (this.isValidPlugin(plugin)) {\n      // ITestQualityPluginの場合はidを持つ\n      const pluginId = ('id' in plugin ? plugin.id : undefined) || plugin.name || `custom-${Date.now()}`;\n      this.customPlugins.set(pluginId, plugin);\n      debug.info(`Custom plugin registered: ${pluginId}`);\n    } else {\n      debug.warn('Invalid plugin structure');\n    }\n  }\n\n  /**\n   * プラグインの妥当性チェック\n   */\n  private isValidPlugin(plugin: unknown): boolean {\n    if (!plugin || typeof plugin !== 'object') {\n      return false;\n    }\n    \n    const p = plugin as Record<string, unknown>;\n    return (typeof p.analyze === 'function' || \n            typeof p.detectPatterns === 'function');\n  }\n\n  /**\n   * テストファイルの収集（Extract Method - Martin Fowler）\n   */\n  private async collectTestFiles(targetPath: string): Promise<string[]> {\n    const testFiles: string[] = [];\n    for await (const file of findTestFiles(targetPath)) {\n      testFiles.push(file);\n    }\n    \n    // ファイルが見つからない場合は、targetPath自体を対象とする\n    if (testFiles.length === 0) {\n      testFiles.push(targetPath);\n    }\n    \n    return testFiles;\n  }\n\n  /**\n   * プラグインを実行すべきか判定（Extract Method）\n   */\n  private shouldRunPlugin(plugin: IPlugin): boolean {\n    return !this.configuration.skipPlugins?.includes(plugin.name);\n  }\n\n  /**\n   * プラグインの安全な実行（Extract Method）\n   */\n  private async runPluginSafely(plugin: IPlugin, file: string): Promise<{ issues: Issue[], error: { pluginName: string; error: string } | null }> {\n    try {\n      const issues = await this.runWithTimeout(\n        plugin.analyze(file),\n        this.configuration.timeout || DEFAULT_TIMEOUT_MS\n      );\n      return { issues, error: null };\n    } catch (error) {\n      const errorInfo = this.createErrorInfo(plugin.name, error);\n      debug.warn(`Plugin ${plugin.name} failed: ${error}`);\n      return { issues: [], error: errorInfo };\n    }\n  }\n\n  /**\n   * エラー情報の作成（Extract Method）\n   */\n  private createErrorInfo(pluginName: string, error: unknown): { pluginName: string; error: string } {\n    return {\n      pluginName,\n      error: error instanceof Error ? error.message : String(error)\n    };\n  }\n\n  /**\n   * 基本分析（analyzer.tsの機能）\n   */\n  async analyze(targetPath: string): Promise<BasicAnalysisResult> {\n    return debug.measureAsync('analyze', async () => {\n      debug.info(`Starting basic analysis of: ${targetPath}`);\n      \n      const startTime = Date.now();\n      const allIssues: Issue[] = [];\n      const errors: Array<{ pluginName: string; error: string }> = [];\n      let fileCount = 0;\n\n      try {\n        const testFiles = await this.collectTestFiles(targetPath);\n        fileCount = testFiles.length;\n\n        for (const file of testFiles) {\n          const results = await this.runPluginsForFile(file);\n          allIssues.push(...results.issues);\n          errors.push(...results.errors);\n        }\n      } catch (error) {\n        debug.error(`Analysis failed: ${error}`);\n      }\n\n      const executionTime = Date.now() - startTime;\n      \n      return {\n        totalFiles: fileCount,\n        issues: allIssues,\n        executionTime,\n        errors: errors // 常にerrorsプロパティを含める（空配列でも）\n      };\n    });\n  }\n\n  /**\n   * ファイルに対してプラグインを実行（Extract Method）\n   */\n  private async runPluginsForFile(file: string): Promise<{ issues: Issue[], errors: Array<{ pluginName: string; error: string }> }> {\n    const plugins = this.legacyPluginManager.getLegacyPlugins();\n    const issues: Issue[] = [];\n    const errors: Array<{ pluginName: string; error: string }> = [];\n\n    if (this.configuration.parallelExecution) {\n      // 並列実行\n      const promises = plugins\n        .filter(plugin => this.shouldRunPlugin(plugin))\n        .map(plugin => this.runPluginSafely(plugin, file));\n      \n      const results = await Promise.all(promises);\n      for (const result of results) {\n        if (result.error) {\n          errors.push(result.error);\n        } else {\n          issues.push(...result.issues);\n        }\n      }\n    } else {\n      // シーケンシャル実行\n      for (const plugin of plugins) {\n        if (!this.shouldRunPlugin(plugin)) {\n          continue;\n        }\n        const result = await this.runPluginSafely(plugin, file);\n        if (result.error) {\n          errors.push(result.error);\n        } else {\n          issues.push(...result.issues);\n        }\n      }\n    }\n\n    return { issues, errors };\n  }\n\n  /**\n   * 品質分析（analyzerExtended.tsの機能）\n   */\n  async analyzeWithQuality(filePath: string): Promise<ExtendedAnalysisResult> {\n    const startTime = Date.now();\n    \n    // プロジェクトコンテキストの作成\n    const projectContext: ProjectContext = {\n      rootPath: path.dirname(filePath),\n      testFramework: 'jest', // 仮の値\n      language: path.extname(filePath).slice(1) as 'javascript' | 'typescript' | 'python' | 'java' | 'other'\n    };\n\n    // テストファイル情報の作成\n    let content = '';\n    try {\n      content = await fs.readFile(filePath, 'utf-8');\n    } catch (error) {\n      // ファイルが存在しない場合は空の内容を使用\n      debug.warn(`File not found: ${filePath}, using empty content`);\n    }\n    const testFile: TestFile = {\n      path: filePath,\n      content\n    };\n\n    // 品質分析の実行\n    const qualityAnalysis = await this.qualityPluginManager.analyzeFileQuality(\n      testFile,\n      projectContext,\n      this.configuration\n    );\n\n    // スコアの集約\n    const aggregatedScore = this.aggregateScores(qualityAnalysis.pluginResults);\n\n    // 改善提案の収集\n    const recommendations = this.collectRecommendations(qualityAnalysis.pluginResults);\n\n    const executionTime = Date.now() - startTime;\n\n    return {\n      filePath,\n      qualityAnalysis,\n      aggregatedScore,\n      recommendations,\n      executionTime\n    };\n  }\n\n  /**\n   * バッチ分析\n   */\n  async analyzeBatch(filePaths: string[]): Promise<BatchAnalysisSummary> {\n    const startTime = Date.now();\n    const results: ExtendedAnalysisResult[] = [];\n    \n    for (const filePath of filePaths) {\n      try {\n        const result = await this.analyzeWithQuality(filePath);\n        results.push(result);\n      } catch (error) {\n        debug.warn(`Failed to analyze ${filePath}: ${error}`);\n      }\n    }\n\n    const scores = results.map(r => r.aggregatedScore.overall);\n    const averageScore = scores.length > 0 \n      ? scores.reduce((sum, score) => sum + score, 0) / scores.length\n      : 0;\n\n    const scoreDistribution = {\n      excellent: scores.filter(s => s >= SCORE_THRESHOLD.EXCELLENT).length,\n      good: scores.filter(s => s >= SCORE_THRESHOLD.GOOD && s < SCORE_THRESHOLD.EXCELLENT).length,\n      fair: scores.filter(s => s >= SCORE_THRESHOLD.FAIR && s < SCORE_THRESHOLD.GOOD).length,\n      poor: scores.filter(s => s < SCORE_THRESHOLD.FAIR).length\n    };\n\n    const executionTime = Date.now() - startTime;\n\n    return {\n      totalFiles: filePaths.length,\n      averageScore,\n      scoreDistribution,\n      files: results,\n      executionTime\n    };\n  }\n\n  /**\n   * 統合分析（新機能）\n   */\n  async analyzeUnified(targetPath: string): Promise<UnifiedAnalysisResult> {\n    const [basicAnalysis, qualityResults] = await Promise.all([\n      this.analyze(targetPath),\n      this.analyzeAllWithQuality(targetPath)\n    ]);\n\n    const combinedScore = qualityResults.length > 0\n      ? this.aggregateScores(qualityResults.flatMap(r => r.qualityAnalysis.pluginResults))\n      : undefined;\n\n    // qualityAnalysisを必ず返す\n    const qualityAnalysis = qualityResults[0]?.qualityAnalysis || {\n      pluginResults: [],\n      executionStats: {\n        totalPlugins: 0,\n        successfulPlugins: 0,\n        failedPlugins: 0,\n        totalExecutionTime: 0\n      }\n    };\n\n    // combinedScoreを必ず返す（デフォルト値を設定）\n    const finalCombinedScore: QualityScore = combinedScore || {\n      overall: 0,\n      dimensions: { completeness: 0, correctness: 0, maintainability: 0 },\n      confidence: 0\n    };\n\n    // allIssuesにエラー情報も含める\n    const allIssues = [\n      ...basicAnalysis.issues,\n      ...this.extractIssuesFromQualityResults(qualityResults)\n    ];\n    \n    // エラーがあればissueとして追加\n    if (basicAnalysis.errors && basicAnalysis.errors.length > 0) {\n      for (const error of basicAnalysis.errors) {\n        allIssues.push({\n          type: 'error',\n          severity: 'high',\n          message: `Plugin error in ${error.pluginName}: ${error.error}`,\n          filePath: targetPath,\n          file: targetPath,\n          line: 0,\n          column: 0,\n          category: 'structure'\n        } as Issue);\n      }\n    }\n\n    return {\n      basicAnalysis,\n      qualityAnalysis,\n      combinedScore: finalCombinedScore,\n      allIssues\n    };\n  }\n\n  /**\n   * プラグイン数の取得\n   */\n  getPluginCount(): number {\n    const legacyCount = this.legacyPluginManager.getLegacyPlugins().length;\n    const qualityCount = this.qualityPluginManager.getQualityPlugins().length;\n    const customCount = this.customPlugins.size;\n    return legacyCount + qualityCount + customCount;\n  }\n\n  /**\n   * 品質プラグインの取得\n   */\n  getQualityPlugins(): ITestQualityPlugin[] {\n    return this.qualityPluginManager.getQualityPlugins();\n  }\n\n  /**\n   * 設定の適用\n   */\n  configure(options: AnalysisOptions): void {\n    this.configuration = {\n      ...this.configuration,\n      ...options\n    };\n  }\n\n  /**\n   * 現在の設定を取得\n   */\n  getConfiguration(): AnalysisOptions {\n    return { ...this.configuration };\n  }\n\n  // ===== Private Helper Methods =====\n\n  async analyzeAllWithQuality(targetPath: string): Promise<ExtendedAnalysisResult[]> {\n    const testFiles: string[] = [];\n    for await (const file of findTestFiles(targetPath)) {\n      testFiles.push(file);\n    }\n    const results: ExtendedAnalysisResult[] = [];\n\n    for (const file of testFiles) {\n      try {\n        const result = await this.analyzeWithQuality(file);\n        results.push(result);\n      } catch (error) {\n        debug.warn(`Failed to analyze ${file}: ${error}`);\n      }\n    }\n\n    return results;\n  }\n\n  aggregateScores(pluginResults: PluginResult[]): QualityScore {\n    if (pluginResults.length === 0) {\n      return {\n        overall: 0,\n        dimensions: { completeness: 0, correctness: 0, maintainability: 0 },\n        confidence: 0\n      };\n    }\n\n    const scores = pluginResults.map(r => r.qualityScore);\n    const weights = scores.map(s => s.confidence || 1);\n    const totalWeight = weights.reduce((sum, w) => sum + w, 0);\n\n    const overall = scores.reduce((sum, score, index) => \n      sum + score.overall * weights[index], 0) / totalWeight;\n\n    const dimensions = {\n      completeness: scores.reduce((sum, score, index) => \n        sum + (score.dimensions?.completeness || 0) * weights[index], 0) / totalWeight,\n      correctness: scores.reduce((sum, score, index) => \n        sum + (score.dimensions?.correctness || 0) * weights[index], 0) / totalWeight,\n      maintainability: scores.reduce((sum, score, index) => \n        sum + (score.dimensions?.maintainability || 0) * weights[index], 0) / totalWeight\n    };\n\n    return {\n      overall,\n      dimensions,\n      breakdown: {\n        completeness: dimensions.completeness,\n        correctness: dimensions.correctness,\n        maintainability: dimensions.maintainability\n      },\n      confidence: totalWeight / pluginResults.length\n    };\n  }\n\n  private collectRecommendations(pluginResults: PluginResult[]): Improvement[] {\n    return pluginResults.flatMap(r => r.improvements);\n  }\n\n  /**\n   * 推奨事項の集約\n   */\n  aggregateRecommendations(recommendations: Improvement[][]): Improvement[] {\n    const uniqueRecommendations = new Map<string, Improvement>();\n    \n    for (const group of recommendations) {\n      for (const rec of group) {\n        const key = rec.id || rec.title;\n        if (!uniqueRecommendations.has(key)) {\n          uniqueRecommendations.set(key, rec);\n        }\n      }\n    }\n    \n    return Array.from(uniqueRecommendations.values())\n      .sort((a, b) => {\n        // 優先度でソート\n        return (PRIORITY_ORDER[a.priority] || 999) - (PRIORITY_ORDER[b.priority] || 999);\n      });\n  }\n\n  private extractIssuesFromQualityResults(results: ExtendedAnalysisResult[]): Issue[] {\n    const issues: Issue[] = [];\n\n    for (const result of results) {\n      for (const pluginResult of result.qualityAnalysis.pluginResults) {\n        issues.push(...this.extractIssuesFromPatterns(pluginResult.detectionResults));\n      }\n    }\n\n    return issues;\n  }\n\n  /**\n   * パターンからIssueを抽出（Extract Method）\n   */\n  private extractIssuesFromPatterns(patterns: DetectionResult[]): Issue[] {\n    const issues: Issue[] = [];\n    \n    for (const pattern of patterns) {\n      if (this.isLowQualityPattern(pattern)) {\n        issues.push(this.createQualityIssue(pattern));\n      }\n    }\n    \n    return issues;\n  }\n\n  /**\n   * 低品質パターンかどうか判定（Extract Method）\n   */\n  private isLowQualityPattern(pattern: DetectionResult): boolean {\n    return pattern.confidence < LOW_QUALITY_CONFIDENCE_THRESHOLD && !!pattern.location;\n  }\n\n  /**\n   * 品質Issueを作成（Extract Method）\n   */\n  private createQualityIssue(pattern: DetectionResult): Issue {\n    const filePath = pattern.location?.file || '';\n    return {\n      type: 'quality',\n      severity: 'medium',\n      message: `Low quality pattern detected: ${pattern.patternName || pattern.patternId || 'unknown'}`,\n      filePath,\n      file: filePath,\n      line: pattern.location?.line || 0,\n      column: pattern.location?.column,\n      category: 'pattern'\n    } as Issue;\n  }\n\n  private async runWithTimeout<T>(promise: Promise<T>, timeout: number): Promise<T> {\n    return Promise.race([\n      promise,\n      new Promise<T>((_, reject) => \n        setTimeout(() => reject(new Error('Operation timed out')), timeout)\n      )\n    ]);\n  }\n}"],"version":3}