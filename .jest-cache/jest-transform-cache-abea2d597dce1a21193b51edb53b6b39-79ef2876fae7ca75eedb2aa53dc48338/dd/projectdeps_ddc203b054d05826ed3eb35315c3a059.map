{"file":"/Users/sasakama/Projects/Rimor/src/analyzers/dependency-analysis/project-deps.ts","mappings":"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","names":[],"sources":["/Users/sasakama/Projects/Rimor/src/analyzers/dependency-analysis/project-deps.ts"],"sourcesContent":["/**\n * ProjectDependencyAnalyzer\n * Issue #65: プロジェクトレベルの依存関係分析\n * \n * SOLID原則: 単一責任（プロジェクト依存関係のみ）\n * DRY原則: 共通ロジックを基底クラスに抽出\n * KISS原則: シンプルな分析ロジック\n */\n\nimport { ProjectDependency } from '../types';\nimport { PackageJsonConfig } from '../../core/types';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { PathSecurity } from '../../utils/pathSecurity';\n\n/**\n * プロジェクトレベルの依存関係を分析\n */\nexport class ProjectDependencyAnalyzer {\n  /**\n   * プロジェクトの依存関係を分析\n   */\n  async analyzeDependencies(projectPath: string): Promise<{\n    dependencies: ProjectDependency[];\n    devDependencies: ProjectDependency[];\n    peerDependencies?: ProjectDependency[];\n    optionalDependencies?: ProjectDependency[];\n    vulnerabilities?: string[];\n  }> {\n    const packageJsonPath = path.join(projectPath, 'package.json');\n    \n    if (!fs.existsSync(packageJsonPath)) {\n      throw new Error('package.json not found');\n    }\n\n    const packageJson = JSON.parse(\n      fs.readFileSync(packageJsonPath, 'utf-8')\n    ) as PackageJsonConfig;\n\n    const result = {\n      dependencies: this.extractDependencies(packageJson.dependencies || {}, 'production'),\n      devDependencies: this.extractDependencies(packageJson.devDependencies || {}, 'development'),\n      peerDependencies: packageJson.peerDependencies \n        ? this.extractDependencies(packageJson.peerDependencies, 'peer')\n        : undefined,\n      optionalDependencies: packageJson.optionalDependencies\n        ? this.extractDependencies(packageJson.optionalDependencies, 'optional')\n        : undefined,\n      vulnerabilities: await this.checkVulnerabilities(packageJson)\n    };\n\n    return result;\n  }\n\n  /**\n   * インストール済みパッケージのリストを取得\n   */\n  async getInstalledPackages(projectPath: string): Promise<string[]> {\n    const nodeModulesPath = path.join(projectPath, 'node_modules');\n    \n    if (!fs.existsSync(nodeModulesPath)) {\n      return [];\n    }\n\n    const items = fs.readdirSync(nodeModulesPath);\n    const packages: string[] = [];\n\n    for (const item of items) {\n      if (item.startsWith('.')) continue;\n      \n      const itemPath = path.join(nodeModulesPath, item);\n      const stat = fs.statSync(itemPath);\n      \n      if (stat.isDirectory()) {\n        if (item.startsWith('@')) {\n          // Scoped packages\n          const scopedItems = fs.readdirSync(itemPath);\n          for (const scopedItem of scopedItems) {\n            packages.push(`${item}/${scopedItem}`);\n          }\n        } else {\n          packages.push(item);\n        }\n      }\n    }\n\n    return packages;\n  }\n\n  /**\n   * 依存関係を抽出\n   */\n  private extractDependencies(deps: Record<string, string>, depType: 'production' | 'development' | 'peer' | 'optional' = 'production'): ProjectDependency[] {\n    return Object.entries(deps).map(([name, version]) => ({\n      name,\n      version,\n      type: depType,\n      usage: [] // TODO: 実際の使用状況を分析する必要がある\n    }));\n  }\n\n  /**\n   * バージョン制約のタイプを判定\n   */\n  private getVersionConstraintType(version: string): 'exact' | 'range' | 'caret' | 'tilde' | 'wildcard' {\n    if (version.startsWith('^')) return 'caret';\n    if (version.startsWith('~')) return 'tilde';\n    if (version === '*' || version === 'latest') return 'wildcard';\n    if (version.includes('-') || version.includes('>') || version.includes('<')) return 'range';\n    return 'exact';\n  }\n\n  /**\n   * 脆弱性をチェック（簡易実装）\n   */\n  private async checkVulnerabilities(packageJson: PackageJsonConfig): Promise<string[]> {\n    const vulnerabilities: string[] = [];\n    \n    // 実際の実装では、npm audit APIやnvdデータベースを使用\n    // ここでは簡易的な例として特定のパッケージをチェック\n    const knownVulnerablePackages = [\n      'vulnerable-package',\n      'old-lodash'\n    ];\n\n    const allDeps = {\n      ...packageJson.dependencies,\n      ...packageJson.devDependencies\n    };\n\n    for (const [name] of Object.entries(allDeps)) {\n      if (knownVulnerablePackages.includes(name)) {\n        vulnerabilities.push(`${name} has known vulnerabilities`);\n      }\n    }\n\n    return vulnerabilities;\n  }\n\n  /**\n   * パッケージマネージャーを検出\n   */\n  async detectPackageManager(projectPath: string): Promise<'npm' | 'yarn' | 'pnpm' | 'bun'> {\n    if (fs.existsSync(path.join(projectPath, 'bun.lockb'))) {\n      return 'bun';\n    }\n    if (fs.existsSync(path.join(projectPath, 'pnpm-lock.yaml'))) {\n      return 'pnpm';\n    }\n    if (fs.existsSync(path.join(projectPath, 'yarn.lock'))) {\n      return 'yarn';\n    }\n    if (fs.existsSync(path.join(projectPath, 'package-lock.json'))) {\n      return 'npm';\n    }\n    \n    // デフォルト\n    return 'npm';\n  }\n}"],"version":3}