a87329a484672d468c9cb6737bb9a619
"use strict";
/**
 * ProjectDependencyAnalyzer
 * Issue #65: プロジェクトレベルの依存関係分析
 *
 * SOLID原則: 単一責任（プロジェクト依存関係のみ）
 * DRY原則: 共通ロジックを基底クラスに抽出
 * KISS原則: シンプルな分析ロジック
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProjectDependencyAnalyzer = void 0;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
/**
 * プロジェクトレベルの依存関係を分析
 */
class ProjectDependencyAnalyzer {
    /**
     * プロジェクトの依存関係を分析
     */
    async analyzeDependencies(projectPath) {
        const packageJsonPath = path.join(projectPath, 'package.json');
        if (!fs.existsSync(packageJsonPath)) {
            throw new Error('package.json not found');
        }
        const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf-8'));
        const result = {
            dependencies: this.extractDependencies(packageJson.dependencies || {}, 'production'),
            devDependencies: this.extractDependencies(packageJson.devDependencies || {}, 'development'),
            peerDependencies: packageJson.peerDependencies
                ? this.extractDependencies(packageJson.peerDependencies, 'peer')
                : undefined,
            optionalDependencies: packageJson.optionalDependencies
                ? this.extractDependencies(packageJson.optionalDependencies, 'optional')
                : undefined,
            vulnerabilities: await this.checkVulnerabilities(packageJson)
        };
        return result;
    }
    /**
     * インストール済みパッケージのリストを取得
     */
    async getInstalledPackages(projectPath) {
        const nodeModulesPath = path.join(projectPath, 'node_modules');
        if (!fs.existsSync(nodeModulesPath)) {
            return [];
        }
        const items = fs.readdirSync(nodeModulesPath);
        const packages = [];
        for (const item of items) {
            if (item.startsWith('.'))
                continue;
            const itemPath = path.join(nodeModulesPath, item);
            const stat = fs.statSync(itemPath);
            if (stat.isDirectory()) {
                if (item.startsWith('@')) {
                    // Scoped packages
                    const scopedItems = fs.readdirSync(itemPath);
                    for (const scopedItem of scopedItems) {
                        packages.push(`${item}/${scopedItem}`);
                    }
                }
                else {
                    packages.push(item);
                }
            }
        }
        return packages;
    }
    /**
     * 依存関係を抽出
     */
    extractDependencies(deps, depType = 'production') {
        return Object.entries(deps).map(([name, version]) => ({
            name,
            version,
            type: depType,
            usage: [] // TODO: 実際の使用状況を分析する必要がある
        }));
    }
    /**
     * バージョン制約のタイプを判定
     */
    getVersionConstraintType(version) {
        if (version.startsWith('^'))
            return 'caret';
        if (version.startsWith('~'))
            return 'tilde';
        if (version === '*' || version === 'latest')
            return 'wildcard';
        if (version.includes('-') || version.includes('>') || version.includes('<'))
            return 'range';
        return 'exact';
    }
    /**
     * 脆弱性をチェック（簡易実装）
     */
    async checkVulnerabilities(packageJson) {
        const vulnerabilities = [];
        // 実際の実装では、npm audit APIやnvdデータベースを使用
        // ここでは簡易的な例として特定のパッケージをチェック
        const knownVulnerablePackages = [
            'vulnerable-package',
            'old-lodash'
        ];
        const allDeps = {
            ...packageJson.dependencies,
            ...packageJson.devDependencies
        };
        for (const [name] of Object.entries(allDeps)) {
            if (knownVulnerablePackages.includes(name)) {
                vulnerabilities.push(`${name} has known vulnerabilities`);
            }
        }
        return vulnerabilities;
    }
    /**
     * パッケージマネージャーを検出
     */
    async detectPackageManager(projectPath) {
        if (fs.existsSync(path.join(projectPath, 'bun.lockb'))) {
            return 'bun';
        }
        if (fs.existsSync(path.join(projectPath, 'pnpm-lock.yaml'))) {
            return 'pnpm';
        }
        if (fs.existsSync(path.join(projectPath, 'yarn.lock'))) {
            return 'yarn';
        }
        if (fs.existsSync(path.join(projectPath, 'package-lock.json'))) {
            return 'npm';
        }
        // デフォルト
        return 'npm';
    }
}
exports.ProjectDependencyAnalyzer = ProjectDependencyAnalyzer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,