{"file":"/Users/sasakama/Projects/Rimor/src/intent-analysis/IntentPatternMatcher.ts","mappings":"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","names":[],"sources":["/Users/sasakama/Projects/Rimor/src/intent-analysis/IntentPatternMatcher.ts"],"sourcesContent":["/**\n * Intent Pattern Matcher\n * v0.9.0 - テスト意図のパターンマッチング機能\n * TDD Green Phase - テストを通す最小限の実装\n * KISS原則とYAGNI原則に従って実装\n */\n\nimport { CoverageScope } from './ITestIntentAnalyzer';\nimport { ASTNode } from '../core/interfaces/IAnalysisEngine';\n\n/**\n * テストパターンタイプ\n */\nexport type TestPattern = 'happy-path' | 'error-case' | 'edge-case' | 'boundary-value' | 'unknown';\n\n/**\n * 詳細なパターンタイプ\n */\nexport type DetailedPattern = TestPattern | 'null-check' | 'empty-array' | 'null-return';\n\n/**\n * パターン識別のためのキーワード定義\n * DRY原則: 重複を避けるため定数として定義\n */\nconst PATTERN_KEYWORDS = {\n  ERROR_CASE: ['error', 'throw', 'invalid', 'fail'],\n  EDGE_CASE: ['edge case', 'empty'],\n  BOUNDARY_VALUE: ['boundary', 'maximum', 'minimum', 'limit'],\n  HAPPY_PATH: ['valid', 'correct', 'should return', 'normal', 'success']\n} as const;\n\n/**\n * テスト意図のパターンマッチングクラス\n * KISS原則: シンプルなパターンマッチングから開始\n */\nexport class IntentPatternMatcher {\n  /**\n   * テストの説明文からパターンを識別\n   * @param description テストの説明文\n   * @returns 識別されたテストパターン\n   */\n  identifyTestPattern(description: string): TestPattern {\n    const lowerDescription = description.toLowerCase();\n\n    // エラーケースの識別（優先度を上げる）\n    if (this.containsAnyKeyword(lowerDescription, PATTERN_KEYWORDS.ERROR_CASE)) {\n      return 'error-case';\n    }\n\n    // エッジケースの識別\n    if (this.containsAnyKeyword(lowerDescription, PATTERN_KEYWORDS.EDGE_CASE)) {\n      return 'edge-case';\n    }\n\n    // 境界値の識別\n    if (this.containsAnyKeyword(lowerDescription, PATTERN_KEYWORDS.BOUNDARY_VALUE)) {\n      return 'boundary-value';\n    }\n\n    // ハッピーパスの識別\n    if (this.containsAnyKeyword(lowerDescription, PATTERN_KEYWORDS.HAPPY_PATH)) {\n      return 'happy-path';\n    }\n\n    return 'unknown';\n  }\n\n  /**\n   * 文字列が指定されたキーワードのいずれかを含むかチェック\n   * @param text チェック対象の文字列\n   * @param keywords キーワードの配列\n   * @returns いずれかのキーワードを含む場合true\n   */\n  private containsAnyKeyword(text: string, keywords: readonly string[]): boolean {\n    return keywords.some(keyword => text.includes(keyword));\n  }\n\n  /**\n   * 複数のテストからカバレッジスコープを分析\n   * @param testDescriptions テスト説明文の配列\n   * @returns カバレッジスコープ\n   */\n  analyzeCoverageScope(testDescriptions: string[]): CoverageScope {\n    const patterns = testDescriptions.map(desc => this.identifyTestPattern(desc));\n\n    return {\n      happyPath: patterns.includes('happy-path'),\n      errorCases: patterns.includes('error-case'),\n      edgeCases: patterns.includes('edge-case'),\n      boundaryValues: patterns.includes('boundary-value')\n    };\n  }\n\n  /**\n   * ASTからテストパターンを抽出\n   * @param ast AST ノード\n   * @returns 検出されたパターンの配列\n   */\n  extractPatternFromAST(ast: ASTNode): DetailedPattern[] {\n    const patterns: DetailedPattern[] = [];\n    const text = ast.text?.toLowerCase() || '';\n\n    // 基本パターンの識別\n    const basicPattern = this.identifyTestPattern(text);\n    if (basicPattern !== 'unknown') {\n      patterns.push(basicPattern);\n    }\n\n    // 詳細パターンの識別\n    if (text.includes('null')) {\n      patterns.push('null-check');\n    }\n    if (text.includes('empty array') || text.includes('[]')) {\n      patterns.push('empty-array');\n    }\n    if (text.includes('return null') || text.includes('tobenull')) {\n      patterns.push('null-return');\n    }\n\n    return patterns;\n  }\n\n  /**\n   * 不足しているテストパターンを提案\n   * @param existingPatterns 既存のパターン\n   * @returns 提案されるパターン\n   */\n  suggestMissingPatterns(existingPatterns: TestPattern[]): TestPattern[] {\n    const allPatterns: TestPattern[] = ['happy-path', 'error-case', 'edge-case', 'boundary-value'];\n    return allPatterns.filter(pattern => !existingPatterns.includes(pattern));\n  }\n}"],"version":3}