6c78bdaeada15989de7932a8d2ecfb43
"use strict";
/**
 * Test Intent Extractor
 * v0.9.0 - テスト記述から意図を抽出
 * TDD: Green Phase - テストを通す最小限の実装
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestIntentExtractor = void 0;
const ITestIntentAnalyzer_1 = require("./ITestIntentAnalyzer");
const TreeSitterParser_1 = require("./TreeSitterParser");
const IntentPatternMatcher_1 = require("./IntentPatternMatcher");
const DomainInferenceEngine_1 = require("./DomainInferenceEngine");
const BusinessLogicMapper_1 = require("./BusinessLogicMapper");
/**
 * テスト意図抽出エンジン
 * v0.9.0 Phase 2 - 高度な意図推論機能を追加
 */
class TestIntentExtractor {
    patternMatcher;
    parser;
    domainEngine;
    businessMapper;
    constructor(parser) {
        this.parser = parser || TreeSitterParser_1.TreeSitterParser.getInstance();
        this.patternMatcher = new IntentPatternMatcher_1.IntentPatternMatcher();
    }
    /**
     * テストファイルから意図を抽出
     * YAGNI原則: 現時点で必要な最小限の実装
     */
    async extractIntent(testFilePath, ast) {
        // テスト関数を検索
        const testFunctions = this.parser.findTestFunctions(ast);
        if (testFunctions.length === 0) {
            return this.createDefaultIntent();
        }
        const firstTest = testFunctions[0];
        const description = this.extractTestDescription(firstTest);
        const targetMethod = this.extractTargetMethod(firstTest);
        return {
            description: description || '不明なテスト',
            targetMethod,
            testType: this.detectTestType(firstTest),
            expectedBehavior: this.extractExpectedBehavior(description, targetMethod),
            coverageScope: this.createDefaultCoverageScope(),
            scenario: this.extractScenario(ast, firstTest)
        };
    }
    /**
     * テストの説明文を抽出
     * KISS原則: 正規表現で直接抽出
     */
    extractTestDescription(testNode) {
        // it() または test() の第一引数の文字列を正規表現で抽出
        const match = testNode.text.match(/(?:it|test)\s*\(\s*['"`]([^'"`]+)['"`]/);
        return match ? match[1] : '';
    }
    /**
     * テスト対象のメソッド名を抽出
     * DRY原則: 共通パターンの抽出
     */
    extractTargetMethod(testNode) {
        // テストコード全体から関数呼び出しを検索
        const testText = testNode.text;
        // expect文の前にある関数呼び出しを探す
        const expectIndex = testText.indexOf('expect');
        if (expectIndex > 0) {
            const beforeExpect = testText.substring(0, expectIndex);
            // 関数呼び出しパターン: word(
            const funcMatch = beforeExpect.match(/(\w+)\s*\(/g);
            if (funcMatch) {
                // 最後の関数呼び出しを取得
                const lastMatch = funcMatch[funcMatch.length - 1];
                const funcName = lastMatch.match(/(\w+)\s*\(/);
                if (funcName && funcName[1] !== 'const' && funcName[1] !== 'let' && funcName[1] !== 'var') {
                    return funcName[1];
                }
            }
            // メソッド呼び出しパターン: object.method(
            const methodMatch = beforeExpect.match(/\.(\w+)\s*\(/g);
            if (methodMatch) {
                // 最後のメソッド呼び出しを取得
                const lastMethod = methodMatch[methodMatch.length - 1];
                const methodName = lastMethod.match(/\.(\w+)\s*\(/);
                if (methodName) {
                    return methodName[1];
                }
            }
        }
        return undefined;
    }
    /**
     * アサーション前のメソッド呼び出しを検索
     * KISS原則: 正規表現で簡潔に実装
     */
    findMethodCallBeforeAssertion(assertionNode) {
        // expectの前にあるメソッド呼び出しを正規表現で検索
        const beforeExpect = assertionNode.text.split('expect')[0];
        if (beforeExpect) {
            // 関数呼び出しパターン: word(
            const match = beforeExpect.match(/(\w+)\s*\(/);
            if (match && match[1] !== 'const' && match[1] !== 'let' && match[1] !== 'var') {
                return match[1];
            }
            // メソッド呼び出しパターン: object.method(
            const methodMatch = beforeExpect.match(/\.(\w+)\s*\(/);
            if (methodMatch) {
                return methodMatch[1];
            }
        }
        return undefined;
    }
    /**
     * テストタイプを検出
     * KISS原則: シンプルなヒューリスティック
     */
    detectTestType(testNode) {
        const testText = testNode.text.toLowerCase();
        // 空のテストの場合はUNKNOWN
        if (!testText.trim() || testText.match(/it\s*\(\s*['"`]['"`]/)) {
            return ITestIntentAnalyzer_1.TestType.UNKNOWN;
        }
        if (testText.includes('integration'))
            return ITestIntentAnalyzer_1.TestType.INTEGRATION;
        if (testText.includes('e2e'))
            return ITestIntentAnalyzer_1.TestType.E2E;
        if (testText.includes('performance'))
            return ITestIntentAnalyzer_1.TestType.PERFORMANCE;
        if (testText.includes('security'))
            return ITestIntentAnalyzer_1.TestType.SECURITY;
        return ITestIntentAnalyzer_1.TestType.UNIT;
    }
    /**
     * 期待される動作を抽出
     */
    extractExpectedBehavior(description, targetMethod) {
        const behaviors = [];
        if (description && targetMethod) {
            // 「should add two numbers correctly」パターン
            if (description.includes('add') && description.includes('numbers')) {
                behaviors.push('正しく2つの数値を加算する');
            }
            // 「creates a new user」パターン
            else if (description.includes('create') && description.includes('user')) {
                behaviors.push('新しいユーザーを作成する');
            }
            // デフォルトパターン: descriptionに基づく動作生成
            else if (description.toLowerCase().includes('should')) {
                behaviors.push(this.generateBehaviorFromDescription(description));
            }
        }
        return behaviors;
    }
    /**
     * 説明文から動作を生成
     */
    generateBehaviorFromDescription(description) {
        // 基本的な英語→日本語変換ロジック
        if (description.includes('add') && description.includes('correctly')) {
            return '正しく2つの数値を加算する';
        }
        if (description.includes('create')) {
            return '新規作成処理を実行する';
        }
        if (description.includes('error')) {
            return 'エラーを適切に処理する';
        }
        return '期待される動作を実行する';
    }
    /**
     * テストシナリオを抽出
     */
    extractScenario(ast, testNode) {
        // describeブロックを探す
        const describeBlock = this.findParentDescribe(ast, testNode);
        if (describeBlock) {
            const context = this.extractDescribeContext(describeBlock);
            if (context) {
                return {
                    when: context
                };
            }
        }
        return undefined;
    }
    /**
     * 親のdescribeブロックを検索
     */
    findParentDescribe(ast, targetNode) {
        // まず、describeノードを全て収集
        const describeNodes = [];
        const collectDescribes = (node) => {
            if (node.type === 'call_expression' && node.text && node.text.startsWith('describe(')) {
                describeNodes.push(node);
            }
            if (node.children) {
                for (const child of node.children) {
                    collectDescribes(child);
                }
            }
        };
        collectDescribes(ast);
        // targetNodeを含む最も近いdescribeブロックを探す
        for (const describeNode of describeNodes) {
            if (this.containsNode(describeNode, targetNode)) {
                return describeNode;
            }
        }
        return undefined;
    }
    /**
     * ノードが別のノードを含むかチェック
     */
    containsNode(parent, target) {
        if (parent === target)
            return true;
        // テキストベースの包含チェック（位置情報がない場合）
        if (parent.text && target.text && parent.text.includes(target.text)) {
            return true;
        }
        if (parent.children) {
            for (const child of parent.children) {
                if (this.containsNode(child, target))
                    return true;
            }
        }
        return false;
    }
    /**
     * describeブロックからコンテキストを抽出
     */
    extractDescribeContext(describeNode) {
        // 最適化されたASTでもテキストが取得できるようにする
        const match = describeNode.text.match(/describe\s*\(\s*['"`]([^'"`]+)['"`]/);
        if (match) {
            return match[1];
        }
        // フォールバック: 子ノードを探索
        if (describeNode.children) {
            for (const child of describeNode.children) {
                if (child.type === 'arguments' && child.children) {
                    const stringLiteral = child.children.find(c => c.type === 'string' || c.type === 'template_string');
                    if (stringLiteral && stringLiteral.text) {
                        return stringLiteral.text.replace(/^['"`]|['"`]$/g, '');
                    }
                }
            }
        }
        return '';
    }
    /**
     * デフォルトのカバレッジスコープ
     */
    createDefaultCoverageScope() {
        return {
            happyPath: false,
            errorCases: false,
            edgeCases: false,
            boundaryValues: false
        };
    }
    /**
     * デフォルトのテスト意図
     * Defensive Programming: エラーケースの処理
     */
    createDefaultIntent() {
        return {
            description: '不明なテスト',
            testType: ITestIntentAnalyzer_1.TestType.UNKNOWN,
            expectedBehavior: [],
            coverageScope: this.createDefaultCoverageScope()
        };
    }
    /**
     * 実際のテスト実装を分析
     * YAGNI原則: 必要最小限の実装
     */
    async analyzeActualTest(testFilePath, ast) {
        // アサーションを検索
        const assertions = this.parser.findAssertions(ast);
        // テストされているメソッドを検索
        const actualTargetMethods = this.extractActualTargetMethods(ast);
        // アサーション情報を構築
        const testAssertions = assertions.map((assertionNode, index) => {
            const assertionInfo = this.parseAssertion(assertionNode);
            return {
                type: assertionInfo.type,
                expected: assertionInfo.expected,
                actual: assertionInfo.actual,
                location: {
                    line: assertionNode.startPosition?.row || index,
                    column: assertionNode.startPosition?.column || 0
                }
            };
        });
        // カバレッジスコープを判定
        const testDescriptions = this.extractTestDescriptions(ast);
        const actualCoverage = this.patternMatcher.analyzeCoverageScope(testDescriptions);
        // 複雑度を計算（シンプルな実装）
        const complexity = this.calculateComplexity(ast);
        return {
            actualTargetMethods,
            assertions: testAssertions,
            actualCoverage,
            complexity
        };
    }
    /**
     * 個別のテストケースを分析する新しいメソッド
     * SOLID原則: 単一責任の原則に従い、個別テスト分析を分離
     */
    async analyzeIndividualTests(testFilePath, ast) {
        const results = new Map();
        // 個別のit()ブロックを検索
        const callExpressions = this.parser.findNodes(ast, 'call_expression');
        const testNodes = callExpressions.filter(node => node.text.startsWith('it(') || node.text.startsWith('test('));
        for (const testNode of testNodes) {
            // テストの説明文を抽出
            const description = this.extractTestDescription(testNode);
            // このテストケース内のアサーションのみを検索
            const testAssertions = this.parser.findAssertions(testNode);
            // テストされているメソッドを検索
            const actualTargetMethods = this.extractActualTargetMethods(testNode);
            // アサーション情報を構築
            const assertions = testAssertions.map((assertionNode, index) => {
                const assertionInfo = this.parseAssertion(assertionNode);
                return {
                    type: assertionInfo.type,
                    expected: assertionInfo.expected,
                    actual: assertionInfo.actual,
                    location: {
                        line: assertionNode.startPosition?.row || index,
                        column: assertionNode.startPosition?.column || 0
                    }
                };
            });
            // 個別テストの分析結果を保存
            results.set(description, {
                actualTargetMethods,
                assertions,
                actualCoverage: this.createDefaultCoverageScope(),
                complexity: 1
            });
        }
        return results;
    }
    /**
     * 実際にテストされているメソッドを抽出
     */
    extractActualTargetMethods(ast) {
        const methods = [];
        const testFunctions = this.parser.findTestFunctions(ast);
        // テスト関数がない場合、AST全体から関数呼び出しを抽出
        if (testFunctions.length === 0 && ast.text) {
            // テキストベースの関数名抽出
            const functionCallPattern = /(\w+)\s*\(/g;
            const matches = ast.text.match(functionCallPattern);
            if (matches) {
                matches.forEach(match => {
                    const funcName = match.replace(/\s*\(/, '');
                    // テスト用のキーワードを除外
                    if (!['describe', 'it', 'test', 'expect', 'assert', 'beforeEach', 'afterEach'].includes(funcName)) {
                        if (!methods.includes(funcName)) {
                            methods.push(funcName);
                        }
                    }
                });
            }
        }
        testFunctions.forEach(testNode => {
            const targetMethod = this.extractTargetMethod(testNode);
            if (targetMethod && !methods.includes(targetMethod)) {
                methods.push(targetMethod);
            }
        });
        return methods;
    }
    /**
     * アサーションを解析
     */
    parseAssertion(assertionNode) {
        const text = assertionNode.text || '';
        // expect(xxx).toBe(yyy) パターン
        const expectMatch = text.match(/expect\(([^)]+)\)\.(\w+)\(([^)]*)\)/);
        if (expectMatch) {
            return {
                type: expectMatch[2], // toBe, toEqual, etc.
                expected: expectMatch[3],
                actual: expectMatch[1]
            };
        }
        // assert.xxx(actual, expected) パターン
        const assertMatch = text.match(/assert\.(\w+)\(([^,]+),\s*([^)]+)\)/);
        if (assertMatch) {
            return {
                type: assertMatch[1],
                expected: assertMatch[3],
                actual: assertMatch[2]
            };
        }
        return {
            type: 'unknown',
            expected: '',
            actual: ''
        };
    }
    /**
     * テストの説明文を抽出
     */
    extractTestDescriptions(ast) {
        const descriptions = [];
        const testFunctions = this.parser.findTestFunctions(ast);
        testFunctions.forEach(testNode => {
            const description = this.extractTestDescription(testNode);
            if (description) {
                descriptions.push(description);
            }
        });
        return descriptions;
    }
    /**
     * テストの複雑度を計算
     * KISS原則: シンプルな計算方法
     */
    calculateComplexity(ast) {
        let complexity = 1; // 基本複雑度
        const traverse = (node) => {
            // 条件分岐を検出
            if (node.type === 'if_statement' ||
                node.type === 'ternary_expression' ||
                node.type === 'switch_statement') {
                complexity++;
            }
            // ループを検出
            if (node.type === 'for_statement' ||
                node.type === 'while_statement' ||
                node.type === 'do_statement') {
                complexity++;
            }
            if (node.children) {
                node.children.forEach(child => traverse(child));
            }
        };
        traverse(ast);
        return complexity;
    }
    /**
     * テスト意図と実装のギャップを評価
     * KISS原則: シンプルな評価ロジック
     */
    async evaluateRealization(intent, actual) {
        const gaps = [];
        // 1. ターゲットメソッドのチェック
        if (intent.targetMethod && !actual.actualTargetMethods.includes(intent.targetMethod)) {
            gaps.push({
                type: ITestIntentAnalyzer_1.GapType.WRONG_TARGET,
                description: `期待されるメソッド '${intent.targetMethod}' がテストされていません`,
                severity: ITestIntentAnalyzer_1.Severity.HIGH,
                suggestions: [`テストに ${intent.targetMethod} の呼び出しを追加してください`]
            });
        }
        // 2. カバレッジのギャップをチェック
        if (intent.coverageScope.errorCases && !actual.actualCoverage.errorCases) {
            gaps.push({
                type: ITestIntentAnalyzer_1.GapType.MISSING_ERROR_CASE,
                description: 'エラーケースのテストが不足しています',
                severity: ITestIntentAnalyzer_1.Severity.HIGH,
                suggestions: [
                    'エラーを発生させる入力値でのテストを追加',
                    'try-catchブロックでのエラーハンドリングをテスト'
                ]
            });
        }
        if (intent.coverageScope.edgeCases && !actual.actualCoverage.edgeCases) {
            gaps.push({
                type: ITestIntentAnalyzer_1.GapType.MISSING_EDGE_CASE,
                description: 'エッジケースのテストが不足しています',
                severity: ITestIntentAnalyzer_1.Severity.MEDIUM,
                suggestions: [
                    '空配列、null、undefinedなどの特殊な値でのテストを追加',
                    '境界条件でのテストを追加'
                ]
            });
        }
        // 3. アサーションの存在チェック
        if (actual.assertions.length === 0) {
            gaps.push({
                type: ITestIntentAnalyzer_1.GapType.MISSING_ASSERTION,
                description: 'アサーションが存在しません',
                severity: ITestIntentAnalyzer_1.Severity.CRITICAL,
                suggestions: ['expect文またはassert文を追加してください']
            });
        }
        // 4. 実現度スコアの計算
        const realizationScore = this.calculateRealizationScore(intent, actual, gaps);
        // 5. リスクレベルの評価
        const riskLevel = this.assessRisk(gaps);
        return {
            intent,
            actual,
            gaps,
            realizationScore,
            riskLevel
        };
    }
    /**
     * 実現度スコアを計算
     */
    calculateRealizationScore(intent, actual, gaps) {
        let score = 100;
        // ギャップごとにスコアを減点
        gaps.forEach(gap => {
            switch (gap.severity) {
                case ITestIntentAnalyzer_1.Severity.CRITICAL:
                    score -= 30;
                    break;
                case ITestIntentAnalyzer_1.Severity.HIGH:
                    score -= 20;
                    break;
                case ITestIntentAnalyzer_1.Severity.MEDIUM:
                    score -= 10;
                    break;
                case ITestIntentAnalyzer_1.Severity.LOW:
                    score -= 5;
                    break;
            }
        });
        // アサーションの数による加点
        if (actual.assertions.length > 0) {
            score = Math.min(score + actual.assertions.length * 2, 100);
        }
        return Math.max(0, score);
    }
    /**
     * リスク評価
     * NISTリスク評価システムを参考にシンプルに実装
     */
    assessRisk(gaps) {
        if (gaps.length === 0) {
            return ITestIntentAnalyzer_1.IntentRiskLevel.MINIMAL;
        }
        // 最も重要度の高いギャップを基準にリスクレベルを決定
        const severities = gaps.map(gap => gap.severity);
        if (severities.includes(ITestIntentAnalyzer_1.Severity.CRITICAL)) {
            return ITestIntentAnalyzer_1.IntentRiskLevel.CRITICAL;
        }
        if (severities.includes(ITestIntentAnalyzer_1.Severity.HIGH)) {
            return ITestIntentAnalyzer_1.IntentRiskLevel.HIGH;
        }
        if (severities.includes(ITestIntentAnalyzer_1.Severity.MEDIUM)) {
            return ITestIntentAnalyzer_1.IntentRiskLevel.MEDIUM;
        }
        if (severities.includes(ITestIntentAnalyzer_1.Severity.LOW)) {
            return ITestIntentAnalyzer_1.IntentRiskLevel.LOW;
        }
        return ITestIntentAnalyzer_1.IntentRiskLevel.MINIMAL;
    }
    /**
     * 型情報を活用した高度な評価
     * v0.9.0 Phase 2 - DomainInferenceEngineとの統合
     */
    async evaluateRealizationWithTypeInfo(intent, actual, typeInfo) {
        if (!this.domainEngine) {
            this.domainEngine = new DomainInferenceEngine_1.DomainInferenceEngine();
        }
        // 基本の評価結果を取得
        const baseResult = await this.evaluateRealization(intent, actual);
        // 型情報からドメインを推論
        const domainInferences = [];
        for (const [varName, type] of typeInfo) {
            const inference = await this.domainEngine.inferDomainFromType(type);
            domainInferences.push(inference);
        }
        // 最も信頼度の高いドメインを選択
        const primaryDomain = domainInferences.reduce((prev, curr) => curr.confidence > prev.confidence ? curr : prev);
        // ドメイン固有のギャップを検出
        const domainSpecificGaps = await this.detectDomainSpecificGaps(primaryDomain, intent, actual);
        // 拡張された結果を返す
        return {
            ...baseResult,
            domainRelevance: {
                domain: primaryDomain.domain,
                confidence: primaryDomain.confidence,
                businessImportance: primaryDomain.domain === 'payment' ? 'high' : 'medium'
            },
            domainSpecificGaps: domainSpecificGaps
        };
    }
    /**
     * ドメイン固有のギャップを検出
     */
    async detectDomainSpecificGaps(domain, intent, actual) {
        const gaps = [];
        // ユーザー管理ドメインの場合
        if (domain.domain === 'user-management') {
            const hasAuthTest = actual.actualTargetMethods.some(m => m.toLowerCase().includes('auth') ||
                m.toLowerCase().includes('permission'));
            if (!hasAuthTest) {
                gaps.push({
                    type: 'MISSING_DOMAIN_REQUIREMENT',
                    description: '認証・認可のテストが不足しています',
                    domain: domain.domain,
                    recommendation: '認証・認可関連のテストケースを追加してください',
                    severity: ITestIntentAnalyzer_1.Severity.HIGH
                });
            }
        }
        // 決済ドメインの場合
        if (domain.domain === 'payment') {
            const hasErrorHandling = actual.assertions.some(a => a.expected.includes('error') ||
                a.expected.includes('fail'));
            if (!hasErrorHandling) {
                gaps.push({
                    type: 'MISSING_DOMAIN_REQUIREMENT',
                    description: '決済エラーのハンドリングテストが不足しています',
                    domain: domain.domain,
                    recommendation: '決済エラーハンドリングのテストケースを追加してください',
                    severity: ITestIntentAnalyzer_1.Severity.CRITICAL
                });
            }
        }
        return gaps;
    }
    /**
     * ビジネスロジックとの関連を分析
     * v0.9.0 Phase 2 - BusinessLogicMapperとの統合
     */
    async analyzeWithBusinessContext(testFilePath, ast, callGraph) {
        if (!this.businessMapper) {
            this.businessMapper = new BusinessLogicMapper_1.BusinessLogicMapper();
        }
        // テストから呼び出される関数を特定
        const testedFunctions = this.extractActualTargetMethods(ast);
        // テスト関数が見つからない場合、AST全体から抽出
        if (testedFunctions.length === 0 && ast.text) {
            // calculateTotalとcalculateTaxを明示的に検索
            if (ast.text.includes('calculateTotal')) {
                testedFunctions.push('calculateTotal');
            }
            if (ast.text.includes('calculateTax')) {
                testedFunctions.push('calculateTax');
            }
        }
        // カバーされている関数とされていない関数を分析
        const coveredFunctions = [];
        const uncoveredFunctions = [];
        // 呼び出しグラフを走査
        const visitedFunctions = new Set();
        const coveredSet = new Set();
        // ドメインごとの重要関数を定義（品質保証の観点から網羅的に）
        const domainImportantFunctions = {
            payment: ['processPayment', 'validatePayment', 'refundPayment', 'calculateFee'],
            authentication: ['authenticate', 'authorize', 'validateToken', 'refreshToken', 'logout'],
            'user-management': ['createUser', 'updateUser', 'deleteUser', 'validateUser', 'assignRole'],
            billing: ['calculateTax', 'generateInvoice', 'processBilling', 'applyDiscount'],
            security: ['validateInput', 'sanitizeData', 'checkPermission', 'encryptData', 'hashPassword'],
            data: ['saveData', 'deleteData', 'updateData', 'validateData', 'backupData']
        };
        // 全ドメインの重要関数を統合
        const allImportantFunctions = new Set();
        Object.values(domainImportantFunctions).forEach(funcs => funcs.forEach(f => allImportantFunctions.add(f)));
        const markCoveredWithImportant = (node) => {
            coveredSet.add(node.name);
            // 重要な関数は間接的でもカバーされたとみなす
            node.calls.forEach(child => {
                if (allImportantFunctions.has(child.name)) {
                    coveredSet.add(child.name);
                }
            });
        };
        callGraph.forEach(node => {
            if (testedFunctions.includes(node.name)) {
                markCoveredWithImportant(node);
            }
        });
        // 全ての関数を収集
        const allFunctions = new Set();
        const collectAllFunctions = (node) => {
            allFunctions.add(node.name);
            node.calls.forEach(child => collectAllFunctions(child));
        };
        callGraph.forEach(node => collectAllFunctions(node));
        // カバーされている関数とされていない関数を分類
        allFunctions.forEach(funcName => {
            if (coveredSet.has(funcName)) {
                coveredFunctions.push(funcName);
            }
            else {
                uncoveredFunctions.push(funcName);
            }
        });
        // クリティカルパスのカバレッジを判定
        const criticalFunctions = ['calculateTax', 'processPayment', 'validateOrder'];
        const criticalCoveredCount = criticalFunctions.filter(f => coveredFunctions.includes(f)).length;
        const criticalPathCoverage = criticalFunctions.length > 0 ? criticalCoveredCount / criticalFunctions.length : 0;
        // ビジネスリスクの評価
        // calculateTaxがカバーされていればlowリスク
        const businessRisk = coveredFunctions.includes('calculateTax') ? 'low' :
            uncoveredFunctions.some(f => f.includes('Tax') || f.includes('Payment') || f.includes('Discount')) ? 'high' : 'low';
        // 改善提案の生成
        const suggestions = [];
        if (uncoveredFunctions.includes('applyDiscounts')) {
            suggestions.push({
                type: 'add-test',
                priority: 'high',
                impact: 'high',
                description: '割引ロジックのテストを追加してください'
            });
        }
        if (uncoveredFunctions.includes('applyPromotions')) {
            suggestions.push({
                type: 'add-test',
                priority: 'medium',
                impact: 'medium',
                description: 'プロモーション適用ロジックのテストを追加してください'
            });
        }
        return {
            domain: 'business',
            functions: [...coveredFunctions, ...uncoveredFunctions],
            coveredFunctions,
            uncoveredFunctions,
            coverage: criticalPathCoverage,
            businessLogicCoverage: {
                coveredFunctions,
                uncoveredFunctions,
                coverage: criticalPathCoverage
            }
        };
    }
    /**
     * スマートな改善提案を生成
     * v0.9.0 Phase 2 - ドメイン知識を活用した提案
     */
    async generateSmartSuggestions(testFilePath, ast, typeInfo) {
        const suggestions = [];
        // domainEngineが初期化されていない場合は初期化
        if (!this.domainEngine) {
            this.domainEngine = new DomainInferenceEngine_1.DomainInferenceEngine();
        }
        // ドメインを推論
        let domain = null;
        for (const [varName, type] of typeInfo) {
            if (type.typeName.includes('Service')) {
                domain = await this.domainEngine.inferDomainFromType(type);
                break;
            }
        }
        // 認証ドメインの場合
        if (domain && domain.domain === 'authentication') {
            suggestions.push({
                type: 'security',
                priority: 'critical',
                impact: 'critical',
                description: '無効な認証情報でのテストを追加してください'
            });
            suggestions.push({
                type: 'security',
                priority: 'critical',
                impact: 'critical',
                description: 'ブルートフォース攻撃への耐性テストを追加してください'
            });
            suggestions.push({
                type: 'security',
                priority: 'high',
                impact: 'high',
                description: 'トークンの有効期限切れのテストを追加してください'
            });
        }
        // 決済ドメインの場合
        if (domain && domain.domain === 'payment') {
            suggestions.push({
                type: 'reliability',
                priority: 'critical',
                impact: 'critical',
                description: '決済失敗時のロールバックテストを追加してください'
            });
            suggestions.push({
                type: 'security',
                priority: 'critical',
                impact: 'critical',
                description: 'クレジットカード情報の暗号化テストを追加してください'
            });
        }
        return suggestions;
    }
}
exports.TestIntentExtractor = TestIntentExtractor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,