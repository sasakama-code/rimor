{"file":"/Users/sasakama/Projects/Rimor/src/intent-analysis/ITestIntentAnalyzer.ts","mappings":";AAAA;;;GAGG;;;AA2CH;;GAEG;AACH,IAAY,QAOX;AAPD,WAAY,QAAQ;IAClB,yBAAa,CAAA;IACb,uCAA2B,CAAA;IAC3B,uBAAW,CAAA;IACX,uCAA2B,CAAA;IAC3B,iCAAqB,CAAA;IACrB,+BAAmB,CAAA;AACrB,CAAC,EAPW,QAAQ,wBAAR,QAAQ,QAOnB;AAkID;;GAEG;AACH,IAAY,OAOX;AAPD,WAAY,OAAO;IACjB,kDAAuC,CAAA;IACvC,sDAA2C,CAAA;IAC3C,wCAA6B,CAAA;IAC7B,oDAAyC,CAAA;IACzC,kDAAuC,CAAA;IACvC,4CAAiC,CAAA;AACnC,CAAC,EAPW,OAAO,uBAAP,OAAO,QAOlB;AAED;;GAEG;AACH,IAAY,QAKX;AALD,WAAY,QAAQ;IAClB,iCAAqB,CAAA;IACrB,yBAAa,CAAA;IACb,6BAAiB,CAAA;IACjB,uBAAW,CAAA;AACb,CAAC,EALW,QAAQ,wBAAR,QAAQ,QAKnB;AAED;;;GAGG;AACH,IAAY,eAMX;AAND,WAAY,eAAe;IACzB,wCAAqB,CAAA;IACrB,gCAAa,CAAA;IACb,oCAAiB,CAAA;IACjB,8BAAW,CAAA;IACX,sCAAmB,CAAA;AACrB,CAAC,EANW,eAAe,+BAAf,eAAe,QAM1B","names":[],"sources":["/Users/sasakama/Projects/Rimor/src/intent-analysis/ITestIntentAnalyzer.ts"],"sourcesContent":["/**\n * Test Intent Analyzer Interface\n * v0.9.0 - テスト意図実現度監査機能のコアインターフェース\n */\n\nimport { ASTNode } from '../core/interfaces/IAnalysisEngine';\n\n/**\n * テスト意図の表現\n */\nexport interface TestIntent {\n  /**\n   * テストの意図を表す説明文\n   */\n  description: string;\n  \n  /**\n   * テスト対象のメソッド/関数名\n   */\n  targetMethod?: string;\n  \n  /**\n   * テストシナリオ（Given-When-Then形式）\n   */\n  scenario?: {\n    given?: string;\n    when?: string;\n    then?: string;\n  };\n  \n  /**\n   * テストのタイプ（unit, integration, e2e等）\n   */\n  testType: TestType;\n  \n  /**\n   * 期待される動作\n   */\n  expectedBehavior: string[];\n  \n  /**\n   * カバレッジ範囲\n   */\n  coverageScope: CoverageScope;\n}\n\n/**\n * テストタイプ\n */\nexport enum TestType {\n  UNIT = 'unit',\n  INTEGRATION = 'integration',\n  E2E = 'e2e',\n  PERFORMANCE = 'performance',\n  SECURITY = 'security',\n  UNKNOWN = 'unknown'\n}\n\n/**\n * カバレッジスコープ\n */\nexport interface CoverageScope {\n  /**\n   * ハッピーパスのカバレッジ\n   */\n  happyPath: boolean;\n  \n  /**\n   * エラーケースのカバレッジ\n   */\n  errorCases: boolean;\n  \n  /**\n   * エッジケースのカバレッジ\n   */\n  edgeCases: boolean;\n  \n  /**\n   * 境界値のカバレッジ\n   */\n  boundaryValues: boolean;\n}\n\n/**\n * テスト実現度の評価結果\n */\nexport interface TestRealizationResult {\n  /**\n   * 意図した内容\n   */\n  intent: TestIntent;\n  \n  /**\n   * 実際のテストコード分析結果\n   */\n  actual: ActualTestAnalysis;\n  \n  /**\n   * ギャップ分析\n   */\n  gaps: TestGap[];\n  \n  /**\n   * 実現度スコア（0-100）\n   */\n  realizationScore: number;\n  \n  /**\n   * リスクレベル\n   */\n  riskLevel: IntentRiskLevel;\n  \n  /**\n   * テストファイルパス（レポート生成用）\n   */\n  file?: string;\n  \n  /**\n   * テストの説明（レポート生成用）\n   */\n  description?: string;\n}\n\n/**\n * 実際のテスト分析結果\n */\nexport interface ActualTestAnalysis {\n  /**\n   * 実際にテストされているメソッド\n   */\n  actualTargetMethods: string[];\n  \n  /**\n   * 実際のアサーション\n   */\n  assertions: TestAssertion[];\n  \n  /**\n   * 実際のカバレッジ\n   */\n  actualCoverage: CoverageScope;\n  \n  /**\n   * テストの複雑度\n   */\n  complexity: number;\n}\n\n/**\n * テストアサーション\n */\nexport interface TestAssertion {\n  type: string;\n  expected: string;\n  actual: string;\n  location: {\n    line: number;\n    column: number;\n  };\n}\n\n/**\n * テストギャップ\n */\nexport interface TestGap {\n  /**\n   * ギャップの種類\n   */\n  type: GapType;\n  \n  /**\n   * ギャップの説明\n   */\n  description: string;\n  \n  /**\n   * 重要度\n   */\n  severity: Severity;\n  \n  /**\n   * 改善提案\n   */\n  suggestions: string[];\n}\n\n/**\n * ギャップタイプ\n */\nexport enum GapType {\n  MISSING_ASSERTION = 'missing_assertion',\n  INCOMPLETE_COVERAGE = 'incomplete_coverage',\n  WRONG_TARGET = 'wrong_target',\n  MISSING_ERROR_CASE = 'missing_error_case',\n  MISSING_EDGE_CASE = 'missing_edge_case',\n  UNCLEAR_INTENT = 'unclear_intent'\n}\n\n/**\n * 重要度\n */\nexport enum Severity {\n  CRITICAL = 'critical',\n  HIGH = 'high',\n  MEDIUM = 'medium',\n  LOW = 'low'\n}\n\n/**\n * リスクレベル（レガシー定義）\n * v0.8.0の小文字定義。v0.9.0以降は unified-analysis-result.ts のRiskLevel（大文字）を使用\n */\nexport enum IntentRiskLevel {\n  CRITICAL = 'critical',\n  HIGH = 'high',\n  MEDIUM = 'medium',\n  LOW = 'low',\n  MINIMAL = 'minimal'\n}\n\n// 後方互換性のための型エイリアス（非推奨）\n/**\n * @deprecated Use IntentRiskLevel or import RiskLevel from unified-analysis-result.ts\n */\n// Migrated to CoreTypes\nexport type RiskLevel = IntentRiskLevel;\n\n/**\n * テスト意図分析器インターフェース\n */\nexport interface ITestIntentAnalyzer {\n  /**\n   * テストファイルから意図を抽出\n   */\n  extractIntent(testFilePath: string, ast: ASTNode): Promise<TestIntent>;\n  \n  /**\n   * 実際のテスト実装を分析\n   */\n  analyzeActualTest(testFilePath: string, ast: ASTNode): Promise<ActualTestAnalysis>;\n  \n  /**\n   * テスト意図と実装のギャップを評価\n   */\n  evaluateRealization(\n    intent: TestIntent,\n    actual: ActualTestAnalysis\n  ): Promise<TestRealizationResult>;\n  \n  /**\n   * リスク評価\n   */\n  assessRisk(gaps: TestGap[]): IntentRiskLevel;\n}"],"version":3}