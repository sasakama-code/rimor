133ce98f5a8133dbc1573b6f29339294
"use strict";
/**
 * Code Annotator
 * v0.8.0 - Phase 4: Context Engineering
 *
 * ソースコードファイルにインライン・アノテーションを追加
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CodeAnnotator = void 0;
const inversify_1 = require("inversify");
const fs = __importStar(require("fs/promises"));
const path = __importStar(require("path"));
const AnnotationGenerator_1 = require("./AnnotationGenerator");
let CodeAnnotator = class CodeAnnotator {
    annotationGenerator;
    constructor(annotationGenerator) {
        this.annotationGenerator = annotationGenerator;
    }
    /**
     * 分析結果に基づいてソースコードにアノテーションを追加
     */
    async annotateFiles(result, options) {
        // ファイル別に問題をグループ化
        const issuesByFile = this.groupIssuesByFile(result.issues);
        const annotations = [];
        for (const [filePath, issues] of issuesByFile.entries()) {
            try {
                const annotation = await this.annotateFile(filePath, issues, options);
                if (annotation) {
                    annotations.push(annotation);
                }
            }
            catch (error) {
                console.error(`Failed to annotate ${filePath}:`, error);
            }
        }
        return annotations;
    }
    /**
     * 単一ファイルにアノテーションを追加
     */
    async annotateFile(filePath, issues, options) {
        try {
            // ファイルの内容を読み込み
            const originalContent = await fs.readFile(filePath, 'utf-8');
            const lines = originalContent.split('\n');
            // 行番号でソート（逆順）して、後ろから挿入
            const sortedIssues = [...issues].sort((a, b) => (b.location?.startLine || 0) - (a.location?.startLine || 0));
            let annotationCount = 0;
            // 各問題に対してアノテーションを挿入
            for (const issue of sortedIssues) {
                const annotation = this.annotationGenerator.generateLanguageSpecificAnnotation(issue, filePath, options);
                // アノテーションを該当行の前に挿入
                const lineIndex = (issue.location?.startLine || 1) - 1;
                if (lineIndex >= 0 && lineIndex < lines.length) {
                    // 既存のインデントを保持
                    const indent = this.extractIndent(lines[lineIndex]);
                    const indentedAnnotation = this.applyIndent(annotation, indent);
                    // アノテーションを挿入
                    lines.splice(lineIndex, 0, indentedAnnotation);
                    annotationCount++;
                }
            }
            const annotatedContent = lines.join('\n');
            return {
                filePath,
                originalContent,
                annotatedContent,
                annotationCount
            };
        }
        catch (error) {
            console.error(`Error reading file ${filePath}:`, error);
            return null;
        }
    }
    /**
     * アノテーション付きファイルを保存
     */
    async saveAnnotatedFiles(annotations, outputDir, options) {
        for (const annotation of annotations) {
            if (options?.overwrite) {
                // 元のファイルを上書き
                await fs.writeFile(annotation.filePath, annotation.annotatedContent, 'utf-8');
            }
            else {
                // 別のディレクトリに保存
                const outputPath = this.getOutputPath(annotation.filePath, outputDir);
                await this.ensureDirectoryExists(path.dirname(outputPath));
                await fs.writeFile(outputPath, annotation.annotatedContent, 'utf-8');
            }
        }
    }
    /**
     * アノテーションのサマリーレポートを生成
     */
    generateAnnotationSummary(annotations) {
        const lines = [];
        lines.push('# Annotation Summary');
        lines.push('');
        lines.push(`Total files annotated: ${annotations.length}`);
        const totalAnnotations = annotations.reduce((sum, ann) => sum + ann.annotationCount, 0);
        lines.push(`Total annotations added: ${totalAnnotations}`);
        lines.push('');
        if (annotations.length > 0) {
            lines.push('## Annotated Files:');
            lines.push('');
            annotations.forEach(ann => {
                lines.push(`- ${ann.filePath}: ${ann.annotationCount} annotations`);
            });
        }
        return lines.join('\n');
    }
    /**
     * 差分レポートを生成
     */
    generateDiffReport(annotations) {
        const lines = [];
        lines.push('# Annotation Diff Report');
        lines.push('');
        annotations.forEach(ann => {
            lines.push(`## File: ${ann.filePath}`);
            lines.push('');
            lines.push(`Annotations added: ${ann.annotationCount}`);
            lines.push('');
            // 簡易的な差分表示
            const originalLines = ann.originalContent.split('\n');
            const annotatedLines = ann.annotatedContent.split('\n');
            let lineNumber = 1;
            let i = 0, j = 0;
            while (i < originalLines.length || j < annotatedLines.length) {
                if (i >= originalLines.length) {
                    // 新しい行（アノテーション）
                    lines.push(`+ ${lineNumber}: ${annotatedLines[j]}`);
                    j++;
                }
                else if (j >= annotatedLines.length) {
                    // 削除された行（ないはず）
                    lines.push(`- ${lineNumber}: ${originalLines[i]}`);
                    i++;
                }
                else if (originalLines[i] === annotatedLines[j]) {
                    // 変更なし
                    i++;
                    j++;
                }
                else {
                    // アノテーションが挿入された
                    lines.push(`+ ${lineNumber}: ${annotatedLines[j]}`);
                    j++;
                }
                lineNumber++;
            }
            lines.push('');
        });
        return lines.join('\n');
    }
    /**
     * 問題をファイル別にグループ化
     */
    groupIssuesByFile(issues) {
        const grouped = new Map();
        issues.forEach(issue => {
            if (!issue.location)
                return;
            const file = issue.location.file;
            if (!grouped.has(file)) {
                grouped.set(file, []);
            }
            grouped.get(file).push(issue);
        });
        return grouped;
    }
    /**
     * 行のインデントを抽出
     */
    extractIndent(line) {
        const match = line.match(/^(\s*)/);
        return match ? match[1] : '';
    }
    /**
     * アノテーションにインデントを適用
     */
    applyIndent(annotation, indent) {
        const lines = annotation.split('\n');
        return lines.map(line => indent + line).join('\n');
    }
    /**
     * 出力パスを生成
     */
    getOutputPath(originalPath, outputDir) {
        if (!outputDir) {
            // デフォルト: 元のファイル名に.annotatedを追加
            const dir = path.dirname(originalPath);
            const ext = path.extname(originalPath);
            const base = path.basename(originalPath, ext);
            return path.join(dir, `${base}.annotated${ext}`);
        }
        // 指定されたディレクトリに同じ構造で保存
        const relativePath = path.relative(process.cwd(), originalPath);
        return path.join(outputDir, relativePath);
    }
    /**
     * ディレクトリが存在することを確認（なければ作成）
     */
    async ensureDirectoryExists(dirPath) {
        try {
            await fs.access(dirPath);
        }
        catch {
            await fs.mkdir(dirPath, { recursive: true });
        }
    }
    /**
     * プレビューモードでアノテーションを表示
     */
    previewAnnotations(result, options) {
        const lines = [];
        lines.push('# Annotation Preview');
        lines.push('');
        lines.push('The following annotations would be added:');
        lines.push('');
        const issuesByFile = this.groupIssuesByFile(result.issues);
        issuesByFile.forEach((issues, filePath) => {
            lines.push(`## ${filePath}`);
            lines.push('');
            // 行番号でソート
            const sortedIssues = [...issues].sort((a, b) => (a.location?.startLine || 0) - (b.location?.startLine || 0));
            sortedIssues.forEach(issue => {
                const annotation = this.annotationGenerator.generateLanguageSpecificAnnotation(issue, filePath, options);
                lines.push(`Line ${issue.location?.startLine || 0}:`);
                lines.push('```');
                lines.push(annotation);
                lines.push('```');
                lines.push('');
            });
        });
        return lines.join('\n');
    }
    /**
     * アノテーションをクリーンアップ（削除）
     */
    async cleanupAnnotations(filePath, prefix) {
        try {
            const content = await fs.readFile(filePath, 'utf-8');
            const lines = content.split('\n');
            const annotationPrefix = prefix || 'RIMOR';
            const cleanedLines = lines.filter(line => {
                // アノテーション行を検出して除外
                const trimmed = line.trim();
                return !(trimmed.startsWith(`// ${annotationPrefix}-`) ||
                    trimmed.startsWith(`# ${annotationPrefix}-`) ||
                    trimmed.startsWith(`<!-- ${annotationPrefix}-`) ||
                    trimmed.includes(`* ${annotationPrefix} Security Analysis Report`));
            });
            if (cleanedLines.length < lines.length) {
                const cleanedContent = cleanedLines.join('\n');
                await fs.writeFile(filePath, cleanedContent, 'utf-8');
                return true;
            }
            return false;
        }
        catch (error) {
            console.error(`Error cleaning up annotations in ${filePath}:`, error);
            return false;
        }
    }
};
exports.CodeAnnotator = CodeAnnotator;
exports.CodeAnnotator = CodeAnnotator = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(AnnotationGenerator_1.AnnotationGenerator)),
    __metadata("design:paramtypes", [AnnotationGenerator_1.AnnotationGenerator])
], CodeAnnotator);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,