{"file":"/Users/sasakama/Projects/Rimor/src/reporting/CodeAnnotator.ts","mappings":";AAAA;;;;;GAKG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEH,yCAA+C;AAC/C,gDAAkC;AAClC,2CAA6B;AAC7B,+DAA4D;AAerD,IAAM,aAAa,GAAnB,MAAM,aAAa;IAEe;IADvC,YACuC,mBAAwC;QAAxC,wBAAmB,GAAnB,mBAAmB,CAAqB;IAC5E,CAAC;IAEJ;;OAEG;IACH,KAAK,CAAC,aAAa,CACjB,MAAgC,EAChC,OAA2B;QAE3B,iBAAiB;QACjB,MAAM,YAAY,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAC3D,MAAM,WAAW,GAAqB,EAAE,CAAC;QAEzC,KAAK,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,IAAI,YAAY,CAAC,OAAO,EAAE,EAAE,CAAC;YACxD,IAAI,CAAC;gBACH,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;gBACtE,IAAI,UAAU,EAAE,CAAC;oBACf,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;gBAC/B,CAAC;YACH,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,OAAO,CAAC,KAAK,CAAC,sBAAsB,QAAQ,GAAG,EAAE,KAAK,CAAC,CAAC;YAC1D,CAAC;QACH,CAAC;QAED,OAAO,WAAW,CAAC;IACrB,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,YAAY,CAChB,QAAgB,EAChB,MAAe,EACf,OAA2B;QAE3B,IAAI,CAAC;YACH,eAAe;YACf,MAAM,eAAe,GAAG,MAAM,EAAE,CAAC,QAAQ,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;YAC7D,MAAM,KAAK,GAAG,eAAe,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAE1C,uBAAuB;YACvB,MAAM,YAAY,GAAG,CAAC,GAAG,MAAM,CAAC,CAAC,IAAI,CACnC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,SAAS,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ,EAAE,SAAS,IAAI,CAAC,CAAC,CACtE,CAAC;YAEF,IAAI,eAAe,GAAG,CAAC,CAAC;YAExB,oBAAoB;YACpB,KAAK,MAAM,KAAK,IAAI,YAAY,EAAE,CAAC;gBACjC,MAAM,UAAU,GAAG,IAAI,CAAC,mBAAmB,CAAC,kCAAkC,CAC5E,KAAK,EACL,QAAQ,EACR,OAAO,CACR,CAAC;gBAEF,mBAAmB;gBACnB,MAAM,SAAS,GAAG,CAAC,KAAK,CAAC,QAAQ,EAAE,SAAS,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;gBACvD,IAAI,SAAS,IAAI,CAAC,IAAI,SAAS,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC;oBAC/C,cAAc;oBACd,MAAM,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC;oBACpD,MAAM,kBAAkB,GAAG,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;oBAEhE,aAAa;oBACb,KAAK,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,EAAE,kBAAkB,CAAC,CAAC;oBAC/C,eAAe,EAAE,CAAC;gBACpB,CAAC;YACH,CAAC;YAED,MAAM,gBAAgB,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAE1C,OAAO;gBACL,QAAQ;gBACR,eAAe;gBACf,gBAAgB;gBAChB,eAAe;aAChB,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,sBAAsB,QAAQ,GAAG,EAAE,KAAK,CAAC,CAAC;YACxD,OAAO,IAAI,CAAC;QACd,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,kBAAkB,CACtB,WAA6B,EAC7B,SAAkB,EAClB,OAA2B;QAE3B,KAAK,MAAM,UAAU,IAAI,WAAW,EAAE,CAAC;YACrC,IAAI,OAAO,EAAE,SAAS,EAAE,CAAC;gBACvB,aAAa;gBACb,MAAM,EAAE,CAAC,SAAS,CAAC,UAAU,CAAC,QAAQ,EAAE,UAAU,CAAC,gBAAgB,EAAE,OAAO,CAAC,CAAC;YAChF,CAAC;iBAAM,CAAC;gBACN,cAAc;gBACd,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;gBACtE,MAAM,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;gBAC3D,MAAM,EAAE,CAAC,SAAS,CAAC,UAAU,EAAE,UAAU,CAAC,gBAAgB,EAAE,OAAO,CAAC,CAAC;YACvE,CAAC;QACH,CAAC;IACH,CAAC;IAED;;OAEG;IACH,yBAAyB,CAAC,WAA6B;QACrD,MAAM,KAAK,GAAa,EAAE,CAAC;QAE3B,KAAK,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;QACnC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACf,KAAK,CAAC,IAAI,CAAC,0BAA0B,WAAW,CAAC,MAAM,EAAE,CAAC,CAAC;QAE3D,MAAM,gBAAgB,GAAG,WAAW,CAAC,MAAM,CACzC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,GAAG,GAAG,GAAG,CAAC,eAAe,EACvC,CAAC,CACF,CAAC;QACF,KAAK,CAAC,IAAI,CAAC,4BAA4B,gBAAgB,EAAE,CAAC,CAAC;QAC3D,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAEf,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC3B,KAAK,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;YAClC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAEf,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;gBACxB,KAAK,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,QAAQ,KAAK,GAAG,CAAC,eAAe,cAAc,CAAC,CAAC;YACtE,CAAC,CAAC,CAAC;QACL,CAAC;QAED,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC1B,CAAC;IAED;;OAEG;IACH,kBAAkB,CAAC,WAA6B;QAC9C,MAAM,KAAK,GAAa,EAAE,CAAC;QAE3B,KAAK,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;QACvC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAEf,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;YACxB,KAAK,CAAC,IAAI,CAAC,YAAY,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;YACvC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YACf,KAAK,CAAC,IAAI,CAAC,sBAAsB,GAAG,CAAC,eAAe,EAAE,CAAC,CAAC;YACxD,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAEf,WAAW;YACX,MAAM,aAAa,GAAG,GAAG,CAAC,eAAe,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YACtD,MAAM,cAAc,GAAG,GAAG,CAAC,gBAAgB,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAExD,IAAI,UAAU,GAAG,CAAC,CAAC;YACnB,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;YAEjB,OAAO,CAAC,GAAG,aAAa,CAAC,MAAM,IAAI,CAAC,GAAG,cAAc,CAAC,MAAM,EAAE,CAAC;gBAC7D,IAAI,CAAC,IAAI,aAAa,CAAC,MAAM,EAAE,CAAC;oBAC9B,gBAAgB;oBAChB,KAAK,CAAC,IAAI,CAAC,KAAK,UAAU,KAAK,cAAc,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;oBACpD,CAAC,EAAE,CAAC;gBACN,CAAC;qBAAM,IAAI,CAAC,IAAI,cAAc,CAAC,MAAM,EAAE,CAAC;oBACtC,eAAe;oBACf,KAAK,CAAC,IAAI,CAAC,KAAK,UAAU,KAAK,aAAa,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;oBACnD,CAAC,EAAE,CAAC;gBACN,CAAC;qBAAM,IAAI,aAAa,CAAC,CAAC,CAAC,KAAK,cAAc,CAAC,CAAC,CAAC,EAAE,CAAC;oBAClD,OAAO;oBACP,CAAC,EAAE,CAAC;oBACJ,CAAC,EAAE,CAAC;gBACN,CAAC;qBAAM,CAAC;oBACN,gBAAgB;oBAChB,KAAK,CAAC,IAAI,CAAC,KAAK,UAAU,KAAK,cAAc,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;oBACpD,CAAC,EAAE,CAAC;gBACN,CAAC;gBACD,UAAU,EAAE,CAAC;YACf,CAAC;YAED,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACjB,CAAC,CAAC,CAAC;QAEH,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC1B,CAAC;IAED;;OAEG;IACK,iBAAiB,CAAC,MAAe;QACvC,MAAM,OAAO,GAAG,IAAI,GAAG,EAAmB,CAAC;QAE3C,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YACrB,IAAI,CAAC,KAAK,CAAC,QAAQ;gBAAE,OAAO;YAC5B,MAAM,IAAI,GAAG,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC;YACjC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;gBACvB,OAAO,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;YACxB,CAAC;YACD,OAAO,CAAC,GAAG,CAAC,IAAI,CAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;QAEH,OAAO,OAAO,CAAC;IACjB,CAAC;IAED;;OAEG;IACK,aAAa,CAAC,IAAY;QAChC,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QACnC,OAAO,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IAC/B,CAAC;IAED;;OAEG;IACK,WAAW,CAAC,UAAkB,EAAE,MAAc;QACpD,MAAM,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACrC,OAAO,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,MAAM,GAAG,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACrD,CAAC;IAED;;OAEG;IACK,aAAa,CAAC,YAAoB,EAAE,SAAkB;QAC5D,IAAI,CAAC,SAAS,EAAE,CAAC;YACf,+BAA+B;YAC/B,MAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;YACvC,MAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;YACvC,MAAM,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,YAAY,EAAE,GAAG,CAAC,CAAC;YAC9C,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,aAAa,GAAG,EAAE,CAAC,CAAC;QACnD,CAAC;QAED,sBAAsB;QACtB,MAAM,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,YAAY,CAAC,CAAC;QAChE,OAAO,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC;IAC5C,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,qBAAqB,CAAC,OAAe;QACjD,IAAI,CAAC;YACH,MAAM,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QAC3B,CAAC;QAAC,MAAM,CAAC;YACP,MAAM,EAAE,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;QAC/C,CAAC;IACH,CAAC;IAED;;OAEG;IACH,kBAAkB,CAChB,MAAgC,EAChC,OAA2B;QAE3B,MAAM,KAAK,GAAa,EAAE,CAAC;QAE3B,KAAK,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;QACnC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACf,KAAK,CAAC,IAAI,CAAC,2CAA2C,CAAC,CAAC;QACxD,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAEf,MAAM,YAAY,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAE3D,YAAY,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,QAAQ,EAAE,EAAE;YACxC,KAAK,CAAC,IAAI,CAAC,MAAM,QAAQ,EAAE,CAAC,CAAC;YAC7B,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAEf,UAAU;YACV,MAAM,YAAY,GAAG,CAAC,GAAG,MAAM,CAAC,CAAC,IAAI,CACnC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,SAAS,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ,EAAE,SAAS,IAAI,CAAC,CAAC,CACtE,CAAC;YAEF,YAAY,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;gBAC3B,MAAM,UAAU,GAAG,IAAI,CAAC,mBAAmB,CAAC,kCAAkC,CAC5E,KAAK,EACL,QAAQ,EACR,OAAO,CACR,CAAC;gBAEF,KAAK,CAAC,IAAI,CAAC,QAAQ,KAAK,CAAC,QAAQ,EAAE,SAAS,IAAI,CAAC,GAAG,CAAC,CAAC;gBACtD,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAClB,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;gBACvB,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAClB,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YACjB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC1B,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,kBAAkB,CACtB,QAAgB,EAChB,MAAe;QAEf,IAAI,CAAC;YACH,MAAM,OAAO,GAAG,MAAM,EAAE,CAAC,QAAQ,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;YACrD,MAAM,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAElC,MAAM,gBAAgB,GAAG,MAAM,IAAI,OAAO,CAAC;YAC3C,MAAM,YAAY,GAAG,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;gBACvC,kBAAkB;gBAClB,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;gBAC5B,OAAO,CAAC,CACN,OAAO,CAAC,UAAU,CAAC,MAAM,gBAAgB,GAAG,CAAC;oBAC7C,OAAO,CAAC,UAAU,CAAC,KAAK,gBAAgB,GAAG,CAAC;oBAC5C,OAAO,CAAC,UAAU,CAAC,QAAQ,gBAAgB,GAAG,CAAC;oBAC/C,OAAO,CAAC,QAAQ,CAAC,KAAK,gBAAgB,2BAA2B,CAAC,CACnE,CAAC;YACJ,CAAC,CAAC,CAAC;YAEH,IAAI,YAAY,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC;gBACvC,MAAM,cAAc,GAAG,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAC/C,MAAM,EAAE,CAAC,SAAS,CAAC,QAAQ,EAAE,cAAc,EAAE,OAAO,CAAC,CAAC;gBACtD,OAAO,IAAI,CAAC;YACd,CAAC;YAED,OAAO,KAAK,CAAC;QACf,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,oCAAoC,QAAQ,GAAG,EAAE,KAAK,CAAC,CAAC;YACtE,OAAO,KAAK,CAAC;QACf,CAAC;IACH,CAAC;CACF,CAAA;AApUY,sCAAa;wBAAb,aAAa;IADzB,IAAA,sBAAU,GAAE;IAGR,WAAA,IAAA,kBAAM,EAAC,yCAAmB,CAAC,CAAA;qCAA8B,yCAAmB;GAFpE,aAAa,CAoUzB","names":[],"sources":["/Users/sasakama/Projects/Rimor/src/reporting/CodeAnnotator.ts"],"sourcesContent":["/**\n * Code Annotator\n * v0.8.0 - Phase 4: Context Engineering\n * \n * ソースコードファイルにインライン・アノテーションを追加\n */\n\nimport { injectable, inject } from 'inversify';\nimport * as fs from 'fs/promises';\nimport * as path from 'path';\nimport { AnnotationGenerator } from './AnnotationGenerator';\nimport {\n  StructuredAnalysisResult,\n  Issue,\n  AnnotationOptions\n} from './types';\n\ninterface FileAnnotation {\n  filePath: string;\n  originalContent: string;\n  annotatedContent: string;\n  annotationCount: number;\n}\n\n@injectable()\nexport class CodeAnnotator {\n  constructor(\n    @inject(AnnotationGenerator) private annotationGenerator: AnnotationGenerator\n  ) {}\n\n  /**\n   * 分析結果に基づいてソースコードにアノテーションを追加\n   */\n  async annotateFiles(\n    result: StructuredAnalysisResult,\n    options?: AnnotationOptions\n  ): Promise<FileAnnotation[]> {\n    // ファイル別に問題をグループ化\n    const issuesByFile = this.groupIssuesByFile(result.issues);\n    const annotations: FileAnnotation[] = [];\n\n    for (const [filePath, issues] of issuesByFile.entries()) {\n      try {\n        const annotation = await this.annotateFile(filePath, issues, options);\n        if (annotation) {\n          annotations.push(annotation);\n        }\n      } catch (error) {\n        console.error(`Failed to annotate ${filePath}:`, error);\n      }\n    }\n\n    return annotations;\n  }\n\n  /**\n   * 単一ファイルにアノテーションを追加\n   */\n  async annotateFile(\n    filePath: string,\n    issues: Issue[],\n    options?: AnnotationOptions\n  ): Promise<FileAnnotation | null> {\n    try {\n      // ファイルの内容を読み込み\n      const originalContent = await fs.readFile(filePath, 'utf-8');\n      const lines = originalContent.split('\\n');\n\n      // 行番号でソート（逆順）して、後ろから挿入\n      const sortedIssues = [...issues].sort(\n        (a, b) => (b.location?.startLine || 0) - (a.location?.startLine || 0)\n      );\n\n      let annotationCount = 0;\n\n      // 各問題に対してアノテーションを挿入\n      for (const issue of sortedIssues) {\n        const annotation = this.annotationGenerator.generateLanguageSpecificAnnotation(\n          issue,\n          filePath,\n          options\n        );\n\n        // アノテーションを該当行の前に挿入\n        const lineIndex = (issue.location?.startLine || 1) - 1;\n        if (lineIndex >= 0 && lineIndex < lines.length) {\n          // 既存のインデントを保持\n          const indent = this.extractIndent(lines[lineIndex]);\n          const indentedAnnotation = this.applyIndent(annotation, indent);\n\n          // アノテーションを挿入\n          lines.splice(lineIndex, 0, indentedAnnotation);\n          annotationCount++;\n        }\n      }\n\n      const annotatedContent = lines.join('\\n');\n\n      return {\n        filePath,\n        originalContent,\n        annotatedContent,\n        annotationCount\n      };\n    } catch (error) {\n      console.error(`Error reading file ${filePath}:`, error);\n      return null;\n    }\n  }\n\n  /**\n   * アノテーション付きファイルを保存\n   */\n  async saveAnnotatedFiles(\n    annotations: FileAnnotation[],\n    outputDir?: string,\n    options?: AnnotationOptions\n  ): Promise<void> {\n    for (const annotation of annotations) {\n      if (options?.overwrite) {\n        // 元のファイルを上書き\n        await fs.writeFile(annotation.filePath, annotation.annotatedContent, 'utf-8');\n      } else {\n        // 別のディレクトリに保存\n        const outputPath = this.getOutputPath(annotation.filePath, outputDir);\n        await this.ensureDirectoryExists(path.dirname(outputPath));\n        await fs.writeFile(outputPath, annotation.annotatedContent, 'utf-8');\n      }\n    }\n  }\n\n  /**\n   * アノテーションのサマリーレポートを生成\n   */\n  generateAnnotationSummary(annotations: FileAnnotation[]): string {\n    const lines: string[] = [];\n    \n    lines.push('# Annotation Summary');\n    lines.push('');\n    lines.push(`Total files annotated: ${annotations.length}`);\n    \n    const totalAnnotations = annotations.reduce(\n      (sum, ann) => sum + ann.annotationCount,\n      0\n    );\n    lines.push(`Total annotations added: ${totalAnnotations}`);\n    lines.push('');\n    \n    if (annotations.length > 0) {\n      lines.push('## Annotated Files:');\n      lines.push('');\n      \n      annotations.forEach(ann => {\n        lines.push(`- ${ann.filePath}: ${ann.annotationCount} annotations`);\n      });\n    }\n\n    return lines.join('\\n');\n  }\n\n  /**\n   * 差分レポートを生成\n   */\n  generateDiffReport(annotations: FileAnnotation[]): string {\n    const lines: string[] = [];\n    \n    lines.push('# Annotation Diff Report');\n    lines.push('');\n    \n    annotations.forEach(ann => {\n      lines.push(`## File: ${ann.filePath}`);\n      lines.push('');\n      lines.push(`Annotations added: ${ann.annotationCount}`);\n      lines.push('');\n      \n      // 簡易的な差分表示\n      const originalLines = ann.originalContent.split('\\n');\n      const annotatedLines = ann.annotatedContent.split('\\n');\n      \n      let lineNumber = 1;\n      let i = 0, j = 0;\n      \n      while (i < originalLines.length || j < annotatedLines.length) {\n        if (i >= originalLines.length) {\n          // 新しい行（アノテーション）\n          lines.push(`+ ${lineNumber}: ${annotatedLines[j]}`);\n          j++;\n        } else if (j >= annotatedLines.length) {\n          // 削除された行（ないはず）\n          lines.push(`- ${lineNumber}: ${originalLines[i]}`);\n          i++;\n        } else if (originalLines[i] === annotatedLines[j]) {\n          // 変更なし\n          i++;\n          j++;\n        } else {\n          // アノテーションが挿入された\n          lines.push(`+ ${lineNumber}: ${annotatedLines[j]}`);\n          j++;\n        }\n        lineNumber++;\n      }\n      \n      lines.push('');\n    });\n\n    return lines.join('\\n');\n  }\n\n  /**\n   * 問題をファイル別にグループ化\n   */\n  private groupIssuesByFile(issues: Issue[]): Map<string, Issue[]> {\n    const grouped = new Map<string, Issue[]>();\n\n    issues.forEach(issue => {\n      if (!issue.location) return;\n      const file = issue.location.file;\n      if (!grouped.has(file)) {\n        grouped.set(file, []);\n      }\n      grouped.get(file)!.push(issue);\n    });\n\n    return grouped;\n  }\n\n  /**\n   * 行のインデントを抽出\n   */\n  private extractIndent(line: string): string {\n    const match = line.match(/^(\\s*)/);\n    return match ? match[1] : '';\n  }\n\n  /**\n   * アノテーションにインデントを適用\n   */\n  private applyIndent(annotation: string, indent: string): string {\n    const lines = annotation.split('\\n');\n    return lines.map(line => indent + line).join('\\n');\n  }\n\n  /**\n   * 出力パスを生成\n   */\n  private getOutputPath(originalPath: string, outputDir?: string): string {\n    if (!outputDir) {\n      // デフォルト: 元のファイル名に.annotatedを追加\n      const dir = path.dirname(originalPath);\n      const ext = path.extname(originalPath);\n      const base = path.basename(originalPath, ext);\n      return path.join(dir, `${base}.annotated${ext}`);\n    }\n\n    // 指定されたディレクトリに同じ構造で保存\n    const relativePath = path.relative(process.cwd(), originalPath);\n    return path.join(outputDir, relativePath);\n  }\n\n  /**\n   * ディレクトリが存在することを確認（なければ作成）\n   */\n  private async ensureDirectoryExists(dirPath: string): Promise<void> {\n    try {\n      await fs.access(dirPath);\n    } catch {\n      await fs.mkdir(dirPath, { recursive: true });\n    }\n  }\n\n  /**\n   * プレビューモードでアノテーションを表示\n   */\n  previewAnnotations(\n    result: StructuredAnalysisResult,\n    options?: AnnotationOptions\n  ): string {\n    const lines: string[] = [];\n    \n    lines.push('# Annotation Preview');\n    lines.push('');\n    lines.push('The following annotations would be added:');\n    lines.push('');\n\n    const issuesByFile = this.groupIssuesByFile(result.issues);\n\n    issuesByFile.forEach((issues, filePath) => {\n      lines.push(`## ${filePath}`);\n      lines.push('');\n\n      // 行番号でソート\n      const sortedIssues = [...issues].sort(\n        (a, b) => (a.location?.startLine || 0) - (b.location?.startLine || 0)\n      );\n\n      sortedIssues.forEach(issue => {\n        const annotation = this.annotationGenerator.generateLanguageSpecificAnnotation(\n          issue,\n          filePath,\n          options\n        );\n\n        lines.push(`Line ${issue.location?.startLine || 0}:`);\n        lines.push('```');\n        lines.push(annotation);\n        lines.push('```');\n        lines.push('');\n      });\n    });\n\n    return lines.join('\\n');\n  }\n\n  /**\n   * アノテーションをクリーンアップ（削除）\n   */\n  async cleanupAnnotations(\n    filePath: string,\n    prefix?: string\n  ): Promise<boolean> {\n    try {\n      const content = await fs.readFile(filePath, 'utf-8');\n      const lines = content.split('\\n');\n      \n      const annotationPrefix = prefix || 'RIMOR';\n      const cleanedLines = lines.filter(line => {\n        // アノテーション行を検出して除外\n        const trimmed = line.trim();\n        return !(\n          trimmed.startsWith(`// ${annotationPrefix}-`) ||\n          trimmed.startsWith(`# ${annotationPrefix}-`) ||\n          trimmed.startsWith(`<!-- ${annotationPrefix}-`) ||\n          trimmed.includes(`* ${annotationPrefix} Security Analysis Report`)\n        );\n      });\n\n      if (cleanedLines.length < lines.length) {\n        const cleanedContent = cleanedLines.join('\\n');\n        await fs.writeFile(filePath, cleanedContent, 'utf-8');\n        return true;\n      }\n\n      return false;\n    } catch (error) {\n      console.error(`Error cleaning up annotations in ${filePath}:`, error);\n      return false;\n    }\n  }\n}"],"version":3}