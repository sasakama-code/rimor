76fe4275d3422fccc35b06bb3f1f20cd
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProjectStructureAnalyzer = void 0;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const pathSecurity_1 = require("../utils/pathSecurity");
const resourceLimits_1 = require("../utils/resourceLimits");
// 新しい分析クラスのインポート
const architecture_detector_1 = require("./structure-analysis/architecture-detector");
const naming_analyzer_1 = require("./structure-analysis/naming-analyzer");
const metrics_calculator_1 = require("./structure-analysis/metrics-calculator");
const pattern_detector_1 = require("./structure-analysis/pattern-detector");
/**
 * プロジェクト構造分析器（ファサードパターン）
 * 後方互換性を維持しながら新しい分析クラスに処理を委譲
 * プロジェクトの構造、アーキテクチャパターン、命名規則、メトリクスを分析
 * @deprecated 将来的には個別の分析クラスを直接使用することを推奨
 */
class ProjectStructureAnalyzer {
    IGNORE_PATTERNS = [
        'node_modules',
        '.git',
        'coverage',
        '.nyc_output',
        '.vscode',
        '.idea'
    ];
    resourceMonitor;
    // 新しい分析クラスのインスタンス
    architectureDetector;
    namingAnalyzer;
    metricsCalculator;
    patternDetector;
    constructor(resourceMonitor) {
        this.resourceMonitor = resourceMonitor || new resourceLimits_1.ResourceLimitMonitor();
        // 新しい分析クラスのインスタンスを作成
        this.architectureDetector = new architecture_detector_1.ArchitectureDetector();
        this.namingAnalyzer = new naming_analyzer_1.NamingAnalyzer();
        this.metricsCalculator = new metrics_calculator_1.MetricsCalculator();
        this.patternDetector = new pattern_detector_1.PatternDetector();
    }
    SUPPORTED_EXTENSIONS = [
        '.ts', '.js', '.tsx', '.jsx', '.mjs', '.cjs',
        '.py', '.java', '.cs', '.cpp', '.c', '.h',
        '.go', '.rs', '.php', '.rb', '.swift', '.kt'
    ];
    FRAMEWORK_SIGNATURES = new Map([
        ['express', [/import.*express/, /require.*express/, /"express":/]],
        ['react', [/import.*react/, /from ['"]react['"]/, /"react":/]],
        ['vue', [/import.*vue/, /@vue\//, /"vue":/]],
        ['angular', [/@angular\//, /import.*@angular/, /"@angular/]],
        ['nest', [/@nestjs\//, /import.*@nestjs/, /"@nestjs/]],
        ['next', [/next\//, /import.*next/, /"next":/]],
        ['nuxt', [/nuxt/, /"nuxt":/]],
        ['mongoose', [/import.*mongoose/, /require.*mongoose/, /"mongoose":/]],
        ['prisma', [/@prisma\//, /import.*prisma/, /"prisma":/]],
        ['typeorm', [/import.*typeorm/, /"typeorm":/]]
    ]);
    TEST_FRAMEWORK_SIGNATURES = new Map([
        ['jest', [/import.*jest/, /"jest":/, /describe\(/, /it\(/, /test\(/]],
        ['mocha', [/import.*mocha/, /"mocha":/, /describe\(/, /it\(/]],
        ['jasmine', [/import.*jasmine/, /"jasmine":/]],
        ['cypress', [/import.*cypress/, /"cypress":/, /cy\./]],
        ['playwright', [/import.*playwright/, /"playwright":/]]
    ]);
    BUILD_TOOL_SIGNATURES = new Map([
        ['typescript', [/\.ts$/, /\.tsx$/, /"typescript":/, /tsconfig\.json/]],
        ['webpack', [/webpack/, /"webpack":/]],
        ['vite', [/import.*vite/, /"vite":/]],
        ['rollup', [/rollup/, /"rollup":/]],
        ['parcel', [/parcel/, /"parcel":/]],
        ['babel', [/babel/, /"babel":/]]
    ]);
    /**
     * プロジェクト構造を包括的に分析
     */
    async analyzeProjectStructure(projectPath) {
        if (!fs.existsSync(projectPath)) {
            throw new Error(`Project path does not exist: ${projectPath}`);
        }
        const [overview, directories, architecture, conventions, metrics] = await Promise.all([
            this.generateProjectOverview(projectPath),
            this.categorizeDirectories(projectPath),
            this.detectArchitecturePattern(projectPath),
            this.analyzeNamingConventions(projectPath),
            this.calculateProjectMetrics(projectPath)
        ]);
        return {
            overview,
            directories,
            architecture,
            conventions,
            metrics
        };
    }
    /**
     * アーキテクチャパターンを検出
     */
    async detectArchitecturePattern(projectPath) {
        const directories = await this.getAllDirectories(projectPath);
        const files = await this.getAllFiles(projectPath);
        const patterns = this.analyzeArchitecturePatterns(directories, files);
        let bestMatch = 'unknown';
        let maxConfidence = 0;
        const evidence = [];
        // MVC パターンの検出
        const mvcScore = this.calculateMVCScore(directories, evidence);
        if (mvcScore > maxConfidence) {
            maxConfidence = mvcScore;
            bestMatch = 'mvc';
        }
        // マイクロサービス パターンの検出
        const microservicesScore = this.calculateMicroservicesScore(directories, files, evidence);
        if (microservicesScore > maxConfidence) {
            maxConfidence = microservicesScore;
            bestMatch = 'microservices';
        }
        // レイヤードアーキテクチャの検出
        const layeredScore = this.calculateLayeredScore(directories, evidence);
        if (layeredScore > maxConfidence) {
            maxConfidence = layeredScore;
            bestMatch = 'layered';
        }
        // クリーンアーキテクチャの検出
        const cleanScore = this.calculateCleanArchitectureScore(directories, evidence);
        if (cleanScore > maxConfidence) {
            maxConfidence = cleanScore;
            bestMatch = 'clean';
        }
        return {
            type: bestMatch,
            confidence: maxConfidence,
            evidence,
            suggestions: this.generateArchitectureSuggestions(bestMatch, maxConfidence, directories)
        };
    }
    /**
     * 命名規則を分析
     */
    async analyzeNamingConventions(projectPath) {
        const files = await this.getAllFiles(projectPath);
        const codeContents = await this.readAllCodeFiles(files);
        return {
            files: await this.analyzeFileNaming(files),
            directories: await this.analyzeDirectoryNaming(projectPath),
            variables: await this.analyzeVariableNaming(codeContents),
            functions: await this.analyzeFunctionNaming(codeContents),
            classes: await this.analyzeClassNaming(codeContents)
        };
    }
    /**
     * プロジェクトメトリクスを計算
     */
    async calculateProjectMetrics(projectPath) {
        const files = await this.getAllFiles(projectPath);
        const codeFiles = files.filter(file => this.isCodeFile(file));
        const testFiles = files.filter(file => this.isTestFile(file));
        const codeContents = await this.readAllCodeFiles(codeFiles);
        const [complexity, maintainability, testability, documentation] = await Promise.all([
            this.calculateComplexityMetrics(codeContents, codeFiles),
            this.calculateMaintainabilityMetrics(codeContents, codeFiles),
            this.calculateTestabilityMetrics(codeFiles, testFiles, codeContents),
            this.calculateDocumentationMetrics(projectPath, codeFiles, codeContents)
        ]);
        return {
            complexity,
            maintainability,
            testability,
            documentation
        };
    }
    /**
     * ディレクトリを分類
     */
    async categorizeDirectories(projectPath) {
        const directories = await this.getAllDirectories(projectPath);
        const directoryInfos = [];
        for (const dir of directories) {
            const relativePath = path.relative(projectPath, dir);
            if (relativePath && !this.shouldIgnoreDirectory(path.basename(dir))) {
                const purpose = this.determineDirectoryPurpose(dir, relativePath);
                const files = fs.readdirSync(dir, { withFileTypes: true })
                    .filter(entry => entry.isFile())
                    .map(entry => entry.name);
                const subdirectories = fs.readdirSync(dir, { withFileTypes: true })
                    .filter(entry => entry.isDirectory())
                    .map(entry => entry.name);
                const patterns = this.detectDirectoryPatterns(dir, files);
                const conventions = this.detectDirectoryConventions(dir, files);
                directoryInfos.push({
                    path: relativePath,
                    purpose,
                    fileCount: files.length,
                    subdirectories,
                    patterns,
                    conventions
                });
            }
        }
        return directoryInfos;
    }
    // Private helper methods
    async generateProjectOverview(projectPath) {
        const files = await this.getAllFiles(projectPath);
        const directories = await this.getAllDirectories(projectPath);
        const languages = await this.analyzeLanguageDistribution(files);
        const frameworks = await this.detectFrameworks(files);
        const testingFrameworks = await this.detectTestingFrameworks(files);
        const buildTools = await this.detectBuildTools(files);
        return {
            rootPath: projectPath,
            totalFiles: files.length,
            totalDirectories: directories.length,
            languages,
            frameworks,
            testingFrameworks,
            buildTools
        };
    }
    async getAllFiles(projectPath) {
        const files = [];
        const walkDir = (dir, depth = 0) => {
            try {
                // 深度制限チェック
                if (!this.resourceMonitor.checkDepth(depth, projectPath)) {
                    return; // 深度制限に達した場合は探索を停止
                }
                const entries = fs.readdirSync(dir, { withFileTypes: true });
                for (const entry of entries) {
                    const fullPath = path.join(dir, entry.name);
                    // セキュリティ: パス検証
                    if (!pathSecurity_1.PathSecurity.validateProjectPath(fullPath, projectPath)) {
                        continue; // プロジェクト範囲外はスキップ
                    }
                    if (entry.isDirectory()) {
                        if (!this.shouldIgnoreDirectory(entry.name)) {
                            walkDir(fullPath, depth + 1);
                        }
                    }
                    else if (entry.isFile()) {
                        files.push(fullPath);
                    }
                }
            }
            catch (error) {
                // ディレクトリの読み込みエラーは無視
            }
        };
        walkDir(projectPath);
        return files;
    }
    async getAllDirectories(projectPath) {
        const directories = [projectPath];
        const walkDir = (dir, depth = 0) => {
            try {
                // 深度制限チェック
                if (!this.resourceMonitor.checkDepth(depth, projectPath)) {
                    return; // 深度制限に達した場合は探索を停止
                }
                const entries = fs.readdirSync(dir, { withFileTypes: true });
                for (const entry of entries) {
                    if (entry.isDirectory()) {
                        const fullPath = path.join(dir, entry.name);
                        // セキュリティ: パス検証
                        if (!pathSecurity_1.PathSecurity.validateProjectPath(fullPath, projectPath)) {
                            continue; // プロジェクト範囲外はスキップ
                        }
                        if (!this.shouldIgnoreDirectory(entry.name)) {
                            directories.push(fullPath);
                            walkDir(fullPath, depth + 1);
                        }
                    }
                }
            }
            catch (error) {
                // ディレクトリの読み込みエラーは無視
            }
        };
        walkDir(projectPath);
        return directories;
    }
    shouldIgnoreDirectory(dirName) {
        return this.IGNORE_PATTERNS.some(pattern => dirName.includes(pattern));
    }
    async analyzeLanguageDistribution(files) {
        const languageMap = new Map();
        files.forEach(file => {
            const ext = path.extname(file);
            const language = this.getLanguageFromExtension(ext);
            if (language) {
                if (!languageMap.has(language)) {
                    languageMap.set(language, { count: 0, extensions: new Set() });
                }
                languageMap.get(language).count++;
                languageMap.get(language).extensions.add(ext);
            }
        });
        const totalFiles = files.length;
        return Array.from(languageMap.entries()).map(([language, data]) => ({
            language,
            fileCount: data.count,
            percentage: (data.count / totalFiles) * 100,
            extensions: Array.from(data.extensions)
        }));
    }
    getLanguageFromExtension(ext) {
        const languageMap = {
            '.ts': 'typescript',
            '.tsx': 'typescript',
            '.js': 'javascript',
            '.jsx': 'javascript',
            '.mjs': 'javascript',
            '.cjs': 'javascript',
            '.py': 'python',
            '.java': 'java',
            '.cs': 'csharp',
            '.cpp': 'cpp',
            '.c': 'c',
            '.h': 'c',
            '.go': 'go',
            '.rs': 'rust',
            '.php': 'php',
            '.rb': 'ruby',
            '.swift': 'swift',
            '.kt': 'kotlin'
        };
        return languageMap[ext] || null;
    }
    async detectFrameworks(files) {
        return this.detectSignatures(files, this.FRAMEWORK_SIGNATURES);
    }
    async detectTestingFrameworks(files) {
        return this.detectSignatures(files, this.TEST_FRAMEWORK_SIGNATURES);
    }
    async detectBuildTools(files) {
        return this.detectSignatures(files, this.BUILD_TOOL_SIGNATURES);
    }
    async detectSignatures(files, signatures) {
        const detected = [];
        for (const [name, patterns] of signatures.entries()) {
            let matchCount = 0;
            const evidence = [];
            // package.jsonでの検出
            const packageJsonFiles = files.filter(f => f.endsWith('package.json'));
            for (const packageFile of packageJsonFiles) {
                try {
                    const content = fs.readFileSync(packageFile, 'utf-8');
                    for (const pattern of patterns) {
                        if (pattern.test(content)) {
                            matchCount += 3; // package.jsonでの検出は重要度高
                            evidence.push(`Found in ${path.basename(packageFile)}`);
                            break;
                        }
                    }
                }
                catch (error) {
                    // ファイル読み込みエラーは無視
                }
            }
            // コードファイルでの検出
            const codeFiles = files.filter(f => this.isCodeFile(f)).slice(0, 50); // パフォーマンス考慮
            for (const file of codeFiles) {
                try {
                    const content = fs.readFileSync(file, 'utf-8');
                    for (const pattern of patterns) {
                        if (pattern.test(content)) {
                            matchCount += 1;
                            evidence.push(`Found in ${path.basename(file)}`);
                            break;
                        }
                    }
                }
                catch (error) {
                    // ファイル読み込みエラーは無視
                }
            }
            if (matchCount > 0) {
                const confidence = Math.min(matchCount / 5, 1); // 最大1.0に正規化
                detected.push({
                    name,
                    confidence,
                    evidence: [...new Set(evidence)] // 重複を除去
                });
            }
        }
        return detected.sort((a, b) => b.confidence - a.confidence);
    }
    analyzeArchitecturePatterns(directories, files) {
        // アーキテクチャパターンの分析ロジック
        return {};
    }
    calculateMVCScore(directories, evidence) {
        let score = 0;
        const dirNames = directories.map(d => path.basename(d).toLowerCase());
        if (dirNames.some(name => name.includes('controller'))) {
            score += 0.3;
            evidence.push('controllers directory found');
        }
        if (dirNames.some(name => name.includes('model'))) {
            score += 0.3;
            evidence.push('models directory found');
        }
        if (dirNames.some(name => name.includes('view') || name.includes('route'))) {
            score += 0.2;
            evidence.push('views or routes directory found');
        }
        if (dirNames.some(name => name.includes('service'))) {
            score += 0.1;
            evidence.push('services directory found');
        }
        if (dirNames.some(name => name.includes('middleware'))) {
            score += 0.1;
            evidence.push('middleware directory found');
        }
        return score;
    }
    calculateMicroservicesScore(directories, files, evidence) {
        let score = 0;
        const dirNames = directories.map(d => path.basename(d).toLowerCase());
        // 複数のサービスディレクトリの存在
        const serviceCount = dirNames.filter(name => name.includes('service') || name.endsWith('-service') || name.startsWith('service-')).length;
        if (serviceCount > 2) {
            score += 0.4;
            evidence.push(`multiple service directories found (${serviceCount})`);
        }
        // Docker関連ファイル
        if (files.some(f => f.includes('Dockerfile') || f.includes('docker-compose'))) {
            score += 0.2;
            evidence.push('Docker configuration found');
        }
        // API Gateway or routing
        if (files.some(f => f.includes('gateway') || f.includes('proxy'))) {
            score += 0.2;
            evidence.push('API Gateway patterns found');
        }
        return score;
    }
    calculateLayeredScore(directories, evidence) {
        let score = 0;
        const dirNames = directories.map(d => path.basename(d).toLowerCase());
        const layers = ['presentation', 'application', 'domain', 'infrastructure', 'data'];
        const foundLayers = layers.filter(layer => dirNames.some(name => name.includes(layer)));
        if (foundLayers.length >= 3) {
            score += 0.6;
            evidence.push(`layered structure found: ${foundLayers.join(', ')}`);
        }
        return score;
    }
    calculateCleanArchitectureScore(directories, evidence) {
        let score = 0;
        const dirNames = directories.map(d => path.basename(d).toLowerCase());
        const cleanPatterns = ['entities', 'usecases', 'interfaces', 'frameworks'];
        const foundPatterns = cleanPatterns.filter(pattern => dirNames.some(name => name.includes(pattern)));
        if (foundPatterns.length >= 3) {
            score += 0.7;
            evidence.push(`clean architecture patterns found: ${foundPatterns.join(', ')}`);
        }
        return score;
    }
    generateArchitectureSuggestions(architecture, confidence, directories) {
        const suggestions = [];
        if (confidence < 0.5) {
            suggestions.push('Consider organizing code into clearer architectural patterns');
        }
        switch (architecture) {
            case 'mvc':
                suggestions.push('Consider separating business logic into service layer');
                suggestions.push('Ensure proper separation between controllers and models');
                break;
            case 'microservices':
                suggestions.push('Consider implementing service discovery');
                suggestions.push('Ensure proper inter-service communication patterns');
                break;
            case 'layered':
                suggestions.push('Maintain strict layer dependencies');
                suggestions.push('Consider using dependency injection');
                break;
            case 'clean':
                suggestions.push('Ensure dependency rule compliance');
                suggestions.push('Keep business logic independent of frameworks');
                break;
            default:
                suggestions.push('Consider adopting a well-defined architectural pattern');
        }
        return suggestions;
    }
    determineDirectoryPurpose(dirPath, relativePath) {
        const dirName = path.basename(dirPath).toLowerCase();
        const relativePathLower = relativePath.toLowerCase();
        if (dirName.includes('src') || dirName.includes('source'))
            return 'source';
        if (dirName.includes('test') || dirName.includes('spec') || relativePathLower.includes('test'))
            return 'test';
        if (dirName === 'build' || dirName === 'dist' || dirName.includes('output'))
            return 'build';
        if (dirName.includes('config') || dirName.includes('settings'))
            return 'config';
        if (dirName.includes('doc') || dirName.includes('readme') || relativePathLower.includes('docs'))
            return 'documentation';
        if (dirName.includes('asset') || dirName.includes('static') || dirName.includes('public'))
            return 'assets';
        if (dirName.includes('vendor') || dirName.includes('third') || dirName.includes('lib'))
            return 'vendor';
        return 'unknown';
    }
    detectDirectoryPatterns(dirPath, files) {
        const patterns = [];
        const dirName = path.basename(dirPath).toLowerCase();
        if (dirName.includes('controller') && files.some(f => f.includes('Controller'))) {
            patterns.push('Controller suffix pattern');
        }
        if (dirName.includes('service') && files.some(f => f.includes('Service'))) {
            patterns.push('Service suffix pattern');
        }
        if (dirName.includes('model') && files.some(f => f.includes('Model'))) {
            patterns.push('Model suffix pattern');
        }
        if (files.some(f => f.endsWith('.test.ts') || f.endsWith('.spec.ts'))) {
            patterns.push('Test file pattern');
        }
        return patterns;
    }
    detectDirectoryConventions(dirPath, files) {
        const conventions = [];
        // ファイル名の規則を分析
        const hasPascalCase = files.some(f => /^[A-Z][a-zA-Z0-9]*\./.test(f));
        const hasCamelCase = files.some(f => /^[a-z][a-zA-Z0-9]*\./.test(f));
        const hasKebabCase = files.some(f => /^[a-z][a-z0-9-]*\./.test(f));
        if (hasPascalCase)
            conventions.push('PascalCase class names');
        if (hasCamelCase)
            conventions.push('camelCase file names');
        if (hasKebabCase)
            conventions.push('kebab-case file names');
        return conventions;
    }
    async analyzeFileNaming(files) {
        const fileNames = files.map(f => path.basename(f, path.extname(f)));
        return this.analyzeNamingPattern(fileNames, 'files');
    }
    async analyzeDirectoryNaming(projectPath) {
        const directories = await this.getAllDirectories(projectPath);
        const dirNames = directories
            .map(d => path.basename(d))
            .filter(name => name !== path.basename(projectPath));
        return this.analyzeNamingPattern(dirNames, 'directories');
    }
    async analyzeVariableNaming(codeContents) {
        const variables = [];
        codeContents.forEach(content => {
            // 変数宣言を抽出
            const variableMatches = content.match(/(?:const|let|var)\s+([a-zA-Z_][a-zA-Z0-9_]*)/g);
            if (variableMatches) {
                variableMatches.forEach(match => {
                    const varName = match.replace(/(?:const|let|var)\s+/, '');
                    variables.push(varName);
                });
            }
        });
        return this.analyzeNamingPattern(variables, 'variables');
    }
    async analyzeFunctionNaming(codeContents) {
        const functions = [];
        codeContents.forEach(content => {
            // 関数宣言を抽出
            const functionMatches = content.match(/(?:function\s+([a-zA-Z_][a-zA-Z0-9_]*)|([a-zA-Z_][a-zA-Z0-9_]*)\s*\()/g);
            if (functionMatches) {
                functionMatches.forEach(match => {
                    const funcName = match.replace(/function\s+/, '').replace(/\s*\(/, '');
                    if (funcName && /^[a-zA-Z_]/.test(funcName)) {
                        functions.push(funcName);
                    }
                });
            }
        });
        return this.analyzeNamingPattern(functions, 'functions');
    }
    async analyzeClassNaming(codeContents) {
        const classes = [];
        codeContents.forEach(content => {
            // クラス宣言を抽出
            const classMatches = content.match(/class\s+([a-zA-Z_][a-zA-Z0-9_]*)/g);
            if (classMatches) {
                classMatches.forEach(match => {
                    const className = match.replace(/class\s+/, '');
                    classes.push(className);
                });
            }
        });
        return this.analyzeNamingPattern(classes, 'classes');
    }
    analyzeNamingPattern(names, type) {
        if (names.length === 0) {
            return {
                pattern: 'unknown',
                confidence: 0,
                examples: [],
                violations: []
            };
        }
        const patterns = {
            camelCase: names.filter(name => /^[a-z][a-zA-Z0-9]*$/.test(name)),
            PascalCase: names.filter(name => /^[A-Z][a-zA-Z0-9]*$/.test(name)),
            snake_case: names.filter(name => /^[a-z][a-z0-9_]*$/.test(name)),
            'kebab-case': names.filter(name => /^[a-z][a-z0-9-]*$/.test(name)),
            SCREAMING_SNAKE_CASE: names.filter(name => /^[A-Z][A-Z0-9_]*$/.test(name))
        };
        let dominantPattern = 'mixed';
        let maxCount = 0;
        Object.entries(patterns).forEach(([pattern, matches]) => {
            if (matches.length > maxCount) {
                maxCount = matches.length;
                dominantPattern = pattern;
            }
        });
        const confidence = maxCount / names.length;
        const examples = dominantPattern !== 'mixed' && dominantPattern !== 'unknown'
            ? patterns[dominantPattern] || []
            : [];
        const violations = names.filter(name => !examples.includes(name));
        return {
            pattern: dominantPattern,
            confidence,
            examples: examples.slice(0, 5), // 最大5個の例
            violations: violations.slice(0, 3) // 最大3個の違反例
        };
    }
    async readAllCodeFiles(files) {
        const contents = new Map();
        for (const file of files.slice(0, 100)) { // パフォーマンス考慮で100ファイルまで
            try {
                if (this.isCodeFile(file)) {
                    const content = fs.readFileSync(file, 'utf-8');
                    contents.set(file, content);
                }
            }
            catch (error) {
                // ファイル読み込みエラーは無視
            }
        }
        return contents;
    }
    isCodeFile(filePath) {
        const ext = path.extname(filePath);
        return this.SUPPORTED_EXTENSIONS.includes(ext);
    }
    isTestFile(filePath) {
        const fileName = path.basename(filePath);
        return fileName.includes('.test.') || fileName.includes('.spec.') || filePath.includes('/test/');
    }
    async calculateComplexityMetrics(codeContents, files) {
        let totalFunctions = 0;
        let totalComplexity = 0;
        let maxComplexity = 1;
        let totalFunctionLines = 0;
        const complexFiles = [];
        codeContents.forEach((content, filePath) => {
            const functions = this.extractFunctions(content);
            totalFunctions += functions.length;
            functions.forEach(func => {
                const complexity = this.calculateCyclomaticComplexity(func.content);
                totalComplexity += complexity;
                totalFunctionLines += func.lineCount;
                if (complexity > maxComplexity) {
                    maxComplexity = complexity;
                }
                if (complexity > 10) {
                    complexFiles.push(path.basename(filePath));
                }
            });
        });
        return {
            averageCyclomaticComplexity: totalFunctions > 0 ? totalComplexity / totalFunctions : 1,
            maxComplexity,
            complexFiles: [...new Set(complexFiles)],
            totalFunctions,
            averageFunctionLength: totalFunctions > 0 ? totalFunctionLines / totalFunctions : 0
        };
    }
    async calculateMaintainabilityMetrics(codeContents, files) {
        let totalFileSize = 0;
        let duplicatedLines = 0;
        const largeFiles = [];
        const longFunctions = [];
        codeContents.forEach((content, filePath) => {
            const lines = content.split('\n');
            const fileSize = lines.length;
            totalFileSize += fileSize;
            if (fileSize > 500) {
                largeFiles.push(path.basename(filePath));
            }
            // 長い関数を検出
            const functions = this.extractFunctions(content);
            functions.forEach(func => {
                if (func.lineCount > 50) {
                    longFunctions.push(`${func.name} in ${path.basename(filePath)}`);
                }
            });
            // 重複コードの簡易検出
            duplicatedLines += this.detectDuplicatedCode(content);
        });
        const averageFileSize = files.length > 0 ? totalFileSize / files.length : 0;
        const duplicatedCodePercentage = totalFileSize > 0 ? (duplicatedLines / totalFileSize) * 100 : 0;
        // 保守性指数の計算（簡易版）
        const maintainabilityIndex = Math.max(0, Math.min(100, 100 - (duplicatedCodePercentage * 2) - (averageFileSize / 10)));
        return {
            maintainabilityIndex,
            duplicatedCodePercentage,
            averageFileSize,
            largeFiles,
            longFunctions
        };
    }
    async calculateTestabilityMetrics(codeFiles, testFiles, codeContents) {
        const totalClasses = this.countClasses(codeContents);
        const testableClasses = this.countTestableClasses(codeContents);
        const testCoverage = codeFiles.length > 0 ? (testFiles.length / codeFiles.length) * 100 : 0;
        const mockability = this.calculateMockability(codeContents);
        return {
            testCoverage: Math.min(100, testCoverage),
            testableClasses,
            untestableClasses: totalClasses - testableClasses,
            mockability
        };
    }
    async calculateDocumentationMetrics(projectPath, codeFiles, codeContents) {
        const documentedFunctions = this.countDocumentedFunctions(codeContents);
        const documentedClasses = this.countDocumentedClasses(codeContents);
        const totalFunctions = this.countTotalFunctions(codeContents);
        const totalClasses = this.countClasses(codeContents);
        const functionCoverage = totalFunctions > 0 ? (documentedFunctions / totalFunctions) * 100 : 0;
        const classCoverage = totalClasses > 0 ? (documentedClasses / totalClasses) * 100 : 0;
        const documentationCoverage = (functionCoverage + classCoverage) / 2;
        const readmeQuality = this.assessReadmeQuality(projectPath);
        return {
            documentedFunctions,
            documentedClasses,
            documentationCoverage,
            readmeQuality
        };
    }
    // Utility methods for metrics calculation
    extractFunctions(content) {
        const functions = [];
        const lines = content.split('\n');
        for (let i = 0; i < lines.length; i++) {
            const line = lines[i];
            const funcMatch = line.match(/(?:function\s+([a-zA-Z_][a-zA-Z0-9_]*)|([a-zA-Z_][a-zA-Z0-9_]*)\s*\()/);
            if (funcMatch) {
                const funcName = funcMatch[1] || funcMatch[2];
                let braceCount = 0;
                let startLine = i;
                let endLine = i;
                let funcContent = '';
                // 関数の終わりを見つける
                for (let j = i; j < lines.length; j++) {
                    const currentLine = lines[j];
                    funcContent += currentLine + '\n';
                    braceCount += (currentLine.match(/\{/g) || []).length;
                    braceCount -= (currentLine.match(/\}/g) || []).length;
                    if (braceCount === 0 && j > i) {
                        endLine = j;
                        break;
                    }
                }
                functions.push({
                    name: funcName,
                    content: funcContent,
                    lineCount: endLine - startLine + 1
                });
            }
        }
        return functions;
    }
    calculateCyclomaticComplexity(content) {
        // 簡易サイクロマティック複雑度の計算
        const complexityKeywords = [
            /if\s*\(/g,
            /else\s+if\s*\(/g,
            /while\s*\(/g,
            /for\s*\(/g,
            /catch\s*\(/g,
            /case\s+/g,
            /\?\s*:/g, // 三項演算子
            /&&/g,
            /\|\|/g
        ];
        let complexity = 1; // 基本の複雑度
        complexityKeywords.forEach(keyword => {
            const matches = content.match(keyword);
            if (matches) {
                complexity += matches.length;
            }
        });
        return complexity;
    }
    detectDuplicatedCode(content) {
        // 簡易重複コード検出
        const lines = content.split('\n')
            .map(line => line.trim())
            .filter(line => line.length > 10 && !line.startsWith('//'));
        const lineMap = new Map();
        lines.forEach(line => {
            lineMap.set(line, (lineMap.get(line) || 0) + 1);
        });
        let duplicatedLines = 0;
        lineMap.forEach(count => {
            if (count > 1) {
                duplicatedLines += count - 1;
            }
        });
        return duplicatedLines;
    }
    countClasses(codeContents) {
        let classCount = 0;
        codeContents.forEach(content => {
            const matches = content.match(/class\s+[a-zA-Z_][a-zA-Z0-9_]*/g);
            if (matches) {
                classCount += matches.length;
            }
        });
        return classCount;
    }
    countTestableClasses(codeContents) {
        let testableCount = 0;
        codeContents.forEach(content => {
            const classMatches = content.match(/class\s+([a-zA-Z_][a-zA-Z0-9_]*)/g);
            if (classMatches) {
                classMatches.forEach(match => {
                    // クラスが依存関係注入可能かどうかの簡易チェック
                    if (content.includes('constructor(') || content.includes('public ') || content.includes('private ')) {
                        testableCount++;
                    }
                });
            }
        });
        return testableCount;
    }
    calculateMockability(codeContents) {
        let mockableComponents = 0;
        let totalComponents = 0;
        codeContents.forEach(content => {
            const classes = content.match(/class\s+[a-zA-Z_][a-zA-Z0-9_]*/g) || [];
            totalComponents += classes.length;
            // インターフェースや抽象クラスの使用をチェック
            if (content.includes('interface ') || content.includes('abstract ')) {
                mockableComponents += classes.length;
            }
        });
        return totalComponents > 0 ? (mockableComponents / totalComponents) * 100 : 0;
    }
    countDocumentedFunctions(codeContents) {
        let documentedCount = 0;
        codeContents.forEach(content => {
            const lines = content.split('\n');
            for (let i = 0; i < lines.length - 1; i++) {
                const currentLine = lines[i].trim();
                const nextLine = lines[i + 1].trim();
                // JSDocコメントの後に関数がある場合
                if (currentLine.includes('*/') && nextLine.match(/(?:function|async\s+function|\w+\s*\()/)) {
                    documentedCount++;
                }
            }
        });
        return documentedCount;
    }
    countDocumentedClasses(codeContents) {
        let documentedCount = 0;
        codeContents.forEach(content => {
            const lines = content.split('\n');
            for (let i = 0; i < lines.length - 1; i++) {
                const currentLine = lines[i].trim();
                const nextLine = lines[i + 1].trim();
                // JSDocコメントの後にクラスがある場合
                if (currentLine.includes('*/') && nextLine.startsWith('class ')) {
                    documentedCount++;
                }
            }
        });
        return documentedCount;
    }
    countTotalFunctions(codeContents) {
        let functionCount = 0;
        codeContents.forEach(content => {
            const matches = content.match(/(?:function\s+[a-zA-Z_][a-zA-Z0-9_]*|\w+\s*\()/g);
            if (matches) {
                functionCount += matches.length;
            }
        });
        return functionCount;
    }
    assessReadmeQuality(projectPath) {
        const readmeFiles = ['README.md', 'readme.md', 'README.txt', 'readme.txt'];
        let quality = 0;
        for (const fileName of readmeFiles) {
            const filePath = path.join(projectPath, fileName);
            // セキュリティ: パス検証
            if (!pathSecurity_1.PathSecurity.validateProjectPath(filePath, projectPath)) {
                continue; // プロジェクト範囲外はスキップ
            }
            if (fs.existsSync(filePath)) {
                try {
                    const content = fs.readFileSync(filePath, 'utf-8');
                    const lines = content.split('\n');
                    // 基本的な品質指標
                    if (lines.length > 10)
                        quality += 20;
                    if (content.includes('# ') || content.includes('## '))
                        quality += 20; // ヘッダー
                    if (content.includes('install') || content.includes('setup'))
                        quality += 20; // インストール説明
                    if (content.includes('usage') || content.includes('example'))
                        quality += 20; // 使用例
                    if (content.includes('```') || content.includes('`'))
                        quality += 20; // コードブロック
                    break;
                }
                catch (error) {
                    // ファイル読み込みエラーは無視
                }
            }
        }
        return quality;
    }
}
exports.ProjectStructureAnalyzer = ProjectStructureAnalyzer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL3Nhc2FrYW1hL1Byb2plY3RzL1JpbW9yL3NyYy9hbmFseXplcnMvc3RydWN0dXJlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXNCQSx1Q0FBeUI7QUFDekIsMkNBQTZCO0FBQzdCLHdEQUFxRDtBQUNyRCw0REFBK0Q7QUFFL0QsaUJBQWlCO0FBQ2pCLHNGQUFrRjtBQUNsRiwwRUFBc0U7QUFDdEUsZ0ZBQTRFO0FBQzVFLDRFQUF3RTtBQUV4RTs7Ozs7R0FLRztBQUNILE1BQWEsd0JBQXdCO0lBQ2xCLGVBQWUsR0FBRztRQUNqQyxjQUFjO1FBQ2QsTUFBTTtRQUNOLFVBQVU7UUFDVixhQUFhO1FBQ2IsU0FBUztRQUNULE9BQU87S0FDUixDQUFDO0lBRU0sZUFBZSxDQUF1QjtJQUU5QyxrQkFBa0I7SUFDVixvQkFBb0IsQ0FBdUI7SUFDM0MsY0FBYyxDQUFpQjtJQUMvQixpQkFBaUIsQ0FBb0I7SUFDckMsZUFBZSxDQUFrQjtJQUV6QyxZQUFZLGVBQXNDO1FBQ2hELElBQUksQ0FBQyxlQUFlLEdBQUcsZUFBZSxJQUFJLElBQUkscUNBQW9CLEVBQUUsQ0FBQztRQUVyRSxxQkFBcUI7UUFDckIsSUFBSSxDQUFDLG9CQUFvQixHQUFHLElBQUksNENBQW9CLEVBQUUsQ0FBQztRQUN2RCxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksZ0NBQWMsRUFBRSxDQUFDO1FBQzNDLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLHNDQUFpQixFQUFFLENBQUM7UUFDakQsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLGtDQUFlLEVBQUUsQ0FBQztJQUMvQyxDQUFDO0lBRWdCLG9CQUFvQixHQUFHO1FBQ3RDLEtBQUssRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTTtRQUM1QyxLQUFLLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLElBQUk7UUFDekMsS0FBSyxFQUFF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Q1IsQ0FBQztnQkFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO29CQUNmLGlCQUFpQjtnQkFDbkIsQ0FBQztZQUNILENBQUM7UUFDSCxDQUFDO1FBRUQsT0FBTyxPQUFPLENBQUM7SUFDakIsQ0FBQztDQUNGO0FBNWtDRCw0REE0a0NDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9zYXNha2FtYS9Qcm9qZWN0cy9SaW1vci9zcmMvYW5hbHl6ZXJzL3N0cnVjdHVyZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBQcm9qZWN0U3RydWN0dXJlLFxuICBQcm9qZWN0T3ZlcnZpZXcsXG4gIERpcmVjdG9yeUluZm8sXG4gIEFyY2hpdGVjdHVyZVBhdHRlcm4sXG4gIE5hbWluZ0NvbnZlbnRpb25zLFxuICBQcm9qZWN0TWV0cmljcyxcbiAgRGlyZWN0b3J5UHVycG9zZSxcbiAgQXJjaGl0ZWN0dXJlVHlwZSxcbiAgTmFtaW5nUGF0dGVybixcbiAgTGFuZ3VhZ2VEaXN0cmlidXRpb24sXG4gIERldGVjdGVkRnJhbWV3b3JrLFxuICBGaWxlTmFtaW5nQ29udmVudGlvbixcbiAgRGlyZWN0b3J5TmFtaW5nQ29udmVudGlvbixcbiAgVmFyaWFibGVOYW1pbmdDb252ZW50aW9uLFxuICBGdW5jdGlvbk5hbWluZ0NvbnZlbnRpb24sXG4gIENsYXNzTmFtaW5nQ29udmVudGlvbixcbiAgQ29tcGxleGl0eU1ldHJpY3MsXG4gIE1haW50YWluYWJpbGl0eU1ldHJpY3MsXG4gIFRlc3RhYmlsaXR5TWV0cmljcyxcbiAgRG9jdW1lbnRhdGlvbk1ldHJpY3Ncbn0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgUGF0aFNlY3VyaXR5IH0gZnJvbSAnLi4vdXRpbHMvcGF0aFNlY3VyaXR5JztcbmltcG9ydCB7IFJlc291cmNlTGltaXRNb25pdG9yIH0gZnJvbSAnLi4vdXRpbHMvcmVzb3VyY2VMaW1pdHMnO1xuXG4vLyDmlrDjgZfjgYTliIbmnpDjgq/jg6njgrnjga7jgqTjg7Pjg53jg7zjg4hcbmltcG9ydCB7IEFyY2hpdGVjdHVyZURldGVjdG9yIH0gZnJvbSAnLi9zdHJ1Y3R1cmUtYW5hbHlzaXMvYXJjaGl0ZWN0dXJlLWRldGVjdG9yJztcbmltcG9ydCB7IE5hbWluZ0FuYWx5emVyIH0gZnJvbSAnLi9zdHJ1Y3R1cmUtYW5hbHlzaXMvbmFtaW5nLWFuYWx5emVyJztcbmltcG9ydCB7IE1ldHJpY3NDYWxjdWxhdG9yIH0gZnJvbSAnLi9zdHJ1Y3R1cmUtYW5hbHlzaXMvbWV0cmljcy1jYWxjdWxhdG9yJztcbmltcG9ydCB7IFBhdHRlcm5EZXRlY3RvciB9IGZyb20gJy4vc3RydWN0dXJlLWFuYWx5c2lzL3BhdHRlcm4tZGV0ZWN0b3InO1xuXG4vKipcbiAqIOODl+ODreOCuOOCp+OCr+ODiOani+mAoOWIhuaekOWZqO+8iOODleOCoeOCteODvOODieODkeOCv+ODvOODs++8iVxuICog5b6M5pa55LqS5o+b5oCn44KS57at5oyB44GX44Gq44GM44KJ5paw44GX44GE5YiG5p6Q44Kv44Op44K544Gr5Yem55CG44KS5aeU6K2yXG4gKiDjg5fjg63jgrjjgqfjgq/jg4jjga7mp4vpgKDjgIHjgqLjg7zjgq3jg4bjgq/jg4Hjg6Pjg5Hjgr/jg7zjg7PjgIHlkb3lkI3opo/liYfjgIHjg6Hjg4jjg6rjgq/jgrnjgpLliIbmnpBcbiAqIEBkZXByZWNhdGVkIOWwhuadpeeahOOBq+OBr+WAi+WIpeOBruWIhuaekOOCr+ODqeOCueOCkuebtOaOpeS9v+eUqOOBmeOCi+OBk+OBqOOCkuaOqOWlqFxuICovXG5leHBvcnQgY2xhc3MgUHJvamVjdFN0cnVjdHVyZUFuYWx5emVyIHtcbiAgcHJpdmF0ZSByZWFkb25seSBJR05PUkVfUEFUVEVSTlMgPSBbXG4gICAgJ25vZGVfbW9kdWxlcycsXG4gICAgJy5naXQnLFxuICAgICdjb3ZlcmFnZScsXG4gICAgJy5ueWNfb3V0cHV0JyxcbiAgICAnLnZzY29kZScsXG4gICAgJy5pZGVhJ1xuICBdO1xuICBcbiAgcHJpdmF0ZSByZXNvdXJjZU1vbml0b3I6IFJlc291cmNlTGltaXRNb25pdG9yO1xuICBcbiAgLy8g5paw44GX44GE5YiG5p6Q44Kv44Op44K544Gu44Kk44Oz44K544K/44Oz44K5XG4gIHByaXZhdGUgYXJjaGl0ZWN0dXJlRGV0ZWN0b3I6IEFyY2hpdGVjdHVyZURldGVjdG9yO1xuICBwcml2YXRlIG5hbWluZ0FuYWx5emVyOiBOYW1pbmdBbmFseXplcjtcbiAgcHJpdmF0ZSBtZXRyaWNzQ2FsY3VsYXRvcjogTWV0cmljc0NhbGN1bGF0b3I7XG4gIHByaXZhdGUgcGF0dGVybkRldGVjdG9yOiBQYXR0ZXJuRGV0ZWN0b3I7XG5cbiAgY29uc3RydWN0b3IocmVzb3VyY2VNb25pdG9yPzogUmVzb3VyY2VMaW1pdE1vbml0b3IpIHtcbiAgICB0aGlzLnJlc291cmNlTW9uaXRvciA9IHJlc291cmNlTW9uaXRvciB8fCBuZXcgUmVzb3VyY2VMaW1pdE1vbml0b3IoKTtcbiAgICBcbiAgICAvLyDmlrDjgZfjgYTliIbmnpDjgq/jg6njgrnjga7jgqTjg7Pjgrnjgr/jg7PjgrnjgpLkvZzmiJBcbiAgICB0aGlzLmFyY2hpdGVjdHVyZURldGVjdG9yID0gbmV3IEFyY2hpdGVjdHVyZURldGVjdG9yKCk7XG4gICAgdGhpcy5uYW1pbmdBbmFseXplciA9IG5ldyBOYW1pbmdBbmFseXplcigpO1xuICAgIHRoaXMubWV0cmljc0NhbGN1bGF0b3IgPSBuZXcgTWV0cmljc0NhbGN1bGF0b3IoKTtcbiAgICB0aGlzLnBhdHRlcm5EZXRlY3RvciA9IG5ldyBQYXR0ZXJuRGV0ZWN0b3IoKTtcbiAgfVxuXG4gIHByaXZhdGUgcmVhZG9ubHkgU1VQUE9SVEVEX0VYVEVOU0lPTlMgPSBbXG4gICAgJy50cycsICcuanMnLCAnLnRzeCcsICcuanN4JywgJy5tanMnLCAnLmNqcycsXG4gICAgJy5weScsICcuamF2YScsICcuY3MnLCAnLmNwcCcsICcuYycsICcuaCcsXG4gICAgJy5nbycsICcucnMnLCAnLnBocCcsICcucmInLCAnLnN3aWZ0JywgJy5rdCdcbiAgXTtcblxuICBwcml2YXRlIHJlYWRvbmx5IEZSQU1FV09SS19TSUdOQVRVUkVTID0gbmV3IE1hcDxzdHJpbmcsIFJlZ0V4cFtdPihbXG4gICAgWydleHByZXNzJywgWy9pbXBvcnQuKmV4cHJlc3MvLCAvcmVxdWlyZS4qZXhwcmVzcy8sIC9cImV4cHJlc3NcIjovXV0sXG4gICAgWydyZWFjdCcsIFsvaW1wb3J0LipyZWFjdC8sIC9mcm9tIFsnXCJdcmVhY3RbJ1wiXS8sIC9cInJlYWN0XCI6L11dLFxuICAgIFsndnVlJywgWy9pbXBvcnQuKnZ1ZS8sIC9AdnVlXFwvLywgL1widnVlXCI6L11dLFxuICAgIFsnYW5ndWxhcicsIFsvQGFuZ3VsYXJcXC8vLCAvaW1wb3J0LipAYW5ndWxhci8sIC9cIkBhbmd1bGFyL11dLFxuICAgIFsnbmVzdCcsIFsvQG5lc3Rqc1xcLy8sIC9pbXBvcnQuKkBuZXN0anMvLCAvXCJAbmVzdGpzL11dLFxuICAgIFsnbmV4dCcsIFsvbmV4dFxcLy8sIC9pbXBvcnQuKm5leHQvLCAvXCJuZXh0XCI6L11dLFxuICAgIFsnbnV4dCcsIFsvbnV4dC8sIC9cIm51eHRcIjovXV0sXG4gICAgWydtb25nb29zZScsIFsvaW1wb3J0Liptb25nb29zZS8sIC9yZXF1aXJlLiptb25nb29zZS8sIC9cIm1vbmdvb3NlXCI6L11dLFxuICAgIFsncHJpc21hJywgWy9AcHJpc21hXFwvLywgL2ltcG9ydC4qcHJpc21hLywgL1wicHJpc21hXCI6L11dLFxuICAgIFsndHlwZW9ybScsIFsvaW1wb3J0Lip0eXBlb3JtLywgL1widHlwZW9ybVwiOi9dXVxuICBdKTtcblxuICBwcml2YXRlIHJlYWRvbmx5IFRFU1RfRlJBTUVXT1JLX1NJR05BVFVSRVMgPSBuZXcgTWFwPHN0cmluZywgUmVnRXhwW10+KFtcbiAgICBbJ2plc3QnLCBbL2ltcG9ydC4qamVzdC8sIC9cImplc3RcIjovLCAvZGVzY3JpYmVcXCgvLCAvaXRcXCgvLCAvdGVzdFxcKC9dXSxcbiAgICBbJ21vY2hhJywgWy9pbXBvcnQuKm1vY2hhLywgL1wibW9jaGFcIjovLCAvZGVzY3JpYmVcXCgvLCAvaXRcXCgvXV0sXG4gICAgWydqYXNtaW5lJywgWy9pbXBvcnQuKmphc21pbmUvLCAvXCJqYXNtaW5lXCI6L11dLFxuICAgIFsnY3lwcmVzcycsIFsvaW1wb3J0LipjeXByZXNzLywgL1wiY3lwcmVzc1wiOi8sIC9jeVxcLi9dXSxcbiAgICBbJ3BsYXl3cmlnaHQnLCBbL2ltcG9ydC4qcGxheXdyaWdodC8sIC9cInBsYXl3cmlnaHRcIjovXV1cbiAgXSk7XG5cbiAgcHJpdmF0ZSByZWFkb25seSBCVUlMRF9UT09MX1NJR05BVFVSRVMgPSBuZXcgTWFwPHN0cmluZywgUmVnRXhwW10+KFtcbiAgICBbJ3R5cGVzY3JpcHQnLCBbL1xcLnRzJC8sIC9cXC50c3gkLywgL1widHlwZXNjcmlwdFwiOi8sIC90c2NvbmZpZ1xcLmpzb24vXV0sXG4gICAgWyd3ZWJwYWNrJywgWy93ZWJwYWNrLywgL1wid2VicGFja1wiOi9dXSxcbiAgICBbJ3ZpdGUnLCBbL2ltcG9ydC4qdml0ZS8sIC9cInZpdGVcIjovXV0sXG4gICAgWydyb2xsdXAnLCBbL3JvbGx1cC8sIC9cInJvbGx1cFwiOi9dXSxcbiAgICBbJ3BhcmNlbCcsIFsvcGFyY2VsLywgL1wicGFyY2VsXCI6L11dLFxuICAgIFsnYmFiZWwnLCBbL2JhYmVsLywgL1wiYmFiZWxcIjovXV1cbiAgXSk7XG5cbiAgLyoqXG4gICAqIOODl+ODreOCuOOCp+OCr+ODiOani+mAoOOCkuWMheaLrOeahOOBq+WIhuaekFxuICAgKi9cbiAgYXN5bmMgYW5hbHl6ZVByb2plY3RTdHJ1Y3R1cmUocHJvamVjdFBhdGg6IHN0cmluZyk6IFByb21pc2U8UHJvamVjdFN0cnVjdHVyZT4ge1xuICAgIGlmICghZnMuZXhpc3RzU3luYyhwcm9qZWN0UGF0aCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgUHJvamVjdCBwYXRoIGRvZXMgbm90IGV4aXN0OiAke3Byb2plY3RQYXRofWApO1xuICAgIH1cblxuICAgIGNvbnN0IFtvdmVydmlldywgZGlyZWN0b3JpZXMsIGFyY2hpdGVjdHVyZSwgY29udmVudGlvbnMsIG1ldHJpY3NdID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgdGhpcy5nZW5lcmF0ZVByb2plY3RPdmVydmlldyhwcm9qZWN0UGF0aCksXG4gICAgICB0aGlzLmNhdGVnb3JpemVEaXJlY3Rvcmllcyhwcm9qZWN0UGF0aCksXG4gICAgICB0aGlzLmRldGVjdEFyY2hpdGVjdHVyZVBhdHRlcm4ocHJvamVjdFBhdGgpLFxuICAgICAgdGhpcy5hbmFseXplTmFtaW5nQ29udmVudGlvbnMocHJvamVjdFBhdGgpLFxuICAgICAgdGhpcy5jYWxjdWxhdGVQcm9qZWN0TWV0cmljcyhwcm9qZWN0UGF0aClcbiAgICBdKTtcblxuICAgIHJldHVybiB7XG4gICAgICBvdmVydmlldyxcbiAgICAgIGRpcmVjdG9yaWVzLFxuICAgICAgYXJjaGl0ZWN0dXJlLFxuICAgICAgY29udmVudGlvbnMsXG4gICAgICBtZXRyaWNzXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgqLjg7zjgq3jg4bjgq/jg4Hjg6Pjg5Hjgr/jg7zjg7PjgpLmpJzlh7pcbiAgICovXG4gIGFzeW5jIGRldGVjdEFyY2hpdGVjdHVyZVBhdHRlcm4ocHJvamVjdFBhdGg6IHN0cmluZyk6IFByb21pc2U8QXJjaGl0ZWN0dXJlUGF0dGVybj4ge1xuICAgIGNvbnN0IGRpcmVjdG9yaWVzID0gYXdhaXQgdGhpcy5nZXRBbGxEaXJlY3Rvcmllcyhwcm9qZWN0UGF0aCk7XG4gICAgY29uc3QgZmlsZXMgPSBhd2FpdCB0aGlzLmdldEFsbEZpbGVzKHByb2plY3RQYXRoKTtcbiAgICBjb25zdCBwYXR0ZXJucyA9IHRoaXMuYW5hbHl6ZUFyY2hpdGVjdHVyZVBhdHRlcm5zKGRpcmVjdG9yaWVzLCBmaWxlcyk7XG4gICAgXG4gICAgbGV0IGJlc3RNYXRjaDogQXJjaGl0ZWN0dXJlVHlwZSA9ICd1bmtub3duJztcbiAgICBsZXQgbWF4Q29uZmlkZW5jZSA9IDA7XG4gICAgY29uc3QgZXZpZGVuY2U6IHN0cmluZ1tdID0gW107XG4gICAgXG4gICAgLy8gTVZDIOODkeOCv+ODvOODs+OBruaknOWHulxuICAgIGNvbnN0IG12Y1Njb3JlID0gdGhpcy5jYWxjdWxhdGVNVkNTY29yZShkaXJlY3RvcmllcywgZXZpZGVuY2UpO1xuICAgIGlmIChtdmNTY29yZSA+IG1heENvbmZpZGVuY2UpIHtcbiAgICAgIG1heENvbmZpZGVuY2UgPSBtdmNTY29yZTtcbiAgICAgIGJlc3RNYXRjaCA9ICdtdmMnO1xuICAgIH1cbiAgICBcbiAgICAvLyDjg57jgqTjgq/jg63jgrXjg7zjg5Pjgrkg44OR44K/44O844Oz44Gu5qSc5Ye6XG4gICAgY29uc3QgbWljcm9zZXJ2aWNlc1Njb3JlID0gdGhpcy5jYWxjdWxhdGVNaWNyb3NlcnZpY2VzU2NvcmUoZGlyZWN0b3JpZXMsIGZpbGVzLCBldmlkZW5jZSk7XG4gICAgaWYgKG1pY3Jvc2VydmljZXNTY29yZSA+IG1heENvbmZpZGVuY2UpIHtcbiAgICAgIG1heENvbmZpZGVuY2UgPSBtaWNyb3NlcnZpY2VzU2NvcmU7XG4gICAgICBiZXN0TWF0Y2ggPSAnbWljcm9zZXJ2aWNlcyc7XG4gICAgfVxuICAgIFxuICAgIC8vIOODrOOCpOODpOODvOODieOCouODvOOCreODhuOCr+ODgeODo+OBruaknOWHulxuICAgIGNvbnN0IGxheWVyZWRTY29yZSA9IHRoaXMuY2FsY3VsYXRlTGF5ZXJlZFNjb3JlKGRpcmVjdG9yaWVzLCBldmlkZW5jZSk7XG4gICAgaWYgKGxheWVyZWRTY29yZSA+IG1heENvbmZpZGVuY2UpIHtcbiAgICAgIG1heENvbmZpZGVuY2UgPSBsYXllcmVkU2NvcmU7XG4gICAgICBiZXN0TWF0Y2ggPSAnbGF5ZXJlZCc7XG4gICAgfVxuXG4gICAgLy8g44Kv44Oq44O844Oz44Ki44O844Kt44OG44Kv44OB44Oj44Gu5qSc5Ye6XG4gICAgY29uc3QgY2xlYW5TY29yZSA9IHRoaXMuY2FsY3VsYXRlQ2xlYW5BcmNoaXRlY3R1cmVTY29yZShkaXJlY3RvcmllcywgZXZpZGVuY2UpO1xuICAgIGlmIChjbGVhblNjb3JlID4gbWF4Q29uZmlkZW5jZSkge1xuICAgICAgbWF4Q29uZmlkZW5jZSA9IGNsZWFuU2NvcmU7XG4gICAgICBiZXN0TWF0Y2ggPSAnY2xlYW4nO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBiZXN0TWF0Y2gsXG4gICAgICBjb25maWRlbmNlOiBtYXhDb25maWRlbmNlLFxuICAgICAgZXZpZGVuY2UsXG4gICAgICBzdWdnZXN0aW9uczogdGhpcy5nZW5lcmF0ZUFyY2hpdGVjdHVyZVN1Z2dlc3Rpb25zKGJlc3RNYXRjaCwgbWF4Q29uZmlkZW5jZSwgZGlyZWN0b3JpZXMpXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiDlkb3lkI3opo/liYfjgpLliIbmnpBcbiAgICovXG4gIGFzeW5jIGFuYWx5emVOYW1pbmdDb252ZW50aW9ucyhwcm9qZWN0UGF0aDogc3RyaW5nKTogUHJvbWlzZTxOYW1pbmdDb252ZW50aW9ucz4ge1xuICAgIGNvbnN0IGZpbGVzID0gYXdhaXQgdGhpcy5nZXRBbGxGaWxlcyhwcm9qZWN0UGF0aCk7XG4gICAgY29uc3QgY29kZUNvbnRlbnRzID0gYXdhaXQgdGhpcy5yZWFkQWxsQ29kZUZpbGVzKGZpbGVzKTtcbiAgICBcbiAgICByZXR1cm4ge1xuICAgICAgZmlsZXM6IGF3YWl0IHRoaXMuYW5hbHl6ZUZpbGVOYW1pbmcoZmlsZXMpLFxuICAgICAgZGlyZWN0b3JpZXM6IGF3YWl0IHRoaXMuYW5hbHl6ZURpcmVjdG9yeU5hbWluZyhwcm9qZWN0UGF0aCksXG4gICAgICB2YXJpYWJsZXM6IGF3YWl0IHRoaXMuYW5hbHl6ZVZhcmlhYmxlTmFtaW5nKGNvZGVDb250ZW50cyksXG4gICAgICBmdW5jdGlvbnM6IGF3YWl0IHRoaXMuYW5hbHl6ZUZ1bmN0aW9uTmFtaW5nKGNvZGVDb250ZW50cyksXG4gICAgICBjbGFzc2VzOiBhd2FpdCB0aGlzLmFuYWx5emVDbGFzc05hbWluZyhjb2RlQ29udGVudHMpXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5fjg63jgrjjgqfjgq/jg4jjg6Hjg4jjg6rjgq/jgrnjgpLoqIjnrpdcbiAgICovXG4gIGFzeW5jIGNhbGN1bGF0ZVByb2plY3RNZXRyaWNzKHByb2plY3RQYXRoOiBzdHJpbmcpOiBQcm9taXNlPFByb2plY3RNZXRyaWNzPiB7XG4gICAgY29uc3QgZmlsZXMgPSBhd2FpdCB0aGlzLmdldEFsbEZpbGVzKHByb2plY3RQYXRoKTtcbiAgICBjb25zdCBjb2RlRmlsZXMgPSBmaWxlcy5maWx0ZXIoZmlsZSA9PiB0aGlzLmlzQ29kZUZpbGUoZmlsZSkpO1xuICAgIGNvbnN0IHRlc3RGaWxlcyA9IGZpbGVzLmZpbHRlcihmaWxlID0+IHRoaXMuaXNUZXN0RmlsZShmaWxlKSk7XG4gICAgY29uc3QgY29kZUNvbnRlbnRzID0gYXdhaXQgdGhpcy5yZWFkQWxsQ29kZUZpbGVzKGNvZGVGaWxlcyk7XG5cbiAgICBjb25zdCBbY29tcGxleGl0eSwgbWFpbnRhaW5hYmlsaXR5LCB0ZXN0YWJpbGl0eSwgZG9jdW1lbnRhdGlvbl0gPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICB0aGlzLmNhbGN1bGF0ZUNvbXBsZXhpdHlNZXRyaWNzKGNvZGVDb250ZW50cywgY29kZUZpbGVzKSxcbiAgICAgIHRoaXMuY2FsY3VsYXRlTWFpbnRhaW5hYmlsaXR5TWV0cmljcyhjb2RlQ29udGVudHMsIGNvZGVGaWxlcyksXG4gICAgICB0aGlzLmNhbGN1bGF0ZVRlc3RhYmlsaXR5TWV0cmljcyhjb2RlRmlsZXMsIHRlc3RGaWxlcywgY29kZUNvbnRlbnRzKSxcbiAgICAgIHRoaXMuY2FsY3VsYXRlRG9jdW1lbnRhdGlvbk1ldHJpY3MocHJvamVjdFBhdGgsIGNvZGVGaWxlcywgY29kZUNvbnRlbnRzKVxuICAgIF0pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbXBsZXhpdHksXG4gICAgICBtYWludGFpbmFiaWxpdHksXG4gICAgICB0ZXN0YWJpbGl0eSxcbiAgICAgIGRvY3VtZW50YXRpb25cbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIOODh+OCo+ODrOOCr+ODiOODquOCkuWIhumhnlxuICAgKi9cbiAgYXN5bmMgY2F0ZWdvcml6ZURpcmVjdG9yaWVzKHByb2plY3RQYXRoOiBzdHJpbmcpOiBQcm9taXNlPERpcmVjdG9yeUluZm9bXT4ge1xuICAgIGNvbnN0IGRpcmVjdG9yaWVzID0gYXdhaXQgdGhpcy5nZXRBbGxEaXJlY3Rvcmllcyhwcm9qZWN0UGF0aCk7XG4gICAgY29uc3QgZGlyZWN0b3J5SW5mb3M6IERpcmVjdG9yeUluZm9bXSA9IFtdO1xuICAgIFxuICAgIGZvciAoY29uc3QgZGlyIG9mIGRpcmVjdG9yaWVzKSB7XG4gICAgICBjb25zdCByZWxhdGl2ZVBhdGggPSBwYXRoLnJlbGF0aXZlKHByb2plY3RQYXRoLCBkaXIpO1xuICAgICAgaWYgKHJlbGF0aXZlUGF0aCAmJiAhdGhpcy5zaG91bGRJZ25vcmVEaXJlY3RvcnkocGF0aC5iYXNlbmFtZShkaXIpKSkge1xuICAgICAgICBjb25zdCBwdXJwb3NlID0gdGhpcy5kZXRlcm1pbmVEaXJlY3RvcnlQdXJwb3NlKGRpciwgcmVsYXRpdmVQYXRoKTtcbiAgICAgICAgY29uc3QgZmlsZXMgPSBmcy5yZWFkZGlyU3luYyhkaXIsIHsgd2l0aEZpbGVUeXBlczogdHJ1ZSB9KVxuICAgICAgICAgIC5maWx0ZXIoZW50cnkgPT4gZW50cnkuaXNGaWxlKCkpXG4gICAgICAgICAgLm1hcChlbnRyeSA9PiBlbnRyeS5uYW1lKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHN1YmRpcmVjdG9yaWVzID0gZnMucmVhZGRpclN5bmMoZGlyLCB7IHdpdGhGaWxlVHlwZXM6IHRydWUgfSlcbiAgICAgICAgICAuZmlsdGVyKGVudHJ5ID0+IGVudHJ5LmlzRGlyZWN0b3J5KCkpXG4gICAgICAgICAgLm1hcChlbnRyeSA9PiBlbnRyeS5uYW1lKTtcblxuICAgICAgICBjb25zdCBwYXR0ZXJucyA9IHRoaXMuZGV0ZWN0RGlyZWN0b3J5UGF0dGVybnMoZGlyLCBmaWxlcyk7XG4gICAgICAgIGNvbnN0IGNvbnZlbnRpb25zID0gdGhpcy5kZXRlY3REaXJlY3RvcnlDb252ZW50aW9ucyhkaXIsIGZpbGVzKTtcblxuICAgICAgICBkaXJlY3RvcnlJbmZvcy5wdXNoKHtcbiAgICAgICAgICBwYXRoOiByZWxhdGl2ZVBhdGgsXG4gICAgICAgICAgcHVycG9zZSxcbiAgICAgICAgICBmaWxlQ291bnQ6IGZpbGVzLmxlbmd0aCxcbiAgICAgICAgICBzdWJkaXJlY3RvcmllcyxcbiAgICAgICAgICBwYXR0ZXJucyxcbiAgICAgICAgICBjb252ZW50aW9uc1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIGRpcmVjdG9yeUluZm9zO1xuICB9XG5cbiAgLy8gUHJpdmF0ZSBoZWxwZXIgbWV0aG9kc1xuXG4gIHByaXZhdGUgYXN5bmMgZ2VuZXJhdGVQcm9qZWN0T3ZlcnZpZXcocHJvamVjdFBhdGg6IHN0cmluZyk6IFByb21pc2U8UHJvamVjdE92ZXJ2aWV3PiB7XG4gICAgY29uc3QgZmlsZXMgPSBhd2FpdCB0aGlzLmdldEFsbEZpbGVzKHByb2plY3RQYXRoKTtcbiAgICBjb25zdCBkaXJlY3RvcmllcyA9IGF3YWl0IHRoaXMuZ2V0QWxsRGlyZWN0b3JpZXMocHJvamVjdFBhdGgpO1xuICAgIFxuICAgIGNvbnN0IGxhbmd1YWdlcyA9IGF3YWl0IHRoaXMuYW5hbHl6ZUxhbmd1YWdlRGlzdHJpYnV0aW9uKGZpbGVzKTtcbiAgICBjb25zdCBmcmFtZXdvcmtzID0gYXdhaXQgdGhpcy5kZXRlY3RGcmFtZXdvcmtzKGZpbGVzKTtcbiAgICBjb25zdCB0ZXN0aW5nRnJhbWV3b3JrcyA9IGF3YWl0IHRoaXMuZGV0ZWN0VGVzdGluZ0ZyYW1ld29ya3MoZmlsZXMpO1xuICAgIGNvbnN0IGJ1aWxkVG9vbHMgPSBhd2FpdCB0aGlzLmRldGVjdEJ1aWxkVG9vbHMoZmlsZXMpO1xuICAgIFxuICAgIHJldHVybiB7XG4gICAgICByb290UGF0aDogcHJvamVjdFBhdGgsXG4gICAgICB0b3RhbEZpbGVzOiBmaWxlcy5sZW5ndGgsXG4gICAgICB0b3RhbERpcmVjdG9yaWVzOiBkaXJlY3Rvcmllcy5sZW5ndGgsXG4gICAgICBsYW5ndWFnZXMsXG4gICAgICBmcmFtZXdvcmtzLFxuICAgICAgdGVzdGluZ0ZyYW1ld29ya3MsXG4gICAgICBidWlsZFRvb2xzXG4gICAgfTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgZ2V0QWxsRmlsZXMocHJvamVjdFBhdGg6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nW10+IHtcbiAgICBjb25zdCBmaWxlczogc3RyaW5nW10gPSBbXTtcbiAgICBcbiAgICBjb25zdCB3YWxrRGlyID0gKGRpcjogc3RyaW5nLCBkZXB0aDogbnVtYmVyID0gMCkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8g5rex5bqm5Yi26ZmQ44OB44Kn44OD44KvXG4gICAgICAgIGlmICghdGhpcy5yZXNvdXJjZU1vbml0b3IuY2hlY2tEZXB0aChkZXB0aCwgcHJvamVjdFBhdGgpKSB7XG4gICAgICAgICAgcmV0dXJuOyAvLyDmt7HluqbliLbpmZDjgavpgZTjgZfjgZ/loLTlkIjjga/mjqLntKLjgpLlgZzmraJcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgY29uc3QgZW50cmllcyA9IGZzLnJlYWRkaXJTeW5jKGRpciwgeyB3aXRoRmlsZVR5cGVzOiB0cnVlIH0pO1xuICAgICAgICBcbiAgICAgICAgZm9yIChjb25zdCBlbnRyeSBvZiBlbnRyaWVzKSB7XG4gICAgICAgICAgY29uc3QgZnVsbFBhdGggPSBwYXRoLmpvaW4oZGlyLCBlbnRyeS5uYW1lKTtcbiAgICAgICAgICBcbiAgICAgICAgICAvLyDjgrvjgq3jg6Xjg6rjg4bjgqM6IOODkeOCueaknOiovFxuICAgICAgICAgIGlmICghUGF0aFNlY3VyaXR5LnZhbGlkYXRlUHJvamVjdFBhdGgoZnVsbFBhdGgsIHByb2plY3RQYXRoKSkge1xuICAgICAgICAgICAgY29udGludWU7IC8vIOODl+ODreOCuOOCp+OCr+ODiOevhOWbsuWkluOBr+OCueOCreODg+ODl1xuICAgICAgICAgIH1cbiAgICAgICAgICBcbiAgICAgICAgICBpZiAoZW50cnkuaXNEaXJlY3RvcnkoKSkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnNob3VsZElnbm9yZURpcmVjdG9yeShlbnRyeS5uYW1lKSkge1xuICAgICAgICAgICAgICB3YWxrRGlyKGZ1bGxQYXRoLCBkZXB0aCArIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoZW50cnkuaXNGaWxlKCkpIHtcbiAgICAgICAgICAgIGZpbGVzLnB1c2goZnVsbFBhdGgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgLy8g44OH44Kj44Os44Kv44OI44Oq44Gu6Kqt44G/6L6844G/44Ko44Op44O844Gv54Sh6KaWXG4gICAgICB9XG4gICAgfTtcbiAgICBcbiAgICB3YWxrRGlyKHByb2plY3RQYXRoKTtcbiAgICByZXR1cm4gZmlsZXM7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGdldEFsbERpcmVjdG9yaWVzKHByb2plY3RQYXRoOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZ1tdPiB7XG4gICAgY29uc3QgZGlyZWN0b3JpZXM6IHN0cmluZ1tdID0gW3Byb2plY3RQYXRoXTtcbiAgICBcbiAgICBjb25zdCB3YWxrRGlyID0gKGRpcjogc3RyaW5nLCBkZXB0aDogbnVtYmVyID0gMCkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8g5rex5bqm5Yi26ZmQ44OB44Kn44OD44KvXG4gICAgICAgIGlmICghdGhpcy5yZXNvdXJjZU1vbml0b3IuY2hlY2tEZXB0aChkZXB0aCwgcHJvamVjdFBhdGgpKSB7XG4gICAgICAgICAgcmV0dXJuOyAvLyDmt7HluqbliLbpmZDjgavpgZTjgZfjgZ/loLTlkIjjga/mjqLntKLjgpLlgZzmraJcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgY29uc3QgZW50cmllcyA9IGZzLnJlYWRkaXJTeW5jKGRpciwgeyB3aXRoRmlsZVR5cGVzOiB0cnVlIH0pO1xuICAgICAgICBcbiAgICAgICAgZm9yIChjb25zdCBlbnRyeSBvZiBlbnRyaWVzKSB7XG4gICAgICAgICAgaWYgKGVudHJ5LmlzRGlyZWN0b3J5KCkpIHtcbiAgICAgICAgICAgIGNvbnN0IGZ1bGxQYXRoID0gcGF0aC5qb2luKGRpciwgZW50cnkubmFtZSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIOOCu+OCreODpeODquODhuOCozog44OR44K55qSc6Ki8XG4gICAgICAgICAgICBpZiAoIVBhdGhTZWN1cml0eS52YWxpZGF0ZVByb2plY3RQYXRoKGZ1bGxQYXRoLCBwcm9qZWN0UGF0aCkpIHtcbiAgICAgICAgICAgICAgY29udGludWU7IC8vIOODl+ODreOCuOOCp+OCr+ODiOevhOWbsuWkluOBr+OCueOCreODg+ODl1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoIXRoaXMuc2hvdWxkSWdub3JlRGlyZWN0b3J5KGVudHJ5Lm5hbWUpKSB7XG4gICAgICAgICAgICAgIGRpcmVjdG9yaWVzLnB1c2goZnVsbFBhdGgpO1xuICAgICAgICAgICAgICB3YWxrRGlyKGZ1bGxQYXRoLCBkZXB0aCArIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgLy8g44OH44Kj44Os44Kv44OI44Oq44Gu6Kqt44G/6L6844G/44Ko44Op44O844Gv54Sh6KaWXG4gICAgICB9XG4gICAgfTtcbiAgICBcbiAgICB3YWxrRGlyKHByb2plY3RQYXRoKTtcbiAgICByZXR1cm4gZGlyZWN0b3JpZXM7XG4gIH1cblxuICBwcml2YXRlIHNob3VsZElnbm9yZURpcmVjdG9yeShkaXJOYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5JR05PUkVfUEFUVEVSTlMuc29tZShwYXR0ZXJuID0+IGRpck5hbWUuaW5jbHVkZXMocGF0dGVybikpO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBhbmFseXplTGFuZ3VhZ2VEaXN0cmlidXRpb24oZmlsZXM6IHN0cmluZ1tdKTogUHJvbWlzZTxMYW5ndWFnZURpc3RyaWJ1dGlvbltdPiB7XG4gICAgY29uc3QgbGFuZ3VhZ2VNYXAgPSBuZXcgTWFwPHN0cmluZywgeyBjb3VudDogbnVtYmVyOyBleHRlbnNpb25zOiBTZXQ8c3RyaW5nPiB9PigpO1xuICAgIFxuICAgIGZpbGVzLmZvckVhY2goZmlsZSA9PiB7XG4gICAgICBjb25zdCBleHQgPSBwYXRoLmV4dG5hbWUoZmlsZSk7XG4gICAgICBjb25zdCBsYW5ndWFnZSA9IHRoaXMuZ2V0TGFuZ3VhZ2VGcm9tRXh0ZW5zaW9uKGV4dCk7XG4gICAgICBcbiAgICAgIGlmIChsYW5ndWFnZSkge1xuICAgICAgICBpZiAoIWxhbmd1YWdlTWFwLmhhcyhsYW5ndWFnZSkpIHtcbiAgICAgICAgICBsYW5ndWFnZU1hcC5zZXQobGFuZ3VhZ2UsIHsgY291bnQ6IDAsIGV4dGVuc2lvbnM6IG5ldyBTZXQoKSB9KTtcbiAgICAgICAgfVxuICAgICAgICBsYW5ndWFnZU1hcC5nZXQobGFuZ3VhZ2UpIS5jb3VudCsrO1xuICAgICAgICBsYW5ndWFnZU1hcC5nZXQobGFuZ3VhZ2UpIS5leHRlbnNpb25zLmFkZChleHQpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgY29uc3QgdG90YWxGaWxlcyA9IGZpbGVzLmxlbmd0aDtcbiAgICByZXR1cm4gQXJyYXkuZnJvbShsYW5ndWFnZU1hcC5lbnRyaWVzKCkpLm1hcCgoW2xhbmd1YWdlLCBkYXRhXSkgPT4gKHtcbiAgICAgIGxhbmd1YWdlLFxuICAgICAgZmlsZUNvdW50OiBkYXRhLmNvdW50LFxuICAgICAgcGVyY2VudGFnZTogKGRhdGEuY291bnQgLyB0b3RhbEZpbGVzKSAqIDEwMCxcbiAgICAgIGV4dGVuc2lvbnM6IEFycmF5LmZyb20oZGF0YS5leHRlbnNpb25zKVxuICAgIH0pKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0TGFuZ3VhZ2VGcm9tRXh0ZW5zaW9uKGV4dDogc3RyaW5nKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgY29uc3QgbGFuZ3VhZ2VNYXA6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH0gPSB7XG4gICAgICAnLnRzJzogJ3R5cGVzY3JpcHQnLFxuICAgICAgJy50c3gnOiAndHlwZXNjcmlwdCcsXG4gICAgICAnLmpzJzogJ2phdmFzY3JpcHQnLFxuICAgICAgJy5qc3gnOiAnamF2YXNjcmlwdCcsXG4gICAgICAnLm1qcyc6ICdqYXZhc2NyaXB0JyxcbiAgICAgICcuY2pzJzogJ2phdmFzY3JpcHQnLFxuICAgICAgJy5weSc6ICdweXRob24nLFxuICAgICAgJy5qYXZhJzogJ2phdmEnLFxuICAgICAgJy5jcyc6ICdjc2hhcnAnLFxuICAgICAgJy5jcHAnOiAnY3BwJyxcbiAgICAgICcuYyc6ICdjJyxcbiAgICAgICcuaCc6ICdjJyxcbiAgICAgICcuZ28nOiAnZ28nLFxuICAgICAgJy5ycyc6ICdydXN0JyxcbiAgICAgICcucGhwJzogJ3BocCcsXG4gICAgICAnLnJiJzogJ3J1YnknLFxuICAgICAgJy5zd2lmdCc6ICdzd2lmdCcsXG4gICAgICAnLmt0JzogJ2tvdGxpbidcbiAgICB9O1xuICAgIFxuICAgIHJldHVybiBsYW5ndWFnZU1hcFtleHRdIHx8IG51bGw7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGRldGVjdEZyYW1ld29ya3MoZmlsZXM6IHN0cmluZ1tdKTogUHJvbWlzZTxEZXRlY3RlZEZyYW1ld29ya1tdPiB7XG4gICAgcmV0dXJuIHRoaXMuZGV0ZWN0U2lnbmF0dXJlcyhmaWxlcywgdGhpcy5GUkFNRVdPUktfU0lHTkFUVVJFUyk7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGRldGVjdFRlc3RpbmdGcmFtZXdvcmtzKGZpbGVzOiBzdHJpbmdbXSk6IFByb21pc2U8RGV0ZWN0ZWRGcmFtZXdvcmtbXT4ge1xuICAgIHJldHVybiB0aGlzLmRldGVjdFNpZ25hdHVyZXMoZmlsZXMsIHRoaXMuVEVTVF9GUkFNRVdPUktfU0lHTkFUVVJFUyk7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGRldGVjdEJ1aWxkVG9vbHMoZmlsZXM6IHN0cmluZ1tdKTogUHJvbWlzZTxEZXRlY3RlZEZyYW1ld29ya1tdPiB7XG4gICAgcmV0dXJuIHRoaXMuZGV0ZWN0U2lnbmF0dXJlcyhmaWxlcywgdGhpcy5CVUlMRF9UT09MX1NJR05BVFVSRVMpO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBkZXRlY3RTaWduYXR1cmVzKGZpbGVzOiBzdHJpbmdbXSwgc2lnbmF0dXJlczogTWFwPHN0cmluZywgUmVnRXhwW10+KTogUHJvbWlzZTxEZXRlY3RlZEZyYW1ld29ya1tdPiB7XG4gICAgY29uc3QgZGV0ZWN0ZWQ6IERldGVjdGVkRnJhbWV3b3JrW10gPSBbXTtcbiAgICBcbiAgICBmb3IgKGNvbnN0IFtuYW1lLCBwYXR0ZXJuc10gb2Ygc2lnbmF0dXJlcy5lbnRyaWVzKCkpIHtcbiAgICAgIGxldCBtYXRjaENvdW50ID0gMDtcbiAgICAgIGNvbnN0IGV2aWRlbmNlOiBzdHJpbmdbXSA9IFtdO1xuICAgICAgXG4gICAgICAvLyBwYWNrYWdlLmpzb27jgafjga7mpJzlh7pcbiAgICAgIGNvbnN0IHBhY2thZ2VKc29uRmlsZXMgPSBmaWxlcy5maWx0ZXIoZiA9PiBmLmVuZHNXaXRoKCdwYWNrYWdlLmpzb24nKSk7XG4gICAgICBmb3IgKGNvbnN0IHBhY2thZ2VGaWxlIG9mIHBhY2thZ2VKc29uRmlsZXMpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCBjb250ZW50ID0gZnMucmVhZEZpbGVTeW5jKHBhY2thZ2VGaWxlLCAndXRmLTgnKTtcbiAgICAgICAgICBmb3IgKGNvbnN0IHBhdHRlcm4gb2YgcGF0dGVybnMpIHtcbiAgICAgICAgICAgIGlmIChwYXR0ZXJuLnRlc3QoY29udGVudCkpIHtcbiAgICAgICAgICAgICAgbWF0Y2hDb3VudCArPSAzOyAvLyBwYWNrYWdlLmpzb27jgafjga7mpJzlh7rjga/ph43opoHluqbpq5hcbiAgICAgICAgICAgICAgZXZpZGVuY2UucHVzaChgRm91bmQgaW4gJHtwYXRoLmJhc2VuYW1lKHBhY2thZ2VGaWxlKX1gKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIC8vIOODleOCoeOCpOODq+iqreOBv+i+vOOBv+OCqOODqeODvOOBr+eEoeimllxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIOOCs+ODvOODieODleOCoeOCpOODq+OBp+OBruaknOWHulxuICAgICAgY29uc3QgY29kZUZpbGVzID0gZmlsZXMuZmlsdGVyKGYgPT4gdGhpcy5pc0NvZGVGaWxlKGYpKS5zbGljZSgwLCA1MCk7IC8vIOODkeODleOCqeODvOODnuODs+OCueiAg+aFrlxuICAgICAgZm9yIChjb25zdCBmaWxlIG9mIGNvZGVGaWxlcykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IGNvbnRlbnQgPSBmcy5yZWFkRmlsZVN5bmMoZmlsZSwgJ3V0Zi04Jyk7XG4gICAgICAgICAgZm9yIChjb25zdCBwYXR0ZXJuIG9mIHBhdHRlcm5zKSB7XG4gICAgICAgICAgICBpZiAocGF0dGVybi50ZXN0KGNvbnRlbnQpKSB7XG4gICAgICAgICAgICAgIG1hdGNoQ291bnQgKz0gMTtcbiAgICAgICAgICAgICAgZXZpZGVuY2UucHVzaChgRm91bmQgaW4gJHtwYXRoLmJhc2VuYW1lKGZpbGUpfWApO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgLy8g44OV44Kh44Kk44Or6Kqt44G/6L6844G/44Ko44Op44O844Gv54Sh6KaWXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG1hdGNoQ291bnQgPiAwKSB7XG4gICAgICAgIGNvbnN0IGNvbmZpZGVuY2UgPSBNYXRoLm1pbihtYXRjaENvdW50IC8gNSwgMSk7IC8vIOacgOWkpzEuMOOBq+ato+imj+WMllxuICAgICAgICBkZXRlY3RlZC5wdXNoKHtcbiAgICAgICAgICBuYW1lLFxuICAgICAgICAgIGNvbmZpZGVuY2UsXG4gICAgICAgICAgZXZpZGVuY2U6IFsuLi5uZXcgU2V0KGV2aWRlbmNlKV0gLy8g6YeN6KSH44KS6Zmk5Y67XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBkZXRlY3RlZC5zb3J0KChhLCBiKSA9PiBiLmNvbmZpZGVuY2UgLSBhLmNvbmZpZGVuY2UpO1xuICB9XG5cbiAgcHJpdmF0ZSBhbmFseXplQXJjaGl0ZWN0dXJlUGF0dGVybnMoZGlyZWN0b3JpZXM6IHN0cmluZ1tdLCBmaWxlczogc3RyaW5nW10pOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPiB7XG4gICAgLy8g44Ki44O844Kt44OG44Kv44OB44Oj44OR44K/44O844Oz44Gu5YiG5p6Q44Ot44K444OD44KvXG4gICAgcmV0dXJuIHt9O1xuICB9XG5cbiAgcHJpdmF0ZSBjYWxjdWxhdGVNVkNTY29yZShkaXJlY3Rvcmllczogc3RyaW5nW10sIGV2aWRlbmNlOiBzdHJpbmdbXSk6IG51bWJlciB7XG4gICAgbGV0IHNjb3JlID0gMDtcbiAgICBjb25zdCBkaXJOYW1lcyA9IGRpcmVjdG9yaWVzLm1hcChkID0+IHBhdGguYmFzZW5hbWUoZCkudG9Mb3dlckNhc2UoKSk7XG4gICAgXG4gICAgaWYgKGRpck5hbWVzLnNvbWUobmFtZSA9PiBuYW1lLmluY2x1ZGVzKCdjb250cm9sbGVyJykpKSB7XG4gICAgICBzY29yZSArPSAwLjM7XG4gICAgICBldmlkZW5jZS5wdXNoKCdjb250cm9sbGVycyBkaXJlY3RvcnkgZm91bmQnKTtcbiAgICB9XG4gICAgXG4gICAgaWYgKGRpck5hbWVzLnNvbWUobmFtZSA9PiBuYW1lLmluY2x1ZGVzKCdtb2RlbCcpKSkge1xuICAgICAgc2NvcmUgKz0gMC4zO1xuICAgICAgZXZpZGVuY2UucHVzaCgnbW9kZWxzIGRpcmVjdG9yeSBmb3VuZCcpO1xuICAgIH1cbiAgICBcbiAgICBpZiAoZGlyTmFtZXMuc29tZShuYW1lID0+IG5hbWUuaW5jbHVkZXMoJ3ZpZXcnKSB8fCBuYW1lLmluY2x1ZGVzKCdyb3V0ZScpKSkge1xuICAgICAgc2NvcmUgKz0gMC4yO1xuICAgICAgZXZpZGVuY2UucHVzaCgndmlld3Mgb3Igcm91dGVzIGRpcmVjdG9yeSBmb3VuZCcpO1xuICAgIH1cbiAgICBcbiAgICBpZiAoZGlyTmFtZXMuc29tZShuYW1lID0+IG5hbWUuaW5jbHVkZXMoJ3NlcnZpY2UnKSkpIHtcbiAgICAgIHNjb3JlICs9IDAuMTtcbiAgICAgIGV2aWRlbmNlLnB1c2goJ3NlcnZpY2VzIGRpcmVjdG9yeSBmb3VuZCcpO1xuICAgIH1cbiAgICBcbiAgICBpZiAoZGlyTmFtZXMuc29tZShuYW1lID0+IG5hbWUuaW5jbHVkZXMoJ21pZGRsZXdhcmUnKSkpIHtcbiAgICAgIHNjb3JlICs9IDAuMTtcbiAgICAgIGV2aWRlbmNlLnB1c2goJ21pZGRsZXdhcmUgZGlyZWN0b3J5IGZvdW5kJyk7XG4gICAgfVxuICAgIFxuICAgIHJldHVybiBzY29yZTtcbiAgfVxuXG4gIHByaXZhdGUgY2FsY3VsYXRlTWljcm9zZXJ2aWNlc1Njb3JlKGRpcmVjdG9yaWVzOiBzdHJpbmdbXSwgZmlsZXM6IHN0cmluZ1tdLCBldmlkZW5jZTogc3RyaW5nW10pOiBudW1iZXIge1xuICAgIGxldCBzY29yZSA9IDA7XG4gICAgY29uc3QgZGlyTmFtZXMgPSBkaXJlY3Rvcmllcy5tYXAoZCA9PiBwYXRoLmJhc2VuYW1lKGQpLnRvTG93ZXJDYXNlKCkpO1xuICAgIFxuICAgIC8vIOikh+aVsOOBruOCteODvOODk+OCueODh+OCo+ODrOOCr+ODiOODquOBruWtmOWcqFxuICAgIGNvbnN0IHNlcnZpY2VDb3VudCA9IGRpck5hbWVzLmZpbHRlcihuYW1lID0+IFxuICAgICAgbmFtZS5pbmNsdWRlcygnc2VydmljZScpIHx8IG5hbWUuZW5kc1dpdGgoJy1zZXJ2aWNlJykgfHwgbmFtZS5zdGFydHNXaXRoKCdzZXJ2aWNlLScpXG4gICAgKS5sZW5ndGg7XG4gICAgXG4gICAgaWYgKHNlcnZpY2VDb3VudCA+IDIpIHtcbiAgICAgIHNjb3JlICs9IDAuNDtcbiAgICAgIGV2aWRlbmNlLnB1c2goYG11bHRpcGxlIHNlcnZpY2UgZGlyZWN0b3JpZXMgZm91bmQgKCR7c2VydmljZUNvdW50fSlgKTtcbiAgICB9XG4gICAgXG4gICAgLy8gRG9ja2Vy6Zai6YCj44OV44Kh44Kk44OrXG4gICAgaWYgKGZpbGVzLnNvbWUoZiA9PiBmLmluY2x1ZGVzKCdEb2NrZXJmaWxlJykgfHwgZi5pbmNsdWRlcygnZG9ja2VyLWNvbXBvc2UnKSkpIHtcbiAgICAgIHNjb3JlICs9IDAuMjtcbiAgICAgIGV2aWRlbmNlLnB1c2goJ0RvY2tlciBjb25maWd1cmF0aW9uIGZvdW5kJyk7XG4gICAgfVxuICAgIFxuICAgIC8vIEFQSSBHYXRld2F5IG9yIHJvdXRpbmdcbiAgICBpZiAoZmlsZXMuc29tZShmID0+IGYuaW5jbHVkZXMoJ2dhdGV3YXknKSB8fCBmLmluY2x1ZGVzKCdwcm94eScpKSkge1xuICAgICAgc2NvcmUgKz0gMC4yO1xuICAgICAgZXZpZGVuY2UucHVzaCgnQVBJIEdhdGV3YXkgcGF0dGVybnMgZm91bmQnKTtcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIHNjb3JlO1xuICB9XG5cbiAgcHJpdmF0ZSBjYWxjdWxhdGVMYXllcmVkU2NvcmUoZGlyZWN0b3JpZXM6IHN0cmluZ1tdLCBldmlkZW5jZTogc3RyaW5nW10pOiBudW1iZXIge1xuICAgIGxldCBzY29yZSA9IDA7XG4gICAgY29uc3QgZGlyTmFtZXMgPSBkaXJlY3Rvcmllcy5tYXAoZCA9PiBwYXRoLmJhc2VuYW1lKGQpLnRvTG93ZXJDYXNlKCkpO1xuICAgIFxuICAgIGNvbnN0IGxheWVycyA9IFsncHJlc2VudGF0aW9uJywgJ2FwcGxpY2F0aW9uJywgJ2RvbWFpbicsICdpbmZyYXN0cnVjdHVyZScsICdkYXRhJ107XG4gICAgY29uc3QgZm91bmRMYXllcnMgPSBsYXllcnMuZmlsdGVyKGxheWVyID0+IFxuICAgICAgZGlyTmFtZXMuc29tZShuYW1lID0+IG5hbWUuaW5jbHVkZXMobGF5ZXIpKVxuICAgICk7XG4gICAgXG4gICAgaWYgKGZvdW5kTGF5ZXJzLmxlbmd0aCA+PSAzKSB7XG4gICAgICBzY29yZSArPSAwLjY7XG4gICAgICBldmlkZW5jZS5wdXNoKGBsYXllcmVkIHN0cnVjdHVyZSBmb3VuZDogJHtmb3VuZExheWVycy5qb2luKCcsICcpfWApO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gc2NvcmU7XG4gIH1cblxuICBwcml2YXRlIGNhbGN1bGF0ZUNsZWFuQXJjaGl0ZWN0dXJlU2NvcmUoZGlyZWN0b3JpZXM6IHN0cmluZ1tdLCBldmlkZW5jZTogc3RyaW5nW10pOiBudW1iZXIge1xuICAgIGxldCBzY29yZSA9IDA7XG4gICAgY29uc3QgZGlyTmFtZXMgPSBkaXJlY3Rvcmllcy5tYXAoZCA9PiBwYXRoLmJhc2VuYW1lKGQpLnRvTG93ZXJDYXNlKCkpO1xuICAgIFxuICAgIGNvbnN0IGNsZWFuUGF0dGVybnMgPSBbJ2VudGl0aWVzJywgJ3VzZWNhc2VzJywgJ2ludGVyZmFjZXMnLCAnZnJhbWV3b3JrcyddO1xuICAgIGNvbnN0IGZvdW5kUGF0dGVybnMgPSBjbGVhblBhdHRlcm5zLmZpbHRlcihwYXR0ZXJuID0+IFxuICAgICAgZGlyTmFtZXMuc29tZShuYW1lID0+IG5hbWUuaW5jbHVkZXMocGF0dGVybikpXG4gICAgKTtcbiAgICBcbiAgICBpZiAoZm91bmRQYXR0ZXJucy5sZW5ndGggPj0gMykge1xuICAgICAgc2NvcmUgKz0gMC43O1xuICAgICAgZXZpZGVuY2UucHVzaChgY2xlYW4gYXJjaGl0ZWN0dXJlIHBhdHRlcm5zIGZvdW5kOiAke2ZvdW5kUGF0dGVybnMuam9pbignLCAnKX1gKTtcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIHNjb3JlO1xuICB9XG5cbiAgcHJpdmF0ZSBnZW5lcmF0ZUFyY2hpdGVjdHVyZVN1Z2dlc3Rpb25zKFxuICAgIGFyY2hpdGVjdHVyZTogQXJjaGl0ZWN0dXJlVHlwZSwgXG4gICAgY29uZmlkZW5jZTogbnVtYmVyLCBcbiAgICBkaXJlY3Rvcmllczogc3RyaW5nW11cbiAgKTogc3RyaW5nW10ge1xuICAgIGNvbnN0IHN1Z2dlc3Rpb25zOiBzdHJpbmdbXSA9IFtdO1xuICAgIFxuICAgIGlmIChjb25maWRlbmNlIDwgMC41KSB7XG4gICAgICBzdWdnZXN0aW9ucy5wdXNoKCdDb25zaWRlciBvcmdhbml6aW5nIGNvZGUgaW50byBjbGVhcmVyIGFyY2hpdGVjdHVyYWwgcGF0dGVybnMnKTtcbiAgICB9XG4gICAgXG4gICAgc3dpdGNoIChhcmNoaXRlY3R1cmUpIHtcbiAgICAgIGNhc2UgJ212Yyc6XG4gICAgICAgIHN1Z2dlc3Rpb25zLnB1c2goJ0NvbnNpZGVyIHNlcGFyYXRpbmcgYnVzaW5lc3MgbG9naWMgaW50byBzZXJ2aWNlIGxheWVyJyk7XG4gICAgICAgIHN1Z2dlc3Rpb25zLnB1c2goJ0Vuc3VyZSBwcm9wZXIgc2VwYXJhdGlvbiBiZXR3ZWVuIGNvbnRyb2xsZXJzIGFuZCBtb2RlbHMnKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdtaWNyb3NlcnZpY2VzJzpcbiAgICAgICAgc3VnZ2VzdGlvbnMucHVzaCgnQ29uc2lkZXIgaW1wbGVtZW50aW5nIHNlcnZpY2UgZGlzY292ZXJ5Jyk7XG4gICAgICAgIHN1Z2dlc3Rpb25zLnB1c2goJ0Vuc3VyZSBwcm9wZXIgaW50ZXItc2VydmljZSBjb21tdW5pY2F0aW9uIHBhdHRlcm5zJyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnbGF5ZXJlZCc6XG4gICAgICAgIHN1Z2dlc3Rpb25zLnB1c2goJ01haW50YWluIHN0cmljdCBsYXllciBkZXBlbmRlbmNpZXMnKTtcbiAgICAgICAgc3VnZ2VzdGlvbnMucHVzaCgnQ29uc2lkZXIgdXNpbmcgZGVwZW5kZW5jeSBpbmplY3Rpb24nKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdjbGVhbic6XG4gICAgICAgIHN1Z2dlc3Rpb25zLnB1c2goJ0Vuc3VyZSBkZXBlbmRlbmN5IHJ1bGUgY29tcGxpYW5jZScpO1xuICAgICAgICBzdWdnZXN0aW9ucy5wdXNoKCdLZWVwIGJ1c2luZXNzIGxvZ2ljIGluZGVwZW5kZW50IG9mIGZyYW1ld29ya3MnKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBzdWdnZXN0aW9ucy5wdXNoKCdDb25zaWRlciBhZG9wdGluZyBhIHdlbGwtZGVmaW5lZCBhcmNoaXRlY3R1cmFsIHBhdHRlcm4nKTtcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIHN1Z2dlc3Rpb25zO1xuICB9XG5cbiAgcHJpdmF0ZSBkZXRlcm1pbmVEaXJlY3RvcnlQdXJwb3NlKGRpclBhdGg6IHN0cmluZywgcmVsYXRpdmVQYXRoOiBzdHJpbmcpOiBEaXJlY3RvcnlQdXJwb3NlIHtcbiAgICBjb25zdCBkaXJOYW1lID0gcGF0aC5iYXNlbmFtZShkaXJQYXRoKS50b0xvd2VyQ2FzZSgpO1xuICAgIGNvbnN0IHJlbGF0aXZlUGF0aExvd2VyID0gcmVsYXRpdmVQYXRoLnRvTG93ZXJDYXNlKCk7XG4gICAgXG4gICAgaWYgKGRpck5hbWUuaW5jbHVkZXMoJ3NyYycpIHx8IGRpck5hbWUuaW5jbHVkZXMoJ3NvdXJjZScpKSByZXR1cm4gJ3NvdXJjZSc7XG4gICAgaWYgKGRpck5hbWUuaW5jbHVkZXMoJ3Rlc3QnKSB8fCBkaXJOYW1lLmluY2x1ZGVzKCdzcGVjJykgfHwgcmVsYXRpdmVQYXRoTG93ZXIuaW5jbHVkZXMoJ3Rlc3QnKSkgcmV0dXJuICd0ZXN0JztcbiAgICBpZiAoZGlyTmFtZSA9PT0gJ2J1aWxkJyB8fCBkaXJOYW1lID09PSAnZGlzdCcgfHwgZGlyTmFtZS5pbmNsdWRlcygnb3V0cHV0JykpIHJldHVybiAnYnVpbGQnO1xuICAgIGlmIChkaXJOYW1lLmluY2x1ZGVzKCdjb25maWcnKSB8fCBkaXJOYW1lLmluY2x1ZGVzKCdzZXR0aW5ncycpKSByZXR1cm4gJ2NvbmZpZyc7XG4gICAgaWYgKGRpck5hbWUuaW5jbHVkZXMoJ2RvYycpIHx8IGRpck5hbWUuaW5jbHVkZXMoJ3JlYWRtZScpIHx8IHJlbGF0aXZlUGF0aExvd2VyLmluY2x1ZGVzKCdkb2NzJykpIHJldHVybiAnZG9jdW1lbnRhdGlvbic7XG4gICAgaWYgKGRpck5hbWUuaW5jbHVkZXMoJ2Fzc2V0JykgfHwgZGlyTmFtZS5pbmNsdWRlcygnc3RhdGljJykgfHwgZGlyTmFtZS5pbmNsdWRlcygncHVibGljJykpIHJldHVybiAnYXNzZXRzJztcbiAgICBpZiAoZGlyTmFtZS5pbmNsdWRlcygndmVuZG9yJykgfHwgZGlyTmFtZS5pbmNsdWRlcygndGhpcmQnKSB8fCBkaXJOYW1lLmluY2x1ZGVzKCdsaWInKSkgcmV0dXJuICd2ZW5kb3InO1xuICAgIFxuICAgIHJldHVybiAndW5rbm93bic7XG4gIH1cblxuICBwcml2YXRlIGRldGVjdERpcmVjdG9yeVBhdHRlcm5zKGRpclBhdGg6IHN0cmluZywgZmlsZXM6IHN0cmluZ1tdKTogc3RyaW5nW10ge1xuICAgIGNvbnN0IHBhdHRlcm5zOiBzdHJpbmdbXSA9IFtdO1xuICAgIGNvbnN0IGRpck5hbWUgPSBwYXRoLmJhc2VuYW1lKGRpclBhdGgpLnRvTG93ZXJDYXNlKCk7XG4gICAgXG4gICAgaWYgKGRpck5hbWUuaW5jbHVkZXMoJ2NvbnRyb2xsZXInKSAmJiBmaWxlcy5zb21lKGYgPT4gZi5pbmNsdWRlcygnQ29udHJvbGxlcicpKSkge1xuICAgICAgcGF0dGVybnMucHVzaCgnQ29udHJvbGxlciBzdWZmaXggcGF0dGVybicpO1xuICAgIH1cbiAgICBcbiAgICBpZiAoZGlyTmFtZS5pbmNsdWRlcygnc2VydmljZScpICYmIGZpbGVzLnNvbWUoZiA9PiBmLmluY2x1ZGVzKCdTZXJ2aWNlJykpKSB7XG4gICAgICBwYXR0ZXJucy5wdXNoKCdTZXJ2aWNlIHN1ZmZpeCBwYXR0ZXJuJyk7XG4gICAgfVxuICAgIFxuICAgIGlmIChkaXJOYW1lLmluY2x1ZGVzKCdtb2RlbCcpICYmIGZpbGVzLnNvbWUoZiA9PiBmLmluY2x1ZGVzKCdNb2RlbCcpKSkge1xuICAgICAgcGF0dGVybnMucHVzaCgnTW9kZWwgc3VmZml4IHBhdHRlcm4nKTtcbiAgICB9XG4gICAgXG4gICAgaWYgKGZpbGVzLnNvbWUoZiA9PiBmLmVuZHNXaXRoKCcudGVzdC50cycpIHx8IGYuZW5kc1dpdGgoJy5zcGVjLnRzJykpKSB7XG4gICAgICBwYXR0ZXJucy5wdXNoKCdUZXN0IGZpbGUgcGF0dGVybicpO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gcGF0dGVybnM7XG4gIH1cblxuICBwcml2YXRlIGRldGVjdERpcmVjdG9yeUNvbnZlbnRpb25zKGRpclBhdGg6IHN0cmluZywgZmlsZXM6IHN0cmluZ1tdKTogc3RyaW5nW10ge1xuICAgIGNvbnN0IGNvbnZlbnRpb25zOiBzdHJpbmdbXSA9IFtdO1xuICAgIFxuICAgIC8vIOODleOCoeOCpOODq+WQjeOBruimj+WJh+OCkuWIhuaekFxuICAgIGNvbnN0IGhhc1Bhc2NhbENhc2UgPSBmaWxlcy5zb21lKGYgPT4gL15bQS1aXVthLXpBLVowLTldKlxcLi8udGVzdChmKSk7XG4gICAgY29uc3QgaGFzQ2FtZWxDYXNlID0gZmlsZXMuc29tZShmID0+IC9eW2Etel1bYS16QS1aMC05XSpcXC4vLnRlc3QoZikpO1xuICAgIGNvbnN0IGhhc0tlYmFiQ2FzZSA9IGZpbGVzLnNvbWUoZiA9PiAvXlthLXpdW2EtejAtOS1dKlxcLi8udGVzdChmKSk7XG4gICAgXG4gICAgaWYgKGhhc1Bhc2NhbENhc2UpIGNvbnZlbnRpb25zLnB1c2goJ1Bhc2NhbENhc2UgY2xhc3MgbmFtZXMnKTtcbiAgICBpZiAoaGFzQ2FtZWxDYXNlKSBjb252ZW50aW9ucy5wdXNoKCdjYW1lbENhc2UgZmlsZSBuYW1lcycpO1xuICAgIGlmIChoYXNLZWJhYkNhc2UpIGNvbnZlbnRpb25zLnB1c2goJ2tlYmFiLWNhc2UgZmlsZSBuYW1lcycpO1xuICAgIFxuICAgIHJldHVybiBjb252ZW50aW9ucztcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgYW5hbHl6ZUZpbGVOYW1pbmcoZmlsZXM6IHN0cmluZ1tdKTogUHJvbWlzZTxGaWxlTmFtaW5nQ29udmVudGlvbj4ge1xuICAgIGNvbnN0IGZpbGVOYW1lcyA9IGZpbGVzLm1hcChmID0+IHBhdGguYmFzZW5hbWUoZiwgcGF0aC5leHRuYW1lKGYpKSk7XG4gICAgcmV0dXJuIHRoaXMuYW5hbHl6ZU5hbWluZ1BhdHRlcm4oZmlsZU5hbWVzLCAnZmlsZXMnKTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgYW5hbHl6ZURpcmVjdG9yeU5hbWluZyhwcm9qZWN0UGF0aDogc3RyaW5nKTogUHJvbWlzZTxEaXJlY3RvcnlOYW1pbmdDb252ZW50aW9uPiB7XG4gICAgY29uc3QgZGlyZWN0b3JpZXMgPSBhd2FpdCB0aGlzLmdldEFsbERpcmVjdG9yaWVzKHByb2plY3RQYXRoKTtcbiAgICBjb25zdCBkaXJOYW1lcyA9IGRpcmVjdG9yaWVzXG4gICAgICAubWFwKGQgPT4gcGF0aC5iYXNlbmFtZShkKSlcbiAgICAgIC5maWx0ZXIobmFtZSA9PiBuYW1lICE9PSBwYXRoLmJhc2VuYW1lKHByb2plY3RQYXRoKSk7XG4gICAgcmV0dXJuIHRoaXMuYW5hbHl6ZU5hbWluZ1BhdHRlcm4oZGlyTmFtZXMsICdkaXJlY3RvcmllcycpO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBhbmFseXplVmFyaWFibGVOYW1pbmcoY29kZUNvbnRlbnRzOiBNYXA8c3RyaW5nLCBzdHJpbmc+KTogUHJvbWlzZTxWYXJpYWJsZU5hbWluZ0NvbnZlbnRpb24+IHtcbiAgICBjb25zdCB2YXJpYWJsZXM6IHN0cmluZ1tdID0gW107XG4gICAgXG4gICAgY29kZUNvbnRlbnRzLmZvckVhY2goY29udGVudCA9PiB7XG4gICAgICAvLyDlpInmlbDlrqPoqIDjgpLmir3lh7pcbiAgICAgIGNvbnN0IHZhcmlhYmxlTWF0Y2hlcyA9IGNvbnRlbnQubWF0Y2goLyg/OmNvbnN0fGxldHx2YXIpXFxzKyhbYS16QS1aX11bYS16QS1aMC05X10qKS9nKTtcbiAgICAgIGlmICh2YXJpYWJsZU1hdGNoZXMpIHtcbiAgICAgICAgdmFyaWFibGVNYXRjaGVzLmZvckVhY2gobWF0Y2ggPT4ge1xuICAgICAgICAgIGNvbnN0IHZhck5hbWUgPSBtYXRjaC5yZXBsYWNlKC8oPzpjb25zdHxsZXR8dmFyKVxccysvLCAnJyk7XG4gICAgICAgICAgdmFyaWFibGVzLnB1c2godmFyTmFtZSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIFxuICAgIHJldHVybiB0aGlzLmFuYWx5emVOYW1pbmdQYXR0ZXJuKHZhcmlhYmxlcywgJ3ZhcmlhYmxlcycpO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBhbmFseXplRnVuY3Rpb25OYW1pbmcoY29kZUNvbnRlbnRzOiBNYXA8c3RyaW5nLCBzdHJpbmc+KTogUHJvbWlzZTxGdW5jdGlvbk5hbWluZ0NvbnZlbnRpb24+IHtcbiAgICBjb25zdCBmdW5jdGlvbnM6IHN0cmluZ1tdID0gW107XG4gICAgXG4gICAgY29kZUNvbnRlbnRzLmZvckVhY2goY29udGVudCA9PiB7XG4gICAgICAvLyDplqLmlbDlrqPoqIDjgpLmir3lh7pcbiAgICAgIGNvbnN0IGZ1bmN0aW9uTWF0Y2hlcyA9IGNvbnRlbnQubWF0Y2goLyg/OmZ1bmN0aW9uXFxzKyhbYS16QS1aX11bYS16QS1aMC05X10qKXwoW2EtekEtWl9dW2EtekEtWjAtOV9dKilcXHMqXFwoKS9nKTtcbiAgICAgIGlmIChmdW5jdGlvbk1hdGNoZXMpIHtcbiAgICAgICAgZnVuY3Rpb25NYXRjaGVzLmZvckVhY2gobWF0Y2ggPT4ge1xuICAgICAgICAgIGNvbnN0IGZ1bmNOYW1lID0gbWF0Y2gucmVwbGFjZSgvZnVuY3Rpb25cXHMrLywgJycpLnJlcGxhY2UoL1xccypcXCgvLCAnJyk7XG4gICAgICAgICAgaWYgKGZ1bmNOYW1lICYmIC9eW2EtekEtWl9dLy50ZXN0KGZ1bmNOYW1lKSkge1xuICAgICAgICAgICAgZnVuY3Rpb25zLnB1c2goZnVuY05hbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgXG4gICAgcmV0dXJuIHRoaXMuYW5hbHl6ZU5hbWluZ1BhdHRlcm4oZnVuY3Rpb25zLCAnZnVuY3Rpb25zJyk7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGFuYWx5emVDbGFzc05hbWluZyhjb2RlQ29udGVudHM6IE1hcDxzdHJpbmcsIHN0cmluZz4pOiBQcm9taXNlPENsYXNzTmFtaW5nQ29udmVudGlvbj4ge1xuICAgIGNvbnN0IGNsYXNzZXM6IHN0cmluZ1tdID0gW107XG4gICAgXG4gICAgY29kZUNvbnRlbnRzLmZvckVhY2goY29udGVudCA9PiB7XG4gICAgICAvLyDjgq/jg6njgrnlrqPoqIDjgpLmir3lh7pcbiAgICAgIGNvbnN0IGNsYXNzTWF0Y2hlcyA9IGNvbnRlbnQubWF0Y2goL2NsYXNzXFxzKyhbYS16QS1aX11bYS16QS1aMC05X10qKS9nKTtcbiAgICAgIGlmIChjbGFzc01hdGNoZXMpIHtcbiAgICAgICAgY2xhc3NNYXRjaGVzLmZvckVhY2gobWF0Y2ggPT4ge1xuICAgICAgICAgIGNvbnN0IGNsYXNzTmFtZSA9IG1hdGNoLnJlcGxhY2UoL2NsYXNzXFxzKy8sICcnKTtcbiAgICAgICAgICBjbGFzc2VzLnB1c2goY2xhc3NOYW1lKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgXG4gICAgcmV0dXJuIHRoaXMuYW5hbHl6ZU5hbWluZ1BhdHRlcm4oY2xhc3NlcywgJ2NsYXNzZXMnKTtcbiAgfVxuXG4gIHByaXZhdGUgYW5hbHl6ZU5hbWluZ1BhdHRlcm4obmFtZXM6IHN0cmluZ1tdLCB0eXBlOiBzdHJpbmcpOiB7XG4gICAgcGF0dGVybjogTmFtaW5nUGF0dGVybjtcbiAgICBjb25maWRlbmNlOiBudW1iZXI7XG4gICAgZXhhbXBsZXM6IHN0cmluZ1tdO1xuICAgIHZpb2xhdGlvbnM6IHN0cmluZ1tdO1xuICB9IHtcbiAgICBpZiAobmFtZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwYXR0ZXJuOiAndW5rbm93bicgYXMgTmFtaW5nUGF0dGVybixcbiAgICAgICAgY29uZmlkZW5jZTogMCxcbiAgICAgICAgZXhhbXBsZXM6IFtdLFxuICAgICAgICB2aW9sYXRpb25zOiBbXVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBjb25zdCBwYXR0ZXJucyA9IHtcbiAgICAgIGNhbWVsQ2FzZTogbmFtZXMuZmlsdGVyKG5hbWUgPT4gL15bYS16XVthLXpBLVowLTldKiQvLnRlc3QobmFtZSkpLFxuICAgICAgUGFzY2FsQ2FzZTogbmFtZXMuZmlsdGVyKG5hbWUgPT4gL15bQS1aXVthLXpBLVowLTldKiQvLnRlc3QobmFtZSkpLFxuICAgICAgc25ha2VfY2FzZTogbmFtZXMuZmlsdGVyKG5hbWUgPT4gL15bYS16XVthLXowLTlfXSokLy50ZXN0KG5hbWUpKSxcbiAgICAgICdrZWJhYi1jYXNlJzogbmFtZXMuZmlsdGVyKG5hbWUgPT4gL15bYS16XVthLXowLTktXSokLy50ZXN0KG5hbWUpKSxcbiAgICAgIFNDUkVBTUlOR19TTkFLRV9DQVNFOiBuYW1lcy5maWx0ZXIobmFtZSA9PiAvXltBLVpdW0EtWjAtOV9dKiQvLnRlc3QobmFtZSkpXG4gICAgfTtcblxuICAgIGxldCBkb21pbmFudFBhdHRlcm46IE5hbWluZ1BhdHRlcm4gPSAnbWl4ZWQnO1xuICAgIGxldCBtYXhDb3VudCA9IDA7XG4gICAgXG4gICAgT2JqZWN0LmVudHJpZXMocGF0dGVybnMpLmZvckVhY2goKFtwYXR0ZXJuLCBtYXRjaGVzXSkgPT4ge1xuICAgICAgaWYgKG1hdGNoZXMubGVuZ3RoID4gbWF4Q291bnQpIHtcbiAgICAgICAgbWF4Q291bnQgPSBtYXRjaGVzLmxlbmd0aDtcbiAgICAgICAgZG9taW5hbnRQYXR0ZXJuID0gcGF0dGVybiBhcyBOYW1pbmdQYXR0ZXJuO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgY29uc3QgY29uZmlkZW5jZSA9IG1heENvdW50IC8gbmFtZXMubGVuZ3RoO1xuICAgIGNvbnN0IGV4YW1wbGVzOiBzdHJpbmdbXSA9IGRvbWluYW50UGF0dGVybiAhPT0gJ21peGVkJyAmJiBkb21pbmFudFBhdHRlcm4gIT09ICd1bmtub3duJyBcbiAgICAgID8gcGF0dGVybnNbZG9taW5hbnRQYXR0ZXJuIGFzIGtleW9mIHR5cGVvZiBwYXR0ZXJuc10gfHwgW10gXG4gICAgICA6IFtdO1xuICAgIGNvbnN0IHZpb2xhdGlvbnMgPSBuYW1lcy5maWx0ZXIobmFtZSA9PiAhZXhhbXBsZXMuaW5jbHVkZXMobmFtZSkpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdHRlcm46IGRvbWluYW50UGF0dGVybixcbiAgICAgIGNvbmZpZGVuY2UsXG4gICAgICBleGFtcGxlczogZXhhbXBsZXMuc2xpY2UoMCwgNSksIC8vIOacgOWkpzXlgIvjga7kvotcbiAgICAgIHZpb2xhdGlvbnM6IHZpb2xhdGlvbnMuc2xpY2UoMCwgMykgLy8g5pyA5aSnM+WAi+OBrumBleWPjeS+i1xuICAgIH07XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHJlYWRBbGxDb2RlRmlsZXMoZmlsZXM6IHN0cmluZ1tdKTogUHJvbWlzZTxNYXA8c3RyaW5nLCBzdHJpbmc+PiB7XG4gICAgY29uc3QgY29udGVudHMgPSBuZXcgTWFwPHN0cmluZywgc3RyaW5nPigpO1xuICAgIFxuICAgIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcy5zbGljZSgwLCAxMDApKSB7IC8vIOODkeODleOCqeODvOODnuODs+OCueiAg+aFruOBpzEwMOODleOCoeOCpOODq+OBvuOBp1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKHRoaXMuaXNDb2RlRmlsZShmaWxlKSkge1xuICAgICAgICAgIGNvbnN0IGNvbnRlbnQgPSBmcy5yZWFkRmlsZVN5bmMoZmlsZSwgJ3V0Zi04Jyk7XG4gICAgICAgICAgY29udGVudHMuc2V0KGZpbGUsIGNvbnRlbnQpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAvLyDjg5XjgqHjgqTjg6voqq3jgb/ovrzjgb/jgqjjg6njg7zjga/nhKHoppZcbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIGNvbnRlbnRzO1xuICB9XG5cbiAgcHJpdmF0ZSBpc0NvZGVGaWxlKGZpbGVQYXRoOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICBjb25zdCBleHQgPSBwYXRoLmV4dG5hbWUoZmlsZVBhdGgpO1xuICAgIHJldHVybiB0aGlzLlNVUFBPUlRFRF9FWFRFTlNJT05TLmluY2x1ZGVzKGV4dCk7XG4gIH1cblxuICBwcml2YXRlIGlzVGVzdEZpbGUoZmlsZVBhdGg6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGZpbGVOYW1lID0gcGF0aC5iYXNlbmFtZShmaWxlUGF0aCk7XG4gICAgcmV0dXJuIGZpbGVOYW1lLmluY2x1ZGVzKCcudGVzdC4nKSB8fCBmaWxlTmFtZS5pbmNsdWRlcygnLnNwZWMuJykgfHwgZmlsZVBhdGguaW5jbHVkZXMoJy90ZXN0LycpO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBjYWxjdWxhdGVDb21wbGV4aXR5TWV0cmljcyhcbiAgICBjb2RlQ29udGVudHM6IE1hcDxzdHJpbmcsIHN0cmluZz4sIFxuICAgIGZpbGVzOiBzdHJpbmdbXVxuICApOiBQcm9taXNlPENvbXBsZXhpdHlNZXRyaWNzPiB7XG4gICAgbGV0IHRvdGFsRnVuY3Rpb25zID0gMDtcbiAgICBsZXQgdG90YWxDb21wbGV4aXR5ID0gMDtcbiAgICBsZXQgbWF4Q29tcGxleGl0eSA9IDE7XG4gICAgbGV0IHRvdGFsRnVuY3Rpb25MaW5lcyA9IDA7XG4gICAgY29uc3QgY29tcGxleEZpbGVzOiBzdHJpbmdbXSA9IFtdO1xuXG4gICAgY29kZUNvbnRlbnRzLmZvckVhY2goKGNvbnRlbnQsIGZpbGVQYXRoKSA9PiB7XG4gICAgICBjb25zdCBmdW5jdGlvbnMgPSB0aGlzLmV4dHJhY3RGdW5jdGlvbnMoY29udGVudCk7XG4gICAgICB0b3RhbEZ1bmN0aW9ucyArPSBmdW5jdGlvbnMubGVuZ3RoO1xuICAgICAgXG4gICAgICBmdW5jdGlvbnMuZm9yRWFjaChmdW5jID0+IHtcbiAgICAgICAgY29uc3QgY29tcGxleGl0eSA9IHRoaXMuY2FsY3VsYXRlQ3ljbG9tYXRpY0NvbXBsZXhpdHkoZnVuYy5jb250ZW50KTtcbiAgICAgICAgdG90YWxDb21wbGV4aXR5ICs9IGNvbXBsZXhpdHk7XG4gICAgICAgIHRvdGFsRnVuY3Rpb25MaW5lcyArPSBmdW5jLmxpbmVDb3VudDtcbiAgICAgICAgXG4gICAgICAgIGlmIChjb21wbGV4aXR5ID4gbWF4Q29tcGxleGl0eSkge1xuICAgICAgICAgIG1heENvbXBsZXhpdHkgPSBjb21wbGV4aXR5O1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAoY29tcGxleGl0eSA+IDEwKSB7XG4gICAgICAgICAgY29tcGxleEZpbGVzLnB1c2gocGF0aC5iYXNlbmFtZShmaWxlUGF0aCkpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHJldHVybiB7XG4gICAgICBhdmVyYWdlQ3ljbG9tYXRpY0NvbXBsZXhpdHk6IHRvdGFsRnVuY3Rpb25zID4gMCA/IHRvdGFsQ29tcGxleGl0eSAvIHRvdGFsRnVuY3Rpb25zIDogMSxcbiAgICAgIG1heENvbXBsZXhpdHksXG4gICAgICBjb21wbGV4RmlsZXM6IFsuLi5uZXcgU2V0KGNvbXBsZXhGaWxlcyldLFxuICAgICAgdG90YWxGdW5jdGlvbnMsXG4gICAgICBhdmVyYWdlRnVuY3Rpb25MZW5ndGg6IHRvdGFsRnVuY3Rpb25zID4gMCA/IHRvdGFsRnVuY3Rpb25MaW5lcyAvIHRvdGFsRnVuY3Rpb25zIDogMFxuICAgIH07XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGNhbGN1bGF0ZU1haW50YWluYWJpbGl0eU1ldHJpY3MoXG4gICAgY29kZUNvbnRlbnRzOiBNYXA8c3RyaW5nLCBzdHJpbmc+LFxuICAgIGZpbGVzOiBzdHJpbmdbXVxuICApOiBQcm9taXNlPE1haW50YWluYWJpbGl0eU1ldHJpY3M+IHtcbiAgICBsZXQgdG90YWxGaWxlU2l6ZSA9IDA7XG4gICAgbGV0IGR1cGxpY2F0ZWRMaW5lcyA9IDA7XG4gICAgY29uc3QgbGFyZ2VGaWxlczogc3RyaW5nW10gPSBbXTtcbiAgICBjb25zdCBsb25nRnVuY3Rpb25zOiBzdHJpbmdbXSA9IFtdO1xuXG4gICAgY29kZUNvbnRlbnRzLmZvckVhY2goKGNvbnRlbnQsIGZpbGVQYXRoKSA9PiB7XG4gICAgICBjb25zdCBsaW5lcyA9IGNvbnRlbnQuc3BsaXQoJ1xcbicpO1xuICAgICAgY29uc3QgZmlsZVNpemUgPSBsaW5lcy5sZW5ndGg7XG4gICAgICB0b3RhbEZpbGVTaXplICs9IGZpbGVTaXplO1xuICAgICAgXG4gICAgICBpZiAoZmlsZVNpemUgPiA1MDApIHtcbiAgICAgICAgbGFyZ2VGaWxlcy5wdXNoKHBhdGguYmFzZW5hbWUoZmlsZVBhdGgpKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8g6ZW344GE6Zai5pWw44KS5qSc5Ye6XG4gICAgICBjb25zdCBmdW5jdGlvbnMgPSB0aGlzLmV4dHJhY3RGdW5jdGlvbnMoY29udGVudCk7XG4gICAgICBmdW5jdGlvbnMuZm9yRWFjaChmdW5jID0+IHtcbiAgICAgICAgaWYgKGZ1bmMubGluZUNvdW50ID4gNTApIHtcbiAgICAgICAgICBsb25nRnVuY3Rpb25zLnB1c2goYCR7ZnVuYy5uYW1lfSBpbiAke3BhdGguYmFzZW5hbWUoZmlsZVBhdGgpfWApO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgLy8g6YeN6KSH44Kz44O844OJ44Gu57Ch5piT5qSc5Ye6XG4gICAgICBkdXBsaWNhdGVkTGluZXMgKz0gdGhpcy5kZXRlY3REdXBsaWNhdGVkQ29kZShjb250ZW50KTtcbiAgICB9KTtcblxuICAgIGNvbnN0IGF2ZXJhZ2VGaWxlU2l6ZSA9IGZpbGVzLmxlbmd0aCA+IDAgPyB0b3RhbEZpbGVTaXplIC8gZmlsZXMubGVuZ3RoIDogMDtcbiAgICBjb25zdCBkdXBsaWNhdGVkQ29kZVBlcmNlbnRhZ2UgPSB0b3RhbEZpbGVTaXplID4gMCA/IChkdXBsaWNhdGVkTGluZXMgLyB0b3RhbEZpbGVTaXplKSAqIDEwMCA6IDA7XG4gICAgXG4gICAgLy8g5L+d5a6I5oCn5oyH5pWw44Gu6KiI566X77yI57Ch5piT54mI77yJXG4gICAgY29uc3QgbWFpbnRhaW5hYmlsaXR5SW5kZXggPSBNYXRoLm1heCgwLCBNYXRoLm1pbigxMDAsIFxuICAgICAgMTAwIC0gKGR1cGxpY2F0ZWRDb2RlUGVyY2VudGFnZSAqIDIpIC0gKGF2ZXJhZ2VGaWxlU2l6ZSAvIDEwKVxuICAgICkpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIG1haW50YWluYWJpbGl0eUluZGV4LFxuICAgICAgZHVwbGljYXRlZENvZGVQZXJjZW50YWdlLFxuICAgICAgYXZlcmFnZUZpbGVTaXplLFxuICAgICAgbGFyZ2VGaWxlcyxcbiAgICAgIGxvbmdGdW5jdGlvbnNcbiAgICB9O1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBjYWxjdWxhdGVUZXN0YWJpbGl0eU1ldHJpY3MoXG4gICAgY29kZUZpbGVzOiBzdHJpbmdbXSxcbiAgICB0ZXN0RmlsZXM6IHN0cmluZ1tdLFxuICAgIGNvZGVDb250ZW50czogTWFwPHN0cmluZywgc3RyaW5nPlxuICApOiBQcm9taXNlPFRlc3RhYmlsaXR5TWV0cmljcz4ge1xuICAgIGNvbnN0IHRvdGFsQ2xhc3NlcyA9IHRoaXMuY291bnRDbGFzc2VzKGNvZGVDb250ZW50cyk7XG4gICAgY29uc3QgdGVzdGFibGVDbGFzc2VzID0gdGhpcy5jb3VudFRlc3RhYmxlQ2xhc3Nlcyhjb2RlQ29udGVudHMpO1xuICAgIGNvbnN0IHRlc3RDb3ZlcmFnZSA9IGNvZGVGaWxlcy5sZW5ndGggPiAwID8gKHRlc3RGaWxlcy5sZW5ndGggLyBjb2RlRmlsZXMubGVuZ3RoKSAqIDEwMCA6IDA7XG4gICAgY29uc3QgbW9ja2FiaWxpdHkgPSB0aGlzLmNhbGN1bGF0ZU1vY2thYmlsaXR5KGNvZGVDb250ZW50cyk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgdGVzdENvdmVyYWdlOiBNYXRoLm1pbigxMDAsIHRlc3RDb3ZlcmFnZSksXG4gICAgICB0ZXN0YWJsZUNsYXNzZXMsXG4gICAgICB1bnRlc3RhYmxlQ2xhc3NlczogdG90YWxDbGFzc2VzIC0gdGVzdGFibGVDbGFzc2VzLFxuICAgICAgbW9ja2FiaWxpdHlcbiAgICB9O1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBjYWxjdWxhdGVEb2N1bWVudGF0aW9uTWV0cmljcyhcbiAgICBwcm9qZWN0UGF0aDogc3RyaW5nLFxuICAgIGNvZGVGaWxlczogc3RyaW5nW10sXG4gICAgY29kZUNvbnRlbnRzOiBNYXA8c3RyaW5nLCBzdHJpbmc+XG4gICk6IFByb21pc2U8RG9jdW1lbnRhdGlvbk1ldHJpY3M+IHtcbiAgICBjb25zdCBkb2N1bWVudGVkRnVuY3Rpb25zID0gdGhpcy5jb3VudERvY3VtZW50ZWRGdW5jdGlvbnMoY29kZUNvbnRlbnRzKTtcbiAgICBjb25zdCBkb2N1bWVudGVkQ2xhc3NlcyA9IHRoaXMuY291bnREb2N1bWVudGVkQ2xhc3Nlcyhjb2RlQ29udGVudHMpO1xuICAgIGNvbnN0IHRvdGFsRnVuY3Rpb25zID0gdGhpcy5jb3VudFRvdGFsRnVuY3Rpb25zKGNvZGVDb250ZW50cyk7XG4gICAgY29uc3QgdG90YWxDbGFzc2VzID0gdGhpcy5jb3VudENsYXNzZXMoY29kZUNvbnRlbnRzKTtcbiAgICBcbiAgICBjb25zdCBmdW5jdGlvbkNvdmVyYWdlID0gdG90YWxGdW5jdGlvbnMgPiAwID8gKGRvY3VtZW50ZWRGdW5jdGlvbnMgLyB0b3RhbEZ1bmN0aW9ucykgKiAxMDAgOiAwO1xuICAgIGNvbnN0IGNsYXNzQ292ZXJhZ2UgPSB0b3RhbENsYXNzZXMgPiAwID8gKGRvY3VtZW50ZWRDbGFzc2VzIC8gdG90YWxDbGFzc2VzKSAqIDEwMCA6IDA7XG4gICAgY29uc3QgZG9jdW1lbnRhdGlvbkNvdmVyYWdlID0gKGZ1bmN0aW9uQ292ZXJhZ2UgKyBjbGFzc0NvdmVyYWdlKSAvIDI7XG4gICAgXG4gICAgY29uc3QgcmVhZG1lUXVhbGl0eSA9IHRoaXMuYXNzZXNzUmVhZG1lUXVhbGl0eShwcm9qZWN0UGF0aCk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgZG9jdW1lbnRlZEZ1bmN0aW9ucyxcbiAgICAgIGRvY3VtZW50ZWRDbGFzc2VzLFxuICAgICAgZG9jdW1lbnRhdGlvbkNvdmVyYWdlLFxuICAgICAgcmVhZG1lUXVhbGl0eVxuICAgIH07XG4gIH1cblxuICAvLyBVdGlsaXR5IG1ldGhvZHMgZm9yIG1ldHJpY3MgY2FsY3VsYXRpb25cblxuICBwcml2YXRlIGV4dHJhY3RGdW5jdGlvbnMoY29udGVudDogc3RyaW5nKTogQXJyYXk8eyBuYW1lOiBzdHJpbmc7IGNvbnRlbnQ6IHN0cmluZzsgbGluZUNvdW50OiBudW1iZXIgfT4ge1xuICAgIGNvbnN0IGZ1bmN0aW9uczogQXJyYXk8eyBuYW1lOiBzdHJpbmc7IGNvbnRlbnQ6IHN0cmluZzsgbGluZUNvdW50OiBudW1iZXIgfT4gPSBbXTtcbiAgICBjb25zdCBsaW5lcyA9IGNvbnRlbnQuc3BsaXQoJ1xcbicpO1xuICAgIFxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGxpbmUgPSBsaW5lc1tpXTtcbiAgICAgIGNvbnN0IGZ1bmNNYXRjaCA9IGxpbmUubWF0Y2goLyg/OmZ1bmN0aW9uXFxzKyhbYS16QS1aX11bYS16QS1aMC05X10qKXwoW2EtekEtWl9dW2EtekEtWjAtOV9dKilcXHMqXFwoKS8pO1xuICAgICAgXG4gICAgICBpZiAoZnVuY01hdGNoKSB7XG4gICAgICAgIGNvbnN0IGZ1bmNOYW1lID0gZnVuY01hdGNoWzFdIHx8IGZ1bmNNYXRjaFsyXTtcbiAgICAgICAgbGV0IGJyYWNlQ291bnQgPSAwO1xuICAgICAgICBsZXQgc3RhcnRMaW5lID0gaTtcbiAgICAgICAgbGV0IGVuZExpbmUgPSBpO1xuICAgICAgICBsZXQgZnVuY0NvbnRlbnQgPSAnJztcbiAgICAgICAgXG4gICAgICAgIC8vIOmWouaVsOOBrue1guOCj+OCiuOCkuimi+OBpOOBkeOCi1xuICAgICAgICBmb3IgKGxldCBqID0gaTsgaiA8IGxpbmVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgY29uc3QgY3VycmVudExpbmUgPSBsaW5lc1tqXTtcbiAgICAgICAgICBmdW5jQ29udGVudCArPSBjdXJyZW50TGluZSArICdcXG4nO1xuICAgICAgICAgIFxuICAgICAgICAgIGJyYWNlQ291bnQgKz0gKGN1cnJlbnRMaW5lLm1hdGNoKC9cXHsvZykgfHwgW10pLmxlbmd0aDtcbiAgICAgICAgICBicmFjZUNvdW50IC09IChjdXJyZW50TGluZS5tYXRjaCgvXFx9L2cpIHx8IFtdKS5sZW5ndGg7XG4gICAgICAgICAgXG4gICAgICAgICAgaWYgKGJyYWNlQ291bnQgPT09IDAgJiYgaiA+IGkpIHtcbiAgICAgICAgICAgIGVuZExpbmUgPSBqO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBmdW5jdGlvbnMucHVzaCh7XG4gICAgICAgICAgbmFtZTogZnVuY05hbWUsXG4gICAgICAgICAgY29udGVudDogZnVuY0NvbnRlbnQsXG4gICAgICAgICAgbGluZUNvdW50OiBlbmRMaW5lIC0gc3RhcnRMaW5lICsgMVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIGZ1bmN0aW9ucztcbiAgfVxuXG4gIHByaXZhdGUgY2FsY3VsYXRlQ3ljbG9tYXRpY0NvbXBsZXhpdHkoY29udGVudDogc3RyaW5nKTogbnVtYmVyIHtcbiAgICAvLyDnsKHmmJPjgrXjgqTjgq/jg63jg57jg4bjgqPjg4Pjgq/opIfpm5Hluqbjga7oqIjnrpdcbiAgICBjb25zdCBjb21wbGV4aXR5S2V5d29yZHMgPSBbXG4gICAgICAvaWZcXHMqXFwoL2csXG4gICAgICAvZWxzZVxccytpZlxccypcXCgvZyxcbiAgICAgIC93aGlsZVxccypcXCgvZyxcbiAgICAgIC9mb3JcXHMqXFwoL2csXG4gICAgICAvY2F0Y2hcXHMqXFwoL2csXG4gICAgICAvY2FzZVxccysvZyxcbiAgICAgIC9cXD9cXHMqOi9nLCAvLyDkuInpoIXmvJTnrpflrZBcbiAgICAgIC8mJi9nLFxuICAgICAgL1xcfFxcfC9nXG4gICAgXTtcbiAgICBcbiAgICBsZXQgY29tcGxleGl0eSA9IDE7IC8vIOWfuuacrOOBruikh+mbkeW6plxuICAgIFxuICAgIGNvbXBsZXhpdHlLZXl3b3Jkcy5mb3JFYWNoKGtleXdvcmQgPT4ge1xuICAgICAgY29uc3QgbWF0Y2hlcyA9IGNvbnRlbnQubWF0Y2goa2V5d29yZCk7XG4gICAgICBpZiAobWF0Y2hlcykge1xuICAgICAgICBjb21wbGV4aXR5ICs9IG1hdGNoZXMubGVuZ3RoO1xuICAgICAgfVxuICAgIH0pO1xuICAgIFxuICAgIHJldHVybiBjb21wbGV4aXR5O1xuICB9XG5cbiAgcHJpdmF0ZSBkZXRlY3REdXBsaWNhdGVkQ29kZShjb250ZW50OiBzdHJpbmcpOiBudW1iZXIge1xuICAgIC8vIOewoeaYk+mHjeikh+OCs+ODvOODieaknOWHulxuICAgIGNvbnN0IGxpbmVzID0gY29udGVudC5zcGxpdCgnXFxuJylcbiAgICAgIC5tYXAobGluZSA9PiBsaW5lLnRyaW0oKSlcbiAgICAgIC5maWx0ZXIobGluZSA9PiBsaW5lLmxlbmd0aCA+IDEwICYmICFsaW5lLnN0YXJ0c1dpdGgoJy8vJykpO1xuICAgIFxuICAgIGNvbnN0IGxpbmVNYXAgPSBuZXcgTWFwPHN0cmluZywgbnVtYmVyPigpO1xuICAgIGxpbmVzLmZvckVhY2gobGluZSA9PiB7XG4gICAgICBsaW5lTWFwLnNldChsaW5lLCAobGluZU1hcC5nZXQobGluZSkgfHwgMCkgKyAxKTtcbiAgICB9KTtcbiAgICBcbiAgICBsZXQgZHVwbGljYXRlZExpbmVzID0gMDtcbiAgICBsaW5lTWFwLmZvckVhY2goY291bnQgPT4ge1xuICAgICAgaWYgKGNvdW50ID4gMSkge1xuICAgICAgICBkdXBsaWNhdGVkTGluZXMgKz0gY291bnQgLSAxO1xuICAgICAgfVxuICAgIH0pO1xuICAgIFxuICAgIHJldHVybiBkdXBsaWNhdGVkTGluZXM7XG4gIH1cblxuICBwcml2YXRlIGNvdW50Q2xhc3Nlcyhjb2RlQ29udGVudHM6IE1hcDxzdHJpbmcsIHN0cmluZz4pOiBudW1iZXIge1xuICAgIGxldCBjbGFzc0NvdW50ID0gMDtcbiAgICBjb2RlQ29udGVudHMuZm9yRWFjaChjb250ZW50ID0+IHtcbiAgICAgIGNvbnN0IG1hdGNoZXMgPSBjb250ZW50Lm1hdGNoKC9jbGFzc1xccytbYS16QS1aX11bYS16QS1aMC05X10qL2cpO1xuICAgICAgaWYgKG1hdGNoZXMpIHtcbiAgICAgICAgY2xhc3NDb3VudCArPSBtYXRjaGVzLmxlbmd0aDtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gY2xhc3NDb3VudDtcbiAgfVxuXG4gIHByaXZhdGUgY291bnRUZXN0YWJsZUNsYXNzZXMoY29kZUNvbnRlbnRzOiBNYXA8c3RyaW5nLCBzdHJpbmc+KTogbnVtYmVyIHtcbiAgICBsZXQgdGVzdGFibGVDb3VudCA9IDA7XG4gICAgY29kZUNvbnRlbnRzLmZvckVhY2goY29udGVudCA9PiB7XG4gICAgICBjb25zdCBjbGFzc01hdGNoZXMgPSBjb250ZW50Lm1hdGNoKC9jbGFzc1xccysoW2EtekEtWl9dW2EtekEtWjAtOV9dKikvZyk7XG4gICAgICBpZiAoY2xhc3NNYXRjaGVzKSB7XG4gICAgICAgIGNsYXNzTWF0Y2hlcy5mb3JFYWNoKG1hdGNoID0+IHtcbiAgICAgICAgICAvLyDjgq/jg6njgrnjgYzkvp3lrZjplqLkv4Lms6jlhaXlj6/og73jgYvjganjgYbjgYvjga7nsKHmmJPjg4Hjgqfjg4Pjgq9cbiAgICAgICAgICBpZiAoY29udGVudC5pbmNsdWRlcygnY29uc3RydWN0b3IoJykgfHwgY29udGVudC5pbmNsdWRlcygncHVibGljICcpIHx8IGNvbnRlbnQuaW5jbHVkZXMoJ3ByaXZhdGUgJykpIHtcbiAgICAgICAgICAgIHRlc3RhYmxlQ291bnQrKztcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB0ZXN0YWJsZUNvdW50O1xuICB9XG5cbiAgcHJpdmF0ZSBjYWxjdWxhdGVNb2NrYWJpbGl0eShjb2RlQ29udGVudHM6IE1hcDxzdHJpbmcsIHN0cmluZz4pOiBudW1iZXIge1xuICAgIGxldCBtb2NrYWJsZUNvbXBvbmVudHMgPSAwO1xuICAgIGxldCB0b3RhbENvbXBvbmVudHMgPSAwO1xuICAgIFxuICAgIGNvZGVDb250ZW50cy5mb3JFYWNoKGNvbnRlbnQgPT4ge1xuICAgICAgY29uc3QgY2xhc3NlcyA9IGNvbnRlbnQubWF0Y2goL2NsYXNzXFxzK1thLXpBLVpfXVthLXpBLVowLTlfXSovZykgfHwgW107XG4gICAgICB0b3RhbENvbXBvbmVudHMgKz0gY2xhc3Nlcy5sZW5ndGg7XG4gICAgICBcbiAgICAgIC8vIOOCpOODs+OCv+ODvOODleOCp+ODvOOCueOChOaKveixoeOCr+ODqeOCueOBruS9v+eUqOOCkuODgeOCp+ODg+OCr1xuICAgICAgaWYgKGNvbnRlbnQuaW5jbHVkZXMoJ2ludGVyZmFjZSAnKSB8fCBjb250ZW50LmluY2x1ZGVzKCdhYnN0cmFjdCAnKSkge1xuICAgICAgICBtb2NrYWJsZUNvbXBvbmVudHMgKz0gY2xhc3Nlcy5sZW5ndGg7XG4gICAgICB9XG4gICAgfSk7XG4gICAgXG4gICAgcmV0dXJuIHRvdGFsQ29tcG9uZW50cyA+IDAgPyAobW9ja2FibGVDb21wb25lbnRzIC8gdG90YWxDb21wb25lbnRzKSAqIDEwMCA6IDA7XG4gIH1cblxuICBwcml2YXRlIGNvdW50RG9jdW1lbnRlZEZ1bmN0aW9ucyhjb2RlQ29udGVudHM6IE1hcDxzdHJpbmcsIHN0cmluZz4pOiBudW1iZXIge1xuICAgIGxldCBkb2N1bWVudGVkQ291bnQgPSAwO1xuICAgIFxuICAgIGNvZGVDb250ZW50cy5mb3JFYWNoKGNvbnRlbnQgPT4ge1xuICAgICAgY29uc3QgbGluZXMgPSBjb250ZW50LnNwbGl0KCdcXG4nKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRMaW5lID0gbGluZXNbaV0udHJpbSgpO1xuICAgICAgICBjb25zdCBuZXh0TGluZSA9IGxpbmVzW2kgKyAxXS50cmltKCk7XG4gICAgICAgIFxuICAgICAgICAvLyBKU0RvY+OCs+ODoeODs+ODiOOBruW+jOOBq+mWouaVsOOBjOOBguOCi+WgtOWQiFxuICAgICAgICBpZiAoY3VycmVudExpbmUuaW5jbHVkZXMoJyovJykgJiYgbmV4dExpbmUubWF0Y2goLyg/OmZ1bmN0aW9ufGFzeW5jXFxzK2Z1bmN0aW9ufFxcdytcXHMqXFwoKS8pKSB7XG4gICAgICAgICAgZG9jdW1lbnRlZENvdW50Kys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICBcbiAgICByZXR1cm4gZG9jdW1lbnRlZENvdW50O1xuICB9XG5cbiAgcHJpdmF0ZSBjb3VudERvY3VtZW50ZWRDbGFzc2VzKGNvZGVDb250ZW50czogTWFwPHN0cmluZywgc3RyaW5nPik6IG51bWJlciB7XG4gICAgbGV0IGRvY3VtZW50ZWRDb3VudCA9IDA7XG4gICAgXG4gICAgY29kZUNvbnRlbnRzLmZvckVhY2goY29udGVudCA9PiB7XG4gICAgICBjb25zdCBsaW5lcyA9IGNvbnRlbnQuc3BsaXQoJ1xcbicpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgICAgY29uc3QgY3VycmVudExpbmUgPSBsaW5lc1tpXS50cmltKCk7XG4gICAgICAgIGNvbnN0IG5leHRMaW5lID0gbGluZXNbaSArIDFdLnRyaW0oKTtcbiAgICAgICAgXG4gICAgICAgIC8vIEpTRG9j44Kz44Oh44Oz44OI44Gu5b6M44Gr44Kv44Op44K544GM44GC44KL5aC05ZCIXG4gICAgICAgIGlmIChjdXJyZW50TGluZS5pbmNsdWRlcygnKi8nKSAmJiBuZXh0TGluZS5zdGFydHNXaXRoKCdjbGFzcyAnKSkge1xuICAgICAgICAgIGRvY3VtZW50ZWRDb3VudCsrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgXG4gICAgcmV0dXJuIGRvY3VtZW50ZWRDb3VudDtcbiAgfVxuXG4gIHByaXZhdGUgY291bnRUb3RhbEZ1bmN0aW9ucyhjb2RlQ29udGVudHM6IE1hcDxzdHJpbmcsIHN0cmluZz4pOiBudW1iZXIge1xuICAgIGxldCBmdW5jdGlvbkNvdW50ID0gMDtcbiAgICBcbiAgICBjb2RlQ29udGVudHMuZm9yRWFjaChjb250ZW50ID0+IHtcbiAgICAgIGNvbnN0IG1hdGNoZXMgPSBjb250ZW50Lm1hdGNoKC8oPzpmdW5jdGlvblxccytbYS16QS1aX11bYS16QS1aMC05X10qfFxcdytcXHMqXFwoKS9nKTtcbiAgICAgIGlmIChtYXRjaGVzKSB7XG4gICAgICAgIGZ1bmN0aW9uQ291bnQgKz0gbWF0Y2hlcy5sZW5ndGg7XG4gICAgICB9XG4gICAgfSk7XG4gICAgXG4gICAgcmV0dXJuIGZ1bmN0aW9uQ291bnQ7XG4gIH1cblxuICBwcml2YXRlIGFzc2Vzc1JlYWRtZVF1YWxpdHkocHJvamVjdFBhdGg6IHN0cmluZyk6IG51bWJlciB7XG4gICAgY29uc3QgcmVhZG1lRmlsZXMgPSBbJ1JFQURNRS5tZCcsICdyZWFkbWUubWQnLCAnUkVBRE1FLnR4dCcsICdyZWFkbWUudHh0J107XG4gICAgbGV0IHF1YWxpdHkgPSAwO1xuICAgIFxuICAgIGZvciAoY29uc3QgZmlsZU5hbWUgb2YgcmVhZG1lRmlsZXMpIHtcbiAgICAgIGNvbnN0IGZpbGVQYXRoID0gcGF0aC5qb2luKHByb2plY3RQYXRoLCBmaWxlTmFtZSk7XG4gICAgICBcbiAgICAgIC8vIOOCu+OCreODpeODquODhuOCozog44OR44K55qSc6Ki8XG4gICAgICBpZiAoIVBhdGhTZWN1cml0eS52YWxpZGF0ZVByb2plY3RQYXRoKGZpbGVQYXRoLCBwcm9qZWN0UGF0aCkpIHtcbiAgICAgICAgY29udGludWU7IC8vIOODl+ODreOCuOOCp+OCr+ODiOevhOWbsuWkluOBr+OCueOCreODg+ODl1xuICAgICAgfVxuICAgICAgXG4gICAgICBpZiAoZnMuZXhpc3RzU3luYyhmaWxlUGF0aCkpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCBjb250ZW50ID0gZnMucmVhZEZpbGVTeW5jKGZpbGVQYXRoLCAndXRmLTgnKTtcbiAgICAgICAgICBjb25zdCBsaW5lcyA9IGNvbnRlbnQuc3BsaXQoJ1xcbicpO1xuICAgICAgICAgIFxuICAgICAgICAgIC8vIOWfuuacrOeahOOBquWTgeizquaMh+aomVxuICAgICAgICAgIGlmIChsaW5lcy5sZW5ndGggPiAxMCkgcXVhbGl0eSArPSAyMDtcbiAgICAgICAgICBpZiAoY29udGVudC5pbmNsdWRlcygnIyAnKSB8fCBjb250ZW50LmluY2x1ZGVzKCcjIyAnKSkgcXVhbGl0eSArPSAyMDsgLy8g44OY44OD44OA44O8XG4gICAgICAgICAgaWYgKGNvbnRlbnQuaW5jbHVkZXMoJ2luc3RhbGwnKSB8fCBjb250ZW50LmluY2x1ZGVzKCdzZXR1cCcpKSBxdWFsaXR5ICs9IDIwOyAvLyDjgqTjg7Pjgrnjg4jjg7zjg6voqqzmmI5cbiAgICAgICAgICBpZiAoY29udGVudC5pbmNsdWRlcygndXNhZ2UnKSB8fCBjb250ZW50LmluY2x1ZGVzKCdleGFtcGxlJykpIHF1YWxpdHkgKz0gMjA7IC8vIOS9v+eUqOS+i1xuICAgICAgICAgIGlmIChjb250ZW50LmluY2x1ZGVzKCdgYGAnKSB8fCBjb250ZW50LmluY2x1ZGVzKCdgJykpIHF1YWxpdHkgKz0gMjA7IC8vIOOCs+ODvOODieODluODreODg+OCr1xuICAgICAgICAgIFxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIC8vIOODleOCoeOCpOODq+iqreOBv+i+vOOBv+OCqOODqeODvOOBr+eEoeimllxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIHJldHVybiBxdWFsaXR5O1xuICB9XG59Il0sInZlcnNpb24iOjN9