{"file":"/Users/sasakama/Projects/Rimor/src/intent-analysis/DomainInferenceEngine.ts","mappings":"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","names":[],"sources":["/Users/sasakama/Projects/Rimor/src/intent-analysis/DomainInferenceEngine.ts"],"sourcesContent":["/**\n * Domain Inference Engine\n * v0.9.0 Phase 2 - 型名からドメイン概念を推論する実装\n * \n * KISS原則: シンプルなパターンマッチングから開始\n * YAGNI原則: 必要最小限の機能のみ実装\n */\n\nimport { \n  IDomainInferenceEngine, \n  DomainInference, \n  DomainContext,\n  BusinessImportance,\n  DomainDictionary,\n  ConfidenceConfig\n} from './IDomainInferenceEngine';\nimport { TypeInfo } from './ITypeScriptAnalyzer';\n\nexport class DomainInferenceEngine implements IDomainInferenceEngine {\n  // ドメイン辞書（シンプルなマップとして実装）\n  private domainDictionary: DomainDictionary = {\n    terms: [],\n    rules: []\n  };\n  \n  // 信頼度設定\n  private confidenceConfig: ConfidenceConfig = {\n    defaultConfidence: 0.5,\n    evidenceBoostFactor: 0.1\n  };\n\n  // 組み込みのドメインパターン（設定可能な信頼度を持つ）\n  private builtInPatterns = new Map<string, { domain: string; confidence: number; concepts: string[]; importance: BusinessImportance }>([\n    ['User', { domain: 'user-management', confidence: 0.7, concepts: ['ユーザー', '認証', 'アカウント管理'], importance: 'high' }],\n    ['PaymentService', { domain: 'payment', confidence: 0.75, concepts: ['決済', '支払い', 'トランザクション'], importance: 'high' }],\n    ['Order', { domain: 'order-management', confidence: 0.65, concepts: ['注文'], importance: 'high' }],\n    ['AuthenticationService', { domain: 'authentication', confidence: 0.75, concepts: ['認証', 'アクセス制御', 'セキュリティ'], importance: 'high' }],\n    ['Invoice', { domain: 'billing', confidence: 0.7, concepts: ['請求', '課金'], importance: 'high' }],\n    ['InvoiceProcessor', { domain: 'billing', confidence: 0.7, concepts: ['請求', '課金', '会計', '税務'], importance: 'high' }]\n  ]);\n\n  // ドメイン重要度マップ（控えめなデフォルト値）\n  private readonly domainImportanceMap = new Map<string, BusinessImportance>([\n    ['payment', 'high'],\n    ['authentication', 'high'],\n    ['billing', 'high'],\n    ['user-management', 'high'],\n    ['order-management', 'high'],\n    ['logging', 'medium'],\n    ['utility', 'low'],\n    ['general', 'low']\n  ]);\n\n  async inferDomainFromType(typeInfo: TypeInfo): Promise<DomainInference> {\n    // プリミティブ型の場合\n    if (typeInfo.isPrimitive) {\n      return {\n        domain: 'general',\n        confidence: 0.1,\n        concepts: [],\n        businessImportance: 'low'\n      };\n    }\n\n    // ジェネリック型の場合、型引数も考慮\n    if (typeInfo.typeArguments && typeInfo.typeArguments.length > 0) {\n      const baseType = this.builtInPatterns.get(typeInfo.typeName);\n      const argType = typeInfo.typeArguments[0];\n      const argPattern = this.builtInPatterns.get(argType.typeName);\n\n      if (typeInfo.typeName === 'Repository' && argPattern) {\n        return {\n          domain: argPattern.domain,\n          confidence: Math.min(0.8, argPattern.confidence + 0.1),  // 複合証拠によるわずかな増加\n          concepts: [...argPattern.concepts, 'リポジトリ', 'データアクセス'],\n          businessImportance: argPattern.importance\n        };\n      }\n    }\n\n    // 組み込みパターンから検索\n    const pattern = this.builtInPatterns.get(typeInfo.typeName);\n    if (pattern) {\n      return {\n        domain: pattern.domain,\n        confidence: this.getConfidence(typeInfo.typeName, pattern.confidence),\n        concepts: pattern.concepts,\n        businessImportance: pattern.importance\n      };\n    }\n\n    // 辞書から検索（YAGNI: 今は基本的な実装のみ）\n    const dictEntry = this.domainDictionary.terms.find(t => t.term === typeInfo.typeName);\n    if (dictEntry) {\n      const importance = await this.getDomainImportance(dictEntry.domain);\n      return {\n        domain: dictEntry.domain,\n        confidence: dictEntry.weight,\n        concepts: this.inferConceptsFromDomain(dictEntry.domain),\n        businessImportance: importance\n      };\n    }\n\n    // ルールベースのマッチング\n    let bestMatch: DomainInference | null = null;\n    let maxConfidence = 0;\n    \n    for (const rule of this.domainDictionary.rules) {\n      if (rule.pattern.test(typeInfo.typeName)) {\n        const importance = await this.getDomainImportance(rule.domain);\n        const concepts = this.inferConceptsFromDomain(rule.domain);\n        \n        // Service系の場合は追加の概念を付与\n        if (typeInfo.typeName.endsWith('Service')) {\n          concepts.push('サービス層');\n        }\n        \n        // 複合的な名前の場合（例：UserService）、複数のパターンを考慮\n        let combinedConfidence = rule.weight;\n        const baseConcepts: string[] = [];\n        \n        // 複合名の各部分をチェック\n        for (const [name, pattern] of this.builtInPatterns) {\n          if (typeInfo.typeName.includes(name) && name !== typeInfo.typeName) {\n            combinedConfidence = Math.min(1.0, combinedConfidence + pattern.confidence * 0.3);\n            baseConcepts.push(...pattern.concepts);\n          }\n        }\n        \n        // 辞書の用語も考慮\n        for (const term of this.domainDictionary.terms) {\n          if (typeInfo.typeName.includes(term.term) && term.term !== typeInfo.typeName) {\n            combinedConfidence = Math.min(1.0, combinedConfidence + term.weight * 0.3);\n            baseConcepts.push(...this.inferConceptsFromDomain(term.domain));\n          }\n        }\n        \n        // ユニークな概念のみを保持\n        const uniqueConcepts = [...new Set([...baseConcepts, ...concepts])];\n        \n        if (combinedConfidence > maxConfidence) {\n          maxConfidence = combinedConfidence;\n          bestMatch = {\n            domain: rule.domain,\n            confidence: combinedConfidence,\n            concepts: uniqueConcepts,\n            businessImportance: importance\n          };\n        }\n      }\n    }\n    \n    if (bestMatch) {\n      return bestMatch;\n    }\n\n    // デフォルト\n    return {\n      domain: 'unknown',\n      confidence: 0.3,\n      concepts: [],\n      businessImportance: 'low'\n    };\n  }\n\n  async inferDomainFromContext(context: DomainContext): Promise<DomainInference> {\n    // ファイルパスからドメインを推論\n    const pathParts = context.filePath.split('/');\n    let inferredDomain = '';\n    let confidence = 0;\n    const concepts: string[] = [];\n\n    // パスベースの推論（設定可能な信頼度を使用）\n    if (pathParts.includes('auth') || pathParts.includes('authentication')) {\n      inferredDomain = 'authentication';\n      confidence = this.confidenceConfig.domainConfidenceMap?.['authentication'] || 0.9;\n      concepts.push('認証', 'アクセス制御', 'セキュリティ');\n    } else if (pathParts.includes('billing')) {\n      inferredDomain = 'billing';\n      confidence = this.confidenceConfig.domainConfidenceMap?.['billing'] || 0.88;\n      concepts.push('請求', '課金');\n    } else if (pathParts.includes('payment')) {\n      inferredDomain = 'payment';\n      confidence = this.confidenceConfig.domainConfidenceMap?.['payment'] || 0.9;\n      concepts.push('決済', '支払い');\n    }\n\n    // クラス名からの推論\n    if (context.className) {\n      const classPattern = this.builtInPatterns.get(context.className);\n      if (classPattern) {\n        inferredDomain = classPattern.domain;\n        confidence = Math.max(confidence, classPattern.confidence);\n        classPattern.concepts.forEach(c => {\n          if (!concepts.includes(c)) concepts.push(c);\n        });\n      }\n    }\n\n    // インポートからの推論\n    const importDomains = new Set<string>();\n    const uniqueRelatedDomains = new Set<string>();\n    \n    for (const imp of context.imports) {\n      const pattern = this.builtInPatterns.get(imp);\n      if (pattern) {\n        importDomains.add(pattern.domain);\n        // inferDomainFromContextで概念を追加する際、クラス名由来の概念と重複しないようにする\n        if (context.className !== imp) {\n          pattern.concepts.forEach(c => {\n            if (!concepts.includes(c)) concepts.push(c);\n          });\n        }\n      }\n\n      // 特定のインポートパターン\n      if (imp === 'TaxCalculator') {\n        if (!concepts.includes('税務')) concepts.push('税務');\n        if (inferredDomain === 'billing' && !concepts.includes('会計')) {\n          concepts.push('会計');\n        }\n      }\n      if (imp === 'Token' || imp === 'Permission') {\n        uniqueRelatedDomains.add('security');\n      }\n      if (imp === 'Customer') {\n        uniqueRelatedDomains.add('accounting');\n      }\n    }\n\n    // 関連ドメインの設定\n    if (inferredDomain === 'authentication') {\n      uniqueRelatedDomains.add('user-management');\n    } else if (inferredDomain === 'billing') {\n      // Paymentインポートがあるかチェック\n      for (const imp of context.imports) {\n        if (imp === 'Payment') {\n          uniqueRelatedDomains.add('payment');\n          break;\n        }\n      }\n    }\n\n    // uniqueRelatedDomainsからrelatedDomains配列を生成（順序付き）\n    const orderedRelatedDomains = Array.from(uniqueRelatedDomains).sort();\n\n    const importance = await this.getDomainImportance(inferredDomain);\n\n    return {\n      domain: inferredDomain,\n      confidence,\n      concepts,\n      businessImportance: importance,\n      relatedDomains: orderedRelatedDomains.length > 0 ? orderedRelatedDomains : undefined\n    };\n  }\n\n  async getDomainImportance(domain: string): Promise<BusinessImportance> {\n    return this.domainImportanceMap.get(domain) || 'medium';\n  }\n\n  async loadDictionary(dictionary: DomainDictionary): Promise<void> {\n    // 辞書をマージ（DRY原則: 既存の辞書に追加）\n    this.domainDictionary.terms.push(...dictionary.terms);\n    this.domainDictionary.rules.push(...dictionary.rules);\n  }\n\n  mergeInferences(inferences: DomainInference[]): DomainInference {\n    if (inferences.length === 0) {\n      return {\n        domain: 'unknown',\n        confidence: 0,\n        concepts: [],\n        businessImportance: 'low'\n      };\n    }\n\n    // 最も信頼度の高い推論を選択（KISS原則）\n    const best = inferences.reduce((prev, curr) => \n      curr.confidence > prev.confidence ? curr : prev\n    );\n\n    // 全ての概念を統合\n    const allConcepts = new Set<string>();\n    inferences.forEach(inf => inf.concepts.forEach(c => allConcepts.add(c)));\n\n    return {\n      ...best,\n      concepts: Array.from(allConcepts)\n    };\n  }\n\n  // プライベートヘルパーメソッド\n  private inferConceptsFromDomain(domain: string): string[] {\n    const conceptMap: Record<string, string[]> = {\n      'user-management': ['ユーザー'],\n      'service-layer': [],\n      'data-access': ['データアクセス']\n    };\n\n    return conceptMap[domain] || [];\n  }\n  \n  /**\n   * 信頼度設定を適用\n   */\n  setConfidenceConfig(config: ConfidenceConfig): void {\n    this.confidenceConfig = { ...this.confidenceConfig, ...config };\n    \n    // typeConfidenceMapが設定されている場合、builtInPatternsを更新\n    if (config.typeConfidenceMap) {\n      for (const [typeName, confidence] of Object.entries(config.typeConfidenceMap)) {\n        const pattern = this.builtInPatterns.get(typeName);\n        if (pattern) {\n          pattern.confidence = confidence;\n        }\n      }\n    }\n  }\n  \n  /**\n   * 設定された信頼度を取得（設定がない場合はデフォルト値を返す）\n   */\n  private getConfidence(typeName: string, defaultValue: number): number {\n    // 設定された信頼度マップから取得\n    if (this.confidenceConfig.typeConfidenceMap?.[typeName] !== undefined) {\n      return this.confidenceConfig.typeConfidenceMap[typeName];\n    }\n    \n    // builtInPatternsから取得\n    const pattern = this.builtInPatterns.get(typeName);\n    if (pattern) {\n      return pattern.confidence;\n    }\n    \n    // デフォルト値を返す\n    return defaultValue;\n  }\n}"],"version":3}