{"file":"/Users/sasakama/Projects/Rimor/src/analyzers/structure.ts","mappings":"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","names":[],"sources":["/Users/sasakama/Projects/Rimor/src/analyzers/structure.ts"],"sourcesContent":["import {\n  ProjectStructure,\n  ProjectOverview,\n  DirectoryInfo,\n  ArchitecturePattern,\n  NamingConventions,\n  ProjectMetrics,\n  DirectoryPurpose,\n  ArchitectureType,\n  NamingPattern,\n  LanguageDistribution,\n  DetectedFramework,\n  FileNamingConvention,\n  DirectoryNamingConvention,\n  VariableNamingConvention,\n  FunctionNamingConvention,\n  ClassNamingConvention,\n  ComplexityMetrics,\n  MaintainabilityMetrics,\n  TestabilityMetrics,\n  DocumentationMetrics\n} from './types';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { PathSecurity } from '../utils/pathSecurity';\nimport { ResourceLimitMonitor } from '../utils/resourceLimits';\n\n// 新しい分析クラスのインポート\nimport { ArchitectureDetector } from './structure-analysis/architecture-detector';\nimport { NamingAnalyzer } from './structure-analysis/naming-analyzer';\nimport { MetricsCalculator } from './structure-analysis/metrics-calculator';\nimport { PatternDetector } from './structure-analysis/pattern-detector';\n\n/**\n * プロジェクト構造分析器（ファサードパターン）\n * 後方互換性を維持しながら新しい分析クラスに処理を委譲\n * プロジェクトの構造、アーキテクチャパターン、命名規則、メトリクスを分析\n * @deprecated 将来的には個別の分析クラスを直接使用することを推奨\n */\nexport class ProjectStructureAnalyzer {\n  private readonly IGNORE_PATTERNS = [\n    'node_modules',\n    '.git',\n    'coverage',\n    '.nyc_output',\n    '.vscode',\n    '.idea'\n  ];\n  \n  private resourceMonitor: ResourceLimitMonitor;\n  \n  // 新しい分析クラスのインスタンス\n  private architectureDetector: ArchitectureDetector;\n  private namingAnalyzer: NamingAnalyzer;\n  private metricsCalculator: MetricsCalculator;\n  private patternDetector: PatternDetector;\n\n  constructor(resourceMonitor?: ResourceLimitMonitor) {\n    this.resourceMonitor = resourceMonitor || new ResourceLimitMonitor();\n    \n    // 新しい分析クラスのインスタンスを作成\n    this.architectureDetector = new ArchitectureDetector();\n    this.namingAnalyzer = new NamingAnalyzer();\n    this.metricsCalculator = new MetricsCalculator();\n    this.patternDetector = new PatternDetector();\n  }\n\n  private readonly SUPPORTED_EXTENSIONS = [\n    '.ts', '.js', '.tsx', '.jsx', '.mjs', '.cjs',\n    '.py', '.java', '.cs', '.cpp', '.c', '.h',\n    '.go', '.rs', '.php', '.rb', '.swift', '.kt'\n  ];\n\n  private readonly FRAMEWORK_SIGNATURES = new Map<string, RegExp[]>([\n    ['express', [/import.*express/, /require.*express/, /\"express\":/]],\n    ['react', [/import.*react/, /from ['\"]react['\"]/, /\"react\":/]],\n    ['vue', [/import.*vue/, /@vue\\//, /\"vue\":/]],\n    ['angular', [/@angular\\//, /import.*@angular/, /\"@angular/]],\n    ['nest', [/@nestjs\\//, /import.*@nestjs/, /\"@nestjs/]],\n    ['next', [/next\\//, /import.*next/, /\"next\":/]],\n    ['nuxt', [/nuxt/, /\"nuxt\":/]],\n    ['mongoose', [/import.*mongoose/, /require.*mongoose/, /\"mongoose\":/]],\n    ['prisma', [/@prisma\\//, /import.*prisma/, /\"prisma\":/]],\n    ['typeorm', [/import.*typeorm/, /\"typeorm\":/]]\n  ]);\n\n  private readonly TEST_FRAMEWORK_SIGNATURES = new Map<string, RegExp[]>([\n    ['jest', [/import.*jest/, /\"jest\":/, /describe\\(/, /it\\(/, /test\\(/]],\n    ['mocha', [/import.*mocha/, /\"mocha\":/, /describe\\(/, /it\\(/]],\n    ['jasmine', [/import.*jasmine/, /\"jasmine\":/]],\n    ['cypress', [/import.*cypress/, /\"cypress\":/, /cy\\./]],\n    ['playwright', [/import.*playwright/, /\"playwright\":/]]\n  ]);\n\n  private readonly BUILD_TOOL_SIGNATURES = new Map<string, RegExp[]>([\n    ['typescript', [/\\.ts$/, /\\.tsx$/, /\"typescript\":/, /tsconfig\\.json/]],\n    ['webpack', [/webpack/, /\"webpack\":/]],\n    ['vite', [/import.*vite/, /\"vite\":/]],\n    ['rollup', [/rollup/, /\"rollup\":/]],\n    ['parcel', [/parcel/, /\"parcel\":/]],\n    ['babel', [/babel/, /\"babel\":/]]\n  ]);\n\n  /**\n   * プロジェクト構造を包括的に分析\n   */\n  async analyzeProjectStructure(projectPath: string): Promise<ProjectStructure> {\n    if (!fs.existsSync(projectPath)) {\n      throw new Error(`Project path does not exist: ${projectPath}`);\n    }\n\n    const [overview, directories, architecture, conventions, metrics] = await Promise.all([\n      this.generateProjectOverview(projectPath),\n      this.categorizeDirectories(projectPath),\n      this.detectArchitecturePattern(projectPath),\n      this.analyzeNamingConventions(projectPath),\n      this.calculateProjectMetrics(projectPath)\n    ]);\n\n    return {\n      overview,\n      directories,\n      architecture,\n      conventions,\n      metrics\n    };\n  }\n\n  /**\n   * アーキテクチャパターンを検出\n   */\n  async detectArchitecturePattern(projectPath: string): Promise<ArchitecturePattern> {\n    const directories = await this.getAllDirectories(projectPath);\n    const files = await this.getAllFiles(projectPath);\n    const patterns = this.analyzeArchitecturePatterns(directories, files);\n    \n    let bestMatch: ArchitectureType = 'unknown';\n    let maxConfidence = 0;\n    const evidence: string[] = [];\n    \n    // MVC パターンの検出\n    const mvcScore = this.calculateMVCScore(directories, evidence);\n    if (mvcScore > maxConfidence) {\n      maxConfidence = mvcScore;\n      bestMatch = 'mvc';\n    }\n    \n    // マイクロサービス パターンの検出\n    const microservicesScore = this.calculateMicroservicesScore(directories, files, evidence);\n    if (microservicesScore > maxConfidence) {\n      maxConfidence = microservicesScore;\n      bestMatch = 'microservices';\n    }\n    \n    // レイヤードアーキテクチャの検出\n    const layeredScore = this.calculateLayeredScore(directories, evidence);\n    if (layeredScore > maxConfidence) {\n      maxConfidence = layeredScore;\n      bestMatch = 'layered';\n    }\n\n    // クリーンアーキテクチャの検出\n    const cleanScore = this.calculateCleanArchitectureScore(directories, evidence);\n    if (cleanScore > maxConfidence) {\n      maxConfidence = cleanScore;\n      bestMatch = 'clean';\n    }\n\n    return {\n      type: bestMatch,\n      confidence: maxConfidence,\n      evidence,\n      suggestions: this.generateArchitectureSuggestions(bestMatch, maxConfidence, directories)\n    };\n  }\n\n  /**\n   * 命名規則を分析\n   */\n  async analyzeNamingConventions(projectPath: string): Promise<NamingConventions> {\n    const files = await this.getAllFiles(projectPath);\n    const codeContents = await this.readAllCodeFiles(files);\n    \n    return {\n      files: await this.analyzeFileNaming(files),\n      directories: await this.analyzeDirectoryNaming(projectPath),\n      variables: await this.analyzeVariableNaming(codeContents),\n      functions: await this.analyzeFunctionNaming(codeContents),\n      classes: await this.analyzeClassNaming(codeContents)\n    };\n  }\n\n  /**\n   * プロジェクトメトリクスを計算\n   */\n  async calculateProjectMetrics(projectPath: string): Promise<ProjectMetrics> {\n    const files = await this.getAllFiles(projectPath);\n    const codeFiles = files.filter(file => this.isCodeFile(file));\n    const testFiles = files.filter(file => this.isTestFile(file));\n    const codeContents = await this.readAllCodeFiles(codeFiles);\n\n    const [complexity, maintainability, testability, documentation] = await Promise.all([\n      this.calculateComplexityMetrics(codeContents, codeFiles),\n      this.calculateMaintainabilityMetrics(codeContents, codeFiles),\n      this.calculateTestabilityMetrics(codeFiles, testFiles, codeContents),\n      this.calculateDocumentationMetrics(projectPath, codeFiles, codeContents)\n    ]);\n\n    return {\n      complexity,\n      maintainability,\n      testability,\n      documentation\n    };\n  }\n\n  /**\n   * ディレクトリを分類\n   */\n  async categorizeDirectories(projectPath: string): Promise<DirectoryInfo[]> {\n    const directories = await this.getAllDirectories(projectPath);\n    const directoryInfos: DirectoryInfo[] = [];\n    \n    for (const dir of directories) {\n      const relativePath = path.relative(projectPath, dir);\n      if (relativePath && !this.shouldIgnoreDirectory(path.basename(dir))) {\n        const purpose = this.determineDirectoryPurpose(dir, relativePath);\n        const files = fs.readdirSync(dir, { withFileTypes: true })\n          .filter(entry => entry.isFile())\n          .map(entry => entry.name);\n        \n        const subdirectories = fs.readdirSync(dir, { withFileTypes: true })\n          .filter(entry => entry.isDirectory())\n          .map(entry => entry.name);\n\n        const patterns = this.detectDirectoryPatterns(dir, files);\n        const conventions = this.detectDirectoryConventions(dir, files);\n\n        directoryInfos.push({\n          path: relativePath,\n          purpose,\n          fileCount: files.length,\n          subdirectories,\n          patterns,\n          conventions\n        });\n      }\n    }\n    \n    return directoryInfos;\n  }\n\n  // Private helper methods\n\n  private async generateProjectOverview(projectPath: string): Promise<ProjectOverview> {\n    const files = await this.getAllFiles(projectPath);\n    const directories = await this.getAllDirectories(projectPath);\n    \n    const languages = await this.analyzeLanguageDistribution(files);\n    const frameworks = await this.detectFrameworks(files);\n    const testingFrameworks = await this.detectTestingFrameworks(files);\n    const buildTools = await this.detectBuildTools(files);\n    \n    return {\n      rootPath: projectPath,\n      totalFiles: files.length,\n      totalDirectories: directories.length,\n      languages,\n      frameworks,\n      testingFrameworks,\n      buildTools\n    };\n  }\n\n  private async getAllFiles(projectPath: string): Promise<string[]> {\n    const files: string[] = [];\n    \n    const walkDir = (dir: string, depth: number = 0) => {\n      try {\n        // 深度制限チェック\n        if (!this.resourceMonitor.checkDepth(depth, projectPath)) {\n          return; // 深度制限に達した場合は探索を停止\n        }\n        \n        const entries = fs.readdirSync(dir, { withFileTypes: true });\n        \n        for (const entry of entries) {\n          const fullPath = path.join(dir, entry.name);\n          \n          // セキュリティ: パス検証\n          if (!PathSecurity.validateProjectPath(fullPath, projectPath)) {\n            continue; // プロジェクト範囲外はスキップ\n          }\n          \n          if (entry.isDirectory()) {\n            if (!this.shouldIgnoreDirectory(entry.name)) {\n              walkDir(fullPath, depth + 1);\n            }\n          } else if (entry.isFile()) {\n            files.push(fullPath);\n          }\n        }\n      } catch (error) {\n        // ディレクトリの読み込みエラーは無視\n      }\n    };\n    \n    walkDir(projectPath);\n    return files;\n  }\n\n  private async getAllDirectories(projectPath: string): Promise<string[]> {\n    const directories: string[] = [projectPath];\n    \n    const walkDir = (dir: string, depth: number = 0) => {\n      try {\n        // 深度制限チェック\n        if (!this.resourceMonitor.checkDepth(depth, projectPath)) {\n          return; // 深度制限に達した場合は探索を停止\n        }\n        \n        const entries = fs.readdirSync(dir, { withFileTypes: true });\n        \n        for (const entry of entries) {\n          if (entry.isDirectory()) {\n            const fullPath = path.join(dir, entry.name);\n            \n            // セキュリティ: パス検証\n            if (!PathSecurity.validateProjectPath(fullPath, projectPath)) {\n              continue; // プロジェクト範囲外はスキップ\n            }\n            \n            if (!this.shouldIgnoreDirectory(entry.name)) {\n              directories.push(fullPath);\n              walkDir(fullPath, depth + 1);\n            }\n          }\n        }\n      } catch (error) {\n        // ディレクトリの読み込みエラーは無視\n      }\n    };\n    \n    walkDir(projectPath);\n    return directories;\n  }\n\n  private shouldIgnoreDirectory(dirName: string): boolean {\n    return this.IGNORE_PATTERNS.some(pattern => dirName.includes(pattern));\n  }\n\n  private async analyzeLanguageDistribution(files: string[]): Promise<LanguageDistribution[]> {\n    const languageMap = new Map<string, { count: number; extensions: Set<string> }>();\n    \n    files.forEach(file => {\n      const ext = path.extname(file);\n      const language = this.getLanguageFromExtension(ext);\n      \n      if (language) {\n        if (!languageMap.has(language)) {\n          languageMap.set(language, { count: 0, extensions: new Set() });\n        }\n        languageMap.get(language)!.count++;\n        languageMap.get(language)!.extensions.add(ext);\n      }\n    });\n\n    const totalFiles = files.length;\n    return Array.from(languageMap.entries()).map(([language, data]) => ({\n      language,\n      fileCount: data.count,\n      percentage: (data.count / totalFiles) * 100,\n      extensions: Array.from(data.extensions)\n    }));\n  }\n\n  private getLanguageFromExtension(ext: string): string | null {\n    const languageMap: { [key: string]: string } = {\n      '.ts': 'typescript',\n      '.tsx': 'typescript',\n      '.js': 'javascript',\n      '.jsx': 'javascript',\n      '.mjs': 'javascript',\n      '.cjs': 'javascript',\n      '.py': 'python',\n      '.java': 'java',\n      '.cs': 'csharp',\n      '.cpp': 'cpp',\n      '.c': 'c',\n      '.h': 'c',\n      '.go': 'go',\n      '.rs': 'rust',\n      '.php': 'php',\n      '.rb': 'ruby',\n      '.swift': 'swift',\n      '.kt': 'kotlin'\n    };\n    \n    return languageMap[ext] || null;\n  }\n\n  private async detectFrameworks(files: string[]): Promise<DetectedFramework[]> {\n    return this.detectSignatures(files, this.FRAMEWORK_SIGNATURES);\n  }\n\n  private async detectTestingFrameworks(files: string[]): Promise<DetectedFramework[]> {\n    return this.detectSignatures(files, this.TEST_FRAMEWORK_SIGNATURES);\n  }\n\n  private async detectBuildTools(files: string[]): Promise<DetectedFramework[]> {\n    return this.detectSignatures(files, this.BUILD_TOOL_SIGNATURES);\n  }\n\n  private async detectSignatures(files: string[], signatures: Map<string, RegExp[]>): Promise<DetectedFramework[]> {\n    const detected: DetectedFramework[] = [];\n    \n    for (const [name, patterns] of signatures.entries()) {\n      let matchCount = 0;\n      const evidence: string[] = [];\n      \n      // package.jsonでの検出\n      const packageJsonFiles = files.filter(f => f.endsWith('package.json'));\n      for (const packageFile of packageJsonFiles) {\n        try {\n          const content = fs.readFileSync(packageFile, 'utf-8');\n          for (const pattern of patterns) {\n            if (pattern.test(content)) {\n              matchCount += 3; // package.jsonでの検出は重要度高\n              evidence.push(`Found in ${path.basename(packageFile)}`);\n              break;\n            }\n          }\n        } catch (error) {\n          // ファイル読み込みエラーは無視\n        }\n      }\n\n      // コードファイルでの検出\n      const codeFiles = files.filter(f => this.isCodeFile(f)).slice(0, 50); // パフォーマンス考慮\n      for (const file of codeFiles) {\n        try {\n          const content = fs.readFileSync(file, 'utf-8');\n          for (const pattern of patterns) {\n            if (pattern.test(content)) {\n              matchCount += 1;\n              evidence.push(`Found in ${path.basename(file)}`);\n              break;\n            }\n          }\n        } catch (error) {\n          // ファイル読み込みエラーは無視\n        }\n      }\n\n      if (matchCount > 0) {\n        const confidence = Math.min(matchCount / 5, 1); // 最大1.0に正規化\n        detected.push({\n          name,\n          confidence,\n          evidence: [...new Set(evidence)] // 重複を除去\n        });\n      }\n    }\n\n    return detected.sort((a, b) => b.confidence - a.confidence);\n  }\n\n  private analyzeArchitecturePatterns(directories: string[], files: string[]): Record<string, unknown> {\n    // アーキテクチャパターンの分析ロジック\n    return {};\n  }\n\n  private calculateMVCScore(directories: string[], evidence: string[]): number {\n    let score = 0;\n    const dirNames = directories.map(d => path.basename(d).toLowerCase());\n    \n    if (dirNames.some(name => name.includes('controller'))) {\n      score += 0.3;\n      evidence.push('controllers directory found');\n    }\n    \n    if (dirNames.some(name => name.includes('model'))) {\n      score += 0.3;\n      evidence.push('models directory found');\n    }\n    \n    if (dirNames.some(name => name.includes('view') || name.includes('route'))) {\n      score += 0.2;\n      evidence.push('views or routes directory found');\n    }\n    \n    if (dirNames.some(name => name.includes('service'))) {\n      score += 0.1;\n      evidence.push('services directory found');\n    }\n    \n    if (dirNames.some(name => name.includes('middleware'))) {\n      score += 0.1;\n      evidence.push('middleware directory found');\n    }\n    \n    return score;\n  }\n\n  private calculateMicroservicesScore(directories: string[], files: string[], evidence: string[]): number {\n    let score = 0;\n    const dirNames = directories.map(d => path.basename(d).toLowerCase());\n    \n    // 複数のサービスディレクトリの存在\n    const serviceCount = dirNames.filter(name => \n      name.includes('service') || name.endsWith('-service') || name.startsWith('service-')\n    ).length;\n    \n    if (serviceCount > 2) {\n      score += 0.4;\n      evidence.push(`multiple service directories found (${serviceCount})`);\n    }\n    \n    // Docker関連ファイル\n    if (files.some(f => f.includes('Dockerfile') || f.includes('docker-compose'))) {\n      score += 0.2;\n      evidence.push('Docker configuration found');\n    }\n    \n    // API Gateway or routing\n    if (files.some(f => f.includes('gateway') || f.includes('proxy'))) {\n      score += 0.2;\n      evidence.push('API Gateway patterns found');\n    }\n    \n    return score;\n  }\n\n  private calculateLayeredScore(directories: string[], evidence: string[]): number {\n    let score = 0;\n    const dirNames = directories.map(d => path.basename(d).toLowerCase());\n    \n    const layers = ['presentation', 'application', 'domain', 'infrastructure', 'data'];\n    const foundLayers = layers.filter(layer => \n      dirNames.some(name => name.includes(layer))\n    );\n    \n    if (foundLayers.length >= 3) {\n      score += 0.6;\n      evidence.push(`layered structure found: ${foundLayers.join(', ')}`);\n    }\n    \n    return score;\n  }\n\n  private calculateCleanArchitectureScore(directories: string[], evidence: string[]): number {\n    let score = 0;\n    const dirNames = directories.map(d => path.basename(d).toLowerCase());\n    \n    const cleanPatterns = ['entities', 'usecases', 'interfaces', 'frameworks'];\n    const foundPatterns = cleanPatterns.filter(pattern => \n      dirNames.some(name => name.includes(pattern))\n    );\n    \n    if (foundPatterns.length >= 3) {\n      score += 0.7;\n      evidence.push(`clean architecture patterns found: ${foundPatterns.join(', ')}`);\n    }\n    \n    return score;\n  }\n\n  private generateArchitectureSuggestions(\n    architecture: ArchitectureType, \n    confidence: number, \n    directories: string[]\n  ): string[] {\n    const suggestions: string[] = [];\n    \n    if (confidence < 0.5) {\n      suggestions.push('Consider organizing code into clearer architectural patterns');\n    }\n    \n    switch (architecture) {\n      case 'mvc':\n        suggestions.push('Consider separating business logic into service layer');\n        suggestions.push('Ensure proper separation between controllers and models');\n        break;\n      case 'microservices':\n        suggestions.push('Consider implementing service discovery');\n        suggestions.push('Ensure proper inter-service communication patterns');\n        break;\n      case 'layered':\n        suggestions.push('Maintain strict layer dependencies');\n        suggestions.push('Consider using dependency injection');\n        break;\n      case 'clean':\n        suggestions.push('Ensure dependency rule compliance');\n        suggestions.push('Keep business logic independent of frameworks');\n        break;\n      default:\n        suggestions.push('Consider adopting a well-defined architectural pattern');\n    }\n    \n    return suggestions;\n  }\n\n  private determineDirectoryPurpose(dirPath: string, relativePath: string): DirectoryPurpose {\n    const dirName = path.basename(dirPath).toLowerCase();\n    const relativePathLower = relativePath.toLowerCase();\n    \n    if (dirName.includes('src') || dirName.includes('source')) return 'source';\n    if (dirName.includes('test') || dirName.includes('spec') || relativePathLower.includes('test')) return 'test';\n    if (dirName === 'build' || dirName === 'dist' || dirName.includes('output')) return 'build';\n    if (dirName.includes('config') || dirName.includes('settings')) return 'config';\n    if (dirName.includes('doc') || dirName.includes('readme') || relativePathLower.includes('docs')) return 'documentation';\n    if (dirName.includes('asset') || dirName.includes('static') || dirName.includes('public')) return 'assets';\n    if (dirName.includes('vendor') || dirName.includes('third') || dirName.includes('lib')) return 'vendor';\n    \n    return 'unknown';\n  }\n\n  private detectDirectoryPatterns(dirPath: string, files: string[]): string[] {\n    const patterns: string[] = [];\n    const dirName = path.basename(dirPath).toLowerCase();\n    \n    if (dirName.includes('controller') && files.some(f => f.includes('Controller'))) {\n      patterns.push('Controller suffix pattern');\n    }\n    \n    if (dirName.includes('service') && files.some(f => f.includes('Service'))) {\n      patterns.push('Service suffix pattern');\n    }\n    \n    if (dirName.includes('model') && files.some(f => f.includes('Model'))) {\n      patterns.push('Model suffix pattern');\n    }\n    \n    if (files.some(f => f.endsWith('.test.ts') || f.endsWith('.spec.ts'))) {\n      patterns.push('Test file pattern');\n    }\n    \n    return patterns;\n  }\n\n  private detectDirectoryConventions(dirPath: string, files: string[]): string[] {\n    const conventions: string[] = [];\n    \n    // ファイル名の規則を分析\n    const hasPascalCase = files.some(f => /^[A-Z][a-zA-Z0-9]*\\./.test(f));\n    const hasCamelCase = files.some(f => /^[a-z][a-zA-Z0-9]*\\./.test(f));\n    const hasKebabCase = files.some(f => /^[a-z][a-z0-9-]*\\./.test(f));\n    \n    if (hasPascalCase) conventions.push('PascalCase class names');\n    if (hasCamelCase) conventions.push('camelCase file names');\n    if (hasKebabCase) conventions.push('kebab-case file names');\n    \n    return conventions;\n  }\n\n  private async analyzeFileNaming(files: string[]): Promise<FileNamingConvention> {\n    const fileNames = files.map(f => path.basename(f, path.extname(f)));\n    return this.analyzeNamingPattern(fileNames, 'files');\n  }\n\n  private async analyzeDirectoryNaming(projectPath: string): Promise<DirectoryNamingConvention> {\n    const directories = await this.getAllDirectories(projectPath);\n    const dirNames = directories\n      .map(d => path.basename(d))\n      .filter(name => name !== path.basename(projectPath));\n    return this.analyzeNamingPattern(dirNames, 'directories');\n  }\n\n  private async analyzeVariableNaming(codeContents: Map<string, string>): Promise<VariableNamingConvention> {\n    const variables: string[] = [];\n    \n    codeContents.forEach(content => {\n      // 変数宣言を抽出\n      const variableMatches = content.match(/(?:const|let|var)\\s+([a-zA-Z_][a-zA-Z0-9_]*)/g);\n      if (variableMatches) {\n        variableMatches.forEach(match => {\n          const varName = match.replace(/(?:const|let|var)\\s+/, '');\n          variables.push(varName);\n        });\n      }\n    });\n    \n    return this.analyzeNamingPattern(variables, 'variables');\n  }\n\n  private async analyzeFunctionNaming(codeContents: Map<string, string>): Promise<FunctionNamingConvention> {\n    const functions: string[] = [];\n    \n    codeContents.forEach(content => {\n      // 関数宣言を抽出\n      const functionMatches = content.match(/(?:function\\s+([a-zA-Z_][a-zA-Z0-9_]*)|([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\()/g);\n      if (functionMatches) {\n        functionMatches.forEach(match => {\n          const funcName = match.replace(/function\\s+/, '').replace(/\\s*\\(/, '');\n          if (funcName && /^[a-zA-Z_]/.test(funcName)) {\n            functions.push(funcName);\n          }\n        });\n      }\n    });\n    \n    return this.analyzeNamingPattern(functions, 'functions');\n  }\n\n  private async analyzeClassNaming(codeContents: Map<string, string>): Promise<ClassNamingConvention> {\n    const classes: string[] = [];\n    \n    codeContents.forEach(content => {\n      // クラス宣言を抽出\n      const classMatches = content.match(/class\\s+([a-zA-Z_][a-zA-Z0-9_]*)/g);\n      if (classMatches) {\n        classMatches.forEach(match => {\n          const className = match.replace(/class\\s+/, '');\n          classes.push(className);\n        });\n      }\n    });\n    \n    return this.analyzeNamingPattern(classes, 'classes');\n  }\n\n  private analyzeNamingPattern(names: string[], type: string): {\n    pattern: NamingPattern;\n    confidence: number;\n    examples: string[];\n    violations: string[];\n  } {\n    if (names.length === 0) {\n      return {\n        pattern: 'unknown' as NamingPattern,\n        confidence: 0,\n        examples: [],\n        violations: []\n      };\n    }\n\n    const patterns = {\n      camelCase: names.filter(name => /^[a-z][a-zA-Z0-9]*$/.test(name)),\n      PascalCase: names.filter(name => /^[A-Z][a-zA-Z0-9]*$/.test(name)),\n      snake_case: names.filter(name => /^[a-z][a-z0-9_]*$/.test(name)),\n      'kebab-case': names.filter(name => /^[a-z][a-z0-9-]*$/.test(name)),\n      SCREAMING_SNAKE_CASE: names.filter(name => /^[A-Z][A-Z0-9_]*$/.test(name))\n    };\n\n    let dominantPattern: NamingPattern = 'mixed';\n    let maxCount = 0;\n    \n    Object.entries(patterns).forEach(([pattern, matches]) => {\n      if (matches.length > maxCount) {\n        maxCount = matches.length;\n        dominantPattern = pattern as NamingPattern;\n      }\n    });\n\n    const confidence = maxCount / names.length;\n    const examples: string[] = dominantPattern !== 'mixed' && dominantPattern !== 'unknown' \n      ? patterns[dominantPattern as keyof typeof patterns] || [] \n      : [];\n    const violations = names.filter(name => !examples.includes(name));\n\n    return {\n      pattern: dominantPattern,\n      confidence,\n      examples: examples.slice(0, 5), // 最大5個の例\n      violations: violations.slice(0, 3) // 最大3個の違反例\n    };\n  }\n\n  private async readAllCodeFiles(files: string[]): Promise<Map<string, string>> {\n    const contents = new Map<string, string>();\n    \n    for (const file of files.slice(0, 100)) { // パフォーマンス考慮で100ファイルまで\n      try {\n        if (this.isCodeFile(file)) {\n          const content = fs.readFileSync(file, 'utf-8');\n          contents.set(file, content);\n        }\n      } catch (error) {\n        // ファイル読み込みエラーは無視\n      }\n    }\n    \n    return contents;\n  }\n\n  private isCodeFile(filePath: string): boolean {\n    const ext = path.extname(filePath);\n    return this.SUPPORTED_EXTENSIONS.includes(ext);\n  }\n\n  private isTestFile(filePath: string): boolean {\n    const fileName = path.basename(filePath);\n    return fileName.includes('.test.') || fileName.includes('.spec.') || filePath.includes('/test/');\n  }\n\n  private async calculateComplexityMetrics(\n    codeContents: Map<string, string>, \n    files: string[]\n  ): Promise<ComplexityMetrics> {\n    let totalFunctions = 0;\n    let totalComplexity = 0;\n    let maxComplexity = 1;\n    let totalFunctionLines = 0;\n    const complexFiles: string[] = [];\n\n    codeContents.forEach((content, filePath) => {\n      const functions = this.extractFunctions(content);\n      totalFunctions += functions.length;\n      \n      functions.forEach(func => {\n        const complexity = this.calculateCyclomaticComplexity(func.content);\n        totalComplexity += complexity;\n        totalFunctionLines += func.lineCount;\n        \n        if (complexity > maxComplexity) {\n          maxComplexity = complexity;\n        }\n        \n        if (complexity > 10) {\n          complexFiles.push(path.basename(filePath));\n        }\n      });\n    });\n\n    return {\n      averageCyclomaticComplexity: totalFunctions > 0 ? totalComplexity / totalFunctions : 1,\n      maxComplexity,\n      complexFiles: [...new Set(complexFiles)],\n      totalFunctions,\n      averageFunctionLength: totalFunctions > 0 ? totalFunctionLines / totalFunctions : 0\n    };\n  }\n\n  private async calculateMaintainabilityMetrics(\n    codeContents: Map<string, string>,\n    files: string[]\n  ): Promise<MaintainabilityMetrics> {\n    let totalFileSize = 0;\n    let duplicatedLines = 0;\n    const largeFiles: string[] = [];\n    const longFunctions: string[] = [];\n\n    codeContents.forEach((content, filePath) => {\n      const lines = content.split('\\n');\n      const fileSize = lines.length;\n      totalFileSize += fileSize;\n      \n      if (fileSize > 500) {\n        largeFiles.push(path.basename(filePath));\n      }\n      \n      // 長い関数を検出\n      const functions = this.extractFunctions(content);\n      functions.forEach(func => {\n        if (func.lineCount > 50) {\n          longFunctions.push(`${func.name} in ${path.basename(filePath)}`);\n        }\n      });\n      \n      // 重複コードの簡易検出\n      duplicatedLines += this.detectDuplicatedCode(content);\n    });\n\n    const averageFileSize = files.length > 0 ? totalFileSize / files.length : 0;\n    const duplicatedCodePercentage = totalFileSize > 0 ? (duplicatedLines / totalFileSize) * 100 : 0;\n    \n    // 保守性指数の計算（簡易版）\n    const maintainabilityIndex = Math.max(0, Math.min(100, \n      100 - (duplicatedCodePercentage * 2) - (averageFileSize / 10)\n    ));\n\n    return {\n      maintainabilityIndex,\n      duplicatedCodePercentage,\n      averageFileSize,\n      largeFiles,\n      longFunctions\n    };\n  }\n\n  private async calculateTestabilityMetrics(\n    codeFiles: string[],\n    testFiles: string[],\n    codeContents: Map<string, string>\n  ): Promise<TestabilityMetrics> {\n    const totalClasses = this.countClasses(codeContents);\n    const testableClasses = this.countTestableClasses(codeContents);\n    const testCoverage = codeFiles.length > 0 ? (testFiles.length / codeFiles.length) * 100 : 0;\n    const mockability = this.calculateMockability(codeContents);\n\n    return {\n      testCoverage: Math.min(100, testCoverage),\n      testableClasses,\n      untestableClasses: totalClasses - testableClasses,\n      mockability\n    };\n  }\n\n  private async calculateDocumentationMetrics(\n    projectPath: string,\n    codeFiles: string[],\n    codeContents: Map<string, string>\n  ): Promise<DocumentationMetrics> {\n    const documentedFunctions = this.countDocumentedFunctions(codeContents);\n    const documentedClasses = this.countDocumentedClasses(codeContents);\n    const totalFunctions = this.countTotalFunctions(codeContents);\n    const totalClasses = this.countClasses(codeContents);\n    \n    const functionCoverage = totalFunctions > 0 ? (documentedFunctions / totalFunctions) * 100 : 0;\n    const classCoverage = totalClasses > 0 ? (documentedClasses / totalClasses) * 100 : 0;\n    const documentationCoverage = (functionCoverage + classCoverage) / 2;\n    \n    const readmeQuality = this.assessReadmeQuality(projectPath);\n\n    return {\n      documentedFunctions,\n      documentedClasses,\n      documentationCoverage,\n      readmeQuality\n    };\n  }\n\n  // Utility methods for metrics calculation\n\n  private extractFunctions(content: string): Array<{ name: string; content: string; lineCount: number }> {\n    const functions: Array<{ name: string; content: string; lineCount: number }> = [];\n    const lines = content.split('\\n');\n    \n    for (let i = 0; i < lines.length; i++) {\n      const line = lines[i];\n      const funcMatch = line.match(/(?:function\\s+([a-zA-Z_][a-zA-Z0-9_]*)|([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\()/);\n      \n      if (funcMatch) {\n        const funcName = funcMatch[1] || funcMatch[2];\n        let braceCount = 0;\n        let startLine = i;\n        let endLine = i;\n        let funcContent = '';\n        \n        // 関数の終わりを見つける\n        for (let j = i; j < lines.length; j++) {\n          const currentLine = lines[j];\n          funcContent += currentLine + '\\n';\n          \n          braceCount += (currentLine.match(/\\{/g) || []).length;\n          braceCount -= (currentLine.match(/\\}/g) || []).length;\n          \n          if (braceCount === 0 && j > i) {\n            endLine = j;\n            break;\n          }\n        }\n        \n        functions.push({\n          name: funcName,\n          content: funcContent,\n          lineCount: endLine - startLine + 1\n        });\n      }\n    }\n    \n    return functions;\n  }\n\n  private calculateCyclomaticComplexity(content: string): number {\n    // 簡易サイクロマティック複雑度の計算\n    const complexityKeywords = [\n      /if\\s*\\(/g,\n      /else\\s+if\\s*\\(/g,\n      /while\\s*\\(/g,\n      /for\\s*\\(/g,\n      /catch\\s*\\(/g,\n      /case\\s+/g,\n      /\\?\\s*:/g, // 三項演算子\n      /&&/g,\n      /\\|\\|/g\n    ];\n    \n    let complexity = 1; // 基本の複雑度\n    \n    complexityKeywords.forEach(keyword => {\n      const matches = content.match(keyword);\n      if (matches) {\n        complexity += matches.length;\n      }\n    });\n    \n    return complexity;\n  }\n\n  private detectDuplicatedCode(content: string): number {\n    // 簡易重複コード検出\n    const lines = content.split('\\n')\n      .map(line => line.trim())\n      .filter(line => line.length > 10 && !line.startsWith('//'));\n    \n    const lineMap = new Map<string, number>();\n    lines.forEach(line => {\n      lineMap.set(line, (lineMap.get(line) || 0) + 1);\n    });\n    \n    let duplicatedLines = 0;\n    lineMap.forEach(count => {\n      if (count > 1) {\n        duplicatedLines += count - 1;\n      }\n    });\n    \n    return duplicatedLines;\n  }\n\n  private countClasses(codeContents: Map<string, string>): number {\n    let classCount = 0;\n    codeContents.forEach(content => {\n      const matches = content.match(/class\\s+[a-zA-Z_][a-zA-Z0-9_]*/g);\n      if (matches) {\n        classCount += matches.length;\n      }\n    });\n    return classCount;\n  }\n\n  private countTestableClasses(codeContents: Map<string, string>): number {\n    let testableCount = 0;\n    codeContents.forEach(content => {\n      const classMatches = content.match(/class\\s+([a-zA-Z_][a-zA-Z0-9_]*)/g);\n      if (classMatches) {\n        classMatches.forEach(match => {\n          // クラスが依存関係注入可能かどうかの簡易チェック\n          if (content.includes('constructor(') || content.includes('public ') || content.includes('private ')) {\n            testableCount++;\n          }\n        });\n      }\n    });\n    return testableCount;\n  }\n\n  private calculateMockability(codeContents: Map<string, string>): number {\n    let mockableComponents = 0;\n    let totalComponents = 0;\n    \n    codeContents.forEach(content => {\n      const classes = content.match(/class\\s+[a-zA-Z_][a-zA-Z0-9_]*/g) || [];\n      totalComponents += classes.length;\n      \n      // インターフェースや抽象クラスの使用をチェック\n      if (content.includes('interface ') || content.includes('abstract ')) {\n        mockableComponents += classes.length;\n      }\n    });\n    \n    return totalComponents > 0 ? (mockableComponents / totalComponents) * 100 : 0;\n  }\n\n  private countDocumentedFunctions(codeContents: Map<string, string>): number {\n    let documentedCount = 0;\n    \n    codeContents.forEach(content => {\n      const lines = content.split('\\n');\n      for (let i = 0; i < lines.length - 1; i++) {\n        const currentLine = lines[i].trim();\n        const nextLine = lines[i + 1].trim();\n        \n        // JSDocコメントの後に関数がある場合\n        if (currentLine.includes('*/') && nextLine.match(/(?:function|async\\s+function|\\w+\\s*\\()/)) {\n          documentedCount++;\n        }\n      }\n    });\n    \n    return documentedCount;\n  }\n\n  private countDocumentedClasses(codeContents: Map<string, string>): number {\n    let documentedCount = 0;\n    \n    codeContents.forEach(content => {\n      const lines = content.split('\\n');\n      for (let i = 0; i < lines.length - 1; i++) {\n        const currentLine = lines[i].trim();\n        const nextLine = lines[i + 1].trim();\n        \n        // JSDocコメントの後にクラスがある場合\n        if (currentLine.includes('*/') && nextLine.startsWith('class ')) {\n          documentedCount++;\n        }\n      }\n    });\n    \n    return documentedCount;\n  }\n\n  private countTotalFunctions(codeContents: Map<string, string>): number {\n    let functionCount = 0;\n    \n    codeContents.forEach(content => {\n      const matches = content.match(/(?:function\\s+[a-zA-Z_][a-zA-Z0-9_]*|\\w+\\s*\\()/g);\n      if (matches) {\n        functionCount += matches.length;\n      }\n    });\n    \n    return functionCount;\n  }\n\n  private assessReadmeQuality(projectPath: string): number {\n    const readmeFiles = ['README.md', 'readme.md', 'README.txt', 'readme.txt'];\n    let quality = 0;\n    \n    for (const fileName of readmeFiles) {\n      const filePath = path.join(projectPath, fileName);\n      \n      // セキュリティ: パス検証\n      if (!PathSecurity.validateProjectPath(filePath, projectPath)) {\n        continue; // プロジェクト範囲外はスキップ\n      }\n      \n      if (fs.existsSync(filePath)) {\n        try {\n          const content = fs.readFileSync(filePath, 'utf-8');\n          const lines = content.split('\\n');\n          \n          // 基本的な品質指標\n          if (lines.length > 10) quality += 20;\n          if (content.includes('# ') || content.includes('## ')) quality += 20; // ヘッダー\n          if (content.includes('install') || content.includes('setup')) quality += 20; // インストール説明\n          if (content.includes('usage') || content.includes('example')) quality += 20; // 使用例\n          if (content.includes('```') || content.includes('`')) quality += 20; // コードブロック\n          \n          break;\n        } catch (error) {\n          // ファイル読み込みエラーは無視\n        }\n      }\n    }\n    \n    return quality;\n  }\n}"],"version":3}