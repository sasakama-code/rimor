a5e716ab129cc41a806bcd6276aa6cf2
"use strict";
/**
 * クリーンアップマネージャー
 * 不要なファイルの自動削除とプロジェクト整理を担当
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.cleanupManager = exports.CleanupManager = void 0;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const errorHandler_1 = require("./errorHandler");
class CleanupManager {
    static instance;
    defaultRules = [
        {
            pattern: /^src\/plugins\/generated\/saved-plugin\.ts$/,
            reason: "",
            enabled: true
        },
        // 安全性重視: 他のプラグインファイルは削除対象から除外
        // ユーザーが意図的に作成したファイルの削除を防ぐ
        {
            pattern: /\.tmp$/,
            reason: "",
            enabled: true
        },
        {
            pattern: /\.bak$/,
            reason: "",
            enabled: true
        }
    ];
    constructor() { }
    static getInstance() {
        if (!CleanupManager.instance) {
            CleanupManager.instance = new CleanupManager();
        }
        return CleanupManager.instance;
    }
    /**
     * プロジェクト開始時のクリーンアップ実行
     * @param projectRoot プロジェクトルートディレクトリ
     */
    async performStartupCleanup(projectRoot = process.cwd()) {
        console.log("");
        try {
            const cleanedFiles = await this.cleanupByRules(projectRoot);
            if (cleanedFiles.length > 0) {
                console.log("");
                cleanedFiles.forEach(file => {
                    console.log(`   - ${file.relativePath} (${file.reason})`);
                });
            }
            else {
                console.log("");
            }
        }
        catch (error) {
            errorHandler_1.errorHandler.handleError(error, undefined, "", { projectRoot }, true);
        }
    }
    /**
     * 特定のファイルが問題を起こしている場合の緊急削除
     * @param filePath 問題のあるファイルのパス
     * @param reason 削除理由
     */
    async emergencyDelete(filePath, reason) {
        try {
            const absolutePath = path.resolve(filePath);
            if (!fs.existsSync(absolutePath)) {
                return true; // 既に存在しない場合は削除成功とみなす
            }
            fs.unlinkSync(absolutePath);
            console.log("");
            return true;
        }
        catch (error) {
            errorHandler_1.errorHandler.handleFileError(error, filePath, 'delete');
            return false;
        }
    }
    /**
     * コンパイルエラーの原因となるファイルを検出・削除（安全性重視）
     * @param errorMessage TypeScriptコンパイルエラーメッセージ
     */
    async handleCompileError(errorMessage) {
        // saved-plugin.tsによるエラーのみを自動削除対象とする
        const savedPluginError = errorMessage.includes('saved-plugin.ts') &&
            (errorMessage.includes('Cannot find name \'IPlugin\'') ||
                errorMessage.includes('TS2552') ||
                errorMessage.includes('TS2304'));
        if (savedPluginError) {
            const savedPluginPath = 'src/plugins/generated/saved-plugin.ts';
            console.log("");
            return await this.emergencyDelete(savedPluginPath, "");
        }
        // その他のプラグインファイルエラーは警告のみ表示（削除しない）
        const pluginGeneratedMatch = errorMessage.match(/src\/plugins\/generated\/([^:]+\.ts)/);
        if (pluginGeneratedMatch) {
            const problematicFile = pluginGeneratedMatch[0];
            console.log("");
            console.log('   ' + "");
            console.log('   ' + "");
            // 削除は行わず、falseを返す
            return false;
        }
        return false;
    }
    /**
     * ルールベースのクリーンアップ実行
     * @param rootDir 対象ディレクトリ
     */
    async cleanupByRules(rootDir) {
        const cleanedFiles = [];
        const enabledRules = this.defaultRules.filter(rule => rule.enabled);
        for (const rule of enabledRules) {
            const matches = await this.findFilesByRule(rootDir, rule);
            for (const match of matches) {
                try {
                    fs.unlinkSync(match.absolutePath);
                    cleanedFiles.push({
                        relativePath: match.relativePath,
                        reason: rule.reason
                    });
                }
                catch (error) {
                    errorHandler_1.errorHandler.handleFileError(error, match.absolutePath, 'delete');
                }
            }
        }
        return cleanedFiles;
    }
    /**
     * ルールに合致するファイルを検索
     * @param rootDir 検索対象ディレクトリ
     * @param rule クリーンアップルール
     */
    async findFilesByRule(rootDir, rule) {
        const matches = [];
        const searchDir = (dir) => {
            if (!fs.existsSync(dir))
                return;
            const entries = fs.readdirSync(dir, { withFileTypes: true });
            for (const entry of entries) {
                const fullPath = path.join(dir, entry.name);
                const relativePath = path.relative(rootDir, fullPath);
                if (entry.isDirectory()) {
                    // node_modules等の除外
                    if (!entry.name.startsWith('.') && entry.name !== 'node_modules') {
                        searchDir(fullPath);
                    }
                }
                else if (entry.isFile()) {
                    let isMatch = false;
                    if (rule.pattern instanceof RegExp) {
                        isMatch = rule.pattern.test(relativePath);
                    }
                    else {
                        isMatch = relativePath.includes(rule.pattern);
                    }
                    if (isMatch) {
                        matches.push({
                            absolutePath: fullPath,
                            relativePath: relativePath
                        });
                    }
                }
            }
        };
        searchDir(rootDir);
        return matches;
    }
    /**
     * クリーンアップルールの追加
     * @param pattern ファイルパターン
     * @param reason 削除理由
     * @param enabled 有効かどうか
     */
    addRule(pattern, reason, enabled = true) {
        this.defaultRules.push({ pattern, reason, enabled });
    }
    /**
     * 現在のクリーンアップルールを取得
     */
    getRules() {
        return [...this.defaultRules];
    }
}
exports.CleanupManager = CleanupManager;
/**
 * シングルトンインスタンスへの便利なアクセス
 */
exports.cleanupManager = CleanupManager.getInstance();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,