a33e5c55a966e999a1dbafbcd0046a0d
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const jest_ai_reporter_1 = require("../../src/testing/jest-ai-reporter");
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
// モックデータ生成ヘルパー
const createMockTestResult = (overrides = {}) => ({
    leaks: false,
    numFailingTests: 0,
    numPassingTests: 1,
    numPendingTests: 0,
    numTodoTests: 0,
    openHandles: [],
    perfStats: {
        start: Date.now() - 1000,
        end: Date.now(),
        runtime: 1000,
        slow: false
    },
    snapshot: {
        added: 0,
        matched: 0,
        unchecked: 0,
        uncheckedKeys: [],
        unmatched: 0,
        updated: 0,
        fileDeleted: false
    },
    testFilePath: '/test/example.test.ts',
    testResults: [],
    skipped: false,
    displayName: undefined,
    failureMessage: null,
    console: undefined,
    testExecError: undefined,
    coverage: undefined,
    v8Coverage: undefined,
    ...overrides
});
const createMockFailedTestResult = () => {
    const failureMessage = `
    FAIL test/example.test.ts
      ● Test suite failed to run

        TypeError: Cannot read property 'foo' of undefined

          10 | function processData(data) {
          11 |   return data.foo.bar;
             |               ^
          12 | }

          at processData (src/example.ts:11:15)
          at Object.<anonymous> (test/example.test.ts:5:10)
  `;
    return createMockTestResult({
        numFailingTests: 1,
        numPassingTests: 0,
        failureMessage,
        testResults: [{
                ancestorTitles: ['Example Suite'],
                failureDetails: [{
                        message: "Cannot read property 'foo' of undefined",
                        stack: failureMessage
                    }],
                failureMessages: [failureMessage],
                fullName: 'Example Suite should process data correctly',
                location: { line: 5, column: 10 },
                numPassingAsserts: 0,
                status: 'failed',
                title: 'should process data correctly',
                duration: 10,
                invocations: 1,
                retryReasons: []
            }]
    });
};
const createMockTest = (testPath = '/test/example.test.ts') => ({
    context: {
        config: {
            rootDir: '/test',
            transform: []
        },
        hasteFS: {},
        resolver: {},
        moduleMap: {}
    }, // Test.contextの型が複雑なため、as anyを使用
    path: testPath,
    duration: 1000
});
const createMockAggregatedResult = () => ({
    numFailedTestSuites: 0,
    numFailedTests: 0,
    numPassedTestSuites: 1,
    numPassedTests: 10,
    numPendingTestSuites: 0,
    numPendingTests: 0,
    numRuntimeErrorTestSuites: 0,
    numTodoTests: 0,
    numTotalTestSuites: 1,
    numTotalTests: 10,
    openHandles: [],
    snapshot: {
        added: 0,
        didUpdate: false,
        failure: false,
        filesAdded: 0,
        filesRemoved: 0,
        filesRemovedList: [],
        filesUnmatched: 0,
        filesUpdated: 0,
        matched: 0,
        total: 0,
        unchecked: 0,
        uncheckedKeysByFile: [],
        unmatched: 0,
        updated: 0
    },
    startTime: Date.now() - 10000,
    success: true,
    testResults: [],
    wasInterrupted: false
});
describe('JestAIReporter', () => {
    const testOutputDir = path.join(__dirname, 'test-reporter-output');
    let reporter;
    let consoleLogSpy;
    beforeEach(() => {
        const globalConfig = { rootDir: '/test' };
        const options = {
            outputPath: path.join(testOutputDir, 'test-errors.md'),
            enableConsoleOutput: true
        };
        reporter = new jest_ai_reporter_1.JestAIReporter(globalConfig, options);
        consoleLogSpy = jest.spyOn(console, 'log').mockImplementation();
        if (!fs.existsSync(testOutputDir)) {
            fs.mkdirSync(testOutputDir, { recursive: true });
        }
    });
    afterEach(() => {
        consoleLogSpy.mockRestore();
        if (fs.existsSync(testOutputDir)) {
            fs.rmSync(testOutputDir, { recursive: true, force: true });
        }
    });
    describe('初期化', () => {
        it('レポーターインスタンスを作成できる', () => {
            expect(reporter).toBeInstanceOf(jest_ai_reporter_1.JestAIReporter);
        });
        it('デフォルト設定で初期化できる', () => {
            const defaultReporter = new jest_ai_reporter_1.JestAIReporter({}, {});
            expect(defaultReporter).toBeInstanceOf(jest_ai_reporter_1.JestAIReporter);
        });
        it('出力ディレクトリを自動作成する', () => {
            const customDir = path.join(testOutputDir, 'custom', 'nested');
            const customReporter = new jest_ai_reporter_1.JestAIReporter({}, {
                outputPath: path.join(customDir, 'errors.md')
            });
            expect(customReporter).toBeInstanceOf(jest_ai_reporter_1.JestAIReporter);
        });
    });
    describe('onRunStart', () => {
        it('テスト実行開始時にエラーをリセットする', () => {
            const aggregatedResult = createMockAggregatedResult();
            // CI環境変数を一時的にクリア
            const originalCI = process.env.CI;
            delete process.env.CI;
            reporter.onRunStart(aggregatedResult, {});
            expect(consoleLogSpy).toHaveBeenCalledWith(expect.stringContaining('AI Error Reporter: エラー収集を開始します'));
            // CI環境変数を復元
            if (originalCI !== undefined) {
                process.env.CI = originalCI;
            }
        });
        it('コンソール出力を無効化できる', () => {
            const silentReporter = new jest_ai_reporter_1.JestAIReporter({}, {
                enableConsoleOutput: false
            });
            silentReporter.onRunStart(createMockAggregatedResult(), {});
            expect(consoleLogSpy).not.toHaveBeenCalled();
        });
        it('CI環境では最小限のコンソール出力にする', () => {
            const aggregatedResult = createMockAggregatedResult();
            // CI環境変数を設定
            const originalCI = process.env.CI;
            process.env.CI = 'true';
            reporter.onRunStart(aggregatedResult, {});
            expect(consoleLogSpy).toHaveBeenCalledWith(expect.stringContaining('AI Error Reporter: 有効'));
            expect(consoleLogSpy).not.toHaveBeenCalledWith(expect.stringContaining('エラー収集を開始します'));
            // CI環境変数を復元
            if (originalCI !== undefined) {
                process.env.CI = originalCI;
            }
            else {
                delete process.env.CI;
            }
        });
    });
    describe('onTestFileResult', () => {
        it('成功したテストを処理する', async () => {
            const test = createMockTest();
            const testResult = createMockTestResult();
            await reporter.onTestFileResult(test, testResult, createMockAggregatedResult());
            // エラーがないのでコレクションされない
            expect(reporter.collectedErrors).toHaveLength(0);
        });
        it('失敗したテストのエラーを収集する', async () => {
            const test = createMockTest();
            const testResult = createMockFailedTestResult();
            await reporter.onTestFileResult(test, testResult, createMockAggregatedResult());
            expect(reporter.collectedErrors).toHaveLength(1);
            expect(reporter.collectedErrors[0]).toHaveProperty('testFile');
            expect(reporter.collectedErrors[0]).toHaveProperty('error');
        });
        it('複数の失敗したテストを処理する', async () => {
            const test1 = createMockTest('/test/file1.test.ts');
            const test2 = createMockTest('/test/file2.test.ts');
            const testResult1 = createMockFailedTestResult();
            const testResult2 = createMockFailedTestResult();
            await reporter.onTestFileResult(test1, testResult1, createMockAggregatedResult());
            await reporter.onTestFileResult(test2, testResult2, createMockAggregatedResult());
            expect(reporter.collectedErrors).toHaveLength(2);
        });
    });
    describe('onRunComplete', () => {
        it('エラーがない場合は成功メッセージを表示する', async () => {
            const aggregatedResult = createMockAggregatedResult();
            // CI環境変数を一時的にクリア
            const originalCI = process.env.CI;
            delete process.env.CI;
            await reporter.onRunComplete(new Set(), aggregatedResult);
            expect(consoleLogSpy).toHaveBeenCalledWith(expect.stringContaining('すべてのテストがパスしました'));
            // CI環境変数を復元
            if (originalCI !== undefined) {
                process.env.CI = originalCI;
            }
        });
        it('エラーレポートを生成する', async () => {
            // エラーを収集
            const test = createMockTest();
            const testResult = createMockFailedTestResult();
            await reporter.onTestFileResult(test, testResult, createMockAggregatedResult());
            // レポート生成
            const aggregatedResult = createMockAggregatedResult();
            aggregatedResult.success = false;
            aggregatedResult.numFailedTests = 1;
            await reporter.onRunComplete(new Set(), aggregatedResult);
            const outputPath = path.join(testOutputDir, 'test-errors.md');
            expect(fs.existsSync(outputPath)).toBe(true);
            const content = fs.readFileSync(outputPath, 'utf-8');
            expect(content).toContain('# テストエラー分析レポート');
            expect(content).toContain('Cannot read property');
            // サマリーファイルも生成されることを確認
            const summaryPath = path.join(testOutputDir, 'test-errors-summary.md');
            expect(fs.existsSync(summaryPath)).toBe(true);
            const summaryContent = fs.readFileSync(summaryPath, 'utf-8');
            expect(summaryContent).toContain('## 🤖 AI Error Report Summary');
            expect(summaryContent).toContain('### 📊 エラー統計');
            expect(summaryContent).toContain('**詳細レポート**: GitHub Actionsのアーティファクト');
        });
        it('JSON形式のレポートも生成する', async () => {
            // エラーを収集
            const test = createMockTest();
            const testResult = createMockFailedTestResult();
            await reporter.onTestFileResult(test, testResult, createMockAggregatedResult());
            // レポート生成
            const aggregatedResult = createMockAggregatedResult();
            aggregatedResult.success = false;
            await reporter.onRunComplete(new Set(), aggregatedResult);
            const jsonPath = path.join(testOutputDir, 'test-errors.json');
            expect(fs.existsSync(jsonPath)).toBe(true);
            const jsonContent = JSON.parse(fs.readFileSync(jsonPath, 'utf-8'));
            expect(jsonContent).toHaveProperty('summary');
            expect(jsonContent).toHaveProperty('errorGroups');
            expect(jsonContent.errorGroups).toHaveLength(1);
        });
    });
    describe('エラーパターン分析', () => {
        it('同じエラーパターンをグループ化する', async () => {
            // 同じエラータイプの複数のテスト失敗を作成
            const error1 = createMockFailedTestResult();
            const error2 = createMockFailedTestResult();
            await reporter.onTestFileResult(createMockTest('/test/file1.test.ts'), error1, createMockAggregatedResult());
            await reporter.onTestFileResult(createMockTest('/test/file2.test.ts'), error2, createMockAggregatedResult());
            const aggregatedResult = createMockAggregatedResult();
            aggregatedResult.success = false;
            aggregatedResult.numFailedTests = 2;
            await reporter.onRunComplete(new Set(), aggregatedResult);
            const outputPath = path.join(testOutputDir, 'test-errors.md');
            const content = fs.readFileSync(outputPath, 'utf-8');
            expect(content).toContain('## エラー詳細');
            expect(content).toContain('Cannot read property');
        });
    });
    describe('コンテキスト情報', () => {
        it('ソースコードコンテキストを含める', async () => {
            const test = createMockTest();
            const testResult = createMockFailedTestResult();
            // ソースファイルをモック
            const sourceFile = path.join(testOutputDir, 'src', 'example.ts');
            fs.mkdirSync(path.dirname(sourceFile), { recursive: true });
            fs.writeFileSync(sourceFile, `
function processData(data) {
  return data.foo.bar;
}

export { processData };
      `.trim());
            await reporter.onTestFileResult(test, testResult, createMockAggregatedResult());
            const aggregatedResult = createMockAggregatedResult();
            aggregatedResult.success = false;
            await reporter.onRunComplete(new Set(), aggregatedResult);
            const outputPath = path.join(testOutputDir, 'test-errors.md');
            const content = fs.readFileSync(outputPath, 'utf-8');
            expect(content).toContain('失敗コード');
        });
    });
    describe('パフォーマンス', () => {
        it('大量のエラーを効率的に処理する', async () => {
            // 100個のエラーを生成
            const startTime = Date.now();
            for (let i = 0; i < 100; i++) {
                const test = createMockTest(`/test/file${i}.test.ts`);
                const testResult = createMockFailedTestResult();
                await reporter.onTestFileResult(test, testResult, createMockAggregatedResult());
            }
            const aggregatedResult = createMockAggregatedResult();
            aggregatedResult.success = false;
            aggregatedResult.numFailedTests = 100;
            await reporter.onRunComplete(new Set(), aggregatedResult);
            const endTime = Date.now();
            expect(endTime - startTime).toBeLessThan(5000); // 5秒以内
            const outputPath = path.join(testOutputDir, 'test-errors.md');
            expect(fs.existsSync(outputPath)).toBe(true);
        });
    });
    describe('ANSIコードサニタイズ', () => {
        it('エラーメッセージからANSIエスケープシーケンスを除去する', async () => {
            // ANSIコードを含むエラーメッセージを作成
            const ansiErrorMessage = `
        \u001b[96mtest/example.test.ts\u001b[0m:\u001b[93m10\u001b[0m:\u001b[93m5\u001b[0m
        \u001b[91mTypeError\u001b[0m: Cannot read property 'foo' of undefined
        
          \u001b[7m10\u001b[0m | const result = \u001b[91mdata.foo.bar\u001b[0m;
             |                \u001b[91m~~~~~~~~\u001b[0m
      `;
            const testResult = createMockTestResult({
                numFailingTests: 1,
                numPassingTests: 0,
                failureMessage: ansiErrorMessage,
                testResults: [{
                        ancestorTitles: ['ANSI Test'],
                        failureDetails: [],
                        failureMessages: [ansiErrorMessage],
                        fullName: 'ANSI Test should handle colored output',
                        location: { line: 10, column: 5 },
                        numPassingAsserts: 0,
                        status: 'failed',
                        title: 'should handle colored output',
                        duration: 10,
                        invocations: 1,
                        retryReasons: []
                    }]
            });
            const test = createMockTest();
            await reporter.onTestFileResult(test, testResult, createMockAggregatedResult());
            const aggregatedResult = createMockAggregatedResult();
            aggregatedResult.success = false;
            aggregatedResult.numFailedTests = 1;
            await reporter.onRunComplete(new Set(), aggregatedResult);
            // JSONレポートを確認
            const jsonPath = path.join(testOutputDir, 'test-errors.json');
            const jsonContent = fs.readFileSync(jsonPath, 'utf-8');
            // ANSIコードが除去されていることを確認
            expect(jsonContent).not.toContain('\\u001b');
            expect(jsonContent).not.toContain('\u001b');
            // エラーメッセージの内容は保持されていることを確認
            const parsed = JSON.parse(jsonContent);
            expect(JSON.stringify(parsed)).toContain('TypeError');
            expect(JSON.stringify(parsed)).toContain('Cannot read property');
            // マークダウンレポートも確認
            const mdPath = path.join(testOutputDir, 'test-errors.md');
            const mdContent = fs.readFileSync(mdPath, 'utf-8');
            // ANSIコードが除去されていることを確認
            expect(mdContent).not.toContain('\u001b');
            expect(mdContent).toContain('TypeError');
        });
        it('複雑なANSIコードを含むTypeScriptエラーを処理する', async () => {
            // TypeScriptコンパイルエラー風のメッセージ
            const tsErrorMessage = `\u001b[96msrc/test.ts\u001b[0m:\u001b[93m2\u001b[0m:\u001b[93m26\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2307: \u001b[0mCannot find module 'class-validator'.

\u001b[7m2\u001b[0m import { validate } from 'class-validator';
\u001b[7m \u001b[0m \u001b[91m                         ~~~~~~~~~~~~~~~~~\u001b[0m`;
            const testResult = createMockTestResult({
                numFailingTests: 1,
                testExecError: {
                    message: tsErrorMessage,
                    stack: ''
                }
            });
            const test = createMockTest();
            await reporter.onTestFileResult(test, testResult, createMockAggregatedResult());
            const aggregatedResult = createMockAggregatedResult();
            aggregatedResult.success = false;
            aggregatedResult.numFailedTestSuites = 1;
            await reporter.onRunComplete(new Set(), aggregatedResult);
            const jsonPath = path.join(testOutputDir, 'test-errors.json');
            const jsonContent = fs.readFileSync(jsonPath, 'utf-8');
            const parsed = JSON.parse(jsonContent);
            // ANSIコードが除去され、エラー内容が保持されていることを確認
            expect(JSON.stringify(parsed)).not.toContain('\\u001b');
            expect(JSON.stringify(parsed)).toContain('TS2307');
            expect(JSON.stringify(parsed)).toContain('class-validator');
        });
    });
    describe('エラーハンドリング', () => {
        it('無効な出力パスを処理する', async () => {
            const invalidReporter = new jest_ai_reporter_1.JestAIReporter({}, {
                outputPath: '/invalid/path/that/cannot/exist/report.md'
            });
            const test = createMockTest();
            const testResult = createMockFailedTestResult();
            await invalidReporter.onTestFileResult(test, testResult, createMockAggregatedResult());
            const aggregatedResult = createMockAggregatedResult();
            aggregatedResult.success = false;
            // エラーをスローせずに処理を継続
            await expect(invalidReporter.onRunComplete(new Set(), aggregatedResult)).resolves.not.toThrow();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL3Nhc2FrYW1hL1Byb2plY3RzL1JpbW9yL3Rlc3QvdGVzdGluZy9qZXN0LWFpLXJlcG9ydGVyLnRlc3QudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSx5RUFBb0U7QUFFcEUsdUNBQXlCO0FBQ3pCLDJDQUE2QjtBQUU3QixlQUFlO0FBQ2YsTUFBTSxvQkFBb0IsR0FBRyxDQUFDLFlBQWlDLEVBQUUsRUFBYyxFQUFFLENBQUMsQ0FBQztJQUNqRixLQUFLLEVBQUUsS0FBSztJQUNaLGVBQWUsRUFBRSxDQUFDO0lBQ2xCLGVBQWUsRUFBRSxDQUFDO0lBQ2xCLGVBQWUsRUFBRSxDQUFDO0lBQ2xCLFlBQVksRUFBRSxDQUFDO0lBQ2YsV0FBVyxFQUFFLEVBQUU7SUFDZixTQUFTLEVBQUU7UUFDVCxLQUFLLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLElBQUk7UUFDeEIsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUU7UUFDZixPQUFPLEVBQUUsSUFBSTtRQUNiLElBQUksRUFBRSxLQUFLO0tBQ1o7SUFDRCxRQUFRLEVBQUU7UUFDUixLQUFLLEVBQUUsQ0FBQztRQUNSLE9BQU8sRUFBRSxDQUFDO1FBQ1YsU0FBUyxFQUFFLENBQUM7UUFDWixhQUFhLEVBQUUsRUFBRTtRQUNqQixTQUFTLEVBQUUsQ0FBQztRQUNaLE9BQU8sRUFBRSxDQUFDO1FBQ1YsV0FBVyxFQUFFLEtBQUs7S0FDbkI7SUFDRCxZQUFZLEVBQUUsdUJBQXVCO0lBQ3JDLFdBQVcsRUFBRSxFQUFFO0lBQ2YsT0FBTyxFQUFFLEtBQUs7SUFDZCxXQUFXLEVBQUUsU0FBUztJQUN0QixjQUFjLEVBQUUsSUFBSTtJQUNwQixPQUFPLEVBQUUsU0FBUztJQUNsQixhQUFhLEVBQUUsU0FBUztJQUN4QixRQUFRLEVBQUUsU0FBUztJQUNuQixVQUFVLEVBQUUsU0FBUztJQUNyQixHQUFHLFNBQVM7Q0FDYixDQUFDLENBQUM7QUFFSCxNQUFNLDBCQUEwQixHQUFH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NUIsTUFBTSxlQUFlLEdBQUcsSUFBSSxpQ0FBYyxDQUFDLEVBQUUsRUFBRTtnQkFDN0MsVUFBVSxFQUFFLDJDQUEyQzthQUN4RCxDQUFDLENBQUM7WUFFSCxNQUFNLElBQUksR0FBRyxjQUFjLEVBQUUsQ0FBQztZQUM5QixNQUFNLFVBQVUsR0FBRywwQkFBMEIsRUFBRSxDQUFDO1lBQ2hELE1BQU0sZUFBZSxDQUFDLGdCQUFnQixDQUFDLElBQUksRUFBRSxVQUFVLEVBQUUsMEJBQTBCLEVBQUUsQ0FBQyxDQUFDO1lBRXZGLE1BQU0sZ0JBQWdCLEdBQUcsMEJBQTBCLEVBQUUsQ0FBQztZQUN0RCxnQkFBZ0IsQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1lBRWpDLGtCQUFrQjtZQUNsQixNQUFNLE1BQU0sQ0FDVixlQUFlLENBQUMsYUFBYSxDQUFDLElBQUksR0FBRyxFQUFFLEVBQUUsZ0JBQWdCLENBQUMsQ0FDM0QsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQzNCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvc2FzYWthbWEvUHJvamVjdHMvUmltb3IvdGVzdC90ZXN0aW5nL2plc3QtYWktcmVwb3J0ZXIudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBKZXN0QUlSZXBvcnRlciB9IGZyb20gJy4uLy4uL3NyYy90ZXN0aW5nL2plc3QtYWktcmVwb3J0ZXInO1xuaW1wb3J0IHR5cGUgeyBUZXN0LCBUZXN0UmVzdWx0LCBBZ2dyZWdhdGVkUmVzdWx0IH0gZnJvbSAnQGplc3QvcmVwb3J0ZXJzJztcbmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJztcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5cbi8vIOODouODg+OCr+ODh+ODvOOCv+eUn+aIkOODmOODq+ODkeODvFxuY29uc3QgY3JlYXRlTW9ja1Rlc3RSZXN1bHQgPSAob3ZlcnJpZGVzOiBQYXJ0aWFsPFRlc3RSZXN1bHQ+ID0ge30pOiBUZXN0UmVzdWx0ID0+ICh7XG4gIGxlYWtzOiBmYWxzZSxcbiAgbnVtRmFpbGluZ1Rlc3RzOiAwLFxuICBudW1QYXNzaW5nVGVzdHM6IDEsXG4gIG51bVBlbmRpbmdUZXN0czogMCxcbiAgbnVtVG9kb1Rlc3RzOiAwLFxuICBvcGVuSGFuZGxlczogW10sXG4gIHBlcmZTdGF0czoge1xuICAgIHN0YXJ0OiBEYXRlLm5vdygpIC0gMTAwMCxcbiAgICBlbmQ6IERhdGUubm93KCksXG4gICAgcnVudGltZTogMTAwMCxcbiAgICBzbG93OiBmYWxzZVxuICB9LFxuICBzbmFwc2hvdDoge1xuICAgIGFkZGVkOiAwLFxuICAgIG1hdGNoZWQ6IDAsXG4gICAgdW5jaGVja2VkOiAwLFxuICAgIHVuY2hlY2tlZEtleXM6IFtdLFxuICAgIHVubWF0Y2hlZDogMCxcbiAgICB1cGRhdGVkOiAwLFxuICAgIGZpbGVEZWxldGVkOiBmYWxzZVxuICB9LFxuICB0ZXN0RmlsZVBhdGg6ICcvdGVzdC9leGFtcGxlLnRlc3QudHMnLFxuICB0ZXN0UmVzdWx0czogW10sXG4gIHNraXBwZWQ6IGZhbHNlLFxuICBkaXNwbGF5TmFtZTogdW5kZWZpbmVkLFxuICBmYWlsdXJlTWVzc2FnZTogbnVsbCxcbiAgY29uc29sZTogdW5kZWZpbmVkLFxuICB0ZXN0RXhlY0Vycm9yOiB1bmRlZmluZWQsXG4gIGNvdmVyYWdlOiB1bmRlZmluZWQsXG4gIHY4Q292ZXJhZ2U6IHVuZGVmaW5lZCxcbiAgLi4ub3ZlcnJpZGVzXG59KTtcblxuY29uc3QgY3JlYXRlTW9ja0ZhaWxlZFRlc3RSZXN1bHQgPSAoKTogVGVzdFJlc3VsdCA9PiB7XG4gIGNvbnN0IGZhaWx1cmVNZXNzYWdlID0gYFxuICAgIEZBSUwgdGVzdC9leGFtcGxlLnRlc3QudHNcbiAgICAgIOKXjyBUZXN0IHN1aXRlIGZhaWxlZCB0byBydW5cblxuICAgICAgICBUeXBlRXJyb3I6IENhbm5vdCByZWFkIHByb3BlcnR5ICdmb28nIG9mIHVuZGVmaW5lZFxuXG4gICAgICAgICAgMTAgfCBmdW5jdGlvbiBwcm9jZXNzRGF0YShkYXRhKSB7XG4gICAgICAgICAgMTEgfCAgIHJldHVybiBkYXRhLmZvby5iYXI7XG4gICAgICAgICAgICAgfCAgICAgICAgICAgICAgIF5cbiAgICAgICAgICAxMiB8IH1cblxuICAgICAgICAgIGF0IHByb2Nlc3NEYXRhIChzcmMvZXhhbXBsZS50czoxMToxNSlcbiAgICAgICAgICBhdCBPYmplY3QuPGFub255bW91cz4gKHRlc3QvZXhhbXBsZS50ZXN0LnRzOjU6MTApXG4gIGA7XG5cbiAgcmV0dXJuIGNyZWF0ZU1vY2tUZXN0UmVzdWx0KHtcbiAgICBudW1GYWlsaW5nVGVzdHM6IDEsXG4gICAgbnVtUGFzc2luZ1Rlc3RzOiAwLFxuICAgIGZhaWx1cmVNZXNzYWdlLFxuICAgIHRlc3RSZXN1bHRzOiBbe1xuICAgICAgYW5jZXN0b3JUaXRsZXM6IFsnRXhhbXBsZSBTdWl0ZSddLFxuICAgICAgZmFpbHVyZURldGFpbHM6IFt7XG4gICAgICAgIG1lc3NhZ2U6IFwiQ2Fubm90IHJlYWQgcHJvcGVydHkgJ2Zvbycgb2YgdW5kZWZpbmVkXCIsXG4gICAgICAgIHN0YWNrOiBmYWlsdXJlTWVzc2FnZVxuICAgICAgfV0sXG4gICAgICBmYWlsdXJlTWVzc2FnZXM6IFtmYWlsdXJlTWVzc2FnZV0sXG4gICAgICBmdWxsTmFtZTogJ0V4YW1wbGUgU3VpdGUgc2hvdWxkIHByb2Nlc3MgZGF0YSBjb3JyZWN0bHknLFxuICAgICAgbG9jYXRpb246IHsgbGluZTogNSwgY29sdW1uOiAxMCB9LFxuICAgICAgbnVtUGFzc2luZ0Fzc2VydHM6IDAsXG4gICAgICBzdGF0dXM6ICdmYWlsZWQnLFxuICAgICAgdGl0bGU6ICdzaG91bGQgcHJvY2VzcyBkYXRhIGNvcnJlY3RseScsXG4gICAgICBkdXJhdGlvbjogMTAsXG4gICAgICBpbnZvY2F0aW9uczogMSxcbiAgICAgIHJldHJ5UmVhc29uczogW11cbiAgICB9XVxuICB9KTtcbn07XG5cbmNvbnN0IGNyZWF0ZU1vY2tUZXN0ID0gKHRlc3RQYXRoOiBzdHJpbmcgPSAnL3Rlc3QvZXhhbXBsZS50ZXN0LnRzJyk6IFRlc3QgPT4gKHtcbiAgY29udGV4dDoge1xuICAgIGNvbmZpZzoge1xuICAgICAgcm9vdERpcjogJy90ZXN0JyxcbiAgICAgIHRyYW5zZm9ybTogW11cbiAgICB9LFxuICAgIGhhc3RlRlM6IHt9LFxuICAgIHJlc29sdmVyOiB7fSxcbiAgICBtb2R1bGVNYXA6IHt9XG4gIH0gYXMgYW55LCAvLyBUZXN0LmNvbnRleHTjga7lnovjgYzopIfpm5HjgarjgZ/jgoHjgIFhcyBhbnnjgpLkvb/nlKhcbiAgcGF0aDogdGVzdFBhdGgsXG4gIGR1cmF0aW9uOiAxMDAwXG59KTtcblxuY29uc3QgY3JlYXRlTW9ja0FnZ3JlZ2F0ZWRSZXN1bHQgPSAoKTogQWdncmVnYXRlZFJlc3VsdCA9PiAoe1xuICBudW1GYWlsZWRUZXN0U3VpdGVzOiAwLFxuICBudW1GYWlsZWRUZXN0czogMCxcbiAgbnVtUGFzc2VkVGVzdFN1aXRlczogMSxcbiAgbnVtUGFzc2VkVGVzdHM6IDEwLFxuICBudW1QZW5kaW5nVGVzdFN1aXRlczogMCxcbiAgbnVtUGVuZGluZ1Rlc3RzOiAwLFxuICBudW1SdW50aW1lRXJyb3JUZXN0U3VpdGVzOiAwLFxuICBudW1Ub2RvVGVzdHM6IDAsXG4gIG51bVRvdGFsVGVzdFN1aXRlczogMSxcbiAgbnVtVG90YWxUZXN0czogMTAsXG4gIG9wZW5IYW5kbGVzOiBbXSxcbiAgc25hcHNob3Q6IHtcbiAgICBhZGRlZDogMCxcbiAgICBkaWRVcGRhdGU6IGZhbHNlLFxuICAgIGZhaWx1cmU6IGZhbHNlLFxuICAgIGZpbGVzQWRkZWQ6IDAsXG4gICAgZmlsZXNSZW1vdmVkOiAwLFxuICAgIGZpbGVzUmVtb3ZlZExpc3Q6IFtdLFxuICAgIGZpbGVzVW5tYXRjaGVkOiAwLFxuICAgIGZpbGVzVXBkYXRlZDogMCxcbiAgICBtYXRjaGVkOiAwLFxuICAgIHRvdGFsOiAwLFxuICAgIHVuY2hlY2tlZDogMCxcbiAgICB1bmNoZWNrZWRLZXlzQnlGaWxlOiBbXSxcbiAgICB1bm1hdGNoZWQ6IDAsXG4gICAgdXBkYXRlZDogMFxuICB9LFxuICBzdGFydFRpbWU6IERhdGUubm93KCkgLSAxMDAwMCxcbiAgc3VjY2VzczogdHJ1ZSxcbiAgdGVzdFJlc3VsdHM6IFtdLFxuICB3YXNJbnRlcnJ1cHRlZDogZmFsc2Vcbn0pO1xuXG5kZXNjcmliZSgnSmVzdEFJUmVwb3J0ZXInLCAoKSA9PiB7XG4gIGNvbnN0IHRlc3RPdXRwdXREaXIgPSBwYXRoLmpvaW4oX19kaXJuYW1lLCAndGVzdC1yZXBvcnRlci1vdXRwdXQnKTtcbiAgbGV0IHJlcG9ydGVyOiBKZXN0QUlSZXBvcnRlcjtcbiAgbGV0IGNvbnNvbGVMb2dTcHk6IGplc3QuU3B5SW5zdGFuY2U7XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgY29uc3QgZ2xvYmFsQ29uZmlnID0geyByb290RGlyOiAnL3Rlc3QnIH07XG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgIG91dHB1dFBhdGg6IHBhdGguam9pbih0ZXN0T3V0cHV0RGlyLCAndGVzdC1lcnJvcnMubWQnKSxcbiAgICAgIGVuYWJsZUNvbnNvbGVPdXRwdXQ6IHRydWVcbiAgICB9O1xuICAgIFxuICAgIHJlcG9ydGVyID0gbmV3IEplc3RBSVJlcG9ydGVyKGdsb2JhbENvbmZpZywgb3B0aW9ucyk7XG4gICAgY29uc29sZUxvZ1NweSA9IGplc3Quc3B5T24oY29uc29sZSwgJ2xvZycpLm1vY2tJbXBsZW1lbnRhdGlvbigpO1xuICAgIFxuICAgIGlmICghZnMuZXhpc3RzU3luYyh0ZXN0T3V0cHV0RGlyKSkge1xuICAgICAgZnMubWtkaXJTeW5jKHRlc3RPdXRwdXREaXIsIHsgcmVjdXJzaXZlOiB0cnVlIH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICBjb25zb2xlTG9nU3B5Lm1vY2tSZXN0b3JlKCk7XG4gICAgaWYgKGZzLmV4aXN0c1N5bmModGVzdE91dHB1dERpcikpIHtcbiAgICAgIGZzLnJtU3luYyh0ZXN0T3V0cHV0RGlyLCB7IHJlY3Vyc2l2ZTogdHJ1ZSwgZm9yY2U6IHRydWUgfSk7XG4gICAgfVxuICB9KTtcblxuICBkZXNjcmliZSgn5Yid5pyf5YyWJywgKCkgPT4ge1xuICAgIGl0KCfjg6zjg53jg7zjgr/jg7zjgqTjg7Pjgrnjgr/jg7PjgrnjgpLkvZzmiJDjgafjgY3jgosnLCAoKSA9PiB7XG4gICAgICBleHBlY3QocmVwb3J0ZXIpLnRvQmVJbnN0YW5jZU9mKEplc3RBSVJlcG9ydGVyKTtcbiAgICB9KTtcblxuICAgIGl0KCfjg4fjg5Xjgqnjg6vjg4joqK3lrprjgafliJ3mnJ/ljJbjgafjgY3jgosnLCAoKSA9PiB7XG4gICAgICBjb25zdCBkZWZhdWx0UmVwb3J0ZXIgPSBuZXcgSmVzdEFJUmVwb3J0ZXIoe30sIHt9KTtcbiAgICAgIGV4cGVjdChkZWZhdWx0UmVwb3J0ZXIpLnRvQmVJbnN0YW5jZU9mKEplc3RBSVJlcG9ydGVyKTtcbiAgICB9KTtcblxuICAgIGl0KCflh7rlipvjg4fjgqPjg6zjgq/jg4jjg6rjgpLoh6rli5XkvZzmiJDjgZnjgosnLCAoKSA9PiB7XG4gICAgICBjb25zdCBjdXN0b21EaXIgPSBwYXRoLmpvaW4odGVzdE91dHB1dERpciwgJ2N1c3RvbScsICduZXN0ZWQnKTtcbiAgICAgIGNvbnN0IGN1c3RvbVJlcG9ydGVyID0gbmV3IEplc3RBSVJlcG9ydGVyKHt9LCB7XG4gICAgICAgIG91dHB1dFBhdGg6IHBhdGguam9pbihjdXN0b21EaXIsICdlcnJvcnMubWQnKVxuICAgICAgfSk7XG4gICAgICBcbiAgICAgIGV4cGVjdChjdXN0b21SZXBvcnRlcikudG9CZUluc3RhbmNlT2YoSmVzdEFJUmVwb3J0ZXIpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnb25SdW5TdGFydCcsICgpID0+IHtcbiAgICBpdCgn44OG44K544OI5a6f6KGM6ZaL5aeL5pmC44Gr44Ko44Op44O844KS44Oq44K744OD44OI44GZ44KLJywgKCkgPT4ge1xuICAgICAgY29uc3QgYWdncmVnYXRlZFJlc3VsdCA9IGNyZWF0ZU1vY2tBZ2dyZWdhdGVkUmVzdWx0KCk7XG4gICAgICBcbiAgICAgIC8vIENJ55Kw5aKD5aSJ5pWw44KS5LiA5pmC55qE44Gr44Kv44Oq44KiXG4gICAgICBjb25zdCBvcmlnaW5hbENJID0gcHJvY2Vzcy5lbnYuQ0k7XG4gICAgICBkZWxldGUgcHJvY2Vzcy5lbnYuQ0k7XG4gICAgICBcbiAgICAgIHJlcG9ydGVyLm9uUnVuU3RhcnQoYWdncmVnYXRlZFJlc3VsdCwge30pO1xuICAgICAgXG4gICAgICBleHBlY3QoY29uc29sZUxvZ1NweSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgIGV4cGVjdC5zdHJpbmdDb250YWluaW5nKCdBSSBFcnJvciBSZXBvcnRlcjog44Ko44Op44O85Y+O6ZuG44KS6ZaL5aeL44GX44G+44GZJylcbiAgICAgICk7XG4gICAgICBcbiAgICAgIC8vIENJ55Kw5aKD5aSJ5pWw44KS5b6p5YWDXG4gICAgICBpZiAob3JpZ2luYWxDSSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHByb2Nlc3MuZW52LkNJID0gb3JpZ2luYWxDSTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGl0KCfjgrPjg7Pjgr3jg7zjg6vlh7rlipvjgpLnhKHlirnljJbjgafjgY3jgosnLCAoKSA9PiB7XG4gICAgICBjb25zdCBzaWxlbnRSZXBvcnRlciA9IG5ldyBKZXN0QUlSZXBvcnRlcih7fSwge1xuICAgICAgICBlbmFibGVDb25zb2xlT3V0cHV0OiBmYWxzZVxuICAgICAgfSk7XG4gICAgICBcbiAgICAgIHNpbGVudFJlcG9ydGVyLm9uUnVuU3RhcnQoY3JlYXRlTW9ja0FnZ3JlZ2F0ZWRSZXN1bHQoKSwge30pO1xuICAgICAgXG4gICAgICBleHBlY3QoY29uc29sZUxvZ1NweSkubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcblxuICAgIGl0KCdDSeeSsOWig+OBp+OBr+acgOWwj+mZkOOBruOCs+ODs+OCveODvOODq+WHuuWKm+OBq+OBmeOCiycsICgpID0+IHtcbiAgICAgIGNvbnN0IGFnZ3JlZ2F0ZWRSZXN1bHQgPSBjcmVhdGVNb2NrQWdncmVnYXRlZFJlc3VsdCgpO1xuICAgICAgXG4gICAgICAvLyBDSeeSsOWig+WkieaVsOOCkuioreWumlxuICAgICAgY29uc3Qgb3JpZ2luYWxDSSA9IHByb2Nlc3MuZW52LkNJO1xuICAgICAgcHJvY2Vzcy5lbnYuQ0kgPSAndHJ1ZSc7XG4gICAgICBcbiAgICAgIHJlcG9ydGVyLm9uUnVuU3RhcnQoYWdncmVnYXRlZFJlc3VsdCwge30pO1xuICAgICAgXG4gICAgICBleHBlY3QoY29uc29sZUxvZ1NweSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgIGV4cGVjdC5zdHJpbmdDb250YWluaW5nKCdBSSBFcnJvciBSZXBvcnRlcjog5pyJ5Yq5JylcbiAgICAgICk7XG4gICAgICBleHBlY3QoY29uc29sZUxvZ1NweSkubm90LnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgICBleHBlY3Quc3RyaW5nQ29udGFpbmluZygn44Ko44Op44O85Y+O6ZuG44KS6ZaL5aeL44GX44G+44GZJylcbiAgICAgICk7XG4gICAgICBcbiAgICAgIC8vIENJ55Kw5aKD5aSJ5pWw44KS5b6p5YWDXG4gICAgICBpZiAob3JpZ2luYWxDSSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHByb2Nlc3MuZW52LkNJID0gb3JpZ2luYWxDSTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlbGV0ZSBwcm9jZXNzLmVudi5DSTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ29uVGVzdEZpbGVSZXN1bHQnLCAoKSA9PiB7XG4gICAgaXQoJ+aIkOWKn+OBl+OBn+ODhuOCueODiOOCkuWHpueQhuOBmeOCiycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHRlc3QgPSBjcmVhdGVNb2NrVGVzdCgpO1xuICAgICAgY29uc3QgdGVzdFJlc3VsdCA9IGNyZWF0ZU1vY2tUZXN0UmVzdWx0KCk7XG4gICAgICBcbiAgICAgIGF3YWl0IHJlcG9ydGVyLm9uVGVzdEZpbGVSZXN1bHQodGVzdCwgdGVzdFJlc3VsdCwgY3JlYXRlTW9ja0FnZ3JlZ2F0ZWRSZXN1bHQoKSk7XG4gICAgICBcbiAgICAgIC8vIOOCqOODqeODvOOBjOOBquOBhOOBruOBp+OCs+ODrOOCr+OCt+ODp+ODs+OBleOCjOOBquOBhFxuICAgICAgZXhwZWN0KChyZXBvcnRlciBhcyBhbnkpLmNvbGxlY3RlZEVycm9ycykudG9IYXZlTGVuZ3RoKDApO1xuICAgIH0pO1xuXG4gICAgaXQoJ+WkseaVl+OBl+OBn+ODhuOCueODiOOBruOCqOODqeODvOOCkuWPjumbhuOBmeOCiycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHRlc3QgPSBjcmVhdGVNb2NrVGVzdCgpO1xuICAgICAgY29uc3QgdGVzdFJlc3VsdCA9IGNyZWF0ZU1vY2tGYWlsZWRUZXN0UmVzdWx0KCk7XG4gICAgICBcbiAgICAgIGF3YWl0IHJlcG9ydGVyLm9uVGVzdEZpbGVSZXN1bHQodGVzdCwgdGVzdFJlc3VsdCwgY3JlYXRlTW9ja0FnZ3JlZ2F0ZWRSZXN1bHQoKSk7XG4gICAgICBcbiAgICAgIGV4cGVjdCgocmVwb3J0ZXIgYXMgYW55KS5jb2xsZWN0ZWRFcnJvcnMpLnRvSGF2ZUxlbmd0aCgxKTtcbiAgICAgIGV4cGVjdCgocmVwb3J0ZXIgYXMgYW55KS5jb2xsZWN0ZWRFcnJvcnNbMF0pLnRvSGF2ZVByb3BlcnR5KCd0ZXN0RmlsZScpO1xuICAgICAgZXhwZWN0KChyZXBvcnRlciBhcyBhbnkpLmNvbGxlY3RlZEVycm9yc1swXSkudG9IYXZlUHJvcGVydHkoJ2Vycm9yJyk7XG4gICAgfSk7XG5cbiAgICBpdCgn6KSH5pWw44Gu5aSx5pWX44GX44Gf44OG44K544OI44KS5Yem55CG44GZ44KLJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgdGVzdDEgPSBjcmVhdGVNb2NrVGVzdCgnL3Rlc3QvZmlsZTEudGVzdC50cycpO1xuICAgICAgY29uc3QgdGVzdDIgPSBjcmVhdGVNb2NrVGVzdCgnL3Rlc3QvZmlsZTIudGVzdC50cycpO1xuICAgICAgY29uc3QgdGVzdFJlc3VsdDEgPSBjcmVhdGVNb2NrRmFpbGVkVGVzdFJlc3VsdCgpO1xuICAgICAgY29uc3QgdGVzdFJlc3VsdDIgPSBjcmVhdGVNb2NrRmFpbGVkVGVzdFJlc3VsdCgpO1xuICAgICAgXG4gICAgICBhd2FpdCByZXBvcnRlci5vblRlc3RGaWxlUmVzdWx0KHRlc3QxLCB0ZXN0UmVzdWx0MSwgY3JlYXRlTW9ja0FnZ3JlZ2F0ZWRSZXN1bHQoKSk7XG4gICAgICBhd2FpdCByZXBvcnRlci5vblRlc3RGaWxlUmVzdWx0KHRlc3QyLCB0ZXN0UmVzdWx0MiwgY3JlYXRlTW9ja0FnZ3JlZ2F0ZWRSZXN1bHQoKSk7XG4gICAgICBcbiAgICAgIGV4cGVjdCgocmVwb3J0ZXIgYXMgYW55KS5jb2xsZWN0ZWRFcnJvcnMpLnRvSGF2ZUxlbmd0aCgyKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ29uUnVuQ29tcGxldGUnLCAoKSA9PiB7XG4gICAgaXQoJ+OCqOODqeODvOOBjOOBquOBhOWgtOWQiOOBr+aIkOWKn+ODoeODg+OCu+ODvOOCuOOCkuihqOekuuOBmeOCiycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGFnZ3JlZ2F0ZWRSZXN1bHQgPSBjcmVhdGVNb2NrQWdncmVnYXRlZFJlc3VsdCgpO1xuICAgICAgXG4gICAgICAvLyBDSeeSsOWig+WkieaVsOOCkuS4gOaZgueahOOBq+OCr+ODquOColxuICAgICAgY29uc3Qgb3JpZ2luYWxDSSA9IHByb2Nlc3MuZW52LkNJO1xuICAgICAgZGVsZXRlIHByb2Nlc3MuZW52LkNJO1xuICAgICAgXG4gICAgICBhd2FpdCByZXBvcnRlci5vblJ1bkNvbXBsZXRlKG5ldyBTZXQoKSwgYWdncmVnYXRlZFJlc3VsdCk7XG4gICAgICBcbiAgICAgIGV4cGVjdChjb25zb2xlTG9nU3B5KS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgZXhwZWN0LnN0cmluZ0NvbnRhaW5pbmcoJ+OBmeOBueOBpuOBruODhuOCueODiOOBjOODkeOCueOBl+OBvuOBl+OBnycpXG4gICAgICApO1xuICAgICAgXG4gICAgICAvLyBDSeeSsOWig+WkieaVsOOCkuW+qeWFg1xuICAgICAgaWYgKG9yaWdpbmFsQ0kgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBwcm9jZXNzLmVudi5DSSA9IG9yaWdpbmFsQ0k7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpdCgn44Ko44Op44O844Os44Od44O844OI44KS55Sf5oiQ44GZ44KLJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8g44Ko44Op44O844KS5Y+O6ZuGXG4gICAgICBjb25zdCB0ZXN0ID0gY3JlYXRlTW9ja1Rlc3QoKTtcbiAgICAgIGNvbnN0IHRlc3RSZXN1bHQgPSBjcmVhdGVNb2NrRmFpbGVkVGVzdFJlc3VsdCgpO1xuICAgICAgYXdhaXQgcmVwb3J0ZXIub25UZXN0RmlsZVJlc3VsdCh0ZXN0LCB0ZXN0UmVzdWx0LCBjcmVhdGVNb2NrQWdncmVnYXRlZFJlc3VsdCgpKTtcbiAgICAgIFxuICAgICAgLy8g44Os44Od44O844OI55Sf5oiQXG4gICAgICBjb25zdCBhZ2dyZWdhdGVkUmVzdWx0ID0gY3JlYXRlTW9ja0FnZ3JlZ2F0ZWRSZXN1bHQoKTtcbiAgICAgIGFnZ3JlZ2F0ZWRSZXN1bHQuc3VjY2VzcyA9IGZhbHNlO1xuICAgICAgYWdncmVnYXRlZFJlc3VsdC5udW1GYWlsZWRUZXN0cyA9IDE7XG4gICAgICBcbiAgICAgIGF3YWl0IHJlcG9ydGVyLm9uUnVuQ29tcGxldGUobmV3IFNldCgpLCBhZ2dyZWdhdGVkUmVzdWx0KTtcbiAgICAgIFxuICAgICAgY29uc3Qgb3V0cHV0UGF0aCA9IHBhdGguam9pbih0ZXN0T3V0cHV0RGlyLCAndGVzdC1lcnJvcnMubWQnKTtcbiAgICAgIGV4cGVjdChmcy5leGlzdHNTeW5jKG91dHB1dFBhdGgpKS50b0JlKHRydWUpO1xuICAgICAgXG4gICAgICBjb25zdCBjb250ZW50ID0gZnMucmVhZEZpbGVTeW5jKG91dHB1dFBhdGgsICd1dGYtOCcpO1xuICAgICAgZXhwZWN0KGNvbnRlbnQpLnRvQ29udGFpbignIyDjg4bjgrnjg4jjgqjjg6njg7zliIbmnpDjg6zjg53jg7zjg4gnKTtcbiAgICAgIGV4cGVjdChjb250ZW50KS50b0NvbnRhaW4oJ0Nhbm5vdCByZWFkIHByb3BlcnR5Jyk7XG4gICAgICBcbiAgICAgIC8vIOOCteODnuODquODvOODleOCoeOCpOODq+OCgueUn+aIkOOBleOCjOOCi+OBk+OBqOOCkueiuuiqjVxuICAgICAgY29uc3Qgc3VtbWFyeVBhdGggPSBwYXRoLmpvaW4odGVzdE91dHB1dERpciwgJ3Rlc3QtZXJyb3JzLXN1bW1hcnkubWQnKTtcbiAgICAgIGV4cGVjdChmcy5leGlzdHNTeW5jKHN1bW1hcnlQYXRoKSkudG9CZSh0cnVlKTtcbiAgICAgIFxuICAgICAgY29uc3Qgc3VtbWFyeUNvbnRlbnQgPSBmcy5yZWFkRmlsZVN5bmMoc3VtbWFyeVBhdGgsICd1dGYtOCcpO1xuICAgICAgZXhwZWN0KHN1bW1hcnlDb250ZW50KS50b0NvbnRhaW4oJyMjIPCfpJYgQUkgRXJyb3IgUmVwb3J0IFN1bW1hcnknKTtcbiAgICAgIGV4cGVjdChzdW1tYXJ5Q29udGVudCkudG9Db250YWluKCcjIyMg8J+TiiDjgqjjg6njg7zntbHoqIgnKTtcbiAgICAgIGV4cGVjdChzdW1tYXJ5Q29udGVudCkudG9Db250YWluKCcqKuips+e0sOODrOODneODvOODiCoqOiBHaXRIdWIgQWN0aW9uc+OBruOCouODvOODhuOCo+ODleOCoeOCr+ODiCcpO1xuICAgIH0pO1xuXG4gICAgaXQoJ0pTT07lvaLlvI/jga7jg6zjg53jg7zjg4jjgoLnlJ/miJDjgZnjgosnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyDjgqjjg6njg7zjgpLlj47pm4ZcbiAgICAgIGNvbnN0IHRlc3QgPSBjcmVhdGVNb2NrVGVzdCgpO1xuICAgICAgY29uc3QgdGVzdFJlc3VsdCA9IGNyZWF0ZU1vY2tGYWlsZWRUZXN0UmVzdWx0KCk7XG4gICAgICBhd2FpdCByZXBvcnRlci5vblRlc3RGaWxlUmVzdWx0KHRlc3QsIHRlc3RSZXN1bHQsIGNyZWF0ZU1vY2tBZ2dyZWdhdGVkUmVzdWx0KCkpO1xuICAgICAgXG4gICAgICAvLyDjg6zjg53jg7zjg4jnlJ/miJBcbiAgICAgIGNvbnN0IGFnZ3JlZ2F0ZWRSZXN1bHQgPSBjcmVhdGVNb2NrQWdncmVnYXRlZFJlc3VsdCgpO1xuICAgICAgYWdncmVnYXRlZFJlc3VsdC5zdWNjZXNzID0gZmFsc2U7XG4gICAgICBcbiAgICAgIGF3YWl0IHJlcG9ydGVyLm9uUnVuQ29tcGxldGUobmV3IFNldCgpLCBhZ2dyZWdhdGVkUmVzdWx0KTtcbiAgICAgIFxuICAgICAgY29uc3QganNvblBhdGggPSBwYXRoLmpvaW4odGVzdE91dHB1dERpciwgJ3Rlc3QtZXJyb3JzLmpzb24nKTtcbiAgICAgIGV4cGVjdChmcy5leGlzdHNTeW5jKGpzb25QYXRoKSkudG9CZSh0cnVlKTtcbiAgICAgIFxuICAgICAgY29uc3QganNvbkNvbnRlbnQgPSBKU09OLnBhcnNlKGZzLnJlYWRGaWxlU3luYyhqc29uUGF0aCwgJ3V0Zi04JykpO1xuICAgICAgZXhwZWN0KGpzb25Db250ZW50KS50b0hhdmVQcm9wZXJ0eSgnc3VtbWFyeScpO1xuICAgICAgZXhwZWN0KGpzb25Db250ZW50KS50b0hhdmVQcm9wZXJ0eSgnZXJyb3JHcm91cHMnKTtcbiAgICAgIGV4cGVjdChqc29uQ29udGVudC5lcnJvckdyb3VwcykudG9IYXZlTGVuZ3RoKDEpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgn44Ko44Op44O844OR44K/44O844Oz5YiG5p6QJywgKCkgPT4ge1xuICAgIGl0KCflkIzjgZjjgqjjg6njg7zjg5Hjgr/jg7zjg7PjgpLjgrDjg6vjg7zjg5fljJbjgZnjgosnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyDlkIzjgZjjgqjjg6njg7zjgr/jgqTjg5fjga7opIfmlbDjga7jg4bjgrnjg4jlpLHmlZfjgpLkvZzmiJBcbiAgICAgIGNvbnN0IGVycm9yMSA9IGNyZWF0ZU1vY2tGYWlsZWRUZXN0UmVzdWx0KCk7XG4gICAgICBjb25zdCBlcnJvcjIgPSBjcmVhdGVNb2NrRmFpbGVkVGVzdFJlc3VsdCgpO1xuICAgICAgXG4gICAgICBhd2FpdCByZXBvcnRlci5vblRlc3RGaWxlUmVzdWx0KGNyZWF0ZU1vY2tUZXN0KCcvdGVzdC9maWxlMS50ZXN0LnRzJyksIGVycm9yMSwgY3JlYXRlTW9ja0FnZ3JlZ2F0ZWRSZXN1bHQoKSk7XG4gICAgICBhd2FpdCByZXBvcnRlci5vblRlc3RGaWxlUmVzdWx0KGNyZWF0ZU1vY2tUZXN0KCcvdGVzdC9maWxlMi50ZXN0LnRzJyksIGVycm9yMiwgY3JlYXRlTW9ja0FnZ3JlZ2F0ZWRSZXN1bHQoKSk7XG4gICAgICBcbiAgICAgIGNvbnN0IGFnZ3JlZ2F0ZWRSZXN1bHQgPSBjcmVhdGVNb2NrQWdncmVnYXRlZFJlc3VsdCgpO1xuICAgICAgYWdncmVnYXRlZFJlc3VsdC5zdWNjZXNzID0gZmFsc2U7XG4gICAgICBhZ2dyZWdhdGVkUmVzdWx0Lm51bUZhaWxlZFRlc3RzID0gMjtcbiAgICAgIFxuICAgICAgYXdhaXQgcmVwb3J0ZXIub25SdW5Db21wbGV0ZShuZXcgU2V0KCksIGFnZ3JlZ2F0ZWRSZXN1bHQpO1xuICAgICAgXG4gICAgICBjb25zdCBvdXRwdXRQYXRoID0gcGF0aC5qb2luKHRlc3RPdXRwdXREaXIsICd0ZXN0LWVycm9ycy5tZCcpO1xuICAgICAgY29uc3QgY29udGVudCA9IGZzLnJlYWRGaWxlU3luYyhvdXRwdXRQYXRoLCAndXRmLTgnKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KGNvbnRlbnQpLnRvQ29udGFpbignIyMg44Ko44Op44O86Kmz57SwJyk7XG4gICAgICBleHBlY3QoY29udGVudCkudG9Db250YWluKCdDYW5ub3QgcmVhZCBwcm9wZXJ0eScpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgn44Kz44Oz44OG44Kt44K544OI5oOF5aCxJywgKCkgPT4ge1xuICAgIGl0KCfjgr3jg7zjgrnjgrPjg7zjg4njgrPjg7Pjg4bjgq3jgrnjg4jjgpLlkKvjgoHjgosnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB0ZXN0ID0gY3JlYXRlTW9ja1Rlc3QoKTtcbiAgICAgIGNvbnN0IHRlc3RSZXN1bHQgPSBjcmVhdGVNb2NrRmFpbGVkVGVzdFJlc3VsdCgpO1xuICAgICAgXG4gICAgICAvLyDjgr3jg7zjgrnjg5XjgqHjgqTjg6vjgpLjg6Ljg4Pjgq9cbiAgICAgIGNvbnN0IHNvdXJjZUZpbGUgPSBwYXRoLmpvaW4odGVzdE91dHB1dERpciwgJ3NyYycsICdleGFtcGxlLnRzJyk7XG4gICAgICBmcy5ta2RpclN5bmMocGF0aC5kaXJuYW1lKHNvdXJjZUZpbGUpLCB7IHJlY3Vyc2l2ZTogdHJ1ZSB9KTtcbiAgICAgIGZzLndyaXRlRmlsZVN5bmMoc291cmNlRmlsZSwgYFxuZnVuY3Rpb24gcHJvY2Vzc0RhdGEoZGF0YSkge1xuICByZXR1cm4gZGF0YS5mb28uYmFyO1xufVxuXG5leHBvcnQgeyBwcm9jZXNzRGF0YSB9O1xuICAgICAgYC50cmltKCkpO1xuICAgICAgXG4gICAgICBhd2FpdCByZXBvcnRlci5vblRlc3RGaWxlUmVzdWx0KHRlc3QsIHRlc3RSZXN1bHQsIGNyZWF0ZU1vY2tBZ2dyZWdhdGVkUmVzdWx0KCkpO1xuICAgICAgXG4gICAgICBjb25zdCBhZ2dyZWdhdGVkUmVzdWx0ID0gY3JlYXRlTW9ja0FnZ3JlZ2F0ZWRSZXN1bHQoKTtcbiAgICAgIGFnZ3JlZ2F0ZWRSZXN1bHQuc3VjY2VzcyA9IGZhbHNlO1xuICAgICAgXG4gICAgICBhd2FpdCByZXBvcnRlci5vblJ1bkNvbXBsZXRlKG5ldyBTZXQoKSwgYWdncmVnYXRlZFJlc3VsdCk7XG4gICAgICBcbiAgICAgIGNvbnN0IG91dHB1dFBhdGggPSBwYXRoLmpvaW4odGVzdE91dHB1dERpciwgJ3Rlc3QtZXJyb3JzLm1kJyk7XG4gICAgICBjb25zdCBjb250ZW50ID0gZnMucmVhZEZpbGVTeW5jKG91dHB1dFBhdGgsICd1dGYtOCcpO1xuICAgICAgXG4gICAgICBleHBlY3QoY29udGVudCkudG9Db250YWluKCflpLHmlZfjgrPjg7zjg4knKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ+ODkeODleOCqeODvOODnuODs+OCuScsICgpID0+IHtcbiAgICBpdCgn5aSn6YeP44Gu44Ko44Op44O844KS5Yq5546H55qE44Gr5Yem55CG44GZ44KLJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gMTAw5YCL44Gu44Ko44Op44O844KS55Sf5oiQXG4gICAgICBjb25zdCBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDEwMDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHRlc3QgPSBjcmVhdGVNb2NrVGVzdChgL3Rlc3QvZmlsZSR7aX0udGVzdC50c2ApO1xuICAgICAgICBjb25zdCB0ZXN0UmVzdWx0ID0gY3JlYXRlTW9ja0ZhaWxlZFRlc3RSZXN1bHQoKTtcbiAgICAgICAgYXdhaXQgcmVwb3J0ZXIub25UZXN0RmlsZVJlc3VsdCh0ZXN0LCB0ZXN0UmVzdWx0LCBjcmVhdGVNb2NrQWdncmVnYXRlZFJlc3VsdCgpKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgY29uc3QgYWdncmVnYXRlZFJlc3VsdCA9IGNyZWF0ZU1vY2tBZ2dyZWdhdGVkUmVzdWx0KCk7XG4gICAgICBhZ2dyZWdhdGVkUmVzdWx0LnN1Y2Nlc3MgPSBmYWxzZTtcbiAgICAgIGFnZ3JlZ2F0ZWRSZXN1bHQubnVtRmFpbGVkVGVzdHMgPSAxMDA7XG4gICAgICBcbiAgICAgIGF3YWl0IHJlcG9ydGVyLm9uUnVuQ29tcGxldGUobmV3IFNldCgpLCBhZ2dyZWdhdGVkUmVzdWx0KTtcbiAgICAgIFxuICAgICAgY29uc3QgZW5kVGltZSA9IERhdGUubm93KCk7XG4gICAgICBcbiAgICAgIGV4cGVjdChlbmRUaW1lIC0gc3RhcnRUaW1lKS50b0JlTGVzc1RoYW4oNTAwMCk7IC8vIDXnp5Lku6XlhoVcbiAgICAgIFxuICAgICAgY29uc3Qgb3V0cHV0UGF0aCA9IHBhdGguam9pbih0ZXN0T3V0cHV0RGlyLCAndGVzdC1lcnJvcnMubWQnKTtcbiAgICAgIGV4cGVjdChmcy5leGlzdHNTeW5jKG91dHB1dFBhdGgpKS50b0JlKHRydWUpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnQU5TSeOCs+ODvOODieOCteODi+OCv+OCpOOCuicsICgpID0+IHtcbiAgICBpdCgn44Ko44Op44O844Oh44OD44K744O844K444GL44KJQU5TSeOCqOOCueOCseODvOODl+OCt+ODvOOCseODs+OCueOCkumZpOWOu+OBmeOCiycsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIEFOU0njgrPjg7zjg4njgpLlkKvjgoDjgqjjg6njg7zjg6Hjg4Pjgrvjg7zjgrjjgpLkvZzmiJBcbiAgICAgIGNvbnN0IGFuc2lFcnJvck1lc3NhZ2UgPSBgXG4gICAgICAgIFxcdTAwMWJbOTZtdGVzdC9leGFtcGxlLnRlc3QudHNcXHUwMDFiWzBtOlxcdTAwMWJbOTNtMTBcXHUwMDFiWzBtOlxcdTAwMWJbOTNtNVxcdTAwMWJbMG1cbiAgICAgICAgXFx1MDAxYls5MW1UeXBlRXJyb3JcXHUwMDFiWzBtOiBDYW5ub3QgcmVhZCBwcm9wZXJ0eSAnZm9vJyBvZiB1bmRlZmluZWRcbiAgICAgICAgXG4gICAgICAgICAgXFx1MDAxYls3bTEwXFx1MDAxYlswbSB8IGNvbnN0IHJlc3VsdCA9IFxcdTAwMWJbOTFtZGF0YS5mb28uYmFyXFx1MDAxYlswbTtcbiAgICAgICAgICAgICB8ICAgICAgICAgICAgICAgIFxcdTAwMWJbOTFtfn5+fn5+fn5cXHUwMDFiWzBtXG4gICAgICBgO1xuICAgICAgXG4gICAgICBjb25zdCB0ZXN0UmVzdWx0ID0gY3JlYXRlTW9ja1Rlc3RSZXN1bHQoe1xuICAgICAgICBudW1GYWlsaW5nVGVzdHM6IDEsXG4gICAgICAgIG51bVBhc3NpbmdUZXN0czogMCxcbiAgICAgICAgZmFpbHVyZU1lc3NhZ2U6IGFuc2lFcnJvck1lc3NhZ2UsXG4gICAgICAgIHRlc3RSZXN1bHRzOiBbe1xuICAgICAgICAgIGFuY2VzdG9yVGl0bGVzOiBbJ0FOU0kgVGVzdCddLFxuICAgICAgICAgIGZhaWx1cmVEZXRhaWxzOiBbXSxcbiAgICAgICAgICBmYWlsdXJlTWVzc2FnZXM6IFthbnNpRXJyb3JNZXNzYWdlXSxcbiAgICAgICAgICBmdWxsTmFtZTogJ0FOU0kgVGVzdCBzaG91bGQgaGFuZGxlIGNvbG9yZWQgb3V0cHV0JyxcbiAgICAgICAgICBsb2NhdGlvbjogeyBsaW5lOiAxMCwgY29sdW1uOiA1IH0sXG4gICAgICAgICAgbnVtUGFzc2luZ0Fzc2VydHM6IDAsXG4gICAgICAgICAgc3RhdHVzOiAnZmFpbGVkJyxcbiAgICAgICAgICB0aXRsZTogJ3Nob3VsZCBoYW5kbGUgY29sb3JlZCBvdXRwdXQnLFxuICAgICAgICAgIGR1cmF0aW9uOiAxMCxcbiAgICAgICAgICBpbnZvY2F0aW9uczogMSxcbiAgICAgICAgICByZXRyeVJlYXNvbnM6IFtdXG4gICAgICAgIH1dXG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgY29uc3QgdGVzdCA9IGNyZWF0ZU1vY2tUZXN0KCk7XG4gICAgICBhd2FpdCByZXBvcnRlci5vblRlc3RGaWxlUmVzdWx0KHRlc3QsIHRlc3RSZXN1bHQsIGNyZWF0ZU1vY2tBZ2dyZWdhdGVkUmVzdWx0KCkpO1xuICAgICAgXG4gICAgICBjb25zdCBhZ2dyZWdhdGVkUmVzdWx0ID0gY3JlYXRlTW9ja0FnZ3JlZ2F0ZWRSZXN1bHQoKTtcbiAgICAgIGFnZ3JlZ2F0ZWRSZXN1bHQuc3VjY2VzcyA9IGZhbHNlO1xuICAgICAgYWdncmVnYXRlZFJlc3VsdC5udW1GYWlsZWRUZXN0cyA9IDE7XG4gICAgICBcbiAgICAgIGF3YWl0IHJlcG9ydGVyLm9uUnVuQ29tcGxldGUobmV3IFNldCgpLCBhZ2dyZWdhdGVkUmVzdWx0KTtcbiAgICAgIFxuICAgICAgLy8gSlNPTuODrOODneODvOODiOOCkueiuuiqjVxuICAgICAgY29uc3QganNvblBhdGggPSBwYXRoLmpvaW4odGVzdE91dHB1dERpciwgJ3Rlc3QtZXJyb3JzLmpzb24nKTtcbiAgICAgIGNvbnN0IGpzb25Db250ZW50ID0gZnMucmVhZEZpbGVTeW5jKGpzb25QYXRoLCAndXRmLTgnKTtcbiAgICAgIFxuICAgICAgLy8gQU5TSeOCs+ODvOODieOBjOmZpOWOu+OBleOCjOOBpuOBhOOCi+OBk+OBqOOCkueiuuiqjVxuICAgICAgZXhwZWN0KGpzb25Db250ZW50KS5ub3QudG9Db250YWluKCdcXFxcdTAwMWInKTtcbiAgICAgIGV4cGVjdChqc29uQ29udGVudCkubm90LnRvQ29udGFpbignXFx1MDAxYicpO1xuICAgICAgXG4gICAgICAvLyDjgqjjg6njg7zjg6Hjg4Pjgrvjg7zjgrjjga7lhoXlrrnjga/kv53mjIHjgZXjgozjgabjgYTjgovjgZPjgajjgpLnorroqo1cbiAgICAgIGNvbnN0IHBhcnNlZCA9IEpTT04ucGFyc2UoanNvbkNvbnRlbnQpO1xuICAgICAgZXhwZWN0KEpTT04uc3RyaW5naWZ5KHBhcnNlZCkpLnRvQ29udGFpbignVHlwZUVycm9yJyk7XG4gICAgICBleHBlY3QoSlNPTi5zdHJpbmdpZnkocGFyc2VkKSkudG9Db250YWluKCdDYW5ub3QgcmVhZCBwcm9wZXJ0eScpO1xuICAgICAgXG4gICAgICAvLyDjg57jg7zjgq/jg4Djgqbjg7Pjg6zjg53jg7zjg4jjgoLnorroqo1cbiAgICAgIGNvbnN0IG1kUGF0aCA9IHBhdGguam9pbih0ZXN0T3V0cHV0RGlyLCAndGVzdC1lcnJvcnMubWQnKTtcbiAgICAgIGNvbnN0IG1kQ29udGVudCA9IGZzLnJlYWRGaWxlU3luYyhtZFBhdGgsICd1dGYtOCcpO1xuICAgICAgXG4gICAgICAvLyBBTlNJ44Kz44O844OJ44GM6Zmk5Y6744GV44KM44Gm44GE44KL44GT44Go44KS56K66KqNXG4gICAgICBleHBlY3QobWRDb250ZW50KS5ub3QudG9Db250YWluKCdcXHUwMDFiJyk7XG4gICAgICBleHBlY3QobWRDb250ZW50KS50b0NvbnRhaW4oJ1R5cGVFcnJvcicpO1xuICAgIH0pO1xuICAgIFxuICAgIGl0KCfopIfpm5HjgapBTlNJ44Kz44O844OJ44KS5ZCr44KAVHlwZVNjcmlwdOOCqOODqeODvOOCkuWHpueQhuOBmeOCiycsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIFR5cGVTY3JpcHTjgrPjg7Pjg5HjgqTjg6vjgqjjg6njg7zpoqjjga7jg6Hjg4Pjgrvjg7zjgrhcbiAgICAgIGNvbnN0IHRzRXJyb3JNZXNzYWdlID0gYFxcdTAwMWJbOTZtc3JjL3Rlc3QudHNcXHUwMDFiWzBtOlxcdTAwMWJbOTNtMlxcdTAwMWJbMG06XFx1MDAxYls5M20yNlxcdTAwMWJbMG0gLSBcXHUwMDFiWzkxbWVycm9yXFx1MDAxYlswbVxcdTAwMWJbOTBtIFRTMjMwNzogXFx1MDAxYlswbUNhbm5vdCBmaW5kIG1vZHVsZSAnY2xhc3MtdmFsaWRhdG9yJy5cblxuXFx1MDAxYls3bTJcXHUwMDFiWzBtIGltcG9ydCB7IHZhbGlkYXRlIH0gZnJvbSAnY2xhc3MtdmFsaWRhdG9yJztcblxcdTAwMWJbN20gXFx1MDAxYlswbSBcXHUwMDFiWzkxbSAgICAgICAgICAgICAgICAgICAgICAgICB+fn5+fn5+fn5+fn5+fn5+flxcdTAwMWJbMG1gO1xuICAgICAgXG4gICAgICBjb25zdCB0ZXN0UmVzdWx0ID0gY3JlYXRlTW9ja1Rlc3RSZXN1bHQoe1xuICAgICAgICBudW1GYWlsaW5nVGVzdHM6IDEsXG4gICAgICAgIHRlc3RFeGVjRXJyb3I6IHtcbiAgICAgICAgICBtZXNzYWdlOiB0c0Vycm9yTWVzc2FnZSxcbiAgICAgICAgICBzdGFjazogJydcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBcbiAgICAgIGNvbnN0IHRlc3QgPSBjcmVhdGVNb2NrVGVzdCgpO1xuICAgICAgYXdhaXQgcmVwb3J0ZXIub25UZXN0RmlsZVJlc3VsdCh0ZXN0LCB0ZXN0UmVzdWx0LCBjcmVhdGVNb2NrQWdncmVnYXRlZFJlc3VsdCgpKTtcbiAgICAgIFxuICAgICAgY29uc3QgYWdncmVnYXRlZFJlc3VsdCA9IGNyZWF0ZU1vY2tBZ2dyZWdhdGVkUmVzdWx0KCk7XG4gICAgICBhZ2dyZWdhdGVkUmVzdWx0LnN1Y2Nlc3MgPSBmYWxzZTtcbiAgICAgIGFnZ3JlZ2F0ZWRSZXN1bHQubnVtRmFpbGVkVGVzdFN1aXRlcyA9IDE7XG4gICAgICBcbiAgICAgIGF3YWl0IHJlcG9ydGVyLm9uUnVuQ29tcGxldGUobmV3IFNldCgpLCBhZ2dyZWdhdGVkUmVzdWx0KTtcbiAgICAgIFxuICAgICAgY29uc3QganNvblBhdGggPSBwYXRoLmpvaW4odGVzdE91dHB1dERpciwgJ3Rlc3QtZXJyb3JzLmpzb24nKTtcbiAgICAgIGNvbnN0IGpzb25Db250ZW50ID0gZnMucmVhZEZpbGVTeW5jKGpzb25QYXRoLCAndXRmLTgnKTtcbiAgICAgIGNvbnN0IHBhcnNlZCA9IEpTT04ucGFyc2UoanNvbkNvbnRlbnQpO1xuICAgICAgXG4gICAgICAvLyBBTlNJ44Kz44O844OJ44GM6Zmk5Y6744GV44KM44CB44Ko44Op44O85YaF5a6544GM5L+d5oyB44GV44KM44Gm44GE44KL44GT44Go44KS56K66KqNXG4gICAgICBleHBlY3QoSlNPTi5zdHJpbmdpZnkocGFyc2VkKSkubm90LnRvQ29udGFpbignXFxcXHUwMDFiJyk7XG4gICAgICBleHBlY3QoSlNPTi5zdHJpbmdpZnkocGFyc2VkKSkudG9Db250YWluKCdUUzIzMDcnKTtcbiAgICAgIGV4cGVjdChKU09OLnN0cmluZ2lmeShwYXJzZWQpKS50b0NvbnRhaW4oJ2NsYXNzLXZhbGlkYXRvcicpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgn44Ko44Op44O844OP44Oz44OJ44Oq44Oz44KwJywgKCkgPT4ge1xuICAgIGl0KCfnhKHlirnjgarlh7rlipvjg5HjgrnjgpLlh6bnkIbjgZnjgosnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBpbnZhbGlkUmVwb3J0ZXIgPSBuZXcgSmVzdEFJUmVwb3J0ZXIoe30sIHtcbiAgICAgICAgb3V0cHV0UGF0aDogJy9pbnZhbGlkL3BhdGgvdGhhdC9jYW5ub3QvZXhpc3QvcmVwb3J0Lm1kJ1xuICAgICAgfSk7XG4gICAgICBcbiAgICAgIGNvbnN0IHRlc3QgPSBjcmVhdGVNb2NrVGVzdCgpO1xuICAgICAgY29uc3QgdGVzdFJlc3VsdCA9IGNyZWF0ZU1vY2tGYWlsZWRUZXN0UmVzdWx0KCk7XG4gICAgICBhd2FpdCBpbnZhbGlkUmVwb3J0ZXIub25UZXN0RmlsZVJlc3VsdCh0ZXN0LCB0ZXN0UmVzdWx0LCBjcmVhdGVNb2NrQWdncmVnYXRlZFJlc3VsdCgpKTtcbiAgICAgIFxuICAgICAgY29uc3QgYWdncmVnYXRlZFJlc3VsdCA9IGNyZWF0ZU1vY2tBZ2dyZWdhdGVkUmVzdWx0KCk7XG4gICAgICBhZ2dyZWdhdGVkUmVzdWx0LnN1Y2Nlc3MgPSBmYWxzZTtcbiAgICAgIFxuICAgICAgLy8g44Ko44Op44O844KS44K544Ot44O844Gb44Ga44Gr5Yem55CG44KS57aZ57aaXG4gICAgICBhd2FpdCBleHBlY3QoXG4gICAgICAgIGludmFsaWRSZXBvcnRlci5vblJ1bkNvbXBsZXRlKG5ldyBTZXQoKSwgYWdncmVnYXRlZFJlc3VsdClcbiAgICAgICkucmVzb2x2ZXMubm90LnRvVGhyb3coKTtcbiAgICB9KTtcbiAgfSk7XG59KTsiXSwidmVyc2lvbiI6M30=