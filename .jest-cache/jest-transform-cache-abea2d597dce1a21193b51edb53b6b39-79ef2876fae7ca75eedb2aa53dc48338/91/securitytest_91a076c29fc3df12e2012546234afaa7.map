{"file":"/Users/sasakama/Projects/Rimor/test/security/types/security.test.ts","mappings":"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","names":[],"sources":["/Users/sasakama/Projects/Rimor/test/security/types/security.test.ts"],"sourcesContent":["/**\n * 型ベースセキュリティ解析 - セキュリティ型システムのテスト\n */\n\nimport {\n  SecurityType,\n  SecurityValidation,\n  SecurityRequirement,\n  SecureTest,\n  UnsafeTest,\n  ValidatedAuthTest,\n  ValidatedInputTest,\n  AuthTestCoverage,\n  BoundaryCondition,\n  PotentialVulnerability,\n  TestCase,\n  TestStatement,\n  Variable,\n  SecurityTypeAnnotation,\n  TypeInferenceResult,\n  CompileTimeResult,\n  SecurityIssue,\n  SecurityTestMetrics\n} from '../../../src/security/types/security';\nimport { TaintLevel, TaintSource, SanitizerType } from '../../../src/security/types/taint';\n\ndescribe('SecurityType', () => {\n  it('セキュリティ型が適切に定義されていること', () => {\n    expect(SecurityType.USER_INPUT).toBe('user-input');\n    expect(SecurityType.AUTH_TOKEN).toBe('auth-token');\n    expect(SecurityType.VALIDATED_AUTH).toBe('validated-auth');\n    expect(SecurityType.VALIDATED_INPUT).toBe('validated-input');\n    expect(SecurityType.SANITIZED_DATA).toBe('sanitized-data');\n    expect(SecurityType.SECURE_SQL).toBe('secure-sql');\n    expect(SecurityType.SECURE_HTML).toBe('secure-html');\n  });\n});\n\ndescribe('インターフェース定義のテスト', () => {\n  describe('SecurityValidation', () => {\n    it('検証情報を正しく定義できること', () => {\n      const validation: SecurityValidation = {\n        type: 'input-validation',\n        location: {\n          file: 'auth.test.ts',\n          line: 42,\n          method: 'validateUserInput'\n        },\n        timestamp: new Date('2025-07-30T10:00:00Z')\n      };\n\n      expect(validation.type).toBe('input-validation');\n      expect(validation.location.file).toBe('auth.test.ts');\n      expect(validation.location.line).toBe(42);\n      expect(validation.location.method).toBe('validateUserInput');\n      expect(validation.timestamp).toBeInstanceOf(Date);\n    });\n  });\n\n  describe('SecurityRequirement', () => {\n    it('セキュリティ要件を正しく定義できること', () => {\n      const requirement: SecurityRequirement = {\n        id: 'AUTH-001',\n        type: 'auth-test',\n        required: ['login-success', 'login-failure', 'token-expiry'],\n        minTaintLevel: TaintLevel.POSSIBLY_TAINTED,\n        applicableSources: [TaintSource.USER_INPUT, TaintSource.EXTERNAL_API]\n      };\n\n      expect(requirement.id).toBe('AUTH-001');\n      expect(requirement.type).toBe('auth-test');\n      expect(requirement.required).toContain('login-success');\n      expect(requirement.minTaintLevel).toBe(TaintLevel.POSSIBLY_TAINTED);\n      expect(requirement.applicableSources).toContain(TaintSource.USER_INPUT);\n    });\n  });\n\n  describe('BoundaryCondition', () => {\n    it('境界条件を正しく定義できること', () => {\n      const boundaries: BoundaryCondition[] = [\n        { type: 'min', value: 0, tested: true },\n        { type: 'max', value: 100, tested: false },\n        { type: 'null', value: null, tested: true },\n        { type: 'empty', value: '', tested: true },\n        { type: 'invalid-format', value: 'not-a-number', tested: false },\n        { type: 'overflow', value: Number.MAX_SAFE_INTEGER + 1, tested: true }\n      ];\n\n      expect(boundaries).toHaveLength(6);\n      expect(boundaries[0].type).toBe('min');\n      expect(boundaries[1].tested).toBe(false);\n      expect(boundaries[2].value).toBeNull();\n    });\n  });\n\n  describe('PotentialVulnerability', () => {\n    it('潜在的脆弱性を正しく定義できること', () => {\n      const vulnerability: PotentialVulnerability = {\n        type: 'sql-injection',\n        description: 'ユーザー入力が直接SQLクエリに組み込まれています',\n        impact: 'critical',\n        location: {\n          file: 'userRepository.ts',\n          line: 123,\n          method: 'findUserByName'\n        },\n        fixSuggestion: 'パラメータ化クエリを使用してください'\n      };\n\n      expect(vulnerability.type).toBe('sql-injection');\n      expect(vulnerability.impact).toBe('critical');\n      expect(vulnerability.location.method).toBe('findUserByName');\n      expect(vulnerability.fixSuggestion).toContain('パラメータ化クエリ');\n    });\n  });\n\n  describe('TestCase', () => {\n    it('テストケースを正しく定義できること', () => {\n      const testCase: TestCase = {\n        name: 'should validate user input',\n        file: 'validation.test.ts',\n        content: 'it(\"should validate user input\", () => { /* test code */ })',\n        metadata: {\n          framework: 'jest',\n          language: 'typescript',\n          lastModified: new Date('2025-07-30T10:00:00Z')\n        }\n      };\n\n      expect(testCase.name).toBe('should validate user input');\n      expect(testCase.metadata.framework).toBe('jest');\n      expect(testCase.metadata.language).toBe('typescript');\n    });\n  });\n\n  describe('TestStatement', () => {\n    it('各種テスト文を正しく定義できること', () => {\n      const assignmentStmt: TestStatement = {\n        type: 'assignment',\n        content: 'const userInput = request.body.name;',\n        location: { line: 10, column: 5 },\n        lhs: 'userInput',\n        rhs: 'request.body.name'\n      };\n\n      const methodCallStmt: TestStatement = {\n        type: 'methodCall',\n        content: 'const result = sanitizeInput(userInput);',\n        location: { line: 11, column: 5 },\n        method: 'sanitizeInput',\n        arguments: ['userInput'],\n        returnValue: 'result'\n      };\n\n      const assertionStmt: TestStatement = {\n        type: 'assertion',\n        content: 'expect(result).toBe(\"sanitized\");',\n        location: { line: 12, column: 5 },\n        actual: 'result',\n        expected: '\"sanitized\"',\n        isNegativeAssertion: false\n      };\n\n      expect(assignmentStmt.type).toBe('assignment');\n      expect(assignmentStmt.lhs).toBe('userInput');\n      expect(methodCallStmt.method).toBe('sanitizeInput');\n      expect(assertionStmt.isNegativeAssertion).toBe(false);\n    });\n  });\n\n  describe('Variable', () => {\n    it('変数情報を正しく定義できること', () => {\n      const variables: Variable[] = [\n        { name: 'userInput', type: 'string', scope: 'local' },\n        { name: 'userId', type: 'number', scope: 'parameter' },\n        { name: 'authToken', type: 'string', scope: 'field' },\n        { name: 'CONFIG', type: 'object', scope: 'global' }\n      ];\n\n      expect(variables[0].scope).toBe('local');\n      expect(variables[1].scope).toBe('parameter');\n      expect(variables[2].scope).toBe('field');\n      expect(variables[3].scope).toBe('global');\n    });\n  });\n\n  describe('SecurityTypeAnnotation', () => {\n    it('セキュリティ型注釈を正しく定義できること', () => {\n      const annotation: SecurityTypeAnnotation = {\n        target: 'userInput',\n        securityType: SecurityType.USER_INPUT,\n        securityLevel: TaintLevel.LIKELY_TAINTED,\n        taintLevel: TaintLevel.LIKELY_TAINTED,\n        confidence: 0.95,\n        evidence: [\n          'Variable receives data from request.body',\n          'No sanitization detected before use'\n        ],\n        flowPolicy: 'must-sanitize-before-use'\n      };\n\n      expect(annotation.target).toBe('userInput');\n      expect(annotation.securityType).toBe(SecurityType.USER_INPUT);\n      expect(annotation.confidence).toBe(0.95);\n      expect(annotation.evidence).toHaveLength(2);\n    });\n\n    it('レガシー互換性のためにvariableフィールドも使用できること', () => {\n      const annotation: SecurityTypeAnnotation = {\n        variable: 'legacyVar',\n        securityType: SecurityType.VALIDATED_INPUT,\n        taintLevel: TaintLevel.CLEAN,\n        confidence: 1.0,\n        evidence: ['Validated by input validator']\n      };\n\n      expect(annotation.variable).toBe('legacyVar');\n      expect(annotation.target).toBeUndefined();\n    });\n  });\n\n  describe('TypeInferenceResult', () => {\n    it('型推論結果を正しく定義できること', () => {\n      const result: TypeInferenceResult = {\n        annotations: [\n          {\n            target: 'userInput',\n            securityType: SecurityType.USER_INPUT,\n            taintLevel: TaintLevel.LIKELY_TAINTED,\n            confidence: 0.9,\n            evidence: ['From request body']\n          }\n        ],\n        statistics: {\n          totalVariables: 10,\n          inferred: 8,\n          failed: 2,\n          averageConfidence: 0.85\n        },\n        inferenceTime: 150\n      };\n\n      expect(result.annotations).toHaveLength(1);\n      expect(result.statistics.inferred).toBe(8);\n      expect(result.statistics.failed).toBe(2);\n      expect(result.inferenceTime).toBe(150);\n    });\n  });\n\n  describe('CompileTimeResult', () => {\n    it('コンパイル時解析結果を正しく定義できること', () => {\n      const result: CompileTimeResult = {\n        issues: [\n          {\n            id: 'SEC-001',\n            severity: 'high',\n            type: 'missing-sanitizer',\n            message: 'ユーザー入力がサニタイズされていません',\n            location: {\n              file: 'controller.ts',\n              line: 42,\n              column: 10,\n              method: 'handleRequest'\n            },\n            fixSuggestion: 'sanitizeInput()を使用してください'\n          }\n        ],\n        executionTime: 500,\n        runtimeImpact: 0,\n        statistics: {\n          filesAnalyzed: 25,\n          methodsAnalyzed: 150,\n          inferenceSuccessRate: 0.92\n        }\n      };\n\n      expect(result.issues).toHaveLength(1);\n      expect(result.issues[0].severity).toBe('high');\n      expect(result.runtimeImpact).toBe(0);\n      expect(result.statistics.inferenceSuccessRate).toBe(0.92);\n    });\n  });\n\n  describe('SecurityIssue', () => {\n    it('セキュリティ問題を正しく定義できること', () => {\n      const issue: SecurityIssue = {\n        id: 'TAINT-001',\n        severity: 'critical',\n        type: 'unsafe-taint-flow',\n        message: '汚染されたデータが安全でないシンクに流れています',\n        location: {\n          file: 'database.ts',\n          line: 100,\n          column: 15,\n          method: 'executeQuery'\n        },\n        fixSuggestion: 'SQLクエリをパラメータ化してください',\n        taintInfo: {\n          source: TaintSource.USER_INPUT,\n          confidence: 0.98,\n          location: {\n            file: 'database.ts',\n            line: 100,\n            column: 15\n          },\n          tracePath: [],\n          securityRules: ['no-raw-sql']\n        }\n      };\n\n      expect(issue.type).toBe('unsafe-taint-flow');\n      expect(issue.severity).toBe('critical');\n      expect(issue.taintInfo?.source).toBe(TaintSource.USER_INPUT);\n    });\n  });\n\n  describe('SecurityTestMetrics', () => {\n    it('セキュリティテストメトリクスを正しく定義できること', () => {\n      const metrics: SecurityTestMetrics = {\n        securityCoverage: {\n          authentication: 0.85,\n          inputValidation: 0.92,\n          apiSecurity: 0.78,\n          overall: 0.85\n        },\n        taintFlowDetection: 0.94,\n        sanitizerCoverage: 0.88,\n        invariantCompliance: 0.91\n      };\n\n      expect(metrics.securityCoverage.authentication).toBe(0.85);\n      expect(metrics.securityCoverage.overall).toBe(0.85);\n      expect(metrics.taintFlowDetection).toBe(0.94);\n      expect(metrics.invariantCompliance).toBe(0.91);\n    });\n  });\n});\n\ndescribe('ブランド型のテスト', () => {\n  describe('SecureTest', () => {\n    it('セキュアテスト型を使用できること', () => {\n      const baseTest: TestCase = {\n        name: 'secure authentication test',\n        file: 'auth.test.ts',\n        content: 'test code',\n        metadata: {\n          framework: 'jest',\n          language: 'typescript',\n          lastModified: new Date()\n        }\n      };\n\n      const secureTest: SecureTest<TestCase> = {\n        ...baseTest,\n        __validated: [\n          {\n            type: 'auth-validation',\n            location: {\n              file: 'auth.test.ts',\n              line: 10,\n              method: 'testAuth'\n            },\n            timestamp: new Date()\n          }\n        ],\n        __taintLevel: TaintLevel.CLEAN,\n        __securityType: SecurityType.VALIDATED_AUTH\n      };\n\n      expect(secureTest.name).toBe('secure authentication test');\n      expect(secureTest.__taintLevel).toBe(TaintLevel.CLEAN);\n      expect(secureTest.__securityType).toBe(SecurityType.VALIDATED_AUTH);\n    });\n  });\n\n  describe('UnsafeTest', () => {\n    it('危険テスト型を使用できること', () => {\n      const baseTest: TestCase = {\n        name: 'unsafe test',\n        file: 'unsafe.test.ts',\n        content: 'test code',\n        metadata: {\n          framework: 'jest',\n          language: 'typescript',\n          lastModified: new Date()\n        }\n      };\n\n      const unsafeTest: UnsafeTest<TestCase> = {\n        ...baseTest,\n        __missing: [\n          {\n            id: 'REQ-001',\n            type: 'input-validation',\n            required: ['boundary-test', 'sanitization-test'],\n            minTaintLevel: TaintLevel.POSSIBLY_TAINTED,\n            applicableSources: [TaintSource.USER_INPUT]\n          }\n        ],\n        __vulnerabilities: [\n          {\n            type: 'xss',\n            description: 'HTMLが適切にエスケープされていません',\n            impact: 'high',\n            location: {\n              file: 'unsafe.test.ts',\n              line: 20,\n              method: 'renderHTML'\n            },\n            fixSuggestion: 'escapeHtml()を使用してください'\n          }\n        ],\n        __riskLevel: 'high'\n      };\n\n      expect(unsafeTest.__missing).toHaveLength(1);\n      expect(unsafeTest.__vulnerabilities[0].type).toBe('xss');\n      expect(unsafeTest.__riskLevel).toBe('high');\n    });\n  });\n\n  describe('ValidatedAuthTest', () => {\n    it('認証テスト型を使用できること', () => {\n      const baseTest: TestCase = {\n        name: 'authentication test',\n        file: 'auth.test.ts',\n        content: 'test code',\n        metadata: {\n          framework: 'jest',\n          language: 'typescript',\n          lastModified: new Date()\n        }\n      };\n\n      const authTest: ValidatedAuthTest = {\n        ...baseTest,\n        __brand: 'auth-validated',\n        __covers: ['success', 'failure', 'token-expiry', 'brute-force'],\n        __tokenValidation: true,\n        __sessionManagement: true\n      };\n\n      expect(authTest.__brand).toBe('auth-validated');\n      expect(authTest.__covers).toContain('token-expiry');\n      expect(authTest.__tokenValidation).toBe(true);\n    });\n  });\n\n  describe('ValidatedInputTest', () => {\n    it('入力検証テスト型を使用できること', () => {\n      const baseTest: TestCase = {\n        name: 'input validation test',\n        file: 'validation.test.ts',\n        content: 'test code',\n        metadata: {\n          framework: 'jest',\n          language: 'typescript',\n          lastModified: new Date()\n        }\n      };\n\n      const inputTest: ValidatedInputTest = {\n        ...baseTest,\n        __brand: 'input-validated',\n        __sanitizers: [SanitizerType.HTML_ESCAPE, SanitizerType.SQL_ESCAPE],\n        __boundaries: [\n          { type: 'min', value: 0, tested: true },\n          { type: 'max', value: 100, tested: true },\n          { type: 'null', value: null, tested: true }\n        ],\n        __typeValidation: true\n      };\n\n      expect(inputTest.__brand).toBe('input-validated');\n      expect(inputTest.__sanitizers).toContain(SanitizerType.HTML_ESCAPE);\n      expect(inputTest.__boundaries).toHaveLength(3);\n      expect(inputTest.__typeValidation).toBe(true);\n    });\n  });\n});\n\ndescribe('AuthTestCoverage型のテスト', () => {\n  it('すべての認証テストカバレッジタイプが使用できること', () => {\n    const coverageTypes: AuthTestCoverage[] = [\n      'success',\n      'failure',\n      'token-expiry',\n      'brute-force',\n      'session-hijack',\n      'csrf',\n      'privilege-escalation'\n    ];\n\n    expect(coverageTypes).toHaveLength(7);\n    coverageTypes.forEach(coverage => {\n      expect(typeof coverage).toBe('string');\n    });\n  });\n});"],"version":3}