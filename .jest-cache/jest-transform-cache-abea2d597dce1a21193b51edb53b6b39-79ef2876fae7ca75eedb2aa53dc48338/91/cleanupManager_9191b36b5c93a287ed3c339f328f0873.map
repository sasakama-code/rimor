{"file":"/Users/sasakama/Projects/Rimor/src/utils/cleanupManager.ts","mappings":"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","names":[],"sources":["/Users/sasakama/Projects/Rimor/src/utils/cleanupManager.ts"],"sourcesContent":["/**\n * クリーンアップマネージャー\n * 不要なファイルの自動削除とプロジェクト整理を担当\n */\n\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { errorHandler } from './errorHandler';\n\nexport interface CleanupRule {\n  pattern: string | RegExp;\n  reason: string;\n  enabled: boolean;\n}\n\nexport class CleanupManager {\n  private static instance: CleanupManager;\n  private readonly defaultRules: CleanupRule[] = [\n    {\n      pattern: /^src\\/plugins\\/generated\\/saved-plugin\\.ts$/,\n      reason: \"\",\n      enabled: true\n    },\n    // 安全性重視: 他のプラグインファイルは削除対象から除外\n    // ユーザーが意図的に作成したファイルの削除を防ぐ\n    {\n      pattern: /\\.tmp$/,\n      reason: \"\",\n      enabled: true\n    },\n    {\n      pattern: /\\.bak$/,\n      reason: \"\",\n      enabled: true\n    }\n  ];\n\n  private constructor() {}\n\n  static getInstance(): CleanupManager {\n    if (!CleanupManager.instance) {\n      CleanupManager.instance = new CleanupManager();\n    }\n    return CleanupManager.instance;\n  }\n\n  /**\n   * プロジェクト開始時のクリーンアップ実行\n   * @param projectRoot プロジェクトルートディレクトリ\n   */\n  async performStartupCleanup(projectRoot: string = process.cwd()): Promise<void> {\n    console.log(\"\");\n    \n    try {\n      const cleanedFiles = await this.cleanupByRules(projectRoot);\n      \n      if (cleanedFiles.length > 0) {\n        console.log(\"\");\n        cleanedFiles.forEach(file => {\n          console.log(`   - ${file.relativePath} (${file.reason})`);\n        });\n      } else {\n        console.log(\"\");\n      }\n    } catch (error) {\n      errorHandler.handleError(\n        error,\n        undefined,\n        \"\",\n        { projectRoot },\n        true\n      );\n    }\n  }\n\n  /**\n   * 特定のファイルが問題を起こしている場合の緊急削除\n   * @param filePath 問題のあるファイルのパス\n   * @param reason 削除理由\n   */\n  async emergencyDelete(filePath: string, reason: string): Promise<boolean> {\n    try {\n      const absolutePath = path.resolve(filePath);\n      \n      if (!fs.existsSync(absolutePath)) {\n        return true; // 既に存在しない場合は削除成功とみなす\n      }\n\n      fs.unlinkSync(absolutePath);\n      console.log(\"\");\n      return true;\n    } catch (error) {\n      errorHandler.handleFileError(error, filePath, 'delete');\n      return false;\n    }\n  }\n\n  /**\n   * コンパイルエラーの原因となるファイルを検出・削除（安全性重視）\n   * @param errorMessage TypeScriptコンパイルエラーメッセージ\n   */\n  async handleCompileError(errorMessage: string): Promise<boolean> {\n    // saved-plugin.tsによるエラーのみを自動削除対象とする\n    const savedPluginError = errorMessage.includes('saved-plugin.ts') && \n                             (errorMessage.includes('Cannot find name \\'IPlugin\\'') ||\n                              errorMessage.includes('TS2552') ||\n                              errorMessage.includes('TS2304'));\n    \n    if (savedPluginError) {\n      const savedPluginPath = 'src/plugins/generated/saved-plugin.ts';\n      console.log(\"\");\n      return await this.emergencyDelete(\n        savedPluginPath, \n        \"\"\n      );\n    }\n\n    // その他のプラグインファイルエラーは警告のみ表示（削除しない）\n    const pluginGeneratedMatch = errorMessage.match(/src\\/plugins\\/generated\\/([^:]+\\.ts)/);\n    if (pluginGeneratedMatch) {\n      const problematicFile = pluginGeneratedMatch[0];\n      console.log(\"\");\n      console.log('   ' + \"\");\n      console.log('   ' + \"\");\n      // 削除は行わず、falseを返す\n      return false;\n    }\n\n    return false;\n  }\n\n  /**\n   * ルールベースのクリーンアップ実行\n   * @param rootDir 対象ディレクトリ\n   */\n  private async cleanupByRules(rootDir: string): Promise<Array<{relativePath: string, reason: string}>> {\n    const cleanedFiles: Array<{relativePath: string, reason: string}> = [];\n    const enabledRules = this.defaultRules.filter(rule => rule.enabled);\n\n    for (const rule of enabledRules) {\n      const matches = await this.findFilesByRule(rootDir, rule);\n      \n      for (const match of matches) {\n        try {\n          fs.unlinkSync(match.absolutePath);\n          cleanedFiles.push({\n            relativePath: match.relativePath,\n            reason: rule.reason\n          });\n        } catch (error) {\n          errorHandler.handleFileError(error, match.absolutePath, 'delete');\n        }\n      }\n    }\n\n    return cleanedFiles;\n  }\n\n  /**\n   * ルールに合致するファイルを検索\n   * @param rootDir 検索対象ディレクトリ\n   * @param rule クリーンアップルール\n   */\n  private async findFilesByRule(\n    rootDir: string, \n    rule: CleanupRule\n  ): Promise<Array<{absolutePath: string, relativePath: string}>> {\n    const matches: Array<{absolutePath: string, relativePath: string}> = [];\n\n    const searchDir = (dir: string): void => {\n      if (!fs.existsSync(dir)) return;\n\n      const entries = fs.readdirSync(dir, { withFileTypes: true });\n\n      for (const entry of entries) {\n        const fullPath = path.join(dir, entry.name);\n        const relativePath = path.relative(rootDir, fullPath);\n\n        if (entry.isDirectory()) {\n          // node_modules等の除外\n          if (!entry.name.startsWith('.') && entry.name !== 'node_modules') {\n            searchDir(fullPath);\n          }\n        } else if (entry.isFile()) {\n          let isMatch = false;\n\n          if (rule.pattern instanceof RegExp) {\n            isMatch = rule.pattern.test(relativePath);\n          } else {\n            isMatch = relativePath.includes(rule.pattern);\n          }\n\n          if (isMatch) {\n            matches.push({\n              absolutePath: fullPath,\n              relativePath: relativePath\n            });\n          }\n        }\n      }\n    };\n\n    searchDir(rootDir);\n    return matches;\n  }\n\n  /**\n   * クリーンアップルールの追加\n   * @param pattern ファイルパターン\n   * @param reason 削除理由\n   * @param enabled 有効かどうか\n   */\n  addRule(pattern: string | RegExp, reason: string, enabled: boolean = true): void {\n    this.defaultRules.push({ pattern, reason, enabled });\n  }\n\n  /**\n   * 現在のクリーンアップルールを取得\n   */\n  getRules(): CleanupRule[] {\n    return [...this.defaultRules];\n  }\n}\n\n/**\n * シングルトンインスタンスへの便利なアクセス\n */\nexport const cleanupManager = CleanupManager.getInstance();"],"version":3}