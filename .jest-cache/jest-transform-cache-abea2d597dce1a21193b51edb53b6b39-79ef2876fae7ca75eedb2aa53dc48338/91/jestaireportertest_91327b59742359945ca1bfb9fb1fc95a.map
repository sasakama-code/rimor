{"file":"/Users/sasakama/Projects/Rimor/test/testing/jest-ai-reporter.test.ts","mappings":"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","names":[],"sources":["/Users/sasakama/Projects/Rimor/test/testing/jest-ai-reporter.test.ts"],"sourcesContent":["import { JestAIReporter } from '../../src/testing/jest-ai-reporter';\nimport type { Test, TestResult, AggregatedResult } from '@jest/reporters';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\n// モックデータ生成ヘルパー\nconst createMockTestResult = (overrides: Partial<TestResult> = {}): TestResult => ({\n  leaks: false,\n  numFailingTests: 0,\n  numPassingTests: 1,\n  numPendingTests: 0,\n  numTodoTests: 0,\n  openHandles: [],\n  perfStats: {\n    start: Date.now() - 1000,\n    end: Date.now(),\n    runtime: 1000,\n    slow: false\n  },\n  snapshot: {\n    added: 0,\n    matched: 0,\n    unchecked: 0,\n    uncheckedKeys: [],\n    unmatched: 0,\n    updated: 0,\n    fileDeleted: false\n  },\n  testFilePath: '/test/example.test.ts',\n  testResults: [],\n  skipped: false,\n  displayName: undefined,\n  failureMessage: null,\n  console: undefined,\n  testExecError: undefined,\n  coverage: undefined,\n  v8Coverage: undefined,\n  ...overrides\n});\n\nconst createMockFailedTestResult = (): TestResult => {\n  const failureMessage = `\n    FAIL test/example.test.ts\n      ● Test suite failed to run\n\n        TypeError: Cannot read property 'foo' of undefined\n\n          10 | function processData(data) {\n          11 |   return data.foo.bar;\n             |               ^\n          12 | }\n\n          at processData (src/example.ts:11:15)\n          at Object.<anonymous> (test/example.test.ts:5:10)\n  `;\n\n  return createMockTestResult({\n    numFailingTests: 1,\n    numPassingTests: 0,\n    failureMessage,\n    testResults: [{\n      ancestorTitles: ['Example Suite'],\n      failureDetails: [{\n        message: \"Cannot read property 'foo' of undefined\",\n        stack: failureMessage\n      }],\n      failureMessages: [failureMessage],\n      fullName: 'Example Suite should process data correctly',\n      location: { line: 5, column: 10 },\n      numPassingAsserts: 0,\n      status: 'failed',\n      title: 'should process data correctly',\n      duration: 10,\n      invocations: 1,\n      retryReasons: []\n    }]\n  });\n};\n\nconst createMockTest = (testPath: string = '/test/example.test.ts'): Test => ({\n  context: {\n    config: {\n      rootDir: '/test',\n      transform: []\n    },\n    hasteFS: {},\n    resolver: {},\n    moduleMap: {}\n  } as any, // Test.contextの型が複雑なため、as anyを使用\n  path: testPath,\n  duration: 1000\n});\n\nconst createMockAggregatedResult = (): AggregatedResult => ({\n  numFailedTestSuites: 0,\n  numFailedTests: 0,\n  numPassedTestSuites: 1,\n  numPassedTests: 10,\n  numPendingTestSuites: 0,\n  numPendingTests: 0,\n  numRuntimeErrorTestSuites: 0,\n  numTodoTests: 0,\n  numTotalTestSuites: 1,\n  numTotalTests: 10,\n  openHandles: [],\n  snapshot: {\n    added: 0,\n    didUpdate: false,\n    failure: false,\n    filesAdded: 0,\n    filesRemoved: 0,\n    filesRemovedList: [],\n    filesUnmatched: 0,\n    filesUpdated: 0,\n    matched: 0,\n    total: 0,\n    unchecked: 0,\n    uncheckedKeysByFile: [],\n    unmatched: 0,\n    updated: 0\n  },\n  startTime: Date.now() - 10000,\n  success: true,\n  testResults: [],\n  wasInterrupted: false\n});\n\ndescribe('JestAIReporter', () => {\n  const testOutputDir = path.join(__dirname, 'test-reporter-output');\n  let reporter: JestAIReporter;\n  let consoleLogSpy: jest.SpyInstance;\n\n  beforeEach(() => {\n    const globalConfig = { rootDir: '/test' };\n    const options = {\n      outputPath: path.join(testOutputDir, 'test-errors.md'),\n      enableConsoleOutput: true\n    };\n    \n    reporter = new JestAIReporter(globalConfig, options);\n    consoleLogSpy = jest.spyOn(console, 'log').mockImplementation();\n    \n    if (!fs.existsSync(testOutputDir)) {\n      fs.mkdirSync(testOutputDir, { recursive: true });\n    }\n  });\n\n  afterEach(() => {\n    consoleLogSpy.mockRestore();\n    if (fs.existsSync(testOutputDir)) {\n      fs.rmSync(testOutputDir, { recursive: true, force: true });\n    }\n  });\n\n  describe('初期化', () => {\n    it('レポーターインスタンスを作成できる', () => {\n      expect(reporter).toBeInstanceOf(JestAIReporter);\n    });\n\n    it('デフォルト設定で初期化できる', () => {\n      const defaultReporter = new JestAIReporter({}, {});\n      expect(defaultReporter).toBeInstanceOf(JestAIReporter);\n    });\n\n    it('出力ディレクトリを自動作成する', () => {\n      const customDir = path.join(testOutputDir, 'custom', 'nested');\n      const customReporter = new JestAIReporter({}, {\n        outputPath: path.join(customDir, 'errors.md')\n      });\n      \n      expect(customReporter).toBeInstanceOf(JestAIReporter);\n    });\n  });\n\n  describe('onRunStart', () => {\n    it('テスト実行開始時にエラーをリセットする', () => {\n      const aggregatedResult = createMockAggregatedResult();\n      \n      // CI環境変数を一時的にクリア\n      const originalCI = process.env.CI;\n      delete process.env.CI;\n      \n      reporter.onRunStart(aggregatedResult, {});\n      \n      expect(consoleLogSpy).toHaveBeenCalledWith(\n        expect.stringContaining('AI Error Reporter: エラー収集を開始します')\n      );\n      \n      // CI環境変数を復元\n      if (originalCI !== undefined) {\n        process.env.CI = originalCI;\n      }\n    });\n\n    it('コンソール出力を無効化できる', () => {\n      const silentReporter = new JestAIReporter({}, {\n        enableConsoleOutput: false\n      });\n      \n      silentReporter.onRunStart(createMockAggregatedResult(), {});\n      \n      expect(consoleLogSpy).not.toHaveBeenCalled();\n    });\n\n    it('CI環境では最小限のコンソール出力にする', () => {\n      const aggregatedResult = createMockAggregatedResult();\n      \n      // CI環境変数を設定\n      const originalCI = process.env.CI;\n      process.env.CI = 'true';\n      \n      reporter.onRunStart(aggregatedResult, {});\n      \n      expect(consoleLogSpy).toHaveBeenCalledWith(\n        expect.stringContaining('AI Error Reporter: 有効')\n      );\n      expect(consoleLogSpy).not.toHaveBeenCalledWith(\n        expect.stringContaining('エラー収集を開始します')\n      );\n      \n      // CI環境変数を復元\n      if (originalCI !== undefined) {\n        process.env.CI = originalCI;\n      } else {\n        delete process.env.CI;\n      }\n    });\n  });\n\n  describe('onTestFileResult', () => {\n    it('成功したテストを処理する', async () => {\n      const test = createMockTest();\n      const testResult = createMockTestResult();\n      \n      await reporter.onTestFileResult(test, testResult, createMockAggregatedResult());\n      \n      // エラーがないのでコレクションされない\n      expect((reporter as any).collectedErrors).toHaveLength(0);\n    });\n\n    it('失敗したテストのエラーを収集する', async () => {\n      const test = createMockTest();\n      const testResult = createMockFailedTestResult();\n      \n      await reporter.onTestFileResult(test, testResult, createMockAggregatedResult());\n      \n      expect((reporter as any).collectedErrors).toHaveLength(1);\n      expect((reporter as any).collectedErrors[0]).toHaveProperty('testFile');\n      expect((reporter as any).collectedErrors[0]).toHaveProperty('error');\n    });\n\n    it('複数の失敗したテストを処理する', async () => {\n      const test1 = createMockTest('/test/file1.test.ts');\n      const test2 = createMockTest('/test/file2.test.ts');\n      const testResult1 = createMockFailedTestResult();\n      const testResult2 = createMockFailedTestResult();\n      \n      await reporter.onTestFileResult(test1, testResult1, createMockAggregatedResult());\n      await reporter.onTestFileResult(test2, testResult2, createMockAggregatedResult());\n      \n      expect((reporter as any).collectedErrors).toHaveLength(2);\n    });\n  });\n\n  describe('onRunComplete', () => {\n    it('エラーがない場合は成功メッセージを表示する', async () => {\n      const aggregatedResult = createMockAggregatedResult();\n      \n      // CI環境変数を一時的にクリア\n      const originalCI = process.env.CI;\n      delete process.env.CI;\n      \n      await reporter.onRunComplete(new Set(), aggregatedResult);\n      \n      expect(consoleLogSpy).toHaveBeenCalledWith(\n        expect.stringContaining('すべてのテストがパスしました')\n      );\n      \n      // CI環境変数を復元\n      if (originalCI !== undefined) {\n        process.env.CI = originalCI;\n      }\n    });\n\n    it('エラーレポートを生成する', async () => {\n      // エラーを収集\n      const test = createMockTest();\n      const testResult = createMockFailedTestResult();\n      await reporter.onTestFileResult(test, testResult, createMockAggregatedResult());\n      \n      // レポート生成\n      const aggregatedResult = createMockAggregatedResult();\n      aggregatedResult.success = false;\n      aggregatedResult.numFailedTests = 1;\n      \n      await reporter.onRunComplete(new Set(), aggregatedResult);\n      \n      const outputPath = path.join(testOutputDir, 'test-errors.md');\n      expect(fs.existsSync(outputPath)).toBe(true);\n      \n      const content = fs.readFileSync(outputPath, 'utf-8');\n      expect(content).toContain('# テストエラー分析レポート');\n      expect(content).toContain('Cannot read property');\n      \n      // サマリーファイルも生成されることを確認\n      const summaryPath = path.join(testOutputDir, 'test-errors-summary.md');\n      expect(fs.existsSync(summaryPath)).toBe(true);\n      \n      const summaryContent = fs.readFileSync(summaryPath, 'utf-8');\n      expect(summaryContent).toContain('## 🤖 AI Error Report Summary');\n      expect(summaryContent).toContain('### 📊 エラー統計');\n      expect(summaryContent).toContain('**詳細レポート**: GitHub Actionsのアーティファクト');\n    });\n\n    it('JSON形式のレポートも生成する', async () => {\n      // エラーを収集\n      const test = createMockTest();\n      const testResult = createMockFailedTestResult();\n      await reporter.onTestFileResult(test, testResult, createMockAggregatedResult());\n      \n      // レポート生成\n      const aggregatedResult = createMockAggregatedResult();\n      aggregatedResult.success = false;\n      \n      await reporter.onRunComplete(new Set(), aggregatedResult);\n      \n      const jsonPath = path.join(testOutputDir, 'test-errors.json');\n      expect(fs.existsSync(jsonPath)).toBe(true);\n      \n      const jsonContent = JSON.parse(fs.readFileSync(jsonPath, 'utf-8'));\n      expect(jsonContent).toHaveProperty('summary');\n      expect(jsonContent).toHaveProperty('errorGroups');\n      expect(jsonContent.errorGroups).toHaveLength(1);\n    });\n  });\n\n  describe('エラーパターン分析', () => {\n    it('同じエラーパターンをグループ化する', async () => {\n      // 同じエラータイプの複数のテスト失敗を作成\n      const error1 = createMockFailedTestResult();\n      const error2 = createMockFailedTestResult();\n      \n      await reporter.onTestFileResult(createMockTest('/test/file1.test.ts'), error1, createMockAggregatedResult());\n      await reporter.onTestFileResult(createMockTest('/test/file2.test.ts'), error2, createMockAggregatedResult());\n      \n      const aggregatedResult = createMockAggregatedResult();\n      aggregatedResult.success = false;\n      aggregatedResult.numFailedTests = 2;\n      \n      await reporter.onRunComplete(new Set(), aggregatedResult);\n      \n      const outputPath = path.join(testOutputDir, 'test-errors.md');\n      const content = fs.readFileSync(outputPath, 'utf-8');\n      \n      expect(content).toContain('## エラー詳細');\n      expect(content).toContain('Cannot read property');\n    });\n  });\n\n  describe('コンテキスト情報', () => {\n    it('ソースコードコンテキストを含める', async () => {\n      const test = createMockTest();\n      const testResult = createMockFailedTestResult();\n      \n      // ソースファイルをモック\n      const sourceFile = path.join(testOutputDir, 'src', 'example.ts');\n      fs.mkdirSync(path.dirname(sourceFile), { recursive: true });\n      fs.writeFileSync(sourceFile, `\nfunction processData(data) {\n  return data.foo.bar;\n}\n\nexport { processData };\n      `.trim());\n      \n      await reporter.onTestFileResult(test, testResult, createMockAggregatedResult());\n      \n      const aggregatedResult = createMockAggregatedResult();\n      aggregatedResult.success = false;\n      \n      await reporter.onRunComplete(new Set(), aggregatedResult);\n      \n      const outputPath = path.join(testOutputDir, 'test-errors.md');\n      const content = fs.readFileSync(outputPath, 'utf-8');\n      \n      expect(content).toContain('失敗コード');\n    });\n  });\n\n  describe('パフォーマンス', () => {\n    it('大量のエラーを効率的に処理する', async () => {\n      // 100個のエラーを生成\n      const startTime = Date.now();\n      \n      for (let i = 0; i < 100; i++) {\n        const test = createMockTest(`/test/file${i}.test.ts`);\n        const testResult = createMockFailedTestResult();\n        await reporter.onTestFileResult(test, testResult, createMockAggregatedResult());\n      }\n      \n      const aggregatedResult = createMockAggregatedResult();\n      aggregatedResult.success = false;\n      aggregatedResult.numFailedTests = 100;\n      \n      await reporter.onRunComplete(new Set(), aggregatedResult);\n      \n      const endTime = Date.now();\n      \n      expect(endTime - startTime).toBeLessThan(5000); // 5秒以内\n      \n      const outputPath = path.join(testOutputDir, 'test-errors.md');\n      expect(fs.existsSync(outputPath)).toBe(true);\n    });\n  });\n\n  describe('ANSIコードサニタイズ', () => {\n    it('エラーメッセージからANSIエスケープシーケンスを除去する', async () => {\n      // ANSIコードを含むエラーメッセージを作成\n      const ansiErrorMessage = `\n        \\u001b[96mtest/example.test.ts\\u001b[0m:\\u001b[93m10\\u001b[0m:\\u001b[93m5\\u001b[0m\n        \\u001b[91mTypeError\\u001b[0m: Cannot read property 'foo' of undefined\n        \n          \\u001b[7m10\\u001b[0m | const result = \\u001b[91mdata.foo.bar\\u001b[0m;\n             |                \\u001b[91m~~~~~~~~\\u001b[0m\n      `;\n      \n      const testResult = createMockTestResult({\n        numFailingTests: 1,\n        numPassingTests: 0,\n        failureMessage: ansiErrorMessage,\n        testResults: [{\n          ancestorTitles: ['ANSI Test'],\n          failureDetails: [],\n          failureMessages: [ansiErrorMessage],\n          fullName: 'ANSI Test should handle colored output',\n          location: { line: 10, column: 5 },\n          numPassingAsserts: 0,\n          status: 'failed',\n          title: 'should handle colored output',\n          duration: 10,\n          invocations: 1,\n          retryReasons: []\n        }]\n      });\n      \n      const test = createMockTest();\n      await reporter.onTestFileResult(test, testResult, createMockAggregatedResult());\n      \n      const aggregatedResult = createMockAggregatedResult();\n      aggregatedResult.success = false;\n      aggregatedResult.numFailedTests = 1;\n      \n      await reporter.onRunComplete(new Set(), aggregatedResult);\n      \n      // JSONレポートを確認\n      const jsonPath = path.join(testOutputDir, 'test-errors.json');\n      const jsonContent = fs.readFileSync(jsonPath, 'utf-8');\n      \n      // ANSIコードが除去されていることを確認\n      expect(jsonContent).not.toContain('\\\\u001b');\n      expect(jsonContent).not.toContain('\\u001b');\n      \n      // エラーメッセージの内容は保持されていることを確認\n      const parsed = JSON.parse(jsonContent);\n      expect(JSON.stringify(parsed)).toContain('TypeError');\n      expect(JSON.stringify(parsed)).toContain('Cannot read property');\n      \n      // マークダウンレポートも確認\n      const mdPath = path.join(testOutputDir, 'test-errors.md');\n      const mdContent = fs.readFileSync(mdPath, 'utf-8');\n      \n      // ANSIコードが除去されていることを確認\n      expect(mdContent).not.toContain('\\u001b');\n      expect(mdContent).toContain('TypeError');\n    });\n    \n    it('複雑なANSIコードを含むTypeScriptエラーを処理する', async () => {\n      // TypeScriptコンパイルエラー風のメッセージ\n      const tsErrorMessage = `\\u001b[96msrc/test.ts\\u001b[0m:\\u001b[93m2\\u001b[0m:\\u001b[93m26\\u001b[0m - \\u001b[91merror\\u001b[0m\\u001b[90m TS2307: \\u001b[0mCannot find module 'class-validator'.\n\n\\u001b[7m2\\u001b[0m import { validate } from 'class-validator';\n\\u001b[7m \\u001b[0m \\u001b[91m                         ~~~~~~~~~~~~~~~~~\\u001b[0m`;\n      \n      const testResult = createMockTestResult({\n        numFailingTests: 1,\n        testExecError: {\n          message: tsErrorMessage,\n          stack: ''\n        }\n      });\n      \n      const test = createMockTest();\n      await reporter.onTestFileResult(test, testResult, createMockAggregatedResult());\n      \n      const aggregatedResult = createMockAggregatedResult();\n      aggregatedResult.success = false;\n      aggregatedResult.numFailedTestSuites = 1;\n      \n      await reporter.onRunComplete(new Set(), aggregatedResult);\n      \n      const jsonPath = path.join(testOutputDir, 'test-errors.json');\n      const jsonContent = fs.readFileSync(jsonPath, 'utf-8');\n      const parsed = JSON.parse(jsonContent);\n      \n      // ANSIコードが除去され、エラー内容が保持されていることを確認\n      expect(JSON.stringify(parsed)).not.toContain('\\\\u001b');\n      expect(JSON.stringify(parsed)).toContain('TS2307');\n      expect(JSON.stringify(parsed)).toContain('class-validator');\n    });\n  });\n\n  describe('エラーハンドリング', () => {\n    it('無効な出力パスを処理する', async () => {\n      const invalidReporter = new JestAIReporter({}, {\n        outputPath: '/invalid/path/that/cannot/exist/report.md'\n      });\n      \n      const test = createMockTest();\n      const testResult = createMockFailedTestResult();\n      await invalidReporter.onTestFileResult(test, testResult, createMockAggregatedResult());\n      \n      const aggregatedResult = createMockAggregatedResult();\n      aggregatedResult.success = false;\n      \n      // エラーをスローせずに処理を継続\n      await expect(\n        invalidReporter.onRunComplete(new Set(), aggregatedResult)\n      ).resolves.not.toThrow();\n    });\n  });\n});"],"version":3}