5fc324dfa85e37cb124c743242faff14
"use strict";
/**
 * CLI引数セキュリティ - セキュリティ強化 v0.4.1
 * CLI引数の安全な処理と検証を提供
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.CLISecurity = exports.DEFAULT_CLI_SECURITY_LIMITS = void 0;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const pathSecurity_1 = require("../utils/pathSecurity");
/**
 * デフォルトCLIセキュリティ制限
 */
exports.DEFAULT_CLI_SECURITY_LIMITS = {
    maxPathLength: 1000,
    maxOutputFileSize: 100 * 1024 * 1024, // 100MB
    allowedOutputExtensions: ['.json', '.txt', '.csv', '.html', '.md'],
    forbiddenDirectoryPatterns: [
        '/etc/',
        '/root/',
        '/home/',
        '/var/log/',
        '/usr/bin/',
        '/bin/',
        '/sbin/',
        '/tmp/../',
        'C:\\Windows\\',
        'C:\\Program Files\\',
        'C:\\Users\\Administrator\\'
    ],
    validateEnvironmentVariables: true
};
/**
 * CLI引数セキュリティクラス
 */
class CLISecurity {
    limits;
    projectRoot;
    constructor(projectRoot = process.cwd(), limits = exports.DEFAULT_CLI_SECURITY_LIMITS) {
        this.projectRoot = projectRoot;
        this.limits = limits;
    }
    /**
     * 分析対象パスの検証
     */
    validateAnalysisPath(inputPath) {
        const errors = [];
        const warnings = [];
        const securityIssues = [];
        try {
            // 基本検証
            if (!inputPath || typeof inputPath !== 'string') {
                errors.push('パスが指定されていません');
                return { isValid: false, errors, warnings, securityIssues };
            }
            // パス長制限
            if (inputPath.length > this.limits.maxPathLength) {
                errors.push(`パス長が制限を超過: ${inputPath.length} > ${this.limits.maxPathLength}`);
                securityIssues.push('DoS攻撃（長いパス）の可能性');
                return { isValid: false, errors, warnings, securityIssues };
            }
            // 危険なパターンの検出
            const dangerousPatterns = [
                { pattern: /\.\.\//g, issue: 'パストラバーサル攻撃' },
                { pattern: /\.\.\\/g, issue: 'パストラバーサル攻撃（Windows）' },
                { pattern: /\/etc\/|\/root\/|\/home\//gi, issue: 'システムディレクトリアクセス試行' },
                { pattern: /C:\\Windows\\|C:\\Program Files\\/gi, issue: 'Windowsシステムディレクトリアクセス試行' },
                { pattern: /^[a-zA-Z]:\\/gi, issue: '絶対パス使用（Windows）' },
                { pattern: /^\/[^.]/gi, issue: '絶対パス使用（Unix）' },
                { pattern: /\||\&\&|\;|\`/g, issue: 'コマンドインジェクション攻撃' },
                { pattern: /\$\{|\$\(/g, issue: '変数展開攻撃' },
                { pattern: /\0|%00/g, issue: 'NULL文字攻撃' },
                { pattern: /[<>"|*?]/g, issue: '無効なファイル名文字' }
            ];
            for (const { pattern, issue } of dangerousPatterns) {
                if (pattern.test(inputPath)) {
                    securityIssues.push(issue);
                    if (issue.includes('攻撃')) {
                        errors.push(`危険なパターンを検出: ${issue}`);
                    }
                    else {
                        warnings.push(`疑わしいパターンを検出: ${issue}`);
                    }
                }
            }
            // 禁止ディレクトリパターンのチェック
            for (const forbiddenPattern of this.limits.forbiddenDirectoryPatterns) {
                if (inputPath.includes(forbiddenPattern)) {
                    errors.push(`禁止されたディレクトリへのアクセス: ${forbiddenPattern}`);
                    securityIssues.push('システムディレクトリアクセス攻撃');
                }
            }
            // パス解決と検証
            let resolvedPath;
            try {
                resolvedPath = path.resolve(inputPath);
            }
            catch (error) {
                errors.push('パスの解決に失敗しました');
                return { isValid: false, errors, warnings, securityIssues };
            }
            // プロジェクト範囲外アクセスの検証（相対パスの場合のみ）
            if (!path.isAbsolute(inputPath)) {
                const safePath = pathSecurity_1.PathSecurity.safeResolve(inputPath, this.projectRoot, 'cli-analysis-path');
                if (!safePath) {
                    errors.push('プロジェクト範囲外へのアクセスが検出されました');
                    securityIssues.push('パストラバーサル攻撃');
                    return { isValid: false, errors, warnings, securityIssues };
                }
                resolvedPath = safePath;
            }
            // ファイル/ディレクトリ存在確認
            if (!fs.existsSync(resolvedPath)) {
                warnings.push('指定されたパスは存在しません');
            }
            else {
                const stats = fs.statSync(resolvedPath);
                if (!stats.isFile() && !stats.isDirectory()) {
                    warnings.push('指定されたパスは通常のファイルまたはディレクトリではありません');
                }
            }
            return {
                isValid: errors.length === 0,
                sanitizedValue: resolvedPath,
                errors,
                warnings,
                securityIssues
            };
        }
        catch (error) {
            errors.push('パス検証中に予期しないエラーが発生しました');
            securityIssues.push('パス検証攻撃の可能性');
            return { isValid: false, errors, warnings, securityIssues };
        }
    }
    /**
     * 出力ファイルパスの検証
     */
    validateOutputPath(outputPath) {
        const errors = [];
        const warnings = [];
        const securityIssues = [];
        try {
            // 基本検証
            if (!outputPath || typeof outputPath !== 'string') {
                return { isValid: true, errors, warnings, securityIssues }; // 出力パスは任意
            }
            // パス長制限
            if (outputPath.length > this.limits.maxPathLength) {
                errors.push(`出力パス長が制限を超過: ${outputPath.length} > ${this.limits.maxPathLength}`);
                securityIssues.push('DoS攻撃（長い出力パス）の可能性');
                return { isValid: false, errors, warnings, securityIssues };
            }
            // 危険なパターンの検出
            const dangerousPatterns = [
                { pattern: /\.\.\//g, issue: 'パストラバーサル攻撃' },
                { pattern: /\.\.\\/g, issue: 'パストラバーサル攻撃（Windows）' },
                { pattern: /\/etc\/|\/root\/|\/home\//gi, issue: 'システムディレクトリ書き込み試行' },
                { pattern: /C:\\Windows\\|C:\\Program Files\\/gi, issue: 'Windowsシステムディレクトリ書き込み試行' },
                { pattern: /\||\&\&|\;|\`/g, issue: 'コマンドインジェクション攻撃' },
                { pattern: /\$\{|\$\(/g, issue: '変数展開攻撃' },
                { pattern: /\0|%00/g, issue: 'NULL文字攻撃' },
                { pattern: /[<>"|*?]/g, issue: '無効なファイル名文字' }
            ];
            for (const { pattern, issue } of dangerousPatterns) {
                if (pattern.test(outputPath)) {
                    securityIssues.push(issue);
                    if (issue.includes('攻撃') || issue.includes('試行')) {
                        errors.push(`危険なパターンを検出: ${issue}`);
                    }
                    else {
                        warnings.push(`疑わしいパターンを検出: ${issue}`);
                    }
                }
            }
            // 禁止ディレクトリパターンのチェック
            for (const forbiddenPattern of this.limits.forbiddenDirectoryPatterns) {
                if (outputPath.includes(forbiddenPattern)) {
                    errors.push(`禁止されたディレクトリへの出力: ${forbiddenPattern}`);
                    securityIssues.push('システムディレクトリ書き込み攻撃');
                }
            }
            // 拡張子の検証
            const extension = path.extname(outputPath).toLowerCase();
            if (extension && !this.limits.allowedOutputExtensions.includes(extension)) {
                errors.push(`許可されていない拡張子: ${extension}`);
                securityIssues.push('実行可能ファイル生成攻撃の可能性');
            }
            // パス解決と検証
            let resolvedPath;
            try {
                resolvedPath = path.resolve(outputPath);
            }
            catch (error) {
                errors.push('出力パスの解決に失敗しました');
                return { isValid: false, errors, warnings, securityIssues };
            }
            // 出力ディレクトリの存在確認と作成権限チェック
            const outputDir = path.dirname(resolvedPath);
            if (!fs.existsSync(outputDir)) {
                try {
                    // 親ディレクトリの書き込み権限チェック
                    const parentDir = path.dirname(outputDir);
                    if (fs.existsSync(parentDir)) {
                        fs.accessSync(parentDir, fs.constants.W_OK);
                    }
                    else {
                        warnings.push('出力ディレクトリの親ディレクトリが存在しません');
                    }
                }
                catch (error) {
                    errors.push('出力ディレクトリへの書き込み権限がありません');
                    securityIssues.push('権限昇格攻撃の可能性');
                }
            }
            else {
                // 既存ファイルの上書き確認
                if (fs.existsSync(resolvedPath)) {
                    const stats = fs.statSync(resolvedPath);
                    if (stats.size > this.limits.maxOutputFileSize) {
                        warnings.push('出力ファイルが大きすぎます（上書きされます）');
                        securityIssues.push('ディスク使用量攻撃の可能性');
                    }
                }
            }
            // プロジェクト範囲外書き込みの検証（相対パスの場合のみ）
            if (!path.isAbsolute(outputPath)) {
                const safePath = pathSecurity_1.PathSecurity.safeResolve(outputPath, this.projectRoot, 'cli-output-path');
                if (!safePath) {
                    errors.push('プロジェクト範囲外への出力が検出されました');
                    securityIssues.push('パストラバーサル攻撃');
                    return { isValid: false, errors, warnings, securityIssues };
                }
                resolvedPath = safePath;
            }
            return {
                isValid: errors.length === 0,
                sanitizedValue: resolvedPath,
                errors,
                warnings,
                securityIssues
            };
        }
        catch (error) {
            errors.push('出力パス検証中に予期しないエラーが発生しました');
            securityIssues.push('出力パス検証攻撃の可能性');
            return { isValid: false, errors, warnings, securityIssues };
        }
    }
    /**
     * 環境変数の検証
     */
    validateEnvironmentVariables() {
        const errors = [];
        const warnings = [];
        const securityIssues = [];
        if (!this.limits.validateEnvironmentVariables) {
            return { isValid: true, errors, warnings, securityIssues };
        }
        try {
            // 危険な環境変数の検出
            const dangerousEnvVars = [
                'LD_PRELOAD',
                'LD_LIBRARY_PATH',
                'DYLD_INSERT_LIBRARIES',
                'DYLD_LIBRARY_PATH',
                'PATH_ORIGINAL',
                'SHELL_OVERRIDE',
                'NODE_OPTIONS'
            ];
            for (const envVar of dangerousEnvVars) {
                if (process.env[envVar]) {
                    warnings.push(`危険な環境変数が設定されています: ${envVar}`);
                    securityIssues.push('環境変数インジェクション攻撃の可能性');
                }
            }
            // RIMOR固有の環境変数の検証
            const rimorLang = process.env.RIMOR_LANG;
            if (rimorLang) {
                // 言語設定の検証
                const allowedLanguages = ['ja', 'en', 'zh', 'ko'];
                if (!allowedLanguages.includes(rimorLang)) {
                    warnings.push(`未対応の言語設定: ${rimorLang}`);
                    securityIssues.push('環境変数操作攻撃の可能性');
                }
                // 危険なパターンの検出
                if (/[^a-zA-Z_-]/.test(rimorLang)) {
                    errors.push('RIMOR_LANGに無効な文字が含まれています');
                    securityIssues.push('環境変数インジェクション攻撃');
                }
            }
            // NODE_ENVの検証
            const nodeEnv = process.env.NODE_ENV;
            if (nodeEnv) {
                const allowedEnvs = ['development', 'production', 'test'];
                if (!allowedEnvs.includes(nodeEnv)) {
                    warnings.push(`未対応のNODE_ENV設定: ${nodeEnv}`);
                }
                if (/[^a-zA-Z_-]/.test(nodeEnv)) {
                    errors.push('NODE_ENVに無効な文字が含まれています');
                    securityIssues.push('環境変数インジェクション攻撃');
                }
            }
            return {
                isValid: errors.length === 0,
                errors,
                warnings,
                securityIssues
            };
        }
        catch (error) {
            errors.push('環境変数検証中に予期しないエラーが発生しました');
            securityIssues.push('環境変数検証攻撃の可能性');
            return { isValid: false, errors, warnings, securityIssues };
        }
    }
    /**
     * フォーマット引数の検証
     */
    validateFormat(format) {
        const errors = [];
        const warnings = [];
        const securityIssues = [];
        try {
            if (!format || typeof format !== 'string') {
                return { isValid: true, sanitizedValue: 'text', errors, warnings, securityIssues };
            }
            // 許可されたフォーマット
            const allowedFormats = ['text', 'json', 'csv', 'html', 'markdown', 'ai-json'];
            if (!allowedFormats.includes(format.toLowerCase())) {
                errors.push(`未対応のフォーマット: ${format}`);
                securityIssues.push('フォーマット指定攻撃の可能性');
                return { isValid: false, errors, warnings, securityIssues };
            }
            // 危険なパターンの検出
            if (/[^a-zA-Z0-9_-]/.test(format)) {
                errors.push('フォーマット指定に無効な文字が含まれています');
                securityIssues.push('フォーマットインジェクション攻撃');
                return { isValid: false, errors, warnings, securityIssues };
            }
            return {
                isValid: true,
                sanitizedValue: format.toLowerCase(),
                errors,
                warnings,
                securityIssues
            };
        }
        catch (error) {
            errors.push('フォーマット検証中に予期しないエラーが発生しました');
            securityIssues.push('フォーマット検証攻撃の可能性');
            return { isValid: false, errors, warnings, securityIssues };
        }
    }
    /**
     * すべてのCLI引数を一括検証
     */
    validateAllArguments(args) {
        const allErrors = [];
        const allWarnings = [];
        const allSecurityIssues = [];
        const sanitizedArgs = {};
        // 環境変数検証
        const envValidation = this.validateEnvironmentVariables();
        allErrors.push(...envValidation.errors);
        allWarnings.push(...envValidation.warnings);
        allSecurityIssues.push(...envValidation.securityIssues);
        // パス検証
        if (args.path) {
            const pathValidation = this.validateAnalysisPath(args.path);
            allErrors.push(...pathValidation.errors);
            allWarnings.push(...pathValidation.warnings);
            allSecurityIssues.push(...pathValidation.securityIssues);
            if (pathValidation.isValid) {
                sanitizedArgs.path = pathValidation.sanitizedValue;
            }
        }
        // フォーマット検証
        const formatValidation = this.validateFormat(args.format || 'text');
        allErrors.push(...formatValidation.errors);
        allWarnings.push(...formatValidation.warnings);
        allSecurityIssues.push(...formatValidation.securityIssues);
        if (formatValidation.isValid) {
            sanitizedArgs.format = formatValidation.sanitizedValue;
        }
        // 出力ファイル検証
        if (args.outputFile) {
            const outputValidation = this.validateOutputPath(args.outputFile);
            allErrors.push(...outputValidation.errors);
            allWarnings.push(...outputValidation.warnings);
            allSecurityIssues.push(...outputValidation.securityIssues);
            if (outputValidation.isValid) {
                sanitizedArgs.outputFile = outputValidation.sanitizedValue;
            }
        }
        return {
            isValid: allErrors.length === 0,
            sanitizedArgs,
            allErrors,
            allWarnings,
            allSecurityIssues
        };
    }
    /**
     * セキュリティ制限の更新
     */
    updateLimits(newLimits) {
        this.limits = { ...this.limits, ...newLimits };
    }
}
exports.CLISecurity = CLISecurity;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL3Nhc2FrYW1hL1Byb2plY3RzL1JpbW9yL3NyYy9zZWN1cml0eS9DTElTZWN1cml0eS50cyIsIm1hcHBpbmdzIjoiO0FBQUE7OztHQUdHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFSCx1Q0FBeUI7QUFDekIsMkNBQTZCO0FBQzdCLHdEQUFxRDtBQThCckQ7O0dBRUc7QUFDVSxRQUFBLDJCQUEyQixHQUFzQjtJQUM1RCxhQUFhLEVBQUUsSUFBSTtJQUNuQixpQkFBaUIsRUFBRSxHQUFHLEdBQUcsSUFBSSxHQUFHLElBQUksRUFBRSxRQUFRO0lBQzlDLHVCQUF1QixFQUFFLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLEtBQUssQ0FBQztJQUNsRSwwQkFBMEIsRUFBRTtRQUMxQixPQUFPO1FBQ1AsUUFBUTtRQUNSLFFBQVE7UUFDUixXQUFXO1FBQ1gsV0FBVztRQUNYLE9BQU87UUFDUCxRQUFRO1FBQ1IsVUFBVTtRQUNWLGVBQWU7UUFDZixxQkFBcUI7UUFDckIsNEJBQTRCO0tBQzdCO0lBQ0QsNEJBQTRCLEVBQUUsSUFBSTtDQUNuQyxDQUFDO0FBRUY7O0dBRUc7QUFDSCxNQUFhLFdBQVc7SUFDZCxNQUFNLENBQW9CO0lBQzFCLFdBQVcsQ0FBUztJQUU1QixZQUFZLGNBQXNCLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxTQUE0QixtQ0FBMkI7UUFDdEcsSUFBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7UUFDL0IsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7SUFDdkIsQ0FBQztJQUVEOztPQUVHO0lBQ0gsb0JBQW9CLENBQUMsU0FBaUI7UUFDcEMsTUFBTSxNQUFNLEdBQWEsRUFBRSxDQUFDO1FBQzVCLE1BQU0sUUFBUSxHQUFhLEVBQUUsQ0FBQztRQUM5QixNQUFNLGNBQWMsR0FBYSxFQUFFLENBQUM7UUFFcEMsSUFBSSxDQUFDO1lBQ0gsT0FBTztZQUNQLElBQUksQ0FBQyxTQUFTLElBQUksT0FB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cy9zYXNha2FtYS9Qcm9qZWN0cy9SaW1vci9zcmMvc2VjdXJpdHkvQ0xJU2VjdXJpdHkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDTEnlvJXmlbDjgrvjgq3jg6Xjg6rjg4bjgqMgLSDjgrvjgq3jg6Xjg6rjg4bjgqPlvLfljJYgdjAuNC4xXG4gKiBDTEnlvJXmlbDjga7lronlhajjgarlh6bnkIbjgajmpJzoqLzjgpLmj5DkvptcbiAqL1xuXG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgUGF0aFNlY3VyaXR5IH0gZnJvbSAnLi4vdXRpbHMvcGF0aFNlY3VyaXR5JztcbmltcG9ydCB7IGVycm9ySGFuZGxlciwgRXJyb3JUeXBlIH0gZnJvbSAnLi4vdXRpbHMvZXJyb3JIYW5kbGVyJztcblxuLyoqXG4gKiBDTEnlvJXmlbDmpJzoqLzntZDmnpxcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDTElWYWxpZGF0aW9uUmVzdWx0IHtcbiAgaXNWYWxpZDogYm9vbGVhbjtcbiAgc2FuaXRpemVkVmFsdWU/OiBzdHJpbmc7XG4gIGVycm9yczogc3RyaW5nW107XG4gIHdhcm5pbmdzOiBzdHJpbmdbXTtcbiAgc2VjdXJpdHlJc3N1ZXM6IHN0cmluZ1tdO1xufVxuXG4vKipcbiAqIENMSeW8leaVsOOCu+OCreODpeODquODhuOCo+WItumZkFxuICovXG5leHBvcnQgaW50ZXJmYWNlIENMSVNlY3VyaXR5TGltaXRzIHtcbiAgLyoqIOacgOWkp+ODkeOCuemVtyAqL1xuICBtYXhQYXRoTGVuZ3RoOiBudW1iZXI7XG4gIC8qKiDmnIDlpKflh7rlipvjg5XjgqHjgqTjg6vjgrXjgqTjgrogKGJ5dGVzKSAqL1xuICBtYXhPdXRwdXRGaWxlU2l6ZTogbnVtYmVyO1xuICAvKiog6Kix5Y+v44GV44KM44KL44OV44Kh44Kk44Or5ouh5by15a2QICovXG4gIGFsbG93ZWRPdXRwdXRFeHRlbnNpb25zOiBzdHJpbmdbXTtcbiAgLyoqIOemgeatouOBleOCjOOCi+ODh+OCo+ODrOOCr+ODiOODquODkeOCv+ODvOODsyAqL1xuICBmb3JiaWRkZW5EaXJlY3RvcnlQYXR0ZXJuczogc3RyaW5nW107XG4gIC8qKiDnkrDlooPlpInmlbDmpJzoqLzmnInlirnljJYgKi9cbiAgdmFsaWRhdGVFbnZpcm9ubWVudFZhcmlhYmxlczogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiDjg4fjg5Xjgqnjg6vjg4hDTEnjgrvjgq3jg6Xjg6rjg4bjgqPliLbpmZBcbiAqL1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfQ0xJX1NFQ1VSSVRZX0xJTUlUUzogQ0xJU2VjdXJpdHlMaW1pdHMgPSB7XG4gIG1heFBhdGhMZW5ndGg6IDEwMDAsXG4gIG1heE91dHB1dEZpbGVTaXplOiAxMDAgKiAxMDI0ICogMTAyNCwgLy8gMTAwTUJcbiAgYWxsb3dlZE91dHB1dEV4dGVuc2lvbnM6IFsnLmpzb24nLCAnLnR4dCcsICcuY3N2JywgJy5odG1sJywgJy5tZCddLFxuICBmb3JiaWRkZW5EaXJlY3RvcnlQYXR0ZXJuczogW1xuICAgICcvZXRjLycsXG4gICAgJy9yb290LycsXG4gICAgJy9ob21lLycsXG4gICAgJy92YXIvbG9nLycsXG4gICAgJy91c3IvYmluLycsXG4gICAgJy9iaW4vJyxcbiAgICAnL3NiaW4vJyxcbiAgICAnL3RtcC8uLi8nLFxuICAgICdDOlxcXFxXaW5kb3dzXFxcXCcsXG4gICAgJ0M6XFxcXFByb2dyYW0gRmlsZXNcXFxcJyxcbiAgICAnQzpcXFxcVXNlcnNcXFxcQWRtaW5pc3RyYXRvclxcXFwnXG4gIF0sXG4gIHZhbGlkYXRlRW52aXJvbm1lbnRWYXJpYWJsZXM6IHRydWVcbn07XG5cbi8qKlxuICogQ0xJ5byV5pWw44K744Kt44Ol44Oq44OG44Kj44Kv44Op44K5XG4gKi9cbmV4cG9ydCBjbGFzcyBDTElTZWN1cml0eSB7XG4gIHByaXZhdGUgbGltaXRzOiBDTElTZWN1cml0eUxpbWl0cztcbiAgcHJpdmF0ZSBwcm9qZWN0Um9vdDogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKHByb2plY3RSb290OiBzdHJpbmcgPSBwcm9jZXNzLmN3ZCgpLCBsaW1pdHM6IENMSVNlY3VyaXR5TGltaXRzID0gREVGQVVMVF9DTElfU0VDVVJJVFlfTElNSVRTKSB7XG4gICAgdGhpcy5wcm9qZWN0Um9vdCA9IHByb2plY3RSb290O1xuICAgIHRoaXMubGltaXRzID0gbGltaXRzO1xuICB9XG5cbiAgLyoqXG4gICAqIOWIhuaekOWvvuixoeODkeOCueOBruaknOiovFxuICAgKi9cbiAgdmFsaWRhdGVBbmFseXNpc1BhdGgoaW5wdXRQYXRoOiBzdHJpbmcpOiBDTElWYWxpZGF0aW9uUmVzdWx0IHtcbiAgICBjb25zdCBlcnJvcnM6IHN0cmluZ1tdID0gW107XG4gICAgY29uc3Qgd2FybmluZ3M6IHN0cmluZ1tdID0gW107XG4gICAgY29uc3Qgc2VjdXJpdHlJc3N1ZXM6IHN0cmluZ1tdID0gW107XG5cbiAgICB0cnkge1xuICAgICAgLy8g5Z+65pys5qSc6Ki8XG4gICAgICBpZiAoIWlucHV0UGF0aCB8fCB0eXBlb2YgaW5wdXRQYXRoICE9PSAnc3RyaW5nJykge1xuICAgICAgICBlcnJvcnMucHVzaCgn44OR44K544GM5oyH5a6a44GV44KM44Gm44GE44G+44Gb44KTJyk7XG4gICAgICAgIHJldHVybiB7IGlzVmFsaWQ6IGZhbHNlLCBlcnJvcnMsIHdhcm5pbmdzLCBzZWN1cml0eUlzc3VlcyB9O1xuICAgICAgfVxuXG4gICAgICAvLyDjg5HjgrnplbfliLbpmZBcbiAgICAgIGlmIChpbnB1dFBhdGgubGVuZ3RoID4gdGhpcy5saW1pdHMubWF4UGF0aExlbmd0aCkge1xuICAgICAgICBlcnJvcnMucHVzaChg44OR44K56ZW344GM5Yi26ZmQ44KS6LaF6YGOOiAke2lucHV0UGF0aC5sZW5ndGh9ID4gJHt0aGlzLmxpbWl0cy5tYXhQYXRoTGVuZ3RofWApO1xuICAgICAgICBzZWN1cml0eUlzc3Vlcy5wdXNoKCdEb1PmlLvmkoPvvIjplbfjgYTjg5HjgrnvvInjga7lj6/og73mgKcnKTtcbiAgICAgICAgcmV0dXJuIHsgaXNWYWxpZDogZmFsc2UsIGVycm9ycywgd2FybmluZ3MsIHNlY3VyaXR5SXNzdWVzIH07XG4gICAgICB9XG5cbiAgICAgIC8vIOWNsemZuuOBquODkeOCv+ODvOODs+OBruaknOWHulxuICAgICAgY29uc3QgZGFuZ2Vyb3VzUGF0dGVybnMgPSBbXG4gICAgICAgIHsgcGF0dGVybjogL1xcLlxcLlxcLy9nLCBpc3N1ZTogJ+ODkeOCueODiOODqeODkOODvOOCteODq+aUu+aSgycgfSxcbiAgICAgICAgeyBwYXR0ZXJuOiAvXFwuXFwuXFxcXC9nLCBpc3N1ZTogJ+ODkeOCueODiOODqeODkOODvOOCteODq+aUu+aSg++8iFdpbmRvd3PvvIknIH0sXG4gICAgICAgIHsgcGF0dGVybjogL1xcL2V0Y1xcL3xcXC9yb290XFwvfFxcL2hvbWVcXC8vZ2ksIGlzc3VlOiAn44K344K544OG44Og44OH44Kj44Os44Kv44OI44Oq44Ki44Kv44K744K56Kmm6KGMJyB9LFxuICAgICAgICB7IHBhdHRlcm46IC9DOlxcXFxXaW5kb3dzXFxcXHxDOlxcXFxQcm9ncmFtIEZpbGVzXFxcXC9naSwgaXNzdWU6ICdXaW5kb3dz44K344K544OG44Og44OH44Kj44Os44Kv44OI44Oq44Ki44Kv44K744K56Kmm6KGMJyB9LFxuICAgICAgICB7IHBhdHRlcm46IC9eW2EtekEtWl06XFxcXC9naSwgaXNzdWU6ICfntbblr77jg5Hjgrnkvb/nlKjvvIhXaW5kb3dz77yJJyB9LFxuICAgICAgICB7IHBhdHRlcm46IC9eXFwvW14uXS9naSwgaXNzdWU6ICfntbblr77jg5Hjgrnkvb/nlKjvvIhVbml477yJJyB9LFxuICAgICAgICB7IHBhdHRlcm46IC9cXHx8XFwmXFwmfFxcO3xcXGAvZywgaXNzdWU6ICfjgrPjg57jg7Pjg4njgqTjg7Pjgrjjgqfjgq/jgrfjg6fjg7PmlLvmkoMnIH0sXG4gICAgICAgIHsgcGF0dGVybjogL1xcJFxce3xcXCRcXCgvZywgaXNzdWU6ICflpInmlbDlsZXplovmlLvmkoMnIH0sXG4gICAgICAgIHsgcGF0dGVybjogL1xcMHwlMDAvZywgaXNzdWU6ICdOVUxM5paH5a2X5pS75pKDJyB9LFxuICAgICAgICB7IHBhdHRlcm46IC9bPD5cInwqP10vZywgaXNzdWU6ICfnhKHlirnjgarjg5XjgqHjgqTjg6vlkI3mloflrZcnIH1cbiAgICAgIF07XG5cbiAgICAgIGZvciAoY29uc3QgeyBwYXR0ZXJuLCBpc3N1ZSB9IG9mIGRhbmdlcm91c1BhdHRlcm5zKSB7XG4gICAgICAgIGlmIChwYXR0ZXJuLnRlc3QoaW5wdXRQYXRoKSkge1xuICAgICAgICAgIHNlY3VyaXR5SXNzdWVzLnB1c2goaXNzdWUpO1xuICAgICAgICAgIGlmIChpc3N1ZS5pbmNsdWRlcygn5pS75pKDJykpIHtcbiAgICAgICAgICAgIGVycm9ycy5wdXNoKGDljbHpmbrjgarjg5Hjgr/jg7zjg7PjgpLmpJzlh7o6ICR7aXNzdWV9YCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdhcm5pbmdzLnB1c2goYOeWkeOCj+OBl+OBhOODkeOCv+ODvOODs+OCkuaknOWHujogJHtpc3N1ZX1gKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8g56aB5q2i44OH44Kj44Os44Kv44OI44Oq44OR44K/44O844Oz44Gu44OB44Kn44OD44KvXG4gICAgICBmb3IgKGNvbnN0IGZvcmJpZGRlblBhdHRlcm4gb2YgdGhpcy5saW1pdHMuZm9yYmlkZGVuRGlyZWN0b3J5UGF0dGVybnMpIHtcbiAgICAgICAgaWYgKGlucHV0UGF0aC5pbmNsdWRlcyhmb3JiaWRkZW5QYXR0ZXJuKSkge1xuICAgICAgICAgIGVycm9ycy5wdXNoKGDnpoHmraLjgZXjgozjgZ/jg4fjgqPjg6zjgq/jg4jjg6rjgbjjga7jgqLjgq/jgrvjgrk6ICR7Zm9yYmlkZGVuUGF0dGVybn1gKTtcbiAgICAgICAgICBzZWN1cml0eUlzc3Vlcy5wdXNoKCfjgrfjgrnjg4bjg6Djg4fjgqPjg6zjgq/jg4jjg6rjgqLjgq/jgrvjgrnmlLvmkoMnKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyDjg5Hjgrnop6PmsbrjgajmpJzoqLxcbiAgICAgIGxldCByZXNvbHZlZFBhdGg6IHN0cmluZztcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlc29sdmVkUGF0aCA9IHBhdGgucmVzb2x2ZShpbnB1dFBhdGgpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgZXJyb3JzLnB1c2goJ+ODkeOCueOBruino+axuuOBq+WkseaVl+OBl+OBvuOBl+OBnycpO1xuICAgICAgICByZXR1cm4geyBpc1ZhbGlkOiBmYWxzZSwgZXJyb3JzLCB3YXJuaW5ncywgc2VjdXJpdHlJc3N1ZXMgfTtcbiAgICAgIH1cblxuICAgICAgLy8g44OX44Ot44K444Kn44Kv44OI56+E5Zuy5aSW44Ki44Kv44K744K544Gu5qSc6Ki877yI55u45a++44OR44K544Gu5aC05ZCI44Gu44G/77yJXG4gICAgICBpZiAoIXBhdGguaXNBYnNvbHV0ZShpbnB1dFBhdGgpKSB7XG4gICAgICAgIGNvbnN0IHNhZmVQYXRoID0gUGF0aFNlY3VyaXR5LnNhZmVSZXNvbHZlKGlucHV0UGF0aCwgdGhpcy5wcm9qZWN0Um9vdCwgJ2NsaS1hbmFseXNpcy1wYXRoJyk7XG4gICAgICAgIGlmICghc2FmZVBhdGgpIHtcbiAgICAgICAgICBlcnJvcnMucHVzaCgn44OX44Ot44K444Kn44Kv44OI56+E5Zuy5aSW44G444Gu44Ki44Kv44K744K544GM5qSc5Ye644GV44KM44G+44GX44GfJyk7XG4gICAgICAgICAgc2VjdXJpdHlJc3N1ZXMucHVzaCgn44OR44K544OI44Op44OQ44O844K144Or5pS75pKDJyk7XG4gICAgICAgICAgcmV0dXJuIHsgaXNWYWxpZDogZmFsc2UsIGVycm9ycywgd2FybmluZ3MsIHNlY3VyaXR5SXNzdWVzIH07XG4gICAgICAgIH1cbiAgICAgICAgcmVzb2x2ZWRQYXRoID0gc2FmZVBhdGg7XG4gICAgICB9XG5cbiAgICAgIC8vIOODleOCoeOCpOODqy/jg4fjgqPjg6zjgq/jg4jjg6rlrZjlnKjnorroqo1cbiAgICAgIGlmICghZnMuZXhpc3RzU3luYyhyZXNvbHZlZFBhdGgpKSB7XG4gICAgICAgIHdhcm5pbmdzLnB1c2goJ+aMh+WumuOBleOCjOOBn+ODkeOCueOBr+WtmOWcqOOBl+OBvuOBm+OCkycpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3Qgc3RhdHMgPSBmcy5zdGF0U3luYyhyZXNvbHZlZFBhdGgpO1xuICAgICAgICBpZiAoIXN0YXRzLmlzRmlsZSgpICYmICFzdGF0cy5pc0RpcmVjdG9yeSgpKSB7XG4gICAgICAgICAgd2FybmluZ3MucHVzaCgn5oyH5a6a44GV44KM44Gf44OR44K544Gv6YCa5bi444Gu44OV44Kh44Kk44Or44G+44Gf44Gv44OH44Kj44Os44Kv44OI44Oq44Gn44Gv44GC44KK44G+44Gb44KTJyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaXNWYWxpZDogZXJyb3JzLmxlbmd0aCA9PT0gMCxcbiAgICAgICAgc2FuaXRpemVkVmFsdWU6IHJlc29sdmVkUGF0aCxcbiAgICAgICAgZXJyb3JzLFxuICAgICAgICB3YXJuaW5ncyxcbiAgICAgICAgc2VjdXJpdHlJc3N1ZXNcbiAgICAgIH07XG5cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgZXJyb3JzLnB1c2goJ+ODkeOCueaknOiovOS4reOBq+S6iOacn+OBl+OBquOBhOOCqOODqeODvOOBjOeZuueUn+OBl+OBvuOBl+OBnycpO1xuICAgICAgc2VjdXJpdHlJc3N1ZXMucHVzaCgn44OR44K55qSc6Ki85pS75pKD44Gu5Y+v6IO95oCnJyk7XG4gICAgICByZXR1cm4geyBpc1ZhbGlkOiBmYWxzZSwgZXJyb3JzLCB3YXJuaW5ncywgc2VjdXJpdHlJc3N1ZXMgfTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog5Ye65Yqb44OV44Kh44Kk44Or44OR44K544Gu5qSc6Ki8XG4gICAqL1xuICB2YWxpZGF0ZU91dHB1dFBhdGgob3V0cHV0UGF0aDogc3RyaW5nKTogQ0xJVmFsaWRhdGlvblJlc3VsdCB7XG4gICAgY29uc3QgZXJyb3JzOiBzdHJpbmdbXSA9IFtdO1xuICAgIGNvbnN0IHdhcm5pbmdzOiBzdHJpbmdbXSA9IFtdO1xuICAgIGNvbnN0IHNlY3VyaXR5SXNzdWVzOiBzdHJpbmdbXSA9IFtdO1xuXG4gICAgdHJ5IHtcbiAgICAgIC8vIOWfuuacrOaknOiovFxuICAgICAgaWYgKCFvdXRwdXRQYXRoIHx8IHR5cGVvZiBvdXRwdXRQYXRoICE9PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4geyBpc1ZhbGlkOiB0cnVlLCBlcnJvcnMsIHdhcm5pbmdzLCBzZWN1cml0eUlzc3VlcyB9OyAvLyDlh7rlipvjg5Hjgrnjga/ku7vmhI9cbiAgICAgIH1cblxuICAgICAgLy8g44OR44K56ZW35Yi26ZmQXG4gICAgICBpZiAob3V0cHV0UGF0aC5sZW5ndGggPiB0aGlzLmxpbWl0cy5tYXhQYXRoTGVuZ3RoKSB7XG4gICAgICAgIGVycm9ycy5wdXNoKGDlh7rlipvjg5HjgrnplbfjgYzliLbpmZDjgpLotoXpgY46ICR7b3V0cHV0UGF0aC5sZW5ndGh9ID4gJHt0aGlzLmxpbWl0cy5tYXhQYXRoTGVuZ3RofWApO1xuICAgICAgICBzZWN1cml0eUlzc3Vlcy5wdXNoKCdEb1PmlLvmkoPvvIjplbfjgYTlh7rlipvjg5HjgrnvvInjga7lj6/og73mgKcnKTtcbiAgICAgICAgcmV0dXJuIHsgaXNWYWxpZDogZmFsc2UsIGVycm9ycywgd2FybmluZ3MsIHNlY3VyaXR5SXNzdWVzIH07XG4gICAgICB9XG5cbiAgICAgIC8vIOWNsemZuuOBquODkeOCv+ODvOODs+OBruaknOWHulxuICAgICAgY29uc3QgZGFuZ2Vyb3VzUGF0dGVybnMgPSBbXG4gICAgICAgIHsgcGF0dGVybjogL1xcLlxcLlxcLy9nLCBpc3N1ZTogJ+ODkeOCueODiOODqeODkOODvOOCteODq+aUu+aSgycgfSxcbiAgICAgICAgeyBwYXR0ZXJuOiAvXFwuXFwuXFxcXC9nLCBpc3N1ZTogJ+ODkeOCueODiOODqeODkOODvOOCteODq+aUu+aSg++8iFdpbmRvd3PvvIknIH0sXG4gICAgICAgIHsgcGF0dGVybjogL1xcL2V0Y1xcL3xcXC9yb290XFwvfFxcL2hvbWVcXC8vZ2ksIGlzc3VlOiAn44K344K544OG44Og44OH44Kj44Os44Kv44OI44Oq5pu444GN6L6844G/6Kmm6KGMJyB9LFxuICAgICAgICB7IHBhdHRlcm46IC9DOlxcXFxXaW5kb3dzXFxcXHxDOlxcXFxQcm9ncmFtIEZpbGVzXFxcXC9naSwgaXNzdWU6ICdXaW5kb3dz44K344K544OG44Og44OH44Kj44Os44Kv44OI44Oq5pu444GN6L6844G/6Kmm6KGMJyB9LFxuICAgICAgICB7IHBhdHRlcm46IC9cXHx8XFwmXFwmfFxcO3xcXGAvZywgaXNzdWU6ICfjgrPjg57jg7Pjg4njgqTjg7Pjgrjjgqfjgq/jgrfjg6fjg7PmlLvmkoMnIH0sXG4gICAgICAgIHsgcGF0dGVybjogL1xcJFxce3xcXCRcXCgvZywgaXNzdWU6ICflpInmlbDlsZXplovmlLvmkoMnIH0sXG4gICAgICAgIHsgcGF0dGVybjogL1xcMHwlMDAvZywgaXNzdWU6ICdOVUxM5paH5a2X5pS75pKDJyB9LFxuICAgICAgICB7IHBhdHRlcm46IC9bPD5cInwqP10vZywgaXNzdWU6ICfnhKHlirnjgarjg5XjgqHjgqTjg6vlkI3mloflrZcnIH1cbiAgICAgIF07XG5cbiAgICAgIGZvciAoY29uc3QgeyBwYXR0ZXJuLCBpc3N1ZSB9IG9mIGRhbmdlcm91c1BhdHRlcm5zKSB7XG4gICAgICAgIGlmIChwYXR0ZXJuLnRlc3Qob3V0cHV0UGF0aCkpIHtcbiAgICAgICAgICBzZWN1cml0eUlzc3Vlcy5wdXNoKGlzc3VlKTtcbiAgICAgICAgICBpZiAoaXNzdWUuaW5jbHVkZXMoJ+aUu+aSgycpIHx8IGlzc3VlLmluY2x1ZGVzKCfoqabooYwnKSkge1xuICAgICAgICAgICAgZXJyb3JzLnB1c2goYOWNsemZuuOBquODkeOCv+ODvOODs+OCkuaknOWHujogJHtpc3N1ZX1gKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd2FybmluZ3MucHVzaChg55aR44KP44GX44GE44OR44K/44O844Oz44KS5qSc5Ye6OiAke2lzc3VlfWApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyDnpoHmraLjg4fjgqPjg6zjgq/jg4jjg6rjg5Hjgr/jg7zjg7Pjga7jg4Hjgqfjg4Pjgq9cbiAgICAgIGZvciAoY29uc3QgZm9yYmlkZGVuUGF0dGVybiBvZiB0aGlzLmxpbWl0cy5mb3JiaWRkZW5EaXJlY3RvcnlQYXR0ZXJucykge1xuICAgICAgICBpZiAob3V0cHV0UGF0aC5pbmNsdWRlcyhmb3JiaWRkZW5QYXR0ZXJuKSkge1xuICAgICAgICAgIGVycm9ycy5wdXNoKGDnpoHmraLjgZXjgozjgZ/jg4fjgqPjg6zjgq/jg4jjg6rjgbjjga7lh7rlips6ICR7Zm9yYmlkZGVuUGF0dGVybn1gKTtcbiAgICAgICAgICBzZWN1cml0eUlzc3Vlcy5wdXNoKCfjgrfjgrnjg4bjg6Djg4fjgqPjg6zjgq/jg4jjg6rmm7jjgY3ovrzjgb/mlLvmkoMnKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyDmi6HlvLXlrZDjga7mpJzoqLxcbiAgICAgIGNvbnN0IGV4dGVuc2lvbiA9IHBhdGguZXh0bmFtZShvdXRwdXRQYXRoKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgaWYgKGV4dGVuc2lvbiAmJiAhdGhpcy5saW1pdHMuYWxsb3dlZE91dHB1dEV4dGVuc2lvbnMuaW5jbHVkZXMoZXh0ZW5zaW9uKSkge1xuICAgICAgICBlcnJvcnMucHVzaChg6Kix5Y+v44GV44KM44Gm44GE44Gq44GE5ouh5by15a2QOiAke2V4dGVuc2lvbn1gKTtcbiAgICAgICAgc2VjdXJpdHlJc3N1ZXMucHVzaCgn5a6f6KGM5Y+v6IO944OV44Kh44Kk44Or55Sf5oiQ5pS75pKD44Gu5Y+v6IO95oCnJyk7XG4gICAgICB9XG5cbiAgICAgIC8vIOODkeOCueino+axuuOBqOaknOiovFxuICAgICAgbGV0IHJlc29sdmVkUGF0aDogc3RyaW5nO1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmVzb2x2ZWRQYXRoID0gcGF0aC5yZXNvbHZlKG91dHB1dFBhdGgpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgZXJyb3JzLnB1c2goJ+WHuuWKm+ODkeOCueOBruino+axuuOBq+WkseaVl+OBl+OBvuOBl+OBnycpO1xuICAgICAgICByZXR1cm4geyBpc1ZhbGlkOiBmYWxzZSwgZXJyb3JzLCB3YXJuaW5ncywgc2VjdXJpdHlJc3N1ZXMgfTtcbiAgICAgIH1cblxuICAgICAgLy8g5Ye65Yqb44OH44Kj44Os44Kv44OI44Oq44Gu5a2Y5Zyo56K66KqN44Go5L2c5oiQ5qip6ZmQ44OB44Kn44OD44KvXG4gICAgICBjb25zdCBvdXRwdXREaXIgPSBwYXRoLmRpcm5hbWUocmVzb2x2ZWRQYXRoKTtcbiAgICAgIGlmICghZnMuZXhpc3RzU3luYyhvdXRwdXREaXIpKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8g6Kaq44OH44Kj44Os44Kv44OI44Oq44Gu5pu444GN6L6844G/5qip6ZmQ44OB44Kn44OD44KvXG4gICAgICAgICAgY29uc3QgcGFyZW50RGlyID0gcGF0aC5kaXJuYW1lKG91dHB1dERpcik7XG4gICAgICAgICAgaWYgKGZzLmV4aXN0c1N5bmMocGFyZW50RGlyKSkge1xuICAgICAgICAgICAgZnMuYWNjZXNzU3luYyhwYXJlbnREaXIsIGZzLmNvbnN0YW50cy5XX09LKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd2FybmluZ3MucHVzaCgn5Ye65Yqb44OH44Kj44Os44Kv44OI44Oq44Gu6Kaq44OH44Kj44Os44Kv44OI44Oq44GM5a2Y5Zyo44GX44G+44Gb44KTJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGVycm9ycy5wdXNoKCflh7rlipvjg4fjgqPjg6zjgq/jg4jjg6rjgbjjga7mm7jjgY3ovrzjgb/mqKnpmZDjgYzjgYLjgorjgb7jgZvjgpMnKTtcbiAgICAgICAgICBzZWN1cml0eUlzc3Vlcy5wdXNoKCfmqKnpmZDmmIfmoLzmlLvmkoPjga7lj6/og73mgKcnKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8g5pei5a2Y44OV44Kh44Kk44Or44Gu5LiK5pu444GN56K66KqNXG4gICAgICAgIGlmIChmcy5leGlzdHNTeW5jKHJlc29sdmVkUGF0aCkpIHtcbiAgICAgICAgICBjb25zdCBzdGF0cyA9IGZzLnN0YXRTeW5jKHJlc29sdmVkUGF0aCk7XG4gICAgICAgICAgaWYgKHN0YXRzLnNpemUgPiB0aGlzLmxpbWl0cy5tYXhPdXRwdXRGaWxlU2l6ZSkge1xuICAgICAgICAgICAgd2FybmluZ3MucHVzaCgn5Ye65Yqb44OV44Kh44Kk44Or44GM5aSn44GN44GZ44GO44G+44GZ77yI5LiK5pu444GN44GV44KM44G+44GZ77yJJyk7XG4gICAgICAgICAgICBzZWN1cml0eUlzc3Vlcy5wdXNoKCfjg4fjgqPjgrnjgq/kvb/nlKjph4/mlLvmkoPjga7lj6/og73mgKcnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8g44OX44Ot44K444Kn44Kv44OI56+E5Zuy5aSW5pu444GN6L6844G/44Gu5qSc6Ki877yI55u45a++44OR44K544Gu5aC05ZCI44Gu44G/77yJXG4gICAgICBpZiAoIXBhdGguaXNBYnNvbHV0ZShvdXRwdXRQYXRoKSkge1xuICAgICAgICBjb25zdCBzYWZlUGF0aCA9IFBhdGhTZWN1cml0eS5zYWZlUmVzb2x2ZShvdXRwdXRQYXRoLCB0aGlzLnByb2plY3RSb290LCAnY2xpLW91dHB1dC1wYXRoJyk7XG4gICAgICAgIGlmICghc2FmZVBhdGgpIHtcbiAgICAgICAgICBlcnJvcnMucHVzaCgn44OX44Ot44K444Kn44Kv44OI56+E5Zuy5aSW44G444Gu5Ye65Yqb44GM5qSc5Ye644GV44KM44G+44GX44GfJyk7XG4gICAgICAgICAgc2VjdXJpdHlJc3N1ZXMucHVzaCgn44OR44K544OI44Op44OQ44O844K144Or5pS75pKDJyk7XG4gICAgICAgICAgcmV0dXJuIHsgaXNWYWxpZDogZmFsc2UsIGVycm9ycywgd2FybmluZ3MsIHNlY3VyaXR5SXNzdWVzIH07XG4gICAgICAgIH1cbiAgICAgICAgcmVzb2x2ZWRQYXRoID0gc2FmZVBhdGg7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGlzVmFsaWQ6IGVycm9ycy5sZW5ndGggPT09IDAsXG4gICAgICAgIHNhbml0aXplZFZhbHVlOiByZXNvbHZlZFBhdGgsXG4gICAgICAgIGVycm9ycyxcbiAgICAgICAgd2FybmluZ3MsXG4gICAgICAgIHNlY3VyaXR5SXNzdWVzXG4gICAgICB9O1xuXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGVycm9ycy5wdXNoKCflh7rlipvjg5HjgrnmpJzoqLzkuK3jgavkuojmnJ/jgZfjgarjgYTjgqjjg6njg7zjgYznmbrnlJ/jgZfjgb7jgZfjgZ8nKTtcbiAgICAgIHNlY3VyaXR5SXNzdWVzLnB1c2goJ+WHuuWKm+ODkeOCueaknOiovOaUu+aSg+OBruWPr+iDveaApycpO1xuICAgICAgcmV0dXJuIHsgaXNWYWxpZDogZmFsc2UsIGVycm9ycywgd2FybmluZ3MsIHNlY3VyaXR5SXNzdWVzIH07XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOeSsOWig+WkieaVsOOBruaknOiovFxuICAgKi9cbiAgdmFsaWRhdGVFbnZpcm9ubWVudFZhcmlhYmxlcygpOiBDTElWYWxpZGF0aW9uUmVzdWx0IHtcbiAgICBjb25zdCBlcnJvcnM6IHN0cmluZ1tdID0gW107XG4gICAgY29uc3Qgd2FybmluZ3M6IHN0cmluZ1tdID0gW107XG4gICAgY29uc3Qgc2VjdXJpdHlJc3N1ZXM6IHN0cmluZ1tdID0gW107XG5cbiAgICBpZiAoIXRoaXMubGltaXRzLnZhbGlkYXRlRW52aXJvbm1lbnRWYXJpYWJsZXMpIHtcbiAgICAgIHJldHVybiB7IGlzVmFsaWQ6IHRydWUsIGVycm9ycywgd2FybmluZ3MsIHNlY3VyaXR5SXNzdWVzIH07XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIC8vIOWNsemZuuOBqueSsOWig+WkieaVsOOBruaknOWHulxuICAgICAgY29uc3QgZGFuZ2Vyb3VzRW52VmFycyA9IFtcbiAgICAgICAgJ0xEX1BSRUxPQUQnLFxuICAgICAgICAnTERfTElCUkFSWV9QQVRIJyxcbiAgICAgICAgJ0RZTERfSU5TRVJUX0xJQlJBUklFUycsXG4gICAgICAgICdEWUxEX0xJQlJBUllfUEFUSCcsXG4gICAgICAgICdQQVRIX09SSUdJTkFMJyxcbiAgICAgICAgJ1NIRUxMX09WRVJSSURFJyxcbiAgICAgICAgJ05PREVfT1BUSU9OUydcbiAgICAgIF07XG5cbiAgICAgIGZvciAoY29uc3QgZW52VmFyIG9mIGRhbmdlcm91c0VudlZhcnMpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52W2VudlZhcl0pIHtcbiAgICAgICAgICB3YXJuaW5ncy5wdXNoKGDljbHpmbrjgarnkrDlooPlpInmlbDjgYzoqK3lrprjgZXjgozjgabjgYTjgb7jgZk6ICR7ZW52VmFyfWApO1xuICAgICAgICAgIHNlY3VyaXR5SXNzdWVzLnB1c2goJ+eSsOWig+WkieaVsOOCpOODs+OCuOOCp+OCr+OCt+ODp+ODs+aUu+aSg+OBruWPr+iDveaApycpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFJJTU9S5Zu65pyJ44Gu55Kw5aKD5aSJ5pWw44Gu5qSc6Ki8XG4gICAgICBjb25zdCByaW1vckxhbmcgPSBwcm9jZXNzLmVudi5SSU1PUl9MQU5HO1xuICAgICAgaWYgKHJpbW9yTGFuZykge1xuICAgICAgICAvLyDoqIDoqp7oqK3lrprjga7mpJzoqLxcbiAgICAgICAgY29uc3QgYWxsb3dlZExhbmd1YWdlcyA9IFsnamEnLCAnZW4nLCAnemgnLCAna28nXTtcbiAgICAgICAgaWYgKCFhbGxvd2VkTGFuZ3VhZ2VzLmluY2x1ZGVzKHJpbW9yTGFuZykpIHtcbiAgICAgICAgICB3YXJuaW5ncy5wdXNoKGDmnKrlr77lv5zjga7oqIDoqp7oqK3lrpo6ICR7cmltb3JMYW5nfWApO1xuICAgICAgICAgIHNlY3VyaXR5SXNzdWVzLnB1c2goJ+eSsOWig+WkieaVsOaTjeS9nOaUu+aSg+OBruWPr+iDveaApycpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8g5Y2x6Zm644Gq44OR44K/44O844Oz44Gu5qSc5Ye6XG4gICAgICAgIGlmICgvW15hLXpBLVpfLV0vLnRlc3Qocmltb3JMYW5nKSkge1xuICAgICAgICAgIGVycm9ycy5wdXNoKCdSSU1PUl9MQU5H44Gr54Sh5Yq544Gq5paH5a2X44GM5ZCr44G+44KM44Gm44GE44G+44GZJyk7XG4gICAgICAgICAgc2VjdXJpdHlJc3N1ZXMucHVzaCgn55Kw5aKD5aSJ5pWw44Kk44Oz44K444Kn44Kv44K344On44Oz5pS75pKDJyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gTk9ERV9FTlbjga7mpJzoqLxcbiAgICAgIGNvbnN0IG5vZGVFbnYgPSBwcm9jZXNzLmVudi5OT0RFX0VOVjtcbiAgICAgIGlmIChub2RlRW52KSB7XG4gICAgICAgIGNvbnN0IGFsbG93ZWRFbnZzID0gWydkZXZlbG9wbWVudCcsICdwcm9kdWN0aW9uJywgJ3Rlc3QnXTtcbiAgICAgICAgaWYgKCFhbGxvd2VkRW52cy5pbmNsdWRlcyhub2RlRW52KSkge1xuICAgICAgICAgIHdhcm5pbmdzLnB1c2goYOacquWvvuW/nOOBrk5PREVfRU5W6Kit5a6aOiAke25vZGVFbnZ9YCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoL1teYS16QS1aXy1dLy50ZXN0KG5vZGVFbnYpKSB7XG4gICAgICAgICAgZXJyb3JzLnB1c2goJ05PREVfRU5W44Gr54Sh5Yq544Gq5paH5a2X44GM5ZCr44G+44KM44Gm44GE44G+44GZJyk7XG4gICAgICAgICAgc2VjdXJpdHlJc3N1ZXMucHVzaCgn55Kw5aKD5aSJ5pWw44Kk44Oz44K444Kn44Kv44K344On44Oz5pS75pKDJyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaXNWYWxpZDogZXJyb3JzLmxlbmd0aCA9PT0gMCxcbiAgICAgICAgZXJyb3JzLFxuICAgICAgICB3YXJuaW5ncyxcbiAgICAgICAgc2VjdXJpdHlJc3N1ZXNcbiAgICAgIH07XG5cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgZXJyb3JzLnB1c2goJ+eSsOWig+WkieaVsOaknOiovOS4reOBq+S6iOacn+OBl+OBquOBhOOCqOODqeODvOOBjOeZuueUn+OBl+OBvuOBl+OBnycpO1xuICAgICAgc2VjdXJpdHlJc3N1ZXMucHVzaCgn55Kw5aKD5aSJ5pWw5qSc6Ki85pS75pKD44Gu5Y+v6IO95oCnJyk7XG4gICAgICByZXR1cm4geyBpc1ZhbGlkOiBmYWxzZSwgZXJyb3JzLCB3YXJuaW5ncywgc2VjdXJpdHlJc3N1ZXMgfTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog44OV44Kp44O844Oe44OD44OI5byV5pWw44Gu5qSc6Ki8XG4gICAqL1xuICB2YWxpZGF0ZUZvcm1hdChmb3JtYXQ6IHN0cmluZyk6IENMSVZhbGlkYXRpb25SZXN1bHQge1xuICAgIGNvbnN0IGVycm9yczogc3RyaW5nW10gPSBbXTtcbiAgICBjb25zdCB3YXJuaW5nczogc3RyaW5nW10gPSBbXTtcbiAgICBjb25zdCBzZWN1cml0eUlzc3Vlczogc3RyaW5nW10gPSBbXTtcblxuICAgIHRyeSB7XG4gICAgICBpZiAoIWZvcm1hdCB8fCB0eXBlb2YgZm9ybWF0ICE9PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4geyBpc1ZhbGlkOiB0cnVlLCBzYW5pdGl6ZWRWYWx1ZTogJ3RleHQnLCBlcnJvcnMsIHdhcm5pbmdzLCBzZWN1cml0eUlzc3VlcyB9O1xuICAgICAgfVxuXG4gICAgICAvLyDoqLHlj6/jgZXjgozjgZ/jg5Xjgqnjg7zjg57jg4Pjg4hcbiAgICAgIGNvbnN0IGFsbG93ZWRGb3JtYXRzID0gWyd0ZXh0JywgJ2pzb24nLCAnY3N2JywgJ2h0bWwnLCAnbWFya2Rvd24nLCAnYWktanNvbiddO1xuICAgICAgXG4gICAgICBpZiAoIWFsbG93ZWRGb3JtYXRzLmluY2x1ZGVzKGZvcm1hdC50b0xvd2VyQ2FzZSgpKSkge1xuICAgICAgICBlcnJvcnMucHVzaChg5pyq5a++5b+c44Gu44OV44Kp44O844Oe44OD44OIOiAke2Zvcm1hdH1gKTtcbiAgICAgICAgc2VjdXJpdHlJc3N1ZXMucHVzaCgn44OV44Kp44O844Oe44OD44OI5oyH5a6a5pS75pKD44Gu5Y+v6IO95oCnJyk7XG4gICAgICAgIHJldHVybiB7IGlzVmFsaWQ6IGZhbHNlLCBlcnJvcnMsIHdhcm5pbmdzLCBzZWN1cml0eUlzc3VlcyB9O1xuICAgICAgfVxuXG4gICAgICAvLyDljbHpmbrjgarjg5Hjgr/jg7zjg7Pjga7mpJzlh7pcbiAgICAgIGlmICgvW15hLXpBLVowLTlfLV0vLnRlc3QoZm9ybWF0KSkge1xuICAgICAgICBlcnJvcnMucHVzaCgn44OV44Kp44O844Oe44OD44OI5oyH5a6a44Gr54Sh5Yq544Gq5paH5a2X44GM5ZCr44G+44KM44Gm44GE44G+44GZJyk7XG4gICAgICAgIHNlY3VyaXR5SXNzdWVzLnB1c2goJ+ODleOCqeODvOODnuODg+ODiOOCpOODs+OCuOOCp+OCr+OCt+ODp+ODs+aUu+aSgycpO1xuICAgICAgICByZXR1cm4geyBpc1ZhbGlkOiBmYWxzZSwgZXJyb3JzLCB3YXJuaW5ncywgc2VjdXJpdHlJc3N1ZXMgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaXNWYWxpZDogdHJ1ZSxcbiAgICAgICAgc2FuaXRpemVkVmFsdWU6IGZvcm1hdC50b0xvd2VyQ2FzZSgpLFxuICAgICAgICBlcnJvcnMsXG4gICAgICAgIHdhcm5pbmdzLFxuICAgICAgICBzZWN1cml0eUlzc3Vlc1xuICAgICAgfTtcblxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBlcnJvcnMucHVzaCgn44OV44Kp44O844Oe44OD44OI5qSc6Ki85Lit44Gr5LqI5pyf44GX44Gq44GE44Ko44Op44O844GM55m655Sf44GX44G+44GX44GfJyk7XG4gICAgICBzZWN1cml0eUlzc3Vlcy5wdXNoKCfjg5Xjgqnjg7zjg57jg4Pjg4jmpJzoqLzmlLvmkoPjga7lj6/og73mgKcnKTtcbiAgICAgIHJldHVybiB7IGlzVmFsaWQ6IGZhbHNlLCBlcnJvcnMsIHdhcm5pbmdzLCBzZWN1cml0eUlzc3VlcyB9O1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDjgZnjgbnjgabjga5DTEnlvJXmlbDjgpLkuIDmi6zmpJzoqLxcbiAgICovXG4gIHZhbGlkYXRlQWxsQXJndW1lbnRzKGFyZ3M6IHtcbiAgICBwYXRoPzogc3RyaW5nO1xuICAgIGZvcm1hdD86IHN0cmluZztcbiAgICBvdXRwdXRGaWxlPzogc3RyaW5nO1xuICB9KToge1xuICAgIGlzVmFsaWQ6IGJvb2xlYW47XG4gICAgc2FuaXRpemVkQXJnczoge1xuICAgICAgcGF0aD86IHN0cmluZztcbiAgICAgIGZvcm1hdD86ICd0ZXh0JyB8ICdqc29uJyB8ICdjc3YnIHwgJ2h0bWwnIHwgJ21hcmtkb3duJyB8ICdhaS1qc29uJztcbiAgICAgIG91dHB1dEZpbGU/OiBzdHJpbmc7XG4gICAgfTtcbiAgICBhbGxFcnJvcnM6IHN0cmluZ1tdO1xuICAgIGFsbFdhcm5pbmdzOiBzdHJpbmdbXTtcbiAgICBhbGxTZWN1cml0eUlzc3Vlczogc3RyaW5nW107XG4gIH0ge1xuICAgIGNvbnN0IGFsbEVycm9yczogc3RyaW5nW10gPSBbXTtcbiAgICBjb25zdCBhbGxXYXJuaW5nczogc3RyaW5nW10gPSBbXTtcbiAgICBjb25zdCBhbGxTZWN1cml0eUlzc3Vlczogc3RyaW5nW10gPSBbXTtcbiAgICBjb25zdCBzYW5pdGl6ZWRBcmdzOiB7XG4gICAgICBwYXRoPzogc3RyaW5nO1xuICAgICAgZm9ybWF0PzogJ3RleHQnIHwgJ2pzb24nIHwgJ2NzdicgfCAnaHRtbCcgfCAnbWFya2Rvd24nIHwgJ2FpLWpzb24nO1xuICAgICAgb3V0cHV0RmlsZT86IHN0cmluZztcbiAgICB9ID0ge307XG5cbiAgICAvLyDnkrDlooPlpInmlbDmpJzoqLxcbiAgICBjb25zdCBlbnZWYWxpZGF0aW9uID0gdGhpcy52YWxpZGF0ZUVudmlyb25tZW50VmFyaWFibGVzKCk7XG4gICAgYWxsRXJyb3JzLnB1c2goLi4uZW52VmFsaWRhdGlvbi5lcnJvcnMpO1xuICAgIGFsbFdhcm5pbmdzLnB1c2goLi4uZW52VmFsaWRhdGlvbi53YXJuaW5ncyk7XG4gICAgYWxsU2VjdXJpdHlJc3N1ZXMucHVzaCguLi5lbnZWYWxpZGF0aW9uLnNlY3VyaXR5SXNzdWVzKTtcblxuICAgIC8vIOODkeOCueaknOiovFxuICAgIGlmIChhcmdzLnBhdGgpIHtcbiAgICAgIGNvbnN0IHBhdGhWYWxpZGF0aW9uID0gdGhpcy52YWxpZGF0ZUFuYWx5c2lzUGF0aChhcmdzLnBhdGgpO1xuICAgICAgYWxsRXJyb3JzLnB1c2goLi4ucGF0aFZhbGlkYXRpb24uZXJyb3JzKTtcbiAgICAgIGFsbFdhcm5pbmdzLnB1c2goLi4ucGF0aFZhbGlkYXRpb24ud2FybmluZ3MpO1xuICAgICAgYWxsU2VjdXJpdHlJc3N1ZXMucHVzaCguLi5wYXRoVmFsaWRhdGlvbi5zZWN1cml0eUlzc3Vlcyk7XG4gICAgICBpZiAocGF0aFZhbGlkYXRpb24uaXNWYWxpZCkge1xuICAgICAgICBzYW5pdGl6ZWRBcmdzLnBhdGggPSBwYXRoVmFsaWRhdGlvbi5zYW5pdGl6ZWRWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyDjg5Xjgqnjg7zjg57jg4Pjg4jmpJzoqLxcbiAgICBjb25zdCBmb3JtYXRWYWxpZGF0aW9uID0gdGhpcy52YWxpZGF0ZUZvcm1hdChhcmdzLmZvcm1hdCB8fCAndGV4dCcpO1xuICAgIGFsbEVycm9ycy5wdXNoKC4uLmZvcm1hdFZhbGlkYXRpb24uZXJyb3JzKTtcbiAgICBhbGxXYXJuaW5ncy5wdXNoKC4uLmZvcm1hdFZhbGlkYXRpb24ud2FybmluZ3MpO1xuICAgIGFsbFNlY3VyaXR5SXNzdWVzLnB1c2goLi4uZm9ybWF0VmFsaWRhdGlvbi5zZWN1cml0eUlzc3Vlcyk7XG4gICAgaWYgKGZvcm1hdFZhbGlkYXRpb24uaXNWYWxpZCkge1xuICAgICAgc2FuaXRpemVkQXJncy5mb3JtYXQgPSBmb3JtYXRWYWxpZGF0aW9uLnNhbml0aXplZFZhbHVlIGFzICd0ZXh0JyB8ICdqc29uJyB8ICdjc3YnIHwgJ2h0bWwnO1xuICAgIH1cblxuICAgIC8vIOWHuuWKm+ODleOCoeOCpOODq+aknOiovFxuICAgIGlmIChhcmdzLm91dHB1dEZpbGUpIHtcbiAgICAgIGNvbnN0IG91dHB1dFZhbGlkYXRpb24gPSB0aGlzLnZhbGlkYXRlT3V0cHV0UGF0aChhcmdzLm91dHB1dEZpbGUpO1xuICAgICAgYWxsRXJyb3JzLnB1c2goLi4ub3V0cHV0VmFsaWRhdGlvbi5lcnJvcnMpO1xuICAgICAgYWxsV2FybmluZ3MucHVzaCguLi5vdXRwdXRWYWxpZGF0aW9uLndhcm5pbmdzKTtcbiAgICAgIGFsbFNlY3VyaXR5SXNzdWVzLnB1c2goLi4ub3V0cHV0VmFsaWRhdGlvbi5zZWN1cml0eUlzc3Vlcyk7XG4gICAgICBpZiAob3V0cHV0VmFsaWRhdGlvbi5pc1ZhbGlkKSB7XG4gICAgICAgIHNhbml0aXplZEFyZ3Mub3V0cHV0RmlsZSA9IG91dHB1dFZhbGlkYXRpb24uc2FuaXRpemVkVmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGlzVmFsaWQ6IGFsbEVycm9ycy5sZW5ndGggPT09IDAsXG4gICAgICBzYW5pdGl6ZWRBcmdzLFxuICAgICAgYWxsRXJyb3JzLFxuICAgICAgYWxsV2FybmluZ3MsXG4gICAgICBhbGxTZWN1cml0eUlzc3Vlc1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICog44K744Kt44Ol44Oq44OG44Kj5Yi26ZmQ44Gu5pu05pawXG4gICAqL1xuICB1cGRhdGVMaW1pdHMobmV3TGltaXRzOiBQYXJ0aWFsPENMSVNlY3VyaXR5TGltaXRzPik6IHZvaWQge1xuICAgIHRoaXMubGltaXRzID0geyAuLi50aGlzLmxpbWl0cywgLi4ubmV3TGltaXRzIH07XG4gIH1cbn0iXSwidmVyc2lvbiI6M30=