{"file":"/Users/sasakama/Projects/Rimor/test/security/ConfigSecurity.test.ts","mappings":"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","names":[],"sources":["/Users/sasakama/Projects/Rimor/test/security/ConfigSecurity.test.ts"],"sourcesContent":["/**\n * ConfigSecurityセキュリティテスト - v0.4.1\n * 設定ファイルセキュリティの包括的テスト\n */\n\nimport { ConfigSecurity, DEFAULT_CONFIG_SECURITY_LIMITS } from '../../src/security/ConfigSecurity';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as os from 'os';\n\ndescribe('ConfigSecurity Security Tests', () => {\n  let configSecurity: ConfigSecurity;\n  let tempDir: string;\n\n  beforeEach(() => {\n    tempDir = fs.mkdtempSync(path.join(os.tmpdir(), 'rimor-config-test-'));\n    configSecurity = new ConfigSecurity(DEFAULT_CONFIG_SECURITY_LIMITS);\n  });\n\n  afterEach(() => {\n    if (fs.existsSync(tempDir)) {\n      fs.rmSync(tempDir, { recursive: true, force: true });\n    }\n  });\n\n  describe('悪意ある設定ファイルの検出と防止', () => {\n    test('プロトタイプ汚染攻撃を防ぐ', async () => {\n      // JSON.stringify()は__proto__を除外するため、文字列として直接作成\n      const maliciousConfig = `{\n        \"__proto__\": {\n          \"isAdmin\": true,\n          \"polluted\": \"malicious_payload\"\n        },\n        \"plugins\": {\n          \"test-plugin\": {\n            \"enabled\": true\n          }\n        }\n      }`;\n\n      const configPath = path.join(tempDir, 'malicious.json');\n      fs.writeFileSync(configPath, maliciousConfig);\n\n      const result = await configSecurity.loadAndValidateConfig(configPath, tempDir);\n      \n      // ConfigSecurityは攻撃を無効化して処理を継続する設計\n      expect(result.isValid).toBe(true);\n      expect(result.securityIssues).toContain('プロトタイプ汚染攻撃を無効化');\n    });\n\n    test('constructor汚染攻撃を防ぐ', async () => {\n      // 文字列として直接作成してconstructor汚染を含める\n      const maliciousConfig = `{\n        \"constructor\": {\n          \"prototype\": {\n            \"isAdmin\": true\n          }\n        },\n        \"plugins\": {}\n      }`;\n\n      const configPath = path.join(tempDir, 'constructor-attack.json');\n      fs.writeFileSync(configPath, maliciousConfig);\n\n      const result = await configSecurity.loadAndValidateConfig(configPath, tempDir);\n      \n      // ConfigSecurityは攻撃を無効化して処理を継続する設計\n      expect(result.isValid).toBe(true);\n      expect(result.securityIssues).toContain('プロトタイプ汚染攻撃を無効化');\n    });\n\n    test('eval実行攻撃を防ぐ', async () => {\n      const maliciousConfig = `{\n        \"plugins\": {\n          \"malicious\": {\n            \"enabled\": true,\n            \"command\": \"eval('require(\\\\\"child_process\\\\\").exec(\\\\\"malicious_command\\\\\")')\"\n          }\n        }\n      }`;\n\n      const configPath = path.join(tempDir, 'eval-attack.json');\n      fs.writeFileSync(configPath, maliciousConfig);\n\n      const result = await configSecurity.loadAndValidateConfig(configPath, tempDir);\n      \n      expect(result.isValid).toBe(false);\n      expect(result.securityIssues).toContain('eval実行攻撃');\n    });\n\n    test('require攻撃を防ぐ', async () => {\n      const maliciousConfig = `{\n        \"plugins\": {\n          \"malicious\": {\n            \"enabled\": true,\n            \"script\": \"require('child_process').exec('rm -rf /')\"\n          }\n        }\n      }`;\n\n      const configPath = path.join(tempDir, 'require-attack.json');\n      fs.writeFileSync(configPath, maliciousConfig);\n\n      const result = await configSecurity.loadAndValidateConfig(configPath, tempDir);\n      \n      expect(result.isValid).toBe(false);\n      expect(result.securityIssues).toContain('任意モジュール読み込み攻撃');\n    });\n\n    test('パストラバーサル攻撃を防ぐ', async () => {\n      const maliciousConfig = JSON.stringify({\n        \"excludePatterns\": [\n          \"../../../etc/passwd\",\n          \"../../../../root/.ssh/\"\n        ],\n        \"plugins\": {}\n      });\n\n      const configPath = path.join(tempDir, 'traversal-attack.json');\n      fs.writeFileSync(configPath, maliciousConfig);\n\n      const result = await configSecurity.loadAndValidateConfig(configPath, tempDir);\n      \n      expect(result.isValid).toBe(false);\n      expect(result.securityIssues).toContain('パストラバーサル攻撃');\n    });\n\n    test('システムディレクトリアクセス攻撃を防ぐ', async () => {\n      const maliciousConfig = JSON.stringify({\n        \"plugins\": {\n          \"malicious\": {\n            \"enabled\": true,\n            \"outputPath\": \"/etc/cron.daily/backdoor\"\n          }\n        }\n      });\n\n      const configPath = path.join(tempDir, 'system-access.json');\n      fs.writeFileSync(configPath, maliciousConfig);\n\n      const result = await configSecurity.loadAndValidateConfig(configPath, tempDir);\n      \n      expect(result.isValid).toBe(false);\n      expect(result.securityIssues).toContain('システムディレクトリアクセス攻撃');\n    });\n\n    test('Unicode攻撃を防ぐ', async () => {\n      const maliciousConfig = `{\n        \"plugins\": {\n          \"malicious\": {\n            \"enabled\": true,\n            \"command\": \"\\\\u0065\\\\u0076\\\\u0061\\\\u006c('malicious')\"\n          }\n        }\n      }`;\n\n      const configPath = path.join(tempDir, 'unicode-attack.json');\n      fs.writeFileSync(configPath, maliciousConfig);\n\n      const result = await configSecurity.loadAndValidateConfig(configPath, tempDir);\n      \n      expect(result.isValid).toBe(false);\n      expect(result.securityIssues).toContain('Unicode攻撃');\n    });\n  });\n\n  describe('DoS攻撃の防止', () => {\n    test('巨大ファイルサイズ攻撃を防ぐ', async () => {\n      const largeConfig = JSON.stringify({\n        plugins: {\n          test: {\n            enabled: true,\n            largeData: 'x'.repeat(1024 * 1024) // 1MB\n          }\n        }\n      });\n\n      const configPath = path.join(tempDir, 'large-config.json');\n      fs.writeFileSync(configPath, largeConfig);\n\n      const result = await configSecurity.loadAndValidateConfig(configPath, tempDir);\n      \n      expect(result.isValid).toBe(false);\n      expect(result.securityIssues).toContain('DoS攻撃の可能性');\n    });\n\n    test('深いネスト攻撃を防ぐ', async () => {\n      let deepObject: any = { plugins: {} };\n      let current = deepObject;\n      \n      // 10層の深いネストを作成（制限は5層）\n      for (let i = 0; i < 10; i++) {\n        current.nested = {};\n        current = current.nested;\n      }\n\n      const configPath = path.join(tempDir, 'deep-nested.json');\n      fs.writeFileSync(configPath, JSON.stringify(deepObject));\n\n      const result = await configSecurity.loadAndValidateConfig(configPath, tempDir);\n      \n      expect(result.isValid).toBe(false);\n      expect(result.securityIssues).toContain('DoS攻撃（深いネスト）');\n    });\n\n    test('大量プロパティ攻撃を防ぐ', async () => {\n      const manyPropsConfig: any = { plugins: {} };\n      \n      // 200個のプロパティを作成（制限は100個）\n      for (let i = 0; i < 200; i++) {\n        manyPropsConfig.plugins[`plugin${i}`] = { enabled: true };\n      }\n\n      const configPath = path.join(tempDir, 'many-props.json');\n      fs.writeFileSync(configPath, JSON.stringify(manyPropsConfig));\n\n      const result = await configSecurity.loadAndValidateConfig(configPath, tempDir);\n      \n      expect(result.isValid).toBe(false);\n      expect(result.securityIssues).toContain('DoS攻撃（大きなオブジェクト）');\n    });\n\n    test('長い配列攻撃を防ぐ', async () => {\n      const longArrayConfig = {\n        excludePatterns: new Array(100).fill('pattern'), // 制限は50個\n        plugins: {}\n      };\n\n      const configPath = path.join(tempDir, 'long-array.json');\n      fs.writeFileSync(configPath, JSON.stringify(longArrayConfig));\n\n      const result = await configSecurity.loadAndValidateConfig(configPath, tempDir);\n      \n      expect(result.isValid).toBe(false);\n      expect(result.securityIssues).toContain('DoS攻撃（大きな配列）');\n    });\n\n    test('異常に長い文字列攻撃を防ぐ', async () => {\n      const longStringConfig = {\n        plugins: {\n          test: {\n            enabled: true,\n            description: 'x'.repeat(1000) // 制限は500文字\n          }\n        }\n      };\n\n      const configPath = path.join(tempDir, 'long-string.json');\n      fs.writeFileSync(configPath, JSON.stringify(longStringConfig));\n\n      const result = await configSecurity.loadAndValidateConfig(configPath, tempDir);\n      \n      expect(result.isValid).toBe(true);\n      expect(result.securityIssues).toContain('データ圧迫攻撃の可能性');\n    });\n  });\n\n  describe('安全な設定ファイルの処理', () => {\n    test('正常な設定ファイルは受け入れられる', async () => {\n      const validConfig = {\n        excludePatterns: ['node_modules/**', 'dist/**'],\n        plugins: {\n          'test-existence': {\n            enabled: true,\n            excludeFiles: ['index.ts', 'types.ts']\n          },\n          'assertion-exists': {\n            enabled: false\n          }\n        },\n        output: {\n          format: 'json',\n          verbose: true\n        }\n      };\n\n      const configPath = path.join(tempDir, 'valid.json');\n      fs.writeFileSync(configPath, JSON.stringify(validConfig, null, 2));\n\n      const result = await configSecurity.loadAndValidateConfig(configPath, tempDir);\n      \n      expect(result.isValid).toBe(true);\n      expect(result.sanitizedConfig).toBeDefined();\n      if (result.sanitizedConfig) {\n        const config = result.sanitizedConfig as Record<string, any>;\n        expect(config.plugins['test-existence'].enabled).toBe(true);\n      }\n    });\n\n    test('危険なパターンがサニタイズされる', async () => {\n      const configWithDangerousPatterns = {\n        excludePatterns: [\n          'node_modules/**',\n          '../../../etc/passwd', // 危険なパターン（削除される）\n          'dist/**'\n        ],\n        plugins: {\n          'safe-plugin': {\n            enabled: true\n          }\n        }\n      };\n\n      const configPath = path.join(tempDir, 'sanitize-test.json');\n      fs.writeFileSync(configPath, JSON.stringify(configWithDangerousPatterns));\n\n      const result = await configSecurity.loadAndValidateConfig(configPath, tempDir);\n      \n      expect(result.isValid).toBe(true);\n      expect(result.warnings.length).toBeGreaterThan(0);\n      if (result.sanitizedConfig) {\n        const config = result.sanitizedConfig as Record<string, any>;\n        expect(config.excludePatterns).not.toContain('../../../etc/passwd');\n      }\n    });\n\n    test('無効なプラグイン設定がフィルタリングされる', async () => {\n      const configWithInvalidPlugins = {\n        plugins: {\n          'valid-plugin': {\n            enabled: true\n          },\n          'invalid@plugin': { // 無効な名前\n            enabled: true\n          },\n          'missing-enabled': { // enabled が missing\n            description: 'test'\n          }\n        }\n      };\n\n      const configPath = path.join(tempDir, 'filter-test.json');\n      fs.writeFileSync(configPath, JSON.stringify(configWithInvalidPlugins));\n\n      const result = await configSecurity.loadAndValidateConfig(configPath, tempDir);\n      \n      expect(result.isValid).toBe(false);\n      expect(result.errors.length).toBeGreaterThan(0);\n      expect(result.errors.some(e => e.includes('不正なプラグイン名: invalid@plugin'))).toBe(true);\n    });\n  });\n\n  describe('パス検証とプロジェクト範囲', () => {\n    test('プロジェクト範囲外の設定ファイルを拒否する', async () => {\n      const outsideConfig = path.join('/tmp', 'outside.json');\n      fs.writeFileSync(outsideConfig, JSON.stringify({ plugins: {} }));\n\n      const result = await configSecurity.loadAndValidateConfig(outsideConfig, tempDir);\n      \n      expect(result.isValid).toBe(false);\n      expect(result.errors).toContain('設定ファイルのパスが不正です');\n      expect(result.securityIssues).toContain('パストラバーサル攻撃を検出');\n\n      fs.unlinkSync(outsideConfig);\n    });\n\n    test('存在しない設定ファイルを適切に処理する', async () => {\n      const nonExistentPath = path.join(tempDir, 'non-existent.json');\n\n      const result = await configSecurity.loadAndValidateConfig(nonExistentPath, tempDir);\n      \n      expect(result.isValid).toBe(false);\n      expect(result.errors).toContain('設定ファイルが存在しません');\n    });\n  });\n\n  describe('エラーハンドリングと回復処理', () => {\n    test('不正なJSONを適切に処理する', async () => {\n      const invalidJson = '{ \"plugins\": { \"test\": enabled: true } }'; // 不正なJSON\n\n      const configPath = path.join(tempDir, 'invalid.json');\n      fs.writeFileSync(configPath, invalidJson);\n\n      const result = await configSecurity.loadAndValidateConfig(configPath, tempDir);\n      \n      expect(result.isValid).toBe(false);\n      expect(result.securityIssues).toContain('JSON解析攻撃の可能性');\n    });\n\n    test('空の設定ファイルを適切に処理する', async () => {\n      const configPath = path.join(tempDir, 'empty.json');\n      fs.writeFileSync(configPath, '');\n\n      const result = await configSecurity.loadAndValidateConfig(configPath, tempDir);\n      \n      expect(result.isValid).toBe(false);\n      expect(result.errors).toContain('設定ファイルが空です');\n    });\n\n    test('セキュリティ制限の更新', () => {\n      const newLimits = {\n        maxFileSize: 256 * 1024, // 256KB\n        maxObjectDepth: 3,\n        maxProperties: 50\n      };\n\n      configSecurity.updateLimits(newLimits);\n      \n      // 制限の更新確認は間接的（実際の制限値は非公開）\n      expect(configSecurity).toBeDefined();\n    });\n  });\n\n  describe('型安全性テスト (v0.8.0)', () => {\n    test('ConfigValidationResult.sanitizedConfig はunknown型として扱われる', async () => {\n      const validConfig = {\n        plugins: {\n          'test-plugin': { enabled: true }\n        }\n      };\n      \n      const configPath = path.join(tempDir, 'valid.json');\n      fs.writeFileSync(configPath, JSON.stringify(validConfig));\n      \n      const result = await configSecurity.loadAndValidateConfig(configPath, tempDir);\n      \n      if (result.isValid && result.sanitizedConfig) {\n        // unknown型として扱われることを確認\n        const config = result.sanitizedConfig;\n        \n        // 型ガードやアサーションが必要\n        expect(typeof config).toBe('object');\n        expect(config).not.toBeNull();\n        \n        // プロパティアクセスには型チェックが必要\n        if (config && typeof config === 'object' && 'plugins' in config) {\n          expect(config.plugins).toBeDefined();\n        }\n      }\n    });\n\n    test('様々な型の設定値を安全に処理', async () => {\n      const mixedConfig = {\n        stringValue: 'text',\n        numberValue: 42,\n        booleanValue: true,\n        nullValue: null,\n        arrayValue: [1, 2, 3],\n        objectValue: { nested: 'data' },\n        plugins: {}\n      };\n      \n      const configPath = path.join(tempDir, 'mixed.json');\n      fs.writeFileSync(configPath, JSON.stringify(mixedConfig));\n      \n      const result = await configSecurity.loadAndValidateConfig(configPath, tempDir);\n      \n      expect(result.isValid).toBe(true);\n      if (result.sanitizedConfig) {\n        // unknown型として適切に処理されることを確認\n        const config = result.sanitizedConfig;\n        expect(config).toBeDefined();\n        expect(typeof config).toBe('object');\n      }\n    });\n\n    test('不正な型の設定値を検出して拒否', async () => {\n      // JSONでは表現できないが、文字列として不正な構造を作成\n      const invalidConfig = '{ \"test\": undefined }';\n      \n      const configPath = path.join(tempDir, 'invalid.json');\n      fs.writeFileSync(configPath, invalidConfig);\n      \n      const result = await configSecurity.loadAndValidateConfig(configPath, tempDir);\n      \n      expect(result.isValid).toBe(false);\n      expect(result.errors.length).toBeGreaterThan(0);\n    });\n\n    test('配列内の要素の型チェック', async () => {\n      const arrayConfig = {\n        excludePatterns: ['valid', 123, null, { obj: 'invalid' }],\n        plugins: {}\n      };\n      \n      const configPath = path.join(tempDir, 'array-types.json');\n      fs.writeFileSync(configPath, JSON.stringify(arrayConfig));\n      \n      const result = await configSecurity.loadAndValidateConfig(configPath, tempDir);\n      \n      // 型の検証が行われることを確認\n      expect(result.warnings.length).toBeGreaterThan(0);\n      if (result.sanitizedConfig) {\n        const config = result.sanitizedConfig as Record<string, unknown>;\n        if (Array.isArray(config.excludePatterns)) {\n          // 文字列以外の要素がフィルタリングされることを確認\n          config.excludePatterns.forEach((pattern: unknown) => {\n            expect(typeof pattern).toBe('string');\n          });\n        }\n      }\n    });\n\n    test('深くネストされたオブジェクトの型安全性', async () => {\n      const nestedConfig = {\n        level1: {\n          level2: {\n            level3: {\n              value: 'deep'\n            }\n          }\n        },\n        plugins: {}\n      };\n      \n      const configPath = path.join(tempDir, 'nested.json');\n      fs.writeFileSync(configPath, JSON.stringify(nestedConfig));\n      \n      const result = await configSecurity.loadAndValidateConfig(configPath, tempDir);\n      \n      expect(result.isValid).toBe(true);\n      if (result.sanitizedConfig) {\n        // 深いネストへのアクセスには適切な型チェックが必要\n        const config = result.sanitizedConfig;\n        expect(config).toBeDefined();\n        \n        // 安全なアクセスのためのヘルパー関数\n        const safeAccess = (obj: unknown, ...keys: string[]): unknown => {\n          let current: unknown = obj;\n          for (const key of keys) {\n            if (current && typeof current === 'object' && key in current) {\n              current = (current as Record<string, unknown>)[key];\n            } else {\n              return undefined;\n            }\n          }\n          return current;\n        };\n        \n        const deepValue = safeAccess(config, 'level1', 'level2', 'level3', 'value');\n        expect(deepValue).toBe('deep');\n      }\n    });\n  });\n});"],"version":3}