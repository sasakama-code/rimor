{"file":"/Users/sasakama/Projects/Rimor/src/analyzers/dependency-analysis/file-deps.ts","mappings":"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","names":[],"sources":["/Users/sasakama/Projects/Rimor/src/analyzers/dependency-analysis/file-deps.ts"],"sourcesContent":["/**\n * FileDependencyAnalyzer\n * Issue #65: ファイルレベルの依存関係分析\n * \n * SOLID原則: 単一責任（ファイル依存関係のみ）\n * DRY原則: インポート解析ロジックの共通化\n * KISS原則: シンプルな正規表現ベースの解析\n */\n\nimport { FileDependency } from '../types';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\n/**\n * ファイルレベルの依存関係を分析\n */\nexport class FileDependencyAnalyzer {\n  private readonly BUILTIN_MODULES = [\n    'fs', 'path', 'os', 'crypto', 'http', 'https', 'url', 'util',\n    'stream', 'events', 'buffer', 'child_process', 'cluster',\n    'dgram', 'dns', 'net', 'readline', 'repl', 'tls', 'tty',\n    'v8', 'vm', 'worker_threads', 'zlib'\n  ];\n\n  /**\n   * ファイルの依存関係を分析\n   */\n  async analyzeFileDependencies(filePath: string): Promise<{\n    file: string;\n    imports: string[];\n    exports: string[];\n    dependsOn: string[];\n    dependedBy: string[];\n    packageImports?: string[];\n  }> {\n    if (!fs.existsSync(filePath)) {\n      throw new Error('File not found');\n    }\n\n    const content = fs.readFileSync(filePath, 'utf-8');\n    const imports = this.extractImports(content);\n    const exports = this.extractExports(content);\n    const packageImports = imports.filter(imp => this.getImportType(imp) === 'external');\n\n    return {\n      file: filePath,\n      imports,\n      exports,\n      dependsOn: imports.filter(imp => this.getImportType(imp) === 'relative'),\n      dependedBy: [],\n      packageImports\n    };\n  }\n\n  /**\n   * インポート文を抽出\n   */\n  private extractImports(content: string): string[] {\n    const imports: string[] = [];\n\n    // ES6 import文\n    const es6ImportRegex = /import\\s+(?:(?:\\{[^}]*\\}|\\*\\s+as\\s+\\w+|\\w+)\\s+from\\s+)?['\"]([^'\"]+)['\"]/g;\n    let match;\n    while ((match = es6ImportRegex.exec(content)) !== null) {\n      imports.push(match[1]);\n    }\n\n    // CommonJS require文\n    const requireRegex = /require\\s*\\(\\s*['\"]([^'\"]+)['\"]\\s*\\)/g;\n    while ((match = requireRegex.exec(content)) !== null) {\n      imports.push(match[1]);\n    }\n\n    // Dynamic import\n    const dynamicImportRegex = /import\\s*\\(\\s*['\"]([^'\"]+)['\"]\\s*\\)/g;\n    while ((match = dynamicImportRegex.exec(content)) !== null) {\n      imports.push(match[1]);\n    }\n\n    return [...new Set(imports)]; // 重複を除去\n  }\n\n  /**\n   * エクスポート文を抽出\n   */\n  private extractExports(content: string): string[] {\n    const exports: string[] = [];\n\n    // Named exports\n    const namedExportRegex = /export\\s+(?:const|let|var|function|class)\\s+(\\w+)/g;\n    let match;\n    while ((match = namedExportRegex.exec(content)) !== null) {\n      exports.push(match[1]);\n    }\n\n    // Default export\n    if (/export\\s+default/g.test(content)) {\n      exports.push('default');\n    }\n\n    // Re-exports\n    const reExportRegex = /export\\s*\\{\\s*([^}]+)\\s*\\}\\s*from/g;\n    while ((match = reExportRegex.exec(content)) !== null) {\n      const items = match[1].split(',').map(item => item.trim());\n      items.forEach(item => {\n        const [name] = item.split(' as ');\n        exports.push(name.trim());\n      });\n    }\n\n    // CommonJS exports\n    const commonjsExportRegex = /module\\.exports\\s*=\\s*\\{([^}]+)\\}/g;\n    while ((match = commonjsExportRegex.exec(content)) !== null) {\n      const items = match[1].split(',').map(item => item.trim());\n      items.forEach(item => {\n        const [name] = item.split(':');\n        exports.push(name.trim());\n      });\n    }\n\n    return [...new Set(exports)]; // 重複を除去\n  }\n\n  /**\n   * インポートタイプを判定\n   */\n  getImportType(importPath: string): 'relative' | 'external' | 'builtin' {\n    if (importPath.startsWith('./') || importPath.startsWith('../')) {\n      return 'relative';\n    }\n    if (this.BUILTIN_MODULES.includes(importPath)) {\n      return 'builtin';\n    }\n    return 'external';\n  }\n\n  /**\n   * ファイル間の依存関係グラフを構築\n   */\n  async buildDependencyGraph(projectPath: string, files: string[]): Promise<Map<string, FileDependency>> {\n    const graph = new Map<string, FileDependency>();\n\n    // 各ファイルの依存関係を分析\n    for (const file of files) {\n      const filePath = path.join(projectPath, file);\n      if (fs.existsSync(filePath)) {\n        const deps = await this.analyzeFileDependencies(filePath);\n        graph.set(file, {\n          file,\n          imports: deps.imports.filter(imp => this.getImportType(imp) === 'relative'),\n          exports: deps.exports,\n          dependsOn: deps.imports.filter(imp => this.getImportType(imp) === 'relative'),\n          dependedBy: []\n        });\n      }\n    }\n\n    // dependedByを計算\n    for (const [file, deps] of graph.entries()) {\n      for (const importPath of deps.imports) {\n        const resolvedPath = this.resolveImportPath(file, importPath);\n        const importedFile = graph.get(resolvedPath);\n        if (importedFile) {\n          importedFile.dependedBy.push(file);\n        }\n      }\n    }\n\n    return graph;\n  }\n\n  /**\n   * 相対インポートパスを解決\n   */\n  private resolveImportPath(currentFile: string, importPath: string): string {\n    const dir = path.dirname(currentFile);\n    let resolved = path.join(dir, importPath);\n    \n    // 拡張子を追加\n    if (!path.extname(resolved)) {\n      const extensions = ['.ts', '.tsx', '.js', '.jsx'];\n      for (const ext of extensions) {\n        if (fs.existsSync(resolved + ext)) {\n          resolved += ext;\n          break;\n        }\n      }\n    }\n    \n    return path.normalize(resolved);\n  }\n}"],"version":3}