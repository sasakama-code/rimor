{"file":"/Users/sasakama/Projects/Rimor/src/analyzers/structure-analysis/architecture-detector.ts","mappings":"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","names":[],"sources":["/Users/sasakama/Projects/Rimor/src/analyzers/structure-analysis/architecture-detector.ts"],"sourcesContent":["/**\n * ArchitectureDetector\n * Issue #65: アーキテクチャパターン検出専用モジュール\n * \n * SOLID原則: 単一責任（アーキテクチャ検出のみ）\n * DRY原則: パターン検出ロジックの共通化\n * KISS原則: シンプルなパターンマッチング\n */\n\nimport { ArchitecturePattern, ArchitectureType } from '../types';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\n/**\n * プロジェクトのアーキテクチャパターンを検出\n */\nexport class ArchitectureDetector {\n  private readonly patterns = {\n    MVC: {\n      directories: ['controllers', 'models', 'views', 'routes'],\n      files: ['Controller', 'Model', 'View'],\n      confidence: 0.8\n    },\n    Layered: {\n      directories: ['presentation', 'application', 'domain', 'infrastructure', 'persistence'],\n      files: ['Service', 'Repository', 'Entity', 'UseCase'],\n      confidence: 0.8\n    },\n    Microservices: {\n      directories: ['services', 'api-gateway', 'service-discovery'],\n      files: ['Service', 'Gateway', 'Registry'],\n      confidence: 0.7\n    },\n    Hexagonal: {\n      directories: ['adapters', 'ports', 'domain', 'application'],\n      files: ['Port', 'Adapter', 'UseCase'],\n      confidence: 0.75\n    },\n    CleanArchitecture: {\n      directories: ['entities', 'use-cases', 'interface-adapters', 'frameworks'],\n      files: ['Entity', 'UseCase', 'Controller', 'Gateway'],\n      confidence: 0.75\n    }\n  };\n\n  /**\n   * アーキテクチャパターンを検出\n   */\n  async detectPattern(projectPath: string): Promise<ArchitecturePattern> {\n    if (!fs.existsSync(projectPath)) {\n      throw new Error(`Project path does not exist: ${projectPath}`);\n    }\n\n    const directories = this.getDirectories(projectPath);\n    const files = await this.getProjectFiles(projectPath);\n    \n    const detectedPatterns: ArchitecturePattern[] = [];\n\n    // 各パターンをチェック\n    for (const [patternName, pattern] of Object.entries(this.patterns)) {\n      const evidence: string[] = [];\n      let score = 0;\n\n      // ディレクトリ構造をチェック\n      const dirScore = this.checkDirectories(directories, pattern.directories, evidence);\n      score += dirScore * 0.6; // ディレクトリ構造は60%の重み\n\n      // ファイル命名パターンをチェック\n      const fileScore = this.checkFilePatterns(files, pattern.files, evidence);\n      score += fileScore * 0.4; // ファイル命名は40%の重み\n\n      if (score > 0) {\n        detectedPatterns.push({\n          type: patternName.toLowerCase() as ArchitectureType,\n          confidence: score * pattern.confidence,\n          evidence,\n          suggestions: this.getSuggestions(patternName)\n        });\n      }\n    }\n\n    // 最も確信度の高いパターンを返す\n    if (detectedPatterns.length > 0) {\n      detectedPatterns.sort((a, b) => b.confidence - a.confidence);\n      return detectedPatterns[0];\n    }\n\n    // デフォルトはMonolithic\n    return {\n      type: 'monolithic',\n      confidence: 0.5,\n      evidence: ['No specific architecture pattern detected'],\n      suggestions: this.getSuggestions('Monolithic')\n    };\n  }\n\n  /**\n   * ディレクトリ一覧を取得\n   */\n  private getDirectories(projectPath: string): string[] {\n    const items = fs.readdirSync(projectPath);\n    const directories: string[] = [];\n\n    for (const item of items) {\n      if (item.startsWith('.') || item === 'node_modules') continue;\n      \n      const itemPath = path.join(projectPath, item);\n      const stat = fs.statSync(itemPath);\n      \n      if (stat.isDirectory()) {\n        directories.push(item.toLowerCase());\n      }\n    }\n\n    return directories;\n  }\n\n  /**\n   * プロジェクトファイルを取得\n   */\n  private async getProjectFiles(projectPath: string): Promise<string[]> {\n    const files: string[] = [];\n    const visited = new Set<string>(); // 循環参照を防ぐ\n    const maxDepth = 5; // 最大深度を制限\n    \n    const walkDir = (dir: string, depth: number = 0) => {\n      // 深度制限と循環参照チェック\n      if (depth > maxDepth || visited.has(dir)) {\n        return;\n      }\n      visited.add(dir);\n      \n      try {\n        const items = fs.readdirSync(dir);\n        \n        for (const item of items) {\n          if (item.startsWith('.') || item === 'node_modules' || item === 'dist' || item === 'build') continue;\n          \n          const itemPath = path.join(dir, item);\n          \n          try {\n            const stat = fs.statSync(itemPath);\n            \n            if (stat.isDirectory()) {\n              walkDir(itemPath, depth + 1);\n            } else if (stat.isFile()) {\n              files.push(path.basename(item));\n            }\n          } catch (error) {\n            // ファイルアクセスエラーは無視\n            continue;\n          }\n        }\n      } catch (error) {\n        // ディレクトリ読み込みエラーは無視\n        return;\n      }\n    };\n\n    walkDir(projectPath);\n    return files;\n  }\n\n  /**\n   * ディレクトリパターンをチェック\n   */\n  private checkDirectories(\n    directories: string[],\n    patternDirs: string[],\n    evidence: string[]\n  ): number {\n    let matches = 0;\n    \n    for (const patternDir of patternDirs) {\n      if (directories.some(dir => dir.includes(patternDir.toLowerCase()))) {\n        matches++;\n        evidence.push(`${patternDir} directory found`);\n      }\n    }\n\n    return matches / patternDirs.length;\n  }\n\n  /**\n   * ファイルパターンをチェック\n   */\n  private checkFilePatterns(\n    files: string[],\n    patterns: string[],\n    evidence: string[]\n  ): number {\n    let matches = 0;\n    \n    for (const pattern of patterns) {\n      const matchingFiles = files.filter(file => \n        file.includes(pattern) || file.endsWith(`${pattern}.ts`) || file.endsWith(`${pattern}.js`)\n      );\n      \n      if (matchingFiles.length > 0) {\n        matches++;\n        evidence.push(`${pattern} files detected`);\n      }\n    }\n\n    return matches / patterns.length;\n  }\n\n  /**\n   * アーキテクチャの提案を取得\n   */\n  private getSuggestions(pattern: string): string[] {\n    const suggestions: Record<string, string[]> = {\n      MVC: [\n        'Maintain clear separation between models, views, and controllers',\n        'Avoid business logic in controllers',\n        'Keep views simple and focused on presentation'\n      ],\n      Layered: [\n        'Ensure dependencies only go downward',\n        'Keep domain logic independent of infrastructure',\n        'Use dependency injection for flexibility'\n      ],\n      Microservices: [\n        'Define clear service boundaries',\n        'Implement proper service discovery',\n        'Use API versioning for backward compatibility'\n      ],\n      Hexagonal: [\n        'Keep domain logic at the center',\n        'Use ports for defining contracts',\n        'Implement adapters for external integrations'\n      ],\n      CleanArchitecture: [\n        'Follow the dependency rule strictly',\n        'Keep frameworks and tools on the outer layers',\n        'Make business rules independent of UI and database'\n      ],\n      Monolithic: [\n        'Consider modularizing your codebase',\n        'Separate concerns into distinct modules',\n        'Extract reusable components'\n      ]\n    };\n\n    return suggestions[pattern] || [];\n  }\n\n  /**\n   * ファイル構造から追加の証拠を収集\n   */\n  async analyzeFileStructure(projectPath: string): Promise<string[]> {\n    const evidence: string[] = [];\n    const files = await this.getProjectFiles(projectPath);\n    \n    // Controller files\n    if (files.some(f => f.includes('Controller'))) {\n      evidence.push('Controller files detected');\n    }\n    \n    // Model files\n    if (files.some(f => f.includes('Model'))) {\n      evidence.push('Model files detected');\n    }\n    \n    // Service files\n    if (files.some(f => f.includes('Service'))) {\n      evidence.push('Service files detected');\n    }\n    \n    // Repository pattern\n    if (files.some(f => f.includes('Repository'))) {\n      evidence.push('Repository pattern detected');\n    }\n    \n    return evidence;\n  }\n}"],"version":3}