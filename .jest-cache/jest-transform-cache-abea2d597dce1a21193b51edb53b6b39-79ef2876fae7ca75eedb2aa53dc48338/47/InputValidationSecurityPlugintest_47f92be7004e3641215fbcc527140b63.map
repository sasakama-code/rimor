{"file":"/Users/sasakama/Projects/Rimor/test/security/plugins/InputValidationSecurityPlugin.test.ts","mappings":"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","names":[],"sources":["/Users/sasakama/Projects/Rimor/test/security/plugins/InputValidationSecurityPlugin.test.ts"],"sourcesContent":["/**\n * InputValidationSecurityPlugin.test.ts\n * 入力検証セキュリティプラグインのテスト\n * 型ベースの入力検証・サニタイズテスト品質監査システムのテスト\n */\n\nimport { InputValidationSecurityPlugin } from '../../../src/security/plugins/InputValidationSecurityPlugin';\nimport {\n  TestMethod,\n  MethodAnalysisResult,\n  SecurityType,\n  TaintLevel,\n  TaintSource,\n  SanitizerType,\n  SecurityIssue,\n  SecurityTestMetrics,\n  BoundaryCondition\n} from '../../../src/security/types';\nimport { IncrementalChange } from '../../../src/security/types/flow-types';\nimport {\n  ProjectContext,\n  TestFile,\n  DetectionResult,\n  QualityScore,\n  Improvement\n} from '../../../src/core/types';\n\ndescribe('InputValidationSecurityPlugin - 入力検証セキュリティプラグイン', () => {\n  let plugin: InputValidationSecurityPlugin;\n  let mockProjectContext: ProjectContext;\n\n  beforeEach(() => {\n    plugin = new InputValidationSecurityPlugin();\n    \n    mockProjectContext = {\n      projectPath: '/test/project',\n      configuration: {\n        testPatterns: ['**/*.test.ts'],\n        excludePatterns: ['node_modules/**'],\n        plugins: []\n      },\n      dependencies: [],\n      framework: 'jest'\n    };\n  });\n\n  describe('プラグイン基本機能', () => {\n    it('プラグインが正しく初期化されること', () => {\n      expect(plugin.id).toBe('input-validation-security');\n      expect(plugin.name).toBeDefined();\n      expect(plugin.version).toBeDefined();\n      expect(plugin.type).toBe('security');\n    });\n\n    it('適用可能性を正しく判定すること', () => {\n      const applicableContext: ProjectContext = {\n        ...mockProjectContext,\n        dependencies: ['express', 'joi', 'validator']\n      };\n\n      const notApplicableContext: ProjectContext = {\n        ...mockProjectContext,\n        dependencies: ['lodash', 'moment']\n      };\n\n      expect(plugin.isApplicable(applicableContext)).toBe(true);\n      expect(plugin.isApplicable(notApplicableContext)).toBe(false);\n    });\n  });\n\n  describe('入力検証パターンの検出', () => {\n    it('基本的な入力検証テストを検出すること', async () => {\n      const testFile: TestFile = {\n        path: '/test/validation.test.ts',\n        content: `\n          describe('Input Validation', () => {\n            it('should validate user email', () => {\n              const email = 'user@example.com';\n              expect(validateEmail(email)).toBe(true);\n            });\n            \n            it('should reject invalid email', () => {\n              const invalidEmail = 'invalid-email';\n              expect(validateEmail(invalidEmail)).toBe(false);\n            });\n          });\n        `,\n        framework: 'jest',\n        testMethods: [\n          {\n            name: 'should validate user email',\n            type: 'test',\n            location: {\n              start: { line: 1, column: 1 },\n              end: { line: 5, column: 1 }\n            },\n            signature: 'validateEmail(email: string): boolean',\n            body: 'expect(validateEmail(email)).toBe(true);',\n            assertions: 1,\n            testType: 'unit'\n          }\n        ]\n      };\n\n      const results = await plugin.detectPatterns(testFile);\n\n      expect(results.length).toBeGreaterThan(0);\n      \n      const validationPattern = results.find(r => \n        r.pattern === 'input-validation-test'\n      );\n      expect(validationPattern).toBeDefined();\n      expect(validationPattern?.confidence).toBeGreaterThan(0.7);\n      expect(validationPattern?.securityRelevance).toBeGreaterThan(0.6);\n    });\n\n    it('サニタイズテストパターンを検出すること', async () => {\n      const testFile: TestFile = {\n        path: '/test/sanitization.test.ts',\n        content: `\n          describe('Input Sanitization', () => {\n            it('should sanitize HTML input', () => {\n              const maliciousInput = '<script>alert(\"xss\")</script>';\n              const sanitized = sanitizeHtml(maliciousInput);\n              expect(sanitized).not.toContain('<script>');\n            });\n            \n            it('should escape SQL injection attempts', () => {\n              const sqlInjection = \"'; DROP TABLE users; --\";\n              const escaped = escapeSql(sqlInjection);\n              expect(escaped).not.toContain('DROP TABLE');\n            });\n          });\n        `,\n        framework: 'jest',\n        testMethods: [\n          {\n            name: 'should sanitize HTML input',\n            type: 'test',\n            location: {\n              start: { line: 1, column: 1 },\n              end: { line: 8, column: 1 }\n            },\n            signature: 'sanitizeHtml(input: string): string',\n            body: `\n              const maliciousInput = '<script>alert(\"xss\")</script>';\n              const sanitized = sanitizeHtml(maliciousInput);\n              expect(sanitized).not.toContain('<script>');\n            `,\n            assertions: 1,\n            testType: 'security'\n          }\n        ]\n      };\n\n      const results = await plugin.detectPatterns(testFile);\n\n      const sanitizationPattern = results.find(r => \n        r.pattern === 'sanitization-test'\n      );\n      expect(sanitizationPattern).toBeDefined();\n      expect(sanitizationPattern?.securityRelevance).toBeGreaterThan(0.8);\n      \n      const xssProtectionPattern = results.find(r => \n        r.pattern === 'xss-protection-test'\n      );\n      expect(xssProtectionPattern).toBeDefined();\n    });\n\n    it('境界条件テストを検出すること', async () => {\n      const testFile: TestFile = {\n        path: '/test/boundary.test.ts',\n        content: `\n          describe('Boundary Condition Tests', () => {\n            it('should handle empty input', () => {\n              expect(validateInput('')).toBe(false);\n            });\n            \n            it('should handle null input', () => {\n              expect(validateInput(null)).toBe(false);\n            });\n            \n            it('should handle undefined input', () => {\n              expect(validateInput(undefined)).toBe(false);\n            });\n            \n            it('should handle extremely long input', () => {\n              const longInput = 'a'.repeat(10000);\n              expect(validateInput(longInput)).toBe(false);\n            });\n          });\n        `,\n        framework: 'jest',\n        testMethods: [\n          {\n            name: 'should handle empty input',\n            type: 'test',\n            location: {\n              start: { line: 1, column: 1 },\n              end: { line: 3, column: 1 }\n            },\n            signature: 'validateInput(input: string): boolean',\n            body: `expect(validateInput('')).toBe(false);`,\n            assertions: 1,\n            testType: 'security'\n          }\n        ]\n      };\n\n      const results = await plugin.detectPatterns(testFile);\n\n      const boundaryPattern = results.find(r => \n        r.pattern === 'boundary-condition-test'\n      );\n      expect(boundaryPattern).toBeDefined();\n      expect(boundaryPattern?.metadata).toBeDefined();\n      expect(boundaryPattern?.metadata?.boundaryTypes).toContain('empty-input');\n    });\n\n    it('不十分な入力検証テストを検出すること', async () => {\n      const testFile: TestFile = {\n        path: '/test/inadequate.test.ts',\n        content: `\n          describe('Inadequate Validation', () => {\n            it('should process user input', () => {\n              const userInput = 'some input';\n              const result = processInput(userInput);\n              expect(result).toBeDefined();\n            });\n          });\n        `,\n        framework: 'jest',\n        testMethods: [\n          {\n            name: 'should process user input',\n            type: 'test',\n            location: {\n              start: { line: 1, column: 1 },\n              end: { line: 6, column: 1 }\n            },\n            signature: 'processInput(userInput: string): any',\n            body: `\n              const userInput = 'some input';\n              const result = processInput(userInput);\n              expect(result).toBeDefined();\n            `,\n            assertions: 1,\n            testType: 'unit'\n          }\n        ]\n      };\n\n      const results = await plugin.detectPatterns(testFile);\n\n      const inadequatePattern = results.find(r => \n        r.pattern === 'inadequate-input-validation'\n      );\n      expect(inadequatePattern).toBeDefined();\n      expect(inadequatePattern?.severity).toBe('medium');\n    });\n  });\n\n  describe('品質評価', () => {\n    it('高品質な入力検証テストに高いスコアを付与すること', () => {\n      const highQualityPatterns: DetectionResult[] = [\n        {\n          pattern: 'input-validation-test',\n          confidence: 0.9,\n          securityRelevance: 0.85,\n          severity: 'info',\n          location: { file: 'test.ts', line: 10, column: 5 },\n          metadata: {\n            validationTypes: ['email', 'url', 'phone'],\n            boundaryTesting: true,\n            errorHandling: true\n          }\n        },\n        {\n          pattern: 'sanitization-test',\n          confidence: 0.88,\n          securityRelevance: 0.9,\n          severity: 'info',\n          location: { file: 'test.ts', line: 20, column: 5 },\n          metadata: {\n            sanitizerTypes: ['html', 'sql', 'xss'],\n            maliciousInputTesting: true\n          }\n        }\n      ];\n\n      const qualityScore = plugin.evaluateQuality(highQualityPatterns);\n\n      expect(qualityScore.overall).toBeGreaterThan(0.8);\n      expect(qualityScore.security).toBeGreaterThan(0.8);\n      expect(qualityScore.coverage).toBeGreaterThan(0.7);\n      expect(qualityScore.maintainability).toBeGreaterThan(0.6);\n    });\n\n    it('低品質な入力検証テストに低いスコアを付与すること', () => {\n      const lowQualityPatterns: DetectionResult[] = [\n        {\n          pattern: 'inadequate-input-validation',\n          confidence: 0.7,\n          securityRelevance: 0.3,\n          severity: 'medium',\n          location: { file: 'test.ts', line: 10, column: 5 },\n          metadata: {\n            missingValidations: ['null-check', 'type-validation'],\n            lacksBoundaryTesting: true\n          }\n        }\n      ];\n\n      const qualityScore = plugin.evaluateQuality(lowQualityPatterns);\n\n      expect(qualityScore.overall).toBeLessThan(0.5);\n      expect(qualityScore.security).toBeLessThan(0.4);\n      expect(qualityScore.coverage).toBeLessThan(0.6);\n    });\n\n    it('複合的な品質要素を考慮した評価を行うこと', () => {\n      const mixedQualityPatterns: DetectionResult[] = [\n        {\n          pattern: 'input-validation-test',\n          confidence: 0.8,\n          securityRelevance: 0.7,\n          severity: 'info',\n          location: { file: 'test.ts', line: 10, column: 5 },\n          metadata: { hasValidation: true }\n        },\n        {\n          pattern: 'missing-edge-case-test',\n          confidence: 0.6,\n          securityRelevance: 0.5,\n          severity: 'low',\n          location: { file: 'test.ts', line: 20, column: 5 },\n          metadata: { missingCases: ['null', 'empty', 'overflow'] }\n        }\n      ];\n\n      const qualityScore = plugin.evaluateQuality(mixedQualityPatterns);\n\n      expect(qualityScore.overall).toBeGreaterThan(0.4);\n      expect(qualityScore.overall).toBeLessThan(0.8);\n      expect(qualityScore.details).toBeDefined();\n      expect(qualityScore.details?.validationCoverage).toBeDefined();\n      expect(qualityScore.details?.sanitizationQuality).toBeDefined();\n    });\n  });\n\n  describe('改善提案', () => {\n    it('不足している入力検証テストの改善提案を生成すること', () => {\n      const evaluation: QualityScore = {\n        overall: 0.4,\n        dimensions: {},\n        confidence: 0.8,\n        security: 0.3,\n        coverage: 0.5,\n        maintainability: 0.6,\n        details: {\n          strengths: ['良好な基本構造'],\n          weaknesses: ['入力検証が不十分', 'サニタイズが不足'],\n          suggestions: ['バリデーションテストを追加', 'サニタイザーテストを強化'],\n          validationCoverage: 0.3,\n          sanitizationQuality: 0.2,\n          boundaryTestingScore: 0.4\n        }\n      };\n\n      const improvements = plugin.suggestImprovements(evaluation);\n\n      expect(improvements.length).toBeGreaterThan(0);\n      \n      const validationImprovement = improvements.find(imp => \n        imp.type === 'add-input-validation-tests'\n      );\n      expect(validationImprovement).toBeDefined();\n      expect(validationImprovement?.priority).toBe('high');\n      expect(validationImprovement?.description).toContain('input validation');\n      \n      const sanitizationImprovement = improvements.find(imp => \n        imp.type === 'enhance-sanitization-testing'\n      );\n      expect(sanitizationImprovement).toBeDefined();\n      expect(sanitizationImprovement?.impact).toEqual({\n        effortMinutes: 20,\n        scoreImprovement: 25\n      });\n    });\n\n    it('境界条件テストの改善提案を生成すること', () => {\n      const evaluation: QualityScore = {\n        overall: 0.6,\n        dimensions: {},\n        confidence: 0.85,\n        security: 0.7,\n        coverage: 0.5,\n        maintainability: 0.7,\n        details: {\n          strengths: ['十分な入力バリデーション', '包括的サニタイザー'],\n          weaknesses: ['境界条件テストが不足'],\n          suggestions: ['境界条件テストを追加', 'エッジケースのカバレッジ向上'],\n          boundaryTestingScore: 0.2, // 境界条件テストが不十分\n          validationCoverage: 0.8,\n          sanitizationQuality: 0.7\n        }\n      };\n\n      const improvements = plugin.suggestImprovements(evaluation);\n\n      const boundaryImprovement = improvements.find(imp => \n        imp.type === 'add-boundary-condition-tests'\n      );\n      expect(boundaryImprovement).toBeDefined();\n      expect(boundaryImprovement?.priority).toBe('medium');\n      expect(boundaryImprovement?.suggestions).toContain('Add null/undefined input tests');\n      expect(boundaryImprovement?.suggestions).toContain('Add empty string tests');\n      expect(boundaryImprovement?.suggestions).toContain('Add overflow/underflow tests');\n    });\n\n    it('エラーハンドリングテストの改善提案を生成すること', () => {\n      const evaluation: QualityScore = {\n        overall: 0.65,\n        dimensions: {},\n        confidence: 0.9,\n        security: 0.7,\n        coverage: 0.6,\n        maintainability: 0.65,\n        details: {\n          strengths: ['良好なバリデーションカバレッジ', 'サニタイザーの実装'],\n          weaknesses: ['エラーハンドリングテストが不足'],\n          suggestions: ['エラーハンドリングテストを強化', '例外ケースのカバレッジ向上'],\n          boundaryTestingScore: 0.3, // 境界条件テストが不十分\n          validationCoverage: 0.8,\n          sanitizationQuality: 0.7\n        }\n      };\n\n      const improvements = plugin.suggestImprovements(evaluation);\n\n      const errorHandlingImprovement = improvements.find(imp => \n        imp.type === 'improve-error-handling-tests'\n      );\n      expect(errorHandlingImprovement).toBeDefined();\n      expect(errorHandlingImprovement?.description).toContain('error handling');\n      expect(errorHandlingImprovement?.codeExample).toBeDefined();\n    });\n  });\n\n  describe('型推論統合', () => {\n    it('Taint型を使用した高度な入力検証分析を行うこと', async () => {\n      const testMethod: TestMethod = {\n        name: 'testTaintedInputHandling',\n        type: 'test',\n        location: {\n          start: { line: 1, column: 1 },\n          end: { line: 10, column: 1 }\n        },\n        signature: 'handleTaintedInput(taintedInput: TaintedString, sanitizer: InputSanitizer): SafeString',\n        body: `\n          const cleaned = sanitizer.sanitize(taintedInput);\n          expect(cleaned).toBeInstanceOf(SafeString);\n          expect(cleaned.getValue()).not.toContain('<script>');\n        `,\n        assertions: 2,\n        testType: 'security'\n      };\n\n      const analysisResult = await plugin.analyzeTestMethod(testMethod);\n\n      expect(analysisResult).toBeDefined();\n      expect(analysisResult.taintFlow).toBeDefined();\n      expect(analysisResult.taintFlow.sources?.length || 0).toBeGreaterThan(0);\n      expect(analysisResult.taintFlow.sanitizers?.length || 0).toBeGreaterThan(0);\n      expect(analysisResult.securityScore).toBeGreaterThan(0.8);\n    });\n\n    it('型安全性違反を検出すること', async () => {\n      const unsafeTestMethod: TestMethod = {\n        name: 'testUnsafeInputHandling',\n        type: 'test',\n        location: {\n          start: { line: 1, column: 1 },\n          end: { line: 10, column: 1 }\n        },\n        signature: 'processUnsafeInput(userInput: any): any', // 型安全性違反\n        body: `\n          const result = eval(userInput); // 非常に危険\n          expect(result).toBeDefined();\n        `,\n        assertions: 1,\n        testType: 'security'\n      };\n\n      const analysisResult = await plugin.analyzeTestMethod(unsafeTestMethod);\n\n      expect(analysisResult.issues.length).toBeGreaterThan(0);\n      \n      const typeSafetyViolation = analysisResult.issues.find((issue) => \n        issue.type === 'unsafe-taint-flow'\n      );\n      expect(typeSafetyViolation).toBeDefined();\n      expect(typeSafetyViolation?.severity).toBe('critical');\n    });\n  });\n\n  describe('インクリメンタル解析', () => {\n    it('テストメソッドの変更を検出してインクリメンタル解析を実行すること', async () => {\n      const originalMethod: TestMethod = {\n        name: 'testInputValidation',\n        type: 'test',\n        location: {\n          start: { line: 1, column: 1 },\n          end: { line: 5, column: 1 }\n        },\n        signature: 'validateInput(input: string): boolean',\n        body: 'expect(validateInput(\"test\")).toBe(true);',\n        assertions: 1,\n        testType: 'unit'\n      };\n\n      const modifiedMethod: TestMethod = {\n        ...originalMethod,\n        body: `\n          expect(validateInput(\"test\")).toBe(true);\n          expect(validateInput(\"\")).toBe(false);\n          expect(validateInput(null)).toBe(false);\n        `,\n      };\n\n      const change: IncrementalChange = {\n        type: 'modified',\n        methodName: 'handleInput',\n        filePath: 'test.ts',\n        content: modifiedMethod.content\n      };\n\n      const incrementalResult = await plugin.analyzeIncrementally(change);\n\n      expect(incrementalResult).toBeDefined();\n      expect(incrementalResult.affectedTests?.length ?? 0).toBeGreaterThanOrEqual(0);\n      expect(incrementalResult.qualityImprovement ?? 0).toBeGreaterThanOrEqual(0);\n      expect(incrementalResult.newIssuesFound?.length ?? 0).toBeGreaterThanOrEqual(0);\n      expect(incrementalResult.resolvedIssues?.length ?? 0).toBeGreaterThanOrEqual(0);\n    });\n  });\n\n  describe('パフォーマンスとスケーラビリティ', () => {\n    it('大量のテストメソッドを効率的に処理すること', async () => {\n      const largeTestFile: TestFile = {\n        path: '/test/large-validation.test.ts',\n        content: 'large test file content',\n        framework: 'jest',\n        testMethods: Array.from({ length: 100 }, (_, i) => ({\n          name: `testInputValidation${i}`,\n          type: 'test' as const,\n          location: {\n            start: { line: i + 1, column: 1 },\n            end: { line: i + 3, column: 1 }\n          },\n          signature: `validateInput${i}(input: string): boolean`,\n          body: `expect(validateInput${i}(\"test\")).toBe(true);`,\n          assertions: 1,\n          testType: 'unit' as const\n        }))\n      };\n\n      const startTime = Date.now();\n      const results = await plugin.detectPatterns(largeTestFile);\n      const endTime = Date.now();\n\n      const executionTime = endTime - startTime;\n      \n      expect(results.length).toBeGreaterThan(0);\n      expect(executionTime).toBeLessThan(2000); // 2秒以内で処理\n    });\n\n    it('キャッシュを使用して重複処理を避けること', async () => {\n      const testFile: TestFile = {\n        path: '/test/cached.test.ts',\n        content: 'test content',\n        framework: 'jest',\n        testMethods: [\n          {\n            name: 'testCachedValidation',\n            type: 'test',\n            location: {\n              start: { line: 1, column: 1 },\n              end: { line: 3, column: 1 }\n            },\n            signature: 'validateCached(input: string): boolean',\n            body: 'expect(validateCached(\"test\")).toBe(true);',\n            assertions: 1,\n            testType: 'unit'\n          }\n        ]\n      };\n\n      // 初回実行\n      const startTime1 = Date.now();\n      const results1 = await plugin.detectPatterns(testFile);\n      const endTime1 = Date.now();\n      const firstExecutionTime = endTime1 - startTime1;\n\n      // 2回目実行（キャッシュされる）\n      const startTime2 = Date.now();\n      const results2 = await plugin.detectPatterns(testFile);\n      const endTime2 = Date.now();\n      const secondExecutionTime = endTime2 - startTime2;\n\n      expect(results1).toEqual(results2);\n      expect(secondExecutionTime).toBeLessThanOrEqual(firstExecutionTime);\n    });\n  });\n});"],"version":3}