{"file":"/Users/sasakama/Projects/Rimor/src/analyzers/structure-analysis/metrics-calculator.ts","mappings":"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","names":[],"sources":["/Users/sasakama/Projects/Rimor/src/analyzers/structure-analysis/metrics-calculator.ts"],"sourcesContent":["/**\n * MetricsCalculator\n * Issue #65: メトリクス計算専用モジュール\n * \n * SOLID原則: 単一責任（メトリクス計算のみ）\n * DRY原則: 計算ロジックの共通化\n * KISS原則: シンプルな計算アルゴリズム\n * YAGNI原則: 必要最小限の機能実装\n * Defensive Programming: 入力検証とエラーハンドリング\n */\n\nimport { \n  ProjectMetrics,\n  ComplexityMetrics,\n  MaintainabilityMetrics,\n  TestabilityMetrics,\n  DocumentationMetrics\n} from '../types';\nimport * as fs from 'fs';\nimport * as glob from 'glob';\nimport * as path from 'path';\n\n/**\n * プロジェクトメトリクスを計算する専用クラス\n */\nexport class MetricsCalculator {\n  /**\n   * プロジェクト全体のメトリクスを計算\n   */\n  async calculateProjectMetrics(projectPath: string): Promise<ProjectMetrics> {\n    const files = this.getAllFiles(projectPath);\n    const codeFiles = files.filter(file => this.isCodeFile(file));\n    const testFiles = files.filter(file => this.isTestFile(file));\n    const codeContents = await this.readAllCodeFiles(codeFiles);\n    \n    const complexity = await this.calculateComplexityMetrics(codeContents, codeFiles);\n    const maintainability = await this.calculateMaintainabilityMetrics(codeContents, codeFiles);\n    const testability = await this.calculateTestabilityMetrics(codeFiles, testFiles, codeContents);\n    const documentation = await this.calculateDocumentationMetrics(codeFiles, codeContents);\n    \n    return {\n      complexity,\n      maintainability,\n      testability,\n      documentation\n    };\n  }\n  \n  /**\n   * サイクロマティック複雑度を計算\n   */\n  calculateCyclomaticComplexity(code: string): number {\n    let complexity = 1; // ベース複雑度\n    \n    // 分岐文をカウント\n    const patterns = [\n      /\\bif\\b/g,\n      /\\belse\\s+if\\b/g,\n      /\\bfor\\b/g,\n      /\\bwhile\\b/g,\n      /\\bcase\\b/g,\n      /\\bcatch\\b/g,\n      /\\?\\s*[^:]+:/g, // 三項演算子\n      /\\|\\|/g, // OR演算子\n      /&&/g   // AND演算子\n    ];\n    \n    patterns.forEach(pattern => {\n      const matches = code.match(pattern);\n      if (matches) {\n        complexity += matches.length;\n      }\n    });\n    \n    // else ifは二重カウントを避ける\n    const elseIfMatches = code.match(/\\belse\\s+if\\b/g);\n    if (elseIfMatches) {\n      complexity -= elseIfMatches.length; // else ifで1回多くカウントされているため\n    }\n    \n    return complexity;\n  }\n  \n  /**\n   * ネストの深さを計算\n   */\n  calculateNestingDepth(code: string): number {\n    let maxDepth = 0;\n    let currentDepth = 0;\n    \n    for (const char of code) {\n      if (char === '{') {\n        currentDepth++;\n        maxDepth = Math.max(maxDepth, currentDepth);\n      } else if (char === '}') {\n        currentDepth--;\n      }\n    }\n    \n    return maxDepth;\n  }\n  \n  /**\n   * 保守性インデックスを計算\n   * Maintainability Index = 171 - 5.2 * ln(HV) - 0.23 * CC - 16.2 * ln(LOC)\n   * 簡略化版\n   */\n  calculateMaintainabilityIndex(code: string): number {\n    const lines = code.split('\\n').filter(line => line.trim().length > 0).length;\n    const complexity = this.calculateCyclomaticComplexity(code);\n    \n    // 簡略化した計算\n    const index = 171 - 5.2 * Math.log(lines * 10) - 0.23 * complexity - 16.2 * Math.log(lines);\n    \n    // 0-100の範囲に正規化\n    return Math.max(0, Math.min(100, index));\n  }\n  \n  /**\n   * コード重複を検出\n   */\n  detectCodeDuplication(files: Map<string, string>): {\n    percentage: number;\n    locations: string[];\n  } {\n    const lines: Map<string, string[]> = new Map();\n    const duplicates: Set<string> = new Set();\n    const locations: Set<string> = new Set();\n    \n    // 各ファイルの行を収集\n    files.forEach((content, filePath) => {\n      const fileLines = content.split('\\n')\n        .map(line => line.trim())\n        .filter(line => line.length > 10); // 短い行は除外\n      \n      fileLines.forEach(line => {\n        const existing = lines.get(line);\n        if (existing) {\n          duplicates.add(line);\n          locations.add(filePath);\n          existing.forEach(loc => locations.add(loc));\n        } else {\n          lines.set(line, [filePath]);\n        }\n      });\n    });\n    \n    const totalLines = Array.from(lines.keys()).length;\n    const percentage = totalLines > 0 ? (duplicates.size / totalLines) * 100 : 0;\n    \n    return {\n      percentage,\n      locations: Array.from(locations)\n    };\n  }\n  \n  /**\n   * テストカバレッジ可能性を評価\n   */\n  calculateTestability(sourceFiles: string[], testFiles: string[]): {\n    coverage: number;\n    untestedFiles: string[];\n  } {\n    const untestedFiles: string[] = [];\n    \n    sourceFiles.forEach(sourceFile => {\n      const baseName = path.basename(sourceFile, path.extname(sourceFile));\n      const hasTest = testFiles.some(testFile => \n        testFile.includes(baseName) && testFile.includes('test')\n      );\n      \n      if (!hasTest) {\n        untestedFiles.push(sourceFile);\n      }\n    });\n    \n    const coverage = sourceFiles.length > 0 \n      ? (sourceFiles.length - untestedFiles.length) / sourceFiles.length \n      : 0;\n    \n    return {\n      coverage,\n      untestedFiles\n    };\n  }\n  \n  /**\n   * テスト可能性スコアを計算\n   */\n  calculateTestabilityScore(code: string): number {\n    let score = 100;\n    \n    // 依存関係の数をチェック\n    const constructorMatch = code.match(/constructor\\s*\\(([^)]*)\\)/);\n    if (constructorMatch) {\n      const params = constructorMatch[1].split(',').filter(p => p.trim().length > 0);\n      score -= params.length * 5; // 各依存関係で5ポイント減点\n    }\n    \n    // privateメソッドの数をチェック\n    const privateMethodCount = (code.match(/private\\s+\\w+\\s*\\(/g) || []).length;\n    score -= privateMethodCount * 3; // 各privateメソッドで3ポイント減点\n    \n    // 複雑度をチェック\n    const complexity = this.calculateCyclomaticComplexity(code);\n    if (complexity > 10) {\n      score -= (complexity - 10) * 2;\n    }\n    \n    return Math.max(0, Math.min(100, score));\n  }\n  \n  /**\n   * ドキュメント化率を計算\n   */\n  calculateDocumentationCoverage(code: string): number {\n    // JSDocコメントを持つ関数/クラスをカウント\n    const jsdocPattern = /\\/\\*\\*[\\s\\S]*?\\*\\/\\s*(?:function|class|interface|export\\s+(?:function|class))/g;\n    const documentedCount = (code.match(jsdocPattern) || []).length;\n    \n    // 全体の関数/クラスをカウント\n    const functionPattern = /(?:function|class|interface)\\s+\\w+/g;\n    const totalCount = (code.match(functionPattern) || []).length;\n    \n    return totalCount > 0 ? documentedCount / totalCount : 0;\n  }\n  \n  /**\n   * コメント密度を計算\n   */\n  calculateCommentDensity(code: string): number {\n    const lines = code.split('\\n');\n    const commentLines = lines.filter(line => {\n      const trimmed = line.trim();\n      return trimmed.startsWith('//') || trimmed.startsWith('/*') || trimmed.startsWith('*');\n    }).length;\n    \n    return lines.length > 0 ? commentLines / lines.length : 0;\n  }\n  \n  /**\n   * メトリクスの総合レポートを生成\n   */\n  generateMetricsReport(metrics: ProjectMetrics): string {\n    const lines = [\n      '=== Project Metrics Report ===',\n      '',\n      '## Complexity',\n      `Average Cyclomatic Complexity: ${metrics.complexity.averageCyclomaticComplexity.toFixed(2)}`,\n      `Maximum Complexity: ${metrics.complexity.maxComplexity}`,\n      `Total Functions: ${metrics.complexity.totalFunctions}`,\n      `Average Function Length: ${metrics.complexity.averageFunctionLength.toFixed(0)} lines`,\n      '',\n      '## Maintainability',\n      `Maintainability Index: ${metrics.maintainability.maintainabilityIndex.toFixed(1)}`,\n      `Average File Size: ${metrics.maintainability.averageFileSize} lines`,\n      `Code Duplication: ${metrics.maintainability.duplicatedCodePercentage.toFixed(1)}%`,\n      '',\n      '## Testability',\n      `Test Coverage: ${(metrics.testability.testCoverage * 100).toFixed(1)}%`,\n      `Testable Classes: ${metrics.testability.testableClasses}`,\n      `Untestable Classes: ${metrics.testability.untestableClasses}`,\n      `Mockability: ${(metrics.testability.mockability * 100).toFixed(1)}%`,\n      '',\n      '## Documentation',\n      `Documented Functions: ${metrics.documentation.documentedFunctions}`,\n      `Documented Classes: ${metrics.documentation.documentedClasses}`,\n      `Documentation Coverage: ${(metrics.documentation.documentationCoverage * 100).toFixed(1)}%`,\n      `README Quality: ${(metrics.documentation.readmeQuality * 100).toFixed(1)}%`\n    ];\n    \n    return lines.join('\\n');\n  }\n  \n  /**\n   * 複雑度メトリクスを計算\n   */\n  private async calculateComplexityMetrics(\n    codeContents: Map<string, string>,\n    files: string[]\n  ): Promise<ComplexityMetrics> {\n    let totalComplexity = 0;\n    let maxComplexity = 1;\n    let totalFunctions = 0;\n    let totalFunctionLength = 0;\n    const complexFiles: string[] = [];\n    \n    codeContents.forEach((content, filePath) => {\n      const complexity = this.calculateCyclomaticComplexity(content);\n      totalComplexity += complexity;\n      maxComplexity = Math.max(maxComplexity, complexity);\n      \n      if (complexity > 10) {\n        complexFiles.push(filePath);\n      }\n      \n      // 関数数と長さをカウント（簡易版）\n      const functions = (content.match(/function|=>|\\w+\\s*\\(/g) || []).length;\n      totalFunctions += functions;\n      totalFunctionLength += functions * 15; // 簡易的に15行と仮定\n    });\n    \n    return {\n      averageCyclomaticComplexity: files.length > 0 ? totalComplexity / files.length : 0,\n      maxComplexity,\n      complexFiles,\n      totalFunctions,\n      averageFunctionLength: totalFunctions > 0 ? totalFunctionLength / totalFunctions : 0\n    };\n  }\n  \n  /**\n   * 保守性メトリクスを計算\n   */\n  private async calculateMaintainabilityMetrics(\n    codeContents: Map<string, string>,\n    files: string[]\n  ): Promise<MaintainabilityMetrics> {\n    let totalIndex = 0;\n    let totalLines = 0;\n    const largeFiles: string[] = [];\n    const longFunctions: string[] = [];\n    \n    codeContents.forEach((content, filePath) => {\n      const index = this.calculateMaintainabilityIndex(content);\n      totalIndex += index;\n      \n      const lines = content.split('\\n').length;\n      totalLines += lines;\n      \n      // 大きいファイルの検出\n      if (lines > 500) {\n        largeFiles.push(filePath);\n      }\n      \n      // 長い関数の検出（簡易版）\n      if (lines > 100) {\n        longFunctions.push(filePath);\n      }\n    });\n    \n    const duplicationResult = this.detectCodeDuplication(codeContents);\n    \n    return {\n      maintainabilityIndex: files.length > 0 ? totalIndex / files.length : 0,\n      duplicatedCodePercentage: duplicationResult.percentage,\n      averageFileSize: files.length > 0 ? totalLines / files.length : 0,\n      largeFiles,\n      longFunctions\n    };\n  }\n  \n  /**\n   * テスタビリティメトリクスを計算\n   */\n  private async calculateTestabilityMetrics(\n    codeFiles: string[],\n    testFiles: string[],\n    codeContents: Map<string, string>\n  ): Promise<TestabilityMetrics> {\n    const testabilityResult = this.calculateTestability(codeFiles, testFiles);\n    \n    let testableClasses = 0;\n    let untestableClasses = 0;\n    \n    codeContents.forEach((content) => {\n      const score = this.calculateTestabilityScore(content);\n      \n      // クラスのテスタビリティを評価\n      const classes = (content.match(/class\\s+\\w+/g) || []).length;\n      if (classes > 0) {\n        if (score > 60) {\n          testableClasses += classes;\n        } else {\n          untestableClasses += classes;\n        }\n      }\n    });\n    \n    // モック可能性の計算（簡易版）\n    const mockability = testableClasses > 0 \n      ? testableClasses / (testableClasses + untestableClasses)\n      : 0;\n    \n    return {\n      testCoverage: testabilityResult.coverage,\n      testableClasses,\n      untestableClasses,\n      mockability\n    };\n  }\n  \n  /**\n   * ドキュメンテーションメトリクスを計算\n   */\n  private async calculateDocumentationMetrics(\n    files: string[],\n    codeContents: Map<string, string>\n  ): Promise<DocumentationMetrics> {\n    let documentedFunctions = 0;\n    let documentedClasses = 0;\n    let totalFunctions = 0;\n    let totalClasses = 0;\n    \n    codeContents.forEach((content) => {\n      // JSDocコメントを持つ関数/クラスをカウント\n      const jsdocFunctions = (content.match(/\\/\\*\\*[\\s\\S]*?\\*\\/\\s*(?:function|async\\s+function)/g) || []).length;\n      const jsdocClasses = (content.match(/\\/\\*\\*[\\s\\S]*?\\*\\/\\s*class/g) || []).length;\n      \n      documentedFunctions += jsdocFunctions;\n      documentedClasses += jsdocClasses;\n      \n      // 全体の関数/クラスをカウント\n      const functions = (content.match(/function|async\\s+function|\\w+\\s*\\(.*?\\)\\s*=>/g) || []).length;\n      const classes = (content.match(/class\\s+\\w+/g) || []).length;\n      \n      totalFunctions += functions;\n      totalClasses += classes;\n    });\n    \n    const documentationCoverage = (totalFunctions + totalClasses) > 0\n      ? (documentedFunctions + documentedClasses) / (totalFunctions + totalClasses)\n      : 0;\n    \n    // README品質の簡易評価\n    const readmeQuality = 0.7; // 簡易実装\n    \n    return {\n      documentedFunctions,\n      documentedClasses,\n      documentationCoverage,\n      readmeQuality\n    };\n  }\n  \n  /**\n   * すべてのファイルを取得\n   */\n  private getAllFiles(projectPath: string): string[] {\n    const pattern = path.join(projectPath, '**/*.{js,jsx,ts,tsx}');\n    return glob.sync(pattern, {\n      ignore: ['**/node_modules/**', '**/dist/**', '**/build/**']\n    });\n  }\n  \n  /**\n   * コードファイルかどうかを判定\n   */\n  private isCodeFile(file: string): boolean {\n    return !this.isTestFile(file) && !file.includes('config') && !file.includes('.d.ts');\n  }\n  \n  /**\n   * テストファイルかどうかを判定\n   */\n  private isTestFile(file: string): boolean {\n    return file.includes('.test.') || file.includes('.spec.') || file.includes('__tests__');\n  }\n  \n  /**\n   * すべてのコードファイルを読み込み\n   */\n  private async readAllCodeFiles(files: string[]): Promise<Map<string, string>> {\n    const contents = new Map<string, string>();\n    \n    for (const file of files) {\n      try {\n        const content = fs.readFileSync(file, 'utf-8');\n        contents.set(file, content);\n      } catch (error) {\n        // ファイル読み込みエラーは無視\n      }\n    }\n    \n    return contents;\n  }\n}"],"version":3}