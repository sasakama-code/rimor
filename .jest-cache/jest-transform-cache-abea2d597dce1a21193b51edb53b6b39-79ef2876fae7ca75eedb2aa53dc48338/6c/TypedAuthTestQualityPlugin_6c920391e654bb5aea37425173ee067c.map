{"file":"/Users/sasakama/Projects/Rimor/src/security/plugins/TypedAuthTestQualityPlugin.ts","mappings":"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","names":[],"sources":["/Users/sasakama/Projects/Rimor/src/security/plugins/TypedAuthTestQualityPlugin.ts"],"sourcesContent":["/**\n * 型ベースセキュリティプラグイン - 認証テスト品質監査\n * TaintTyperの手法を応用し、認証テストの品質を型レベルで追跡・検証\n */\n\nimport {\n  TestMethod,\n  SecurityType,\n  TaintLevel,\n  AuthTestCoverage,\n  ITypeBasedSecurityPlugin,\n  ProjectContext,\n  TestFile,\n  DetectionResult,\n  QualityScore,\n  Improvement\n} from '../../core/types';\nimport {\n  MethodAnalysisResult,\n  TestMethodAnalysisResult,\n  TaintAnalysisResult,\n  TypeInferenceResult,\n  SecurityMethodChange,\n  IncrementalUpdate,\n  SecurityIssue,\n  SecurityTestMetrics,\n  SecurityImprovement,\n  FlowGraph\n} from '../types/flow-types';\nimport { FlowSensitiveAnalyzer } from '../analysis/flow';\nimport { SignatureBasedInference } from '../analysis/inference';\nimport { SecurityLattice, SecurityViolation } from '../types/lattice';\nimport {\n  TaintQualifier,\n  QualifiedType,\n  TypeConstructors,\n  TypeGuards\n} from '../types/checker-framework-types';\nimport { TaintLevelAdapter } from '../compatibility/taint-level-adapter';\nimport {\n  AuthASTNode,\n  AuthTypeInferenceResult,\n  AuthTaintPath,\n  AuthCriticalFlow,\n  AnalysisError,\n  isAuthASTNode,\n  isAuthTypeInferenceResult\n} from './typed-auth-plugin-types';\nimport { FlowNode } from '../types/flow-types';\n\n/**\n * 型ベース認証テスト品質プラグイン\n * 認証関連のテストケースに特化した品質監査を実行\n */\nexport class TypedAuthTestQualityPlugin implements ITypeBasedSecurityPlugin {\n  readonly id = 'typed-auth-test-quality';\n  readonly name = '型ベース認証テスト品質監査';\n  readonly version = '0.7.0';\n  readonly type = 'core' as const;\n  \n  // 型システムとの統合\n  readonly requiredTypes = [SecurityType.USER_INPUT, SecurityType.AUTH_TOKEN];\n  readonly providedTypes = [SecurityType.VALIDATED_AUTH];\n  \n  private flowAnalyzer: FlowSensitiveAnalyzer;\n  private inferenceEngine: SignatureBasedInference;\n  private analysisCache = new Map<string, MethodAnalysisResult>();\n\n  constructor() {\n    this.flowAnalyzer = new FlowSensitiveAnalyzer();\n    this.inferenceEngine = new SignatureBasedInference();\n  }\n\n  /**\n   * プラグインの適用条件\n   */\n  isApplicable(context: ProjectContext): boolean {\n    // 認証関連のファイルやライブラリが存在するかチェック\n    const authLibraries = ['passport', 'jwt', 'bcrypt', 'express-session'];\n    const hasAuthLibrary = authLibraries.some(lib => \n      context.packageJson?.dependencies?.[lib] || \n      context.packageJson?.devDependencies?.[lib]\n    );\n\n    // 認証関連のテストファイルが存在するかチェック\n    const hasAuthTests = context.filePatterns?.test?.some(pattern => \n      pattern.includes('auth') || pattern.includes('login')\n    ) || false;\n\n    return hasAuthLibrary || hasAuthTests;\n  }\n\n  /**\n   * パターン検出（既存インターフェース対応）\n   */\n  async detectPatterns(testFile: TestFile): Promise<DetectionResult[]> {\n    const patterns: DetectionResult[] = [];\n    \n    // 認証関連のパターンを検出\n    const authPatterns = this.detectAuthPatterns(testFile.content);\n    patterns.push(...authPatterns);\n\n    return patterns;\n  }\n\n  /**\n   * 品質評価（既存インターフェース対応）\n   */\n  evaluateQuality(patterns: DetectionResult[]): QualityScore {\n    // 認証カバレッジの計算\n    const requiredPatterns = ['login-success', 'login-failure', 'token-validation', 'session-management'];\n    const coveredPatterns = patterns.filter(p => \n      p.patternId && requiredPatterns.includes(p.patternId)\n    );\n    \n    // 0.0-1.0の範囲で計算\n    const authCoverage = coveredPatterns.length / requiredPatterns.length;\n    const correctness = this.calculateCorrectness(patterns) / 100; // 0.0-1.0に正規化\n    const maintainability = this.calculateMaintainability(patterns) / 100; // 0.0-1.0に正規化\n    \n    // overallスコアを計算（0.0-1.0の範囲）\n    const score = Math.min(1.0, authCoverage);\n\n    return {\n      overall: score, // 0.0-1.0の範囲\n      dimensions: {\n        completeness: authCoverage, // 0.0-1.0の範囲\n        correctness: correctness, // 0.0-1.0の範囲\n        maintainability: maintainability // 0.0-1.0の範囲\n      },\n      // 後方互換性のためbreakdownも提供（100スケール）\n      breakdown: {\n        completeness: authCoverage * 100,\n        correctness: correctness * 100,\n        maintainability: maintainability * 100\n      },\n      confidence: this.calculateConfidence(patterns)\n    };\n  }\n\n  /**\n   * 改善提案（既存インターフェース対応）\n   */\n  suggestImprovements(evaluation: QualityScore): Improvement[] {\n    const improvements: Improvement[] = [];\n\n    // 0.0-1.0の範囲で判定（0.8未満を低カバレッジとする）\n    if (evaluation.dimensions?.completeness !== undefined && evaluation.dimensions.completeness < 0.8) {\n      improvements.push({\n        id: 'auth-coverage-improvement',\n        priority: 'high',\n        type: 'add',\n        title: '認証テストカバレッジの向上',\n        description: '不足している認証シナリオのテストケースを追加してください',\n        location: { file: '', line: 0, column: 0 },\n        impact: { scoreImprovement: 20, effortMinutes: 30 },\n        automatable: false\n      });\n    }\n\n    return improvements;\n  }\n\n  /**\n   * モジュラー解析 - テストメソッド単位の解析\n   */\n  async analyzeMethod(method: TestMethod): Promise<MethodAnalysisResult> {\n    const startTime = Date.now();\n    \n    try {\n      // キャッシュチェック\n      const cacheKey = this.generateCacheKey(method);\n      const cached = this.analysisCache.get(cacheKey);\n      if (cached) {\n        return cached;\n      }\n\n      // Step 1: 認証テストかどうかを判定\n      if (!this.isAuthRelatedTest(method)) {\n        return this.createEmptyResult(method.name, Date.now() - startTime);\n      }\n\n      // Step 2: フロー解析の実行\n      const flowGraph = await this.trackDataFlow(method);\n\n      // Step 3: 汚染解析の実行\n      const taintResult = await this.analyzeTaint(flowGraph);\n\n      // Step 4: 型推論の実行\n      const typeResult = await this.inferSecurityTypes(method);\n\n      // Step 5: 認証品質の評価\n      const issues = this.evaluateAuthQuality(method, taintResult, typeResult);\n      const metrics = this.calculateAuthMetrics(method, taintResult);\n      const suggestions = this.generateAuthSuggestions(issues, method);\n\n      const result: MethodAnalysisResult = {\n        method,\n        methodName: method.name,\n        flowGraph: flowGraph,\n        violations: taintResult.violations,\n        metrics,\n        improvements: suggestions,\n        issues,\n        suggestions: suggestions.map(s => s.description), // string[]に変換\n        analysisTime: Date.now() - startTime // 分析時間を追加\n      };\n\n      // キャッシュに保存\n      this.analysisCache.set(cacheKey, result);\n      return result;\n\n    } catch (error) {\n      return this.createErrorResult(method.name, error, Date.now() - startTime);\n    }\n  }\n\n  /**\n   * フロー感度 - データフロー追跡\n   */\n  async trackDataFlow(method: TestMethod): Promise<FlowGraph> {\n    return this.flowAnalyzer.trackSecurityDataFlow(method);\n  }\n\n  /**\n   * 格子ベースの汚染解析\n   */\n  async analyzeTaint(flow: FlowGraph): Promise<TaintAnalysisResult> {\n    const lattice = new SecurityLattice();\n    const violations: SecurityViolation[] = [];\n\n    // 認証フローに特化した汚染解析\n    for (const [nodeId, node] of flow.nodes) {\n      if (this.isAuthRelatedNode(node)) {\n        const taintLevel = this.analyzeAuthNodeTaint(node);\n        lattice.setTaintLevel(nodeId, taintLevel);\n      }\n    }\n\n    // 認証セキュリティ不変条件の検証\n    const authViolations = this.verifyAuthInvariants(flow, lattice);\n    violations.push(...authViolations);\n\n    // TaintAnalysisResultに必要なプロパティを返す\n    const methodResults: MethodAnalysisResult[] = [];\n    const overallMetrics: SecurityTestMetrics = {\n      taintCoverage: 0,\n      sanitizerCoverage: 0,\n      sinkCoverage: 0,\n      securityAssertions: 0,\n      vulnerableFlows: violations.length\n    };\n    const improvements: SecurityImprovement[] = [];\n    \n    return {\n      methods: methodResults,\n      overallMetrics,\n      violations,\n      improvements\n    };\n  }\n\n  /**\n   * 型推論 - セキュリティ型の推論\n   */\n  async inferSecurityTypes(method: TestMethod): Promise<TypeInferenceResult> {\n    // 認証メソッドに特化した型推論\n    const result = await this.inferenceEngine.inferSecurityTypes(method);\n    const authResult = result as AuthTypeInferenceResult;\n    return {\n      ...result,\n      inferredTypes: authResult.inferredTypes || {},\n      typeConstraints: authResult.typeConstraints || [],\n      typeErrors: authResult.typeErrors || []\n    } as TypeInferenceResult;\n  }\n\n  /**\n   * インクリメンタル更新\n   */\n  async updateAnalysis(changes: SecurityMethodChange[]): Promise<IncrementalUpdate> {\n    const updatedMethods: string[] = [];\n    const invalidatedCache: string[] = [];\n    const newIssues: SecurityIssue[] = [];\n    const resolvedIssues: string[] = [];\n\n    const analysisResults: MethodAnalysisResult[] = [];\n    \n    for (const change of changes) {\n      const methodName = change.method.name;\n      \n      switch (change.type) {\n        case 'added':\n        case 'modified':\n          // 新規/変更されたメソッドを再解析\n          const result = await this.analyzeMethod(change.method);\n          updatedMethods.push(methodName);\n          analysisResults.push(result); // 解析結果を直接追加\n          if (result.issues) {\n            newIssues.push(...result.issues);\n          }\n          break;\n          \n        case 'deleted':\n          // 削除されたメソッドのキャッシュを無効化\n          const cacheKey = this.generateCacheKey(change.method);\n          this.analysisCache.delete(cacheKey);\n          invalidatedCache.push(cacheKey);\n          break;\n      }\n    }\n\n    return {\n      changes,\n      affectedMethods: changes.map(c => c.method),\n      updatedMethods: analysisResults, // MethodAnalysisResult[]を返す\n      reanalysisRequired: newIssues.length > 0\n    };\n  }\n\n  // プライベートメソッド群\n  private detectAuthPatterns(content: string): DetectionResult[] {\n    const patterns: DetectionResult[] = [];\n    const lines = content.split('\\n');\n\n    lines.forEach((line, index) => {\n      // ログイン成功パターン\n      if (line.includes('login') && line.includes('success')) {\n        patterns.push({\n          patternId: 'login-success',\n          patternName: 'ログイン成功テスト',\n          location: { file: '', line: index + 1, column: 0 },\n          confidence: 0.9,\n          evidence: [{ type: 'code', description: 'ログイン成功のテストケース', location: { file: '', line: index + 1, column: 0 }, code: line.trim(), confidence: 0.9 }]\n        });\n      }\n\n      // ログイン失敗パターン\n      if (line.includes('login') && (line.includes('fail') || line.includes('error'))) {\n        patterns.push({\n          patternId: 'login-failure',\n          patternName: 'ログイン失敗テスト',\n          location: { file: '', line: index + 1, column: 0 },\n          confidence: 0.9,\n          evidence: [{ type: 'code', description: 'ログイン失敗のテストケース', location: { file: '', line: index + 1, column: 0 }, code: line.trim(), confidence: 0.9 }]\n        });\n      }\n\n      // トークン検証パターン\n      if (line.includes('token') && line.includes('verify')) {\n        patterns.push({\n          patternId: 'token-validation',\n          patternName: 'トークン検証テスト',\n          location: { file: '', line: index + 1, column: 0 },\n          confidence: 0.8,\n          evidence: [{ type: 'code', description: 'トークン検証のテストケース', location: { file: '', line: index + 1, column: 0 }, code: line.trim(), confidence: 0.8 }]\n        });\n      }\n    });\n\n    return patterns;\n  }\n\n  private calculateCorrectness(patterns: DetectionResult[]): number {\n    // 認証テストの正確性を評価\n    const highConfidencePatterns = patterns.filter(p => p.confidence > 0.8);\n    return patterns.length > 0 ? (highConfidencePatterns.length / patterns.length) * 100 : 0;\n  }\n\n  private calculateMaintainability(patterns: DetectionResult[]): number {\n    // 認証テストの保守性を評価（簡易実装）\n    return 80; // デフォルト値\n  }\n\n  private calculateConfidence(patterns: DetectionResult[]): number {\n    if (patterns.length === 0) return 0;\n    const totalConfidence = patterns.reduce((sum, p) => sum + p.confidence, 0);\n    return totalConfidence / patterns.length;\n  }\n\n  private isAuthRelatedTest(method: TestMethod): boolean {\n    const authKeywords = ['auth', 'login', 'logout', 'signin', 'signout', 'token', 'password', 'credential'];\n    const methodName = method.name.toLowerCase();\n    const methodContent = (method.content || '').toLowerCase();\n    \n    return authKeywords.some(keyword => \n      methodName.includes(keyword) || methodContent.includes(keyword)\n    );\n  }\n\n  private isAuthRelatedNode(node: FlowNode): boolean {\n    if (!node.statement?.content) return false;\n    const content = node.statement.content.toLowerCase();\n    const authPatterns = ['login', 'auth', 'token', 'password', 'credential'];\n    return authPatterns.some(pattern => content.includes(pattern));\n  }\n\n  /**\n   * 認証ノードの汚染分析（新型システム版）\n   */\n  private analyzeAuthNodeTaintType(node: FlowNode): QualifiedType<unknown> {\n    if (!node.statement?.content) {\n      return TypeConstructors.untainted(node.statement || {});\n    }\n    const content = node.statement.content.toLowerCase();\n    \n    // ユーザー入力（パスワード、認証情報）は高汚染\n    if (content.includes('password') || content.includes('credential')) {\n      return TypeConstructors.tainted(node.statement, 'auth-credentials', 0.95);\n    }\n    \n    // トークン生成・検証は中程度の汚染\n    if (content.includes('token') || content.includes('jwt')) {\n      return TypeConstructors.tainted(node.statement, 'auth-token', 0.25);\n    }\n    \n    return TypeConstructors.untainted(node.statement);\n  }\n\n  /**\n   * レガシー互換メソッド\n   * @deprecated analyzeAuthNodeTaintTypeを使用してください\n   */\n  private analyzeAuthNodeTaint(node: FlowNode): TaintLevel {\n    const qualifiedType = this.analyzeAuthNodeTaintType(node);\n    return TaintLevelAdapter.fromQualifiedType(qualifiedType);\n  }\n\n  private verifyAuthInvariants(flow: FlowGraph, lattice: SecurityLattice): SecurityViolation[] {\n    const violations: SecurityViolation[] = [];\n    \n    // 認証特有の不変条件をチェック\n    // 例: パスワードが平文でアサートされていないか\n    flow.nodes.forEach(node => {\n      const content = node.statement?.content;\n      if (content && content.includes('password') && content.includes('expect') && !content.includes('hash')) {\n        violations.push({\n          type: 'unsafe-assertion',\n          message: 'パスワードが平文でアサートされています',\n          variable: 'password',\n          taintLevel: 'tainted',\n          metadata: {\n            level: 'tainted',\n            sources: ['user-input'],\n            sinks: [],\n            sanitizers: [],\n            // confidence removed - not in TaintMetadata\n            // location removed - not in TaintMetadata\n            propagationPath: []\n            // tracePath and securityRules removed - not in TaintMetadata\n          },\n          severity: 'critical',\n          suggestedFix: 'パスワードは平文ではなくハッシュ値でテストしてください'\n        });\n      }\n    });\n    \n    return violations;\n  }\n\n  private extractAuthTaintPaths(flow: FlowGraph): AuthTaintPath[] {\n    // 認証関連の汚染パスを抽出\n    return [];\n  }\n\n  private identifyAuthCriticalFlows(flow: FlowGraph, violations: SecurityViolation[]): AuthCriticalFlow[] {\n    // 認証関連のクリティカルフローを特定\n    return [];\n  }\n\n  private evaluateAuthQuality(\n    method: TestMethod, \n    taintResult: TaintAnalysisResult, \n    typeResult: TypeInferenceResult\n  ): SecurityIssue[] {\n    const issues: SecurityIssue[] = [];\n\n    // 汚染解析の結果から問題を抽出\n    taintResult.violations.forEach(violation => {\n      issues.push({\n        id: `auth-${violation.type}-${method.name}`,\n        severity: violation.severity as SecurityIssue['severity'],\n        type: 'unsafe-taint-flow',\n        message: `認証テストで${violation.suggestedFix}`,\n        location: { file: method.filePath, line: 0, column: 0 }\n      });\n    });\n\n    // 認証カバレッジの不足をチェック\n    const requiredCoverage: string[] = ['success', 'failure', 'token-expiry'];\n    const missingCoverage = this.checkAuthCoverage(method, requiredCoverage);\n    \n    missingCoverage.forEach(missing => {\n      issues.push({\n        id: `auth-missing-${missing}-${method.name}`,\n        severity: 'warning',\n        type: 'authentication',\n        message: `認証テストで${missing}のシナリオが不足しています`,\n        location: { file: method.filePath, line: 0, column: 0 }\n      });\n    });\n\n    return issues;\n  }\n\n  private calculateAuthMetrics(method: TestMethod, taintResult: TaintAnalysisResult): SecurityTestMetrics {\n    const content = (method.content || '').toLowerCase();\n    \n    // 認証関連のメトリクスを計算\n    const hasLoginTest = content.includes('login');\n    const hasPasswordTest = content.includes('password');\n    const hasTokenTest = content.includes('token');\n    const hasSessionTest = content.includes('session');\n\n    const authCoverage = [hasLoginTest, hasPasswordTest, hasTokenTest, hasSessionTest]\n      .filter(Boolean).length / 4;\n\n    return {\n      taintCoverage: authCoverage,\n      sanitizerCoverage: 0.7,\n      sinkCoverage: 0.5,\n      securityAssertions: hasTokenTest || hasSessionTest ? 1 : 0,\n      vulnerableFlows: 0\n    };\n  }\n\n  private generateAuthSuggestions(issues: SecurityIssue[], method: TestMethod): SecurityImprovement[] {\n    const suggestions: SecurityImprovement[] = [];\n\n    issues.forEach(issue => {\n      if (issue.type === 'authentication') {\n        suggestions.push({\n          type: 'add-assertion',\n          description: issue.message,\n          location: issue.location,\n          impact: 'high'\n        });\n      }\n    });\n\n    return suggestions;\n  }\n\n  private checkAuthCoverage(method: TestMethod, required: string[]): string[] {\n    const content = method.content?.toLowerCase() || '';\n    const missing: string[] = [];\n\n    required.forEach(coverage => {\n      let covered = false;\n      \n      switch (coverage) {\n        case 'success':\n          covered = content.includes('success') || content.includes('正常');\n          break;\n        case 'failure':\n          covered = content.includes('fail') || content.includes('error') || content.includes('失敗');\n          break;\n        case 'token-expiry':\n          covered = content.includes('expir') || content.includes('期限');\n          break;\n      }\n      \n      if (!covered) {\n        missing.push(coverage);\n      }\n    });\n\n    return missing;\n  }\n\n  private generateCacheKey(method: TestMethod): string {\n    return `${method.filePath || 'unknown'}:${method.name}:${method.content?.length || 0}`;\n  }\n\n  private createEmptyResult(methodName: string, analysisTime: number): MethodAnalysisResult {\n    const emptyMethod: TestMethod = {\n      name: methodName,\n      filePath: '',\n      content: '',\n      type: 'test',\n      location: { start: { line: 0, column: 0 }, end: { line: 0, column: 0 } }\n    };\n    return {\n      method: emptyMethod,\n      methodName,\n      flowGraph: { nodes: new Map(), edges: [], exitNodes: [] },\n      violations: [],\n      metrics: {\n        taintCoverage: 0,\n        sanitizerCoverage: 0,\n        sinkCoverage: 0,\n        securityAssertions: 0,\n        vulnerableFlows: 0\n      },\n      improvements: [],\n      issues: [],\n      suggestions: [],\n      analysisTime: analysisTime\n    };\n  }\n\n  private createErrorResult(methodName: string, error: unknown, analysisTime: number): MethodAnalysisResult {\n    const emptyMethod: TestMethod = {\n      name: methodName,\n      filePath: '',\n      content: '',\n      type: 'test',\n      location: { start: { line: 0, column: 0 }, end: { line: 0, column: 0 } }\n    };\n    return {\n      method: emptyMethod,\n      methodName,\n      flowGraph: { nodes: new Map(), edges: [], exitNodes: [] },\n      violations: [],\n      metrics: {\n        taintCoverage: 0,\n        sanitizerCoverage: 0,\n        sinkCoverage: 0,\n        securityAssertions: 0,\n        vulnerableFlows: 0\n      },\n      improvements: [],\n      issues: [{\n        id: `error-${methodName}`,\n        severity: 'critical',\n        type: 'validation',\n        message: `解析エラー: ${error instanceof Error ? error.message : '不明なエラー'}`,\n        location: { file: '', line: 0, column: 0 }\n      }],\n      suggestions: [],\n      analysisTime: analysisTime\n    };\n  }\n\n  /**\n   * テストメソッドの分析（ITypeBasedSecurityPlugin準拠）\n   */\n  async analyzeTestMethod(method: TestMethod): Promise<TestMethodAnalysisResult> {\n    // TestMethodまたは汎用メソッドオブジェクトを処理\n    const testMethod: TestMethod = {\n      name: method.name || 'unknown',\n      filePath: method.filePath || '',\n      content: method.content || '',\n      type: 'test',\n      location: method.location || { start: { line: 0, column: 0 }, end: { line: 0, column: 0 } }\n    };\n\n    // 既存のanalyzeMethodを使用\n    const result = await this.analyzeMethod(testMethod);\n    \n    // レスポンスを整形\n    const testMethodResult: TestMethodAnalysisResult = {\n      taintFlow: {\n        nodes: result.flowGraph?.nodes || [],\n        edges: result.flowGraph?.edges || [],\n        exitNodes: result.flowGraph?.exitNodes || [],\n        sources: result.flowGraph?.taintSources?.map(s => s.variable || s.source || 'unknown') || [],\n        sanitizers: result.flowGraph?.sanitizers?.map(s => s.variable || 'unknown') || [],\n        sinks: result.flowGraph?.securitySinks?.map(s => s.sink || 'unknown') || []\n      },\n      issues: result.issues || [],\n      securityScore: 0.5 // デフォルトスコア\n    };\n    \n    return testMethodResult;\n  }\n}"],"version":3}