{"file":"/Users/sasakama/Projects/Rimor/src/scoring/config.ts","mappings":";;;;;;AAAA,mCAKiB;AACjB,iDAQwB;AACxB,iDAAiD;AACjD,4CAAoB;AACpB,gDAAwB;AA2BxB;;;GAGG;AACH,MAAa,oBAAoB;IAC/B,yBAAyB;IAEzB;QACE,wCAAwC;IAC1C,CAAC;IAED;;OAEG;IACK,iBAAiB;QACvB,OAAO;YACL,UAAU,EAAE;gBACV,WAAW,EAAE,IAAI;gBACjB,YAAY,EAAE,IAAI;gBAClB,eAAe,EAAE,IAAI;gBACrB,WAAW,EAAE,IAAI;gBACjB,QAAQ,EAAE,IAAI;aACf;YACD,OAAO,EAAE;gBACP,gBAAgB,EAAE,GAAG;gBACrB,kBAAkB,EAAE,GAAG;aACxB;SACF,CAAC;IACJ,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,iBAAiB,CAAC,SAAiB;QACvC,IAAI,CAAC;YACH,oBAAoB;YACpB,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,EAAE,CAAC;gBAClC,eAAe;gBACf,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,MAAM,IAAI,OAAO,CAAC,GAAG,CAAC,cAAc,KAAK,SAAS,EAAE,CAAC;oBAChF,OAAO,CAAC,IAAI,CAAC,mCAAmC,CAAC,CAAC;gBACpD,CAAC;gBACD,OAAO,IAAI,CAAC,uBAAuB,EAAE,CAAC;YACxC,CAAC;YAED,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;YAExD,IAAI,CAAC,UAAU,EAAE,CAAC;gBAChB,OAAO,IAAI,CAAC,uBAAuB,EAAE,CAAC;YACxC,CAAC;YAED,oBAAoB;YACpB,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,EAAE,CAAC;gBACnC,OAAO,CAAC,IAAI,CAAC,iCAAiC,CAAC,CAAC;gBAChD,OAAO,IAAI,CAAC,uBAAuB,EAAE,CAAC;YACxC,CAAC;YAED,MAAM,aAAa,GAAG,YAAE,CAAC,YAAY,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;YAE3D,iBAAiB;YACjB,IAAI,aAAa,CAAC,MAAM,GAAG,IAAI,GAAG,IAAI,EAAE,CAAC;gBACvC,OAAO,CAAC,IAAI,CAAC,8BAA8B,CAAC,CAAC;gBAC7C,OAAO,IAAI,CAAC,uBAAuB,EAAE,CAAC;YACxC,CAAC;YAED,MAAM,MAAM,GAAG,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC;YAEnD,IAAI,CAAC,IAAA,2BAAY,EAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;gBAC7C,OAAO,IAAI,CAAC,uBAAuB,EAAE,CAAC;YACxC,CAAC;YAED,MAAM,cAAc,GAAG,MAAM,CAAC,OAAO,CAAC;YACtC,IAAI,CAAC,IAAA,qCAAsB,EAAC,cAAc,CAAC,EAAE,CAAC;gBAC5C,OAAO,IAAI,CAAC,uBAAuB,EAAE,CAAC;YACxC,CAAC;YAED,OAAO,IAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC,CAAC;QAEjD,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,IAAI,CAAC,6BAA6B,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;YAC/F,OAAO,IAAI,CAAC,uBAAuB,EAAE,CAAC;QACxC,CAAC;IACH,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,iBAAiB,CAAC,SAAiB,EAAE,aAA4B;QACrE,oBAAoB;QACpB,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,EAAE,CAAC;YAClC,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;QAC3C,CAAC;QAED,MAAM,UAAU,GAAG,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,mBAAmB,CAAC,CAAC;QAE7D,oBAAoB;QACpB,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,EAAE,CAAC;YACnC,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;QACzC,CAAC;QAED,WAAW;QACX,MAAM,UAAU,GAAG,IAAI,CAAC,qBAAqB,CAAC,aAAa,CAAC,CAAC;QAC7D,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;YACxB,MAAM,IAAI,KAAK,CAAC,YAAY,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAC9D,CAAC;QAED,IAAI,cAAc,GAAG,EAAE,CAAC;QAExB,sBAAsB;QACtB,IAAI,YAAE,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE,CAAC;YAC9B,IAAI,CAAC;gBACH,MAAM,eAAe,GAAG,YAAE,CAAC,YAAY,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;gBAE7D,iBAAiB;gBACjB,IAAI,eAAe,CAAC,MAAM,GAAG,IAAI,GAAG,IAAI,EAAE,CAAC;oBACzC,OAAO,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;oBACzC,cAAc,GAAG,EAAE,CAAC;gBACtB,CAAC;qBAAM,CAAC;oBACN,MAAM,MAAM,GAAG,IAAI,CAAC,eAAe,CAAC,eAAe,CAAC,CAAC;oBACrD,cAAc,GAAG,IAAA,2BAAY,EAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC;gBACtD,CAAC;YACH,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,OAAO,CAAC,IAAI,CAAC,sBAAsB,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;gBACxF,cAAc,GAAG,EAAE,CAAC;YACtB,CAAC;QACH,CAAC;QAED,cAAc;QACd,MAAM,aAAa,GAAG;YACpB,GAAG,cAAc;YACjB,OAAO,EAAE,aAAa;SACvB,CAAC;QAEF,oBAAoB;QACpB,IAAI,CAAC,YAAE,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,CAAC;YAC9B,YAAE,CAAC,SAAS,CAAC,SAAS,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;QAC/C,CAAC;QAED,eAAe;QACf,MAAM,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;QAC1D,IAAI,UAAU,CAAC,MAAM,GAAG,IAAI,GAAG,IAAI,EAAE,CAAC;YACpC,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;QAC1C,CAAC;QAED,YAAE,CAAC,aAAa,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;IAC3C,CAAC;IAED;;;;OAIG;IACH,oBAAoB,CAAC,MAAwD;QAC3E,sBAAsB;QACtB,MAAM,OAAO,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAEzC,MAAM,eAAe,GAAG,IAAI,CAAC,6BAA6B,CAAC,MAAM,CAAC,CAAC;QAEnE,MAAM,OAAO,GAAG,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAC;QAEnD,OAAO;YACL,OAAO,EAAE,IAAI;YACb,OAAO;YACP,eAAe;YACf,OAAO;SACR,CAAC;IACJ,CAAC;IAED;;;;OAIG;IACH,qBAAqB,CAAC,MAAqB;QACzC,MAAM,MAAM,GAAa,EAAE,CAAC;QAC5B,MAAM,QAAQ,GAAa,EAAE,CAAC;QAC9B,MAAM,WAAW,GAAa,EAAE,CAAC;QAEjC,aAAa;QACb,IAAI,OAAO,MAAM,CAAC,OAAO,KAAK,SAAS,EAAE,CAAC;YACxC,MAAM,CAAC,IAAI,CAAC,kCAAkC,CAAC,CAAC;QAClD,CAAC;QAED,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;YACpB,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;QACpC,CAAC;aAAM,CAAC;YACN,UAAU;YACV,2BAA2B;YAC3B,IAAI,CAAC,MAAM,CAAC,OAAO,IAAI,OAAO,MAAM,CAAC,OAAO,KAAK,QAAQ,EAAE,CAAC;gBAC1D,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YAC3B,CAAC;QACH,CAAC;QAED,IAAI,CAAC,MAAM,CAAC,eAAe,EAAE,CAAC;YAC5B,MAAM,CAAC,IAAI,CAAC,4BAA4B,CAAC,CAAC;QAC5C,CAAC;aAAM,CAAC;YACN,YAAY;YACZ,MAAM,eAAe,GAAG,IAAI,CAAC,uBAAuB,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;YAC7E,MAAM,CAAC,IAAI,CAAC,GAAG,eAAe,CAAC,MAAM,CAAC,CAAC;YACvC,QAAQ,CAAC,IAAI,CAAC,GAAG,eAAe,CAAC,QAAQ,CAAC,CAAC;YAC3C,WAAW,CAAC,IAAI,CAAC,GAAG,eAAe,CAAC,WAAW,CAAC,CAAC;QACnD,CAAC;QAED,aAAa;QACb,IAAI,MAAM,CAAC,OAAO,EAAE,CAAC;YACnB,MAAM,gBAAgB,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;YAC9D,QAAQ,CAAC,IAAI,CAAC,GAAG,gBAAgB,CAAC,QAAQ,CAAC,CAAC;YAC5C,WAAW,CAAC,IAAI,CAAC,GAAG,gBAAgB,CAAC,WAAW,CAAC,CAAC;QACpD,CAAC;QAED,OAAO;YACL,OAAO,EAAE,MAAM,CAAC,MAAM,KAAK,CAAC;YAC5B,MAAM;YACN,QAAQ;YACR,WAAW;SACZ,CAAC;IACJ,CAAC;IAED;;;;OAIG;IACH,uBAAuB,CAAC,YAA0B;QAChD,MAAM,OAAO,GAAiB;YAC5B,OAAO,EAAE,EAAE;YACX,UAAU,EAAE,EAAE,GAAG,uBAAe,CAAC,UAAU,EAAE;SAC9C,CAAC;QAEF,iBAAiB;QACjB,IAAI,YAAY,CAAC,OAAO,EAAE,CAAC;YACzB,KAAK,MAAM,CAAC,QAAQ,EAAE,YAAY,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,OAAO,CAAC,EAAE,CAAC;gBAC5E,IAAI,OAAO,YAAY,KAAK,QAAQ,IAAI,YAAY,CAAC,MAAM,EAAE,CAAC;oBAC5D,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,YAAY,CAAC,MAAM,CAAC;gBAClD,CAAC;YACH,CAAC;QACH,CAAC;QAED,cAAc;QACd,IAAI,eAAe,GAA8B,EAAE,GAAG,wBAAgB,EAAE,CAAC;QAEzE,IAAI,YAAY,CAAC,OAAO,EAAE,UAAU,EAAE,CAAC;YACrC,MAAM,MAAM,GAAG,YAAY,CAAC,OAAO,CAAC,UAAU,CAAC;YAC/C,eAAe,GAAG;gBAChB,CAAC,EAAE,MAAM,CAAC,SAAS,IAAI,EAAE;gBACzB,CAAC,EAAE,MAAM,CAAC,IAAI,IAAI,EAAE;gBACpB,CAAC,EAAE,MAAM,CAAC,UAAU,IAAI,EAAE;gBAC1B,CAAC,EAAE,MAAM,CAAC,IAAI,IAAI,EAAE;gBACpB,CAAC,EAAE,CAAC;aACL,CAAC;QACJ,CAAC;QAED,iBAAiB;QACjB,IAAI,YAAY,CAAC,OAAO,EAAE,UAAU,EAAE,CAAC;YACrC,iBAAiB;YACjB,OAAO,CAAC,UAAU,CAAC,WAAW,IAAI,GAAG,CAAC;YACtC,OAAO,CAAC,UAAU,CAAC,QAAQ,IAAI,GAAG,CAAC;YAEnC,SAAS;YACT,eAAe,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YACpD,eAAe,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;QACtD,CAAC;QAED,OAAO;YACL,OAAO,EAAE,IAAI;YACb,OAAO;YACP,eAAe;YACf,OAAO,EAAE;gBACP,YAAY,EAAE,KAAK,EAAE,iBAAiB;gBACtC,iBAAiB,EAAE,KAAK;gBACxB,YAAY,EAAE,IAAI;gBAClB,YAAY,EAAE,SAAS;aACxB;SACF,CAAC;IACJ,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,uBAAuB,CAC3B,aAA4B,EAC5B,YAMC;QAED,SAAS;QACT,uCAAuC;QACvC,MAAM,gBAAgB,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAElD,aAAa;QACb,MAAM,mBAAmB,GAAG,IAAI,CAAC,uBAAuB,CACtD,aAAa,CAAC,eAAe,EAC7B,YAAY,CAAC,iBAAiB,EAC9B,YAAY,CAAC,YAAY,CAC1B,CAAC;QAEF,OAAO;YACL,GAAG,aAAa;YAChB,OAAO,EAAE,gBAAgB;YACzB,eAAe,EAAE,mBAAmB;SACrC,CAAC;IACJ,CAAC;IAED,qBAAqB;IAErB;;;OAGG;IACK,YAAY,CAAC,SAAiB;QACpC,IAAI,CAAC;YACH,MAAM,YAAY,GAAG,cAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;YAC7C,MAAM,cAAc,GAAG,cAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;YAEjD,gBAAgB;YAChB,IAAI,cAAc,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,cAAc,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC;gBAClE,OAAO,KAAK,CAAC;YACf,CAAC;YAED,2BAA2B;YAC3B,MAAM,GAAG,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC;YAC1B,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE,CAAC;gBAClC,OAAO,KAAK,CAAC;YACf,CAAC;YAED,kBAAkB;YAClB,MAAM,iBAAiB,GAAG;gBACxB,SAAS,EAAE,UAAU,EAAE,SAAS,EAAE,SAAS,EAAG,aAAa;gBAC3D,QAAQ,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAc,WAAW;gBACxD,MAAM,EAAE,WAAW,CAA0B,OAAO;aACrD,CAAC;YAEF,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;QACxE,CAAC;QAAC,MAAM,CAAC;YACP,OAAO,KAAK,CAAC;QACf,CAAC;IACH,CAAC;IAED;;;OAGG;IACK,eAAe,CAAC,OAAe;QACrC,IAAI,CAAC;YACH,aAAa;YACb,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAEnC,iBAAiB;YACjB,IAAI,OAAO,MAAM,KAAK,QAAQ,IAAI,MAAM,KAAK,IAAI,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC;gBAC3E,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;YAC/C,CAAC;YAED,cAAc;YACd,OAAO,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;QAC3C,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,IAAI,KAAK,CAAC,qBAAqB,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC5F,CAAC;IACH,CAAC;IAED;;OAEG;IACK,oBAAoB,CAAC,GAAc,EAAE,KAAK,GAAG,CAAC;QACpD,kBAAkB;QAClB,IAAI,KAAK,GAAG,EAAE,EAAE,CAAC;YACf,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;QACtC,CAAC;QAED,IAAI,OAAO,GAAG,KAAK,QAAQ,IAAI,GAAG,KAAK,IAAI,EAAE,CAAC;YAC5C,OAAO,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;QACjC,CAAC;QAED,QAAQ;QACR,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC;YACvB,OAAO,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,oBAAoB,CAAC,IAAI,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC;QACrE,CAAC;QAED,MAAM,SAAS,GAAe,EAAE,CAAC;QACjC,MAAM,WAAW,GAAG,IAAI,GAAG,CAAC;YAC1B,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,iBAAiB,EAAE,SAAS;YAC7D,SAAS,EAAE,YAAY,EAAE,cAAc,EAAE,mBAAmB;YAC5D,cAAc,EAAE,cAAc,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;YACvD,iBAAiB,EAAE,QAAQ;SAC5B,CAAC,CAAC;QAEH,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC;YAC/C,SAAS;YACT,IAAI,OAAO,GAAG,KAAK,QAAQ,IAAI,GAAG,CAAC,MAAM,GAAG,GAAG,EAAE,CAAC;gBAChD,SAAS,CAAC,WAAW;YACvB,CAAC;YAED,eAAe;YACf,IAAI,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,GAAG,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE,CAAC;gBACrF,SAAS;YACX,CAAC;YAED,0BAA0B;YAC1B,IAAI,KAAK,KAAK,CAAC,IAAI,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,KAAK,CAAC,0BAA0B,CAAC,EAAE,CAAC;gBACjF,SAAS,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,oBAAoB,CAAC,KAAK,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC;YAC/D,CAAC;QACH,CAAC;QAED,OAAO,SAAS,CAAC;IACnB,CAAC;IAED;;OAEG;IACK,aAAa,CAAC,KAAgB;QACpC,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;YAC9B,UAAU;YACV,IAAI,KAAK,CAAC,MAAM,GAAG,IAAI,EAAE,CAAC;gBACxB,OAAO,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;YAClC,CAAC;YAED,aAAa;YACb,OAAO,KAAK,CAAC,OAAO,CAAC,mBAAmB,EAAE,EAAE,CAAC,CAAC;QAChD,CAAC;QAED,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;YAC9B,UAAU;YACV,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC;gBAC5B,OAAO,CAAC,CAAC;YACX,CAAC;YACD,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC;QAClD,CAAC;QAED,IAAI,OAAO,KAAK,KAAK,SAAS,EAAE,CAAC;YAC/B,OAAO,KAAK,CAAC;QACf,CAAC;QAED,WAAW;QACX,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;OAEG;IACK,uBAAuB;QAC7B,OAAO;YACL,OAAO,EAAE,IAAI;YACb,OAAO,EAAE,uBAAe;YACxB,eAAe,EAAE,EAAE,GAAG,wBAAgB,EAAE;YACxC,OAAO,EAAE;gBACP,YAAY,EAAE,IAAI;gBAClB,iBAAiB,EAAE,KAAK;gBACxB,YAAY,EAAE,IAAI;gBAClB,YAAY,EAAE,UAAU;aACzB;SACF,CAAC;IACJ,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,cAAc,CAAC,QAAgB;QAC3C,MAAM,eAAe,GAAG,CAAC,mBAAmB,EAAE,eAAe,EAAE,UAAU,CAAC,CAAC;QAC3E,IAAI,UAAU,GAAG,cAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACxC,MAAM,OAAO,GAAG,cAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC;QAC5C,MAAM,WAAW,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC;QAElC,qBAAqB;QACrB,IAAI,SAAS,GAAG,EAAE,CAAC;QAEnB,OAAO,UAAU,KAAK,OAAO,IAAI,SAAS,GAAG,CAAC,EAAE,CAAC;YAC/C,0BAA0B;YAC1B,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,WAAW,CAAC,EAAE,CAAC;gBACxC,MAAM;YACR,CAAC;YAED,KAAK,MAAM,QAAQ,IAAI,eAAe,EAAE,CAAC;gBACvC,MAAM,UAAU,GAAG,cAAI,CAAC,IAAI,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;gBAEnD,cAAc;gBACd,IAAI,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,IAAI,YAAE,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE,CAAC;oBAC/D,cAAc;oBACd,IAAI,CAAC;wBACH,MAAM,KAAK,GAAG,YAAE,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;wBACtC,8BAA8B;wBAC9B,IAAI,KAAK,CAAC,MAAM,EAAE,IAAI,KAAK,CAAC,IAAI,GAAG,IAAI,GAAG,IAAI,EAAE,CAAC;4BAC/C,OAAO,UAAU,CAAC;wBACpB,CAAC;oBACH,CAAC;oBAAC,OAAO,KAAK,EAAE,CAAC;wBACf,qBAAqB;wBACrB,SAAS;oBACX,CAAC;gBACH,CAAC;YACH,CAAC;YACD,UAAU,GAAG,cAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;YACtC,SAAS,EAAE,CAAC;QACd,CAAC;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;OAEG;IACK,kBAAkB,CAAC,cAAoC;QAC7D,MAAM,MAAM,GAAkB;YAC5B,OAAO,EAAE,cAAc,CAAC,OAAO,KAAK,KAAK,EAAE,YAAY;YACvD,OAAO,EAAE,uBAAe;YACxB,eAAe,EAAE,EAAE,GAAG,wBAAgB,EAAE;SACzC,CAAC;QAEF,UAAU;QACV,IAAI,cAAc,CAAC,OAAO,EAAE,CAAC;YAC3B,MAAM,cAAc,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;YAChD,MAAM,CAAC,OAAO,GAAG;gBACf,OAAO,EAAE;oBACP,GAAG,cAAc,CAAC,OAAO;oBACzB,GAAG,CAAC,cAAc,CAAC,OAAO,CAAC,OAAO,IAAI,EAAE,CAAC;iBAC1C;gBACD,UAAU,EAAE;oBACV,GAAG,cAAc,CAAC,UAAU;oBAC5B,GAAG,CAAC,cAAc,CAAC,OAAO,CAAC,UAAU,IAAI,EAAE,CAAC;iBACf;aAChC,CAAC;QACJ,CAAC;QAED,YAAY;QACZ,IAAI,cAAc,CAAC,eAAe,EAAE,CAAC;YACnC,MAAM,CAAC,eAAe,GAAG,IAAI,CAAC,uBAAuB,CAAC,cAAc,CAAC,eAAe,CAAC,CAAC;QACxF,CAAC;QAED,aAAa;QACb,IAAI,cAAc,CAAC,OAAO,EAAE,CAAC;YAC3B,MAAM,CAAC,OAAO,GAAG;gBACf,YAAY,EAAE,cAAc,CAAC,OAAO,CAAC,YAAY,KAAK,KAAK;gBAC3D,iBAAiB,EAAE,cAAc,CAAC,OAAO,CAAC,iBAAiB,KAAK,IAAI;gBACpE,YAAY,EAAE,cAAc,CAAC,OAAO,CAAC,YAAY,KAAK,KAAK;gBAC3D,YAAY,EAAE,cAAc,CAAC,OAAO,CAAC,YAAY,IAAI,UAAU;aAChE,CAAC;QACJ,CAAC;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;IAED;;OAEG;IACK,6BAA6B,CAAC,MAAc;QAClD,QAAQ,MAAM,EAAE,CAAC;YACf,KAAK,QAAQ;gBACX,OAAO,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;YAC9C,KAAK,UAAU;gBACb,OAAO,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;YAC9C,KAAK,aAAa;gBAChB,OAAO,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;YAC9C,KAAK,QAAQ;gBACX,OAAO,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;YAC9C;gBACE,OAAO,EAAE,GAAG,wBAAgB,EAAE,CAAC;QACnC,CAAC;IACH,CAAC;IAED;;OAEG;IACK,qBAAqB,CAAC,MAAc;QAC1C,QAAQ,MAAM,EAAE,CAAC;YACf,KAAK,QAAQ;gBACX,OAAO;oBACL,YAAY,EAAE,IAAI;oBAClB,iBAAiB,EAAE,IAAI;oBACvB,YAAY,EAAE,IAAI;oBAClB,YAAY,EAAE,UAAU;iBACzB,CAAC;YACJ,KAAK,aAAa;gBAChB,OAAO;oBACL,YAAY,EAAE,KAAK;oBACnB,iBAAiB,EAAE,KAAK;oBACxB,YAAY,EAAE,IAAI;oBAClB,YAAY,EAAE,SAAS;iBACxB,CAAC;YACJ,KAAK,QAAQ;gBACX,OAAO;oBACL,YAAY,EAAE,KAAK;oBACnB,iBAAiB,EAAE,KAAK;oBACxB,YAAY,EAAE,KAAK;oBACnB,YAAY,EAAE,SAAS;iBACxB,CAAC;YACJ;gBACE,OAAO;oBACL,YAAY,EAAE,IAAI;oBAClB,iBAAiB,EAAE,KAAK;oBACxB,YAAY,EAAE,IAAI;oBAClB,YAAY,EAAE,UAAU;iBACzB,CAAC;QACN,CAAC;IACH,CAAC;IAED;;OAEG;IACK,uBAAuB,CAAC,UAAqC;QACnE,MAAM,MAAM,GAAa,EAAE,CAAC;QAC5B,MAAM,QAAQ,GAAa,EAAE,CAAC;QAC9B,MAAM,WAAW,GAAa,EAAE,CAAC;QAEjC,YAAY;QACZ,MAAM,cAAc,GAAgB,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;QAC9D,KAAK,MAAM,KAAK,IAAI,cAAc,EAAE,CAAC;YACnC,IAAI,CAAC,CAAC,KAAK,IAAI,UAAU,CAAC,IAAI,OAAO,UAAU,CAAC,KAAK,CAAC,KAAK,QAAQ,EAAE,CAAC;gBACpE,MAAM,CAAC,IAAI,CAAC,SAAS,KAAK,iBAAiB,CAAC,CAAC;YAC/C,CAAC;QACH,CAAC;QAED,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACxB,SAAS;YACT,KAAK,MAAM,CAAC,KAAK,EAAE,SAAS,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE,CAAC;gBAC5D,IAAI,SAAS,GAAG,CAAC,IAAI,SAAS,GAAG,GAAG,EAAE,CAAC;oBACrC,MAAM,CAAC,IAAI,CAAC,SAAS,KAAK,UAAU,SAAS,uBAAuB,CAAC,CAAC;gBACxE,CAAC;YACH,CAAC;YAED,0BAA0B;YAC1B,IAAI,UAAU,CAAC,CAAC,IAAI,UAAU,CAAC,CAAC;gBAC5B,UAAU,CAAC,CAAC,IAAI,UAAU,CAAC,CAAC;gBAC5B,UAAU,CAAC,CAAC,IAAI,UAAU,CAAC,CAAC;gBAC5B,UAAU,CAAC,CAAC,IAAI,UAAU,CAAC,CAAC,EAAE,CAAC;gBACjC,MAAM,CAAC,IAAI,CAAC,mDAAmD,CAAC,CAAC;YACnE,CAAC;YAED,QAAQ;YACR,MAAM,IAAI,GAAG;gBACX,UAAU,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC;gBAC3B,UAAU,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC;gBAC3B,UAAU,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC;gBAC3B,UAAU,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC;aAC5B,CAAC;YAEF,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC;gBAC9B,QAAQ,CAAC,IAAI,CAAC,6BAA6B,CAAC,CAAC;gBAC7C,WAAW,CAAC,IAAI,CAAC,6BAA6B,CAAC,CAAC;YAClD,CAAC;YAED,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,CAAC;gBAC/B,QAAQ,CAAC,IAAI,CAAC,6BAA6B,CAAC,CAAC;gBAC7C,WAAW,CAAC,IAAI,CAAC,4BAA4B,CAAC,CAAC;YACjD,CAAC;QACH,CAAC;QAED,OAAO,EAAE,OAAO,EAAE,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,WAAW,EAAE,CAAC;IACzE,CAAC;IAED;;OAEG;IACK,eAAe,CAAC,OAAiC;QACvD,MAAM,QAAQ,GAAa,EAAE,CAAC;QAC9B,MAAM,WAAW,GAAa,EAAE,CAAC;QAEjC,IAAI,OAAO,EAAE,YAAY,IAAI,CAAC,CAAC,UAAU,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE,CAAC;YAChG,QAAQ,CAAC,IAAI,CAAC,cAAc,OAAO,CAAC,YAAY,EAAE,CAAC,CAAC;YACpD,WAAW,CAAC,IAAI,CAAC,+DAA+D,CAAC,CAAC;QACpF,CAAC;QAED,IAAI,OAAO,EAAE,iBAAiB,IAAI,CAAC,OAAO,EAAE,YAAY,EAAE,CAAC;YACzD,QAAQ,CAAC,IAAI,CAAC,oCAAoC,CAAC,CAAC;QACtD,CAAC;QAED,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE,EAAE,QAAQ,EAAE,WAAW,EAAE,CAAC;IAC9D,CAAC;IAED;;OAEG;IACK,uBAAuB,CAAC,UAA0D;QACxF,MAAM,SAAS,GAA8B,EAAE,GAAG,wBAAgB,EAAE,CAAC;QAErE,IAAI,CAAC,IAAA,2BAAY,EAAC,UAAU,CAAC,EAAE,CAAC;YAC9B,OAAO,SAAS,CAAC;QACnB,CAAC;QAED,MAAM,MAAM,GAAgB,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;QACtD,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE,CAAC;YAC3B,MAAM,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC;YAChC,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;gBAC9B,SAAS,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC;YACvD,CAAC;QACH,CAAC;QAED,OAAO,SAAS,CAAC;IACnB,CAAC;IAED;;OAEG;IACK,uBAAuB,CAC7B,OAAkC,EAClC,YAAuC,EACvC,YAAoB;QAEpB,MAAM,SAAS,GAAG,EAAE,GAAG,OAAO,EAAE,CAAC;QAEjC,cAAc;QACd,IAAI,YAAY,GAAG,EAAE,EAAE,CAAC;YACtB,iBAAiB;YACjB,SAAS,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC;YAC5C,SAAS,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,EAAE,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAC3D,CAAC;aAAM,IAAI,YAAY,GAAG,EAAE,EAAE,CAAC;YAC7B,gBAAgB;YAChB,SAAS,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC;YAC5C,SAAS,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,EAAE,SAAS,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;QAC5D,CAAC;QAED,qBAAqB;QACrB,MAAM,UAAU,GAAG,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE,CAAC,GAAG,GAAG,KAAK,EAAE,CAAC,CAAC,CAAC;QACtF,IAAI,UAAU,GAAG,CAAC,EAAE,CAAC;YACnB,MAAM,MAAM,GAAG,YAAY,CAAC,CAAC,GAAG,UAAU,CAAC;YAC3C,MAAM,MAAM,GAAG,YAAY,CAAC,CAAC,GAAG,UAAU,CAAC;YAE3C,IAAI,MAAM,GAAG,GAAG,EAAE,CAAC;gBACjB,oBAAoB;gBACpB,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC;YACnB,CAAC;iBAAM,IAAI,MAAM,GAAG,GAAG,EAAE,CAAC;gBACxB,mBAAmB;gBACnB,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC;gBACjB,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC;YACnB,CAAC;QACH,CAAC;QAED,OAAO,SAAS,CAAC;IACnB,CAAC;CACF;AA3tBD,oDA2tBC","names":[],"sources":["/Users/sasakama/Projects/Rimor/src/scoring/config.ts"],"sourcesContent":["import { \n  WeightConfig, \n  DEFAULT_WEIGHTS,\n  GRADE_THRESHOLDS,\n  GradeType\n} from './types';\nimport {\n  LegacyConfig,\n  JsonValue,\n  JsonObject,\n  PartialScoringConfig,\n  isJsonObject,\n  isJsonValue,\n  isPartialScoringConfig\n} from './config-types';\n// WeightsManager removed - using default weights\nimport fs from 'fs';\nimport path from 'path';\n\n/**\n * スコアリング設定の完全な構造\n */\nexport interface ScoringConfig {\n  enabled: boolean;\n  weights: WeightConfig;\n  gradeThresholds: Record<GradeType, number>;\n  options?: {\n    enableTrends?: boolean;\n    enablePredictions?: boolean;\n    cacheResults?: boolean;\n    reportFormat?: 'detailed' | 'summary' | 'minimal';\n  };\n}\n\n/**\n * 設定バリデーション結果\n */\nexport interface ConfigValidationResult {\n  isValid: boolean;\n  errors: string[];\n  warnings: string[];\n  suggestions: string[];\n}\n\n/**\n * スコアリング設定管理システム\n * rimor.config.json との統合とスコアリング専用設定の管理\n */\nexport class ScoringConfigManager {\n  // WeightsManager removed\n\n  constructor() {\n    // WeightsManager initialization removed\n  }\n\n  /**\n   * Get default weights\n   */\n  private getDefaultWeights(): WeightConfig {\n    return {\n      dimensions: {\n        correctness: 0.25,\n        completeness: 0.25,\n        maintainability: 0.20,\n        performance: 0.15,\n        security: 0.15\n      },\n      plugins: {\n        'test-existence': 1.0,\n        'assertion-exists': 1.0\n      }\n    };\n  }\n\n  /**\n   * スコアリング設定を読み込み\n   * @param configDir 設定ディレクトリ\n   * @returns スコアリング設定\n   */\n  async loadScoringConfig(configDir: string): Promise<ScoringConfig> {\n    try {\n      // ディレクトリパスのセキュリティ検証\n      if (!this.isSecurePath(configDir)) {\n        // テスト環境では警告を抑制\n        if (process.env.NODE_ENV !== 'test' && process.env.JEST_WORKER_ID === undefined) {\n          console.warn('設定ディレクトリのパスが安全でないため、デフォルト設定を使用します');\n        }\n        return this.getDefaultScoringConfig();\n      }\n\n      const configPath = await this.findConfigFile(configDir);\n      \n      if (!configPath) {\n        return this.getDefaultScoringConfig();\n      }\n\n      // 設定ファイルパスのセキュリティ検証\n      if (!this.isSecurePath(configPath)) {\n        console.warn('設定ファイルのパスが安全でないため、デフォルト設定を使用します');\n        return this.getDefaultScoringConfig();\n      }\n\n      const configContent = fs.readFileSync(configPath, 'utf-8');\n      \n      // ファイルサイズ制限（1MB）\n      if (configContent.length > 1024 * 1024) {\n        console.warn('設定ファイルが大きすぎるため、デフォルト設定を使用します');\n        return this.getDefaultScoringConfig();\n      }\n\n      const config = this.secureJsonParse(configContent);\n      \n      if (!isJsonObject(config) || !config.scoring) {\n        return this.getDefaultScoringConfig();\n      }\n      \n      const scoringSection = config.scoring;\n      if (!isPartialScoringConfig(scoringSection)) {\n        return this.getDefaultScoringConfig();\n      }\n\n      return this.buildScoringConfig(scoringSection);\n      \n    } catch (error) {\n      console.warn(`スコアリング設定の読み込みでエラーが発生しました: ${error instanceof Error ? error.message : '不明なエラー'}`);\n      return this.getDefaultScoringConfig();\n    }\n  }\n\n  /**\n   * スコアリング設定を保存\n   * @param configDir 設定ディレクトリ\n   * @param scoringConfig スコアリング設定\n   */\n  async saveScoringConfig(configDir: string, scoringConfig: ScoringConfig): Promise<void> {\n    // ディレクトリパスのセキュリティ検証\n    if (!this.isSecurePath(configDir)) {\n      throw new Error('設定ディレクトリのパスが安全ではありません');\n    }\n\n    const configPath = path.join(configDir, 'rimor.config.json');\n    \n    // 設定ファイルパスのセキュリティ検証\n    if (!this.isSecurePath(configPath)) {\n      throw new Error('設定ファイルのパスが安全ではありません');\n    }\n\n    // 設定の妥当性検証\n    const validation = this.validateScoringConfig(scoringConfig);\n    if (!validation.isValid) {\n      throw new Error(`設定が無効です: ${validation.errors.join(', ')}`);\n    }\n    \n    let existingConfig = {};\n    \n    // 既存の設定ファイルがある場合は読み込み\n    if (fs.existsSync(configPath)) {\n      try {\n        const existingContent = fs.readFileSync(configPath, 'utf-8');\n        \n        // ファイルサイズ制限（1MB）\n        if (existingContent.length > 1024 * 1024) {\n          console.warn('既存設定ファイルが大きすぎるため、新規作成します');\n          existingConfig = {};\n        } else {\n          const parsed = this.secureJsonParse(existingContent);\n          existingConfig = isJsonObject(parsed) ? parsed : {};\n        }\n      } catch (error) {\n        console.warn(`既存設定ファイルの読み込みでエラー: ${error instanceof Error ? error.message : '不明なエラー'}`);\n        existingConfig = {};\n      }\n    }\n\n    // スコアリング設定を統合\n    const updatedConfig = {\n      ...existingConfig,\n      scoring: scoringConfig\n    };\n\n    // ディレクトリが存在しない場合は作成\n    if (!fs.existsSync(configDir)) {\n      fs.mkdirSync(configDir, { recursive: true });\n    }\n\n    // JSON出力のサイズ制限\n    const configJson = JSON.stringify(updatedConfig, null, 2);\n    if (configJson.length > 1024 * 1024) {\n      throw new Error('設定ファイルが制限サイズを超過しています');\n    }\n\n    fs.writeFileSync(configPath, configJson);\n  }\n\n  /**\n   * プリセット設定を生成\n   * @param preset プリセット名\n   * @returns プリセットスコアリング設定\n   */\n  generatePresetConfig(preset: 'strict' | 'balanced' | 'performance' | 'legacy'): ScoringConfig {\n    // Use default weights\n    const weights = this.getDefaultWeights();\n    \n    const gradeThresholds = this.generatePresetGradeThresholds(preset);\n    \n    const options = this.generatePresetOptions(preset);\n\n    return {\n      enabled: true,\n      weights,\n      gradeThresholds,\n      options\n    };\n  }\n\n  /**\n   * スコアリング設定の妥当性を検証\n   * @param config スコアリング設定\n   * @returns 検証結果\n   */\n  validateScoringConfig(config: ScoringConfig): ConfigValidationResult {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n    const suggestions: string[] = [];\n\n    // 必須フィールドの確認\n    if (typeof config.enabled !== 'boolean') {\n      errors.push('enabled フィールドはboolean型である必要があります');\n    }\n\n    if (!config.weights) {\n      errors.push('weights フィールドが必要です');\n    } else {\n      // 重み設定の検証\n      // Simple weight validation\n      if (!config.weights || typeof config.weights !== 'object') {\n        errors.push('重み設定が無効です');\n      }\n    }\n\n    if (!config.gradeThresholds) {\n      errors.push('gradeThresholds フィールドが必要です');\n    } else {\n      // グレード閾値の検証\n      const gradeValidation = this.validateGradeThresholds(config.gradeThresholds);\n      errors.push(...gradeValidation.errors);\n      warnings.push(...gradeValidation.warnings);\n      suggestions.push(...gradeValidation.suggestions);\n    }\n\n    // オプション設定の検証\n    if (config.options) {\n      const optionValidation = this.validateOptions(config.options);\n      warnings.push(...optionValidation.warnings);\n      suggestions.push(...optionValidation.suggestions);\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings,\n      suggestions\n    };\n  }\n\n  /**\n   * レガシー設定から新設定への移行\n   * @param legacyConfig レガシー設定\n   * @returns 新しいスコアリング設定\n   */\n  migrateFromLegacyConfig(legacyConfig: LegacyConfig): ScoringConfig {\n    const weights: WeightConfig = {\n      plugins: {},\n      dimensions: { ...DEFAULT_WEIGHTS.dimensions }\n    };\n\n    // レガシープラグイン設定の変換\n    if (legacyConfig.plugins) {\n      for (const [pluginId, pluginConfig] of Object.entries(legacyConfig.plugins)) {\n        if (typeof pluginConfig === 'object' && pluginConfig.weight) {\n          weights.plugins[pluginId] = pluginConfig.weight;\n        }\n      }\n    }\n\n    // レガシー品質設定の変換\n    let gradeThresholds: Record<GradeType, number> = { ...GRADE_THRESHOLDS };\n    \n    if (legacyConfig.quality?.thresholds) {\n      const legacy = legacyConfig.quality.thresholds;\n      gradeThresholds = {\n        A: legacy.excellent || 90,\n        B: legacy.good || 80,\n        C: legacy.acceptable || 70,\n        D: legacy.poor || 60,\n        F: 0\n      };\n    }\n\n    // strictMode の変換\n    if (legacyConfig.quality?.strictMode) {\n      // 厳格モードの場合は重みを調整\n      weights.dimensions.correctness *= 1.5;\n      weights.dimensions.security *= 1.3;\n      \n      // 閾値も厳しく\n      gradeThresholds.A = Math.max(gradeThresholds.A, 95);\n      gradeThresholds.B = Math.max(gradeThresholds.B, 85);\n    }\n\n    return {\n      enabled: true,\n      weights,\n      gradeThresholds,\n      options: {\n        enableTrends: false, // レガシーではトレンド機能なし\n        enablePredictions: false,\n        cacheResults: true,\n        reportFormat: 'summary'\n      }\n    };\n  }\n\n  /**\n   * 設定の最適化提案を生成\n   * @param currentConfig 現在の設定\n   * @param projectStats プロジェクト統計\n   * @returns 最適化された設定\n   */\n  async generateOptimizedConfig(\n    currentConfig: ScoringConfig,\n    projectStats: {\n      totalFiles: number;\n      averageScore: number;\n      pluginUsage: Record<string, number>;\n      dimensionImportance: Record<string, number>;\n      gradeDistribution: Record<GradeType, number>;\n    }\n  ): Promise<ScoringConfig> {\n    // 重みの最適化\n    // Use default weights for optimization\n    const optimizedWeights = this.getDefaultWeights();\n\n    // グレード閾値の最適化\n    const optimizedThresholds = this.optimizeGradeThresholds(\n      currentConfig.gradeThresholds,\n      projectStats.gradeDistribution,\n      projectStats.averageScore\n    );\n\n    return {\n      ...currentConfig,\n      weights: optimizedWeights,\n      gradeThresholds: optimizedThresholds\n    };\n  }\n\n  // === プライベートメソッド ===\n\n  /**\n   * パス検証によるセキュリティチェック\n   * パストラバーサル攻撃を防ぐための検証\n   */\n  private isSecurePath(inputPath: string): boolean {\n    try {\n      const resolvedPath = path.resolve(inputPath);\n      const normalizedPath = path.normalize(inputPath);\n      \n      // パストラバーサル攻撃の検出\n      if (normalizedPath.includes('..') || normalizedPath.includes('~')) {\n        return false;\n      }\n      \n      // 絶対パスの制限（プロジェクトルート配下のみ許可）\n      const cwd = process.cwd();\n      if (!resolvedPath.startsWith(cwd)) {\n        return false;\n      }\n      \n      // 危険なファイル名パターンの検出\n      const dangerousPatterns = [\n        /\\/etc\\//, /\\/proc\\//, /\\/sys\\//, /\\/dev\\//,  // システムディレクトリ\n        /\\.\\.\\//, /~\\//, /\\$\\{/, /\\$\\(/,             // シェル/環境変数\n        /\\x00/, /\\x01-\\x1f/                          // 制御文字\n      ];\n      \n      return !dangerousPatterns.some(pattern => pattern.test(resolvedPath));\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * JSON設定の安全な解析\n   * セキュリティリスクのある値を検出・無害化\n   */\n  private secureJsonParse(content: string): JsonValue {\n    try {\n      // 基本的なJSON解析\n      const parsed = JSON.parse(content);\n      \n      // オブジェクトでない場合は拒否\n      if (typeof parsed !== 'object' || parsed === null || Array.isArray(parsed)) {\n        throw new Error('設定ファイルはオブジェクト形式である必要があります');\n      }\n      \n      // 危険なプロパティの除去\n      return this.sanitizeConfigObject(parsed);\n    } catch (error) {\n      throw new Error(`設定ファイルの解析に失敗しました: ${error instanceof Error ? error.message : '不明なエラー'}`);\n    }\n  }\n\n  /**\n   * 設定オブジェクトの無害化\n   */\n  private sanitizeConfigObject(obj: JsonValue, depth = 0): JsonValue {\n    // 循環参照・深すぎるネストの防止\n    if (depth > 10) {\n      throw new Error('設定ファイルの構造が複雑すぎます');\n    }\n    \n    if (typeof obj !== 'object' || obj === null) {\n      return this.sanitizeValue(obj);\n    }\n    \n    // 配列の処理\n    if (Array.isArray(obj)) {\n      return obj.map(item => this.sanitizeConfigObject(item, depth + 1));\n    }\n    \n    const sanitized: JsonObject = {};\n    const allowedKeys = new Set([\n      'scoring', 'enabled', 'weights', 'gradeThresholds', 'options',\n      'plugins', 'dimensions', 'enableTrends', 'enablePredictions',\n      'cacheResults', 'reportFormat', 'A', 'B', 'C', 'D', 'F',\n      'excludePatterns', 'output'\n    ]);\n    \n    for (const [key, value] of Object.entries(obj)) {\n      // キー名の検証\n      if (typeof key !== 'string' || key.length > 100) {\n        continue; // 危険なキーは無視\n      }\n      \n      // 危険なキーパターンの検出\n      if (key.startsWith('__') || key.includes('constructor') || key.includes('prototype')) {\n        continue;\n      }\n      \n      // 許可されたキーのみ処理（設定の文脈外では制限）\n      if (depth === 0 || allowedKeys.has(key) || key.match(/^[a-zA-Z][a-zA-Z0-9_-]*$/)) {\n        sanitized[key] = this.sanitizeConfigObject(value, depth + 1);\n      }\n    }\n    \n    return sanitized;\n  }\n\n  /**\n   * 値の無害化\n   */\n  private sanitizeValue(value: JsonValue): JsonValue {\n    if (typeof value === 'string') {\n      // 文字列長の制限\n      if (value.length > 1000) {\n        return value.substring(0, 1000);\n      }\n      \n      // 危険なパターンの除去\n      return value.replace(/[<>'\"&\\x00-\\x1f]/g, '');\n    }\n    \n    if (typeof value === 'number') {\n      // 数値の範囲制限\n      if (!Number.isFinite(value)) {\n        return 0;\n      }\n      return Math.max(-10000, Math.min(10000, value));\n    }\n    \n    if (typeof value === 'boolean') {\n      return value;\n    }\n    \n    // その他の型は無視\n    return null;\n  }\n\n  /**\n   * デフォルトスコアリング設定を取得\n   */\n  private getDefaultScoringConfig(): ScoringConfig {\n    return {\n      enabled: true,\n      weights: DEFAULT_WEIGHTS,\n      gradeThresholds: { ...GRADE_THRESHOLDS },\n      options: {\n        enableTrends: true,\n        enablePredictions: false,\n        cacheResults: true,\n        reportFormat: 'detailed'\n      }\n    };\n  }\n\n  /**\n   * 設定ファイルを検索\n   */\n  private async findConfigFile(startDir: string): Promise<string | null> {\n    const configFilenames = ['rimor.config.json', '.rimorrc.json', '.rimorrc'];\n    let currentDir = path.resolve(startDir);\n    const rootDir = path.parse(currentDir).root;\n    const projectRoot = process.cwd();\n\n    // 最大検索階層を制限（無限ループ防止）\n    let maxLevels = 10;\n\n    while (currentDir !== rootDir && maxLevels > 0) {\n      // セキュリティ: プロジェクトルート配下のみ検索\n      if (!currentDir.startsWith(projectRoot)) {\n        break;\n      }\n\n      for (const filename of configFilenames) {\n        const configPath = path.join(currentDir, filename);\n        \n        // パスのセキュリティ検証\n        if (this.isSecurePath(configPath) && fs.existsSync(configPath)) {\n          // ファイルの基本チェック\n          try {\n            const stats = fs.statSync(configPath);\n            // 通常ファイル・サイズ制限（1MB）・読み取り権限の確認\n            if (stats.isFile() && stats.size < 1024 * 1024) {\n              return configPath;\n            }\n          } catch (error) {\n            // ファイル情報取得エラーは無視して次へ\n            continue;\n          }\n        }\n      }\n      currentDir = path.dirname(currentDir);\n      maxLevels--;\n    }\n\n    return null;\n  }\n\n  /**\n   * 設定ファイルからスコアリング設定を構築\n   */\n  private buildScoringConfig(scoringSection: PartialScoringConfig): ScoringConfig {\n    const config: ScoringConfig = {\n      enabled: scoringSection.enabled !== false, // デフォルトtrue\n      weights: DEFAULT_WEIGHTS,\n      gradeThresholds: { ...GRADE_THRESHOLDS }\n    };\n\n    // 重み設定の処理\n    if (scoringSection.weights) {\n      const defaultWeights = this.getDefaultWeights();\n      config.weights = {\n        plugins: {\n          ...defaultWeights.plugins,\n          ...(scoringSection.weights.plugins || {})\n        },\n        dimensions: {\n          ...defaultWeights.dimensions,\n          ...(scoringSection.weights.dimensions || {})\n        } as WeightConfig['dimensions']\n      };\n    }\n\n    // グレード閾値の処理\n    if (scoringSection.gradeThresholds) {\n      config.gradeThresholds = this.sanitizeGradeThresholds(scoringSection.gradeThresholds);\n    }\n\n    // オプション設定の処理\n    if (scoringSection.options) {\n      config.options = {\n        enableTrends: scoringSection.options.enableTrends !== false,\n        enablePredictions: scoringSection.options.enablePredictions === true,\n        cacheResults: scoringSection.options.cacheResults !== false,\n        reportFormat: scoringSection.options.reportFormat || 'detailed'\n      };\n    }\n\n    return config;\n  }\n\n  /**\n   * プリセット用グレード閾値を生成\n   */\n  private generatePresetGradeThresholds(preset: string): Record<GradeType, number> {\n    switch (preset) {\n      case 'strict':\n        return { A: 95, B: 85, C: 75, D: 65, F: 0 };\n      case 'balanced':\n        return { A: 90, B: 80, C: 70, D: 60, F: 0 };\n      case 'performance':\n        return { A: 88, B: 78, C: 68, D: 58, F: 0 };\n      case 'legacy':\n        return { A: 85, B: 75, C: 65, D: 55, F: 0 };\n      default:\n        return { ...GRADE_THRESHOLDS };\n    }\n  }\n\n  /**\n   * プリセット用オプションを生成\n   */\n  private generatePresetOptions(preset: string): ScoringConfig['options'] {\n    switch (preset) {\n      case 'strict':\n        return {\n          enableTrends: true,\n          enablePredictions: true,\n          cacheResults: true,\n          reportFormat: 'detailed'\n        };\n      case 'performance':\n        return {\n          enableTrends: false,\n          enablePredictions: false,\n          cacheResults: true,\n          reportFormat: 'minimal'\n        };\n      case 'legacy':\n        return {\n          enableTrends: false,\n          enablePredictions: false,\n          cacheResults: false,\n          reportFormat: 'summary'\n        };\n      default:\n        return {\n          enableTrends: true,\n          enablePredictions: false,\n          cacheResults: true,\n          reportFormat: 'detailed'\n        };\n    }\n  }\n\n  /**\n   * グレード閾値の妥当性を検証\n   */\n  private validateGradeThresholds(thresholds: Record<GradeType, number>): ConfigValidationResult {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n    const suggestions: string[] = [];\n\n    // 必須グレードの確認\n    const requiredGrades: GradeType[] = ['A', 'B', 'C', 'D', 'F'];\n    for (const grade of requiredGrades) {\n      if (!(grade in thresholds) || typeof thresholds[grade] !== 'number') {\n        errors.push(`グレード \"${grade}\" の閾値が定義されていません`);\n      }\n    }\n\n    if (errors.length === 0) {\n      // 値の範囲確認\n      for (const [grade, threshold] of Object.entries(thresholds)) {\n        if (threshold < 0 || threshold > 100) {\n          errors.push(`グレード \"${grade}\" の閾値 (${threshold}) は0-100の範囲である必要があります`);\n        }\n      }\n\n      // 順序確認（A > B > C > D > F）\n      if (thresholds.A <= thresholds.B || \n          thresholds.B <= thresholds.C || \n          thresholds.C <= thresholds.D || \n          thresholds.D <= thresholds.F) {\n        errors.push('グレード閾値の順序が正しくありません (A > B > C > D > F である必要があります)');\n      }\n\n      // 間隔の警告\n      const gaps = [\n        thresholds.A - thresholds.B,\n        thresholds.B - thresholds.C,\n        thresholds.C - thresholds.D,\n        thresholds.D - thresholds.F\n      ];\n\n      if (gaps.some(gap => gap < 5)) {\n        warnings.push('グレード間の差が小さすぎる可能性があります（5点未満）');\n        suggestions.push('グレード間により明確な差をつけることを検討してください');\n      }\n\n      if (gaps.some(gap => gap > 20)) {\n        warnings.push('グレード間の差が大きすぎる可能性があります（20点超）');\n        suggestions.push('グレード間の差をより均等にすることを検討してください');\n      }\n    }\n\n    return { isValid: errors.length === 0, errors, warnings, suggestions };\n  }\n\n  /**\n   * オプション設定の妥当性を検証\n   */\n  private validateOptions(options: ScoringConfig['options']): ConfigValidationResult {\n    const warnings: string[] = [];\n    const suggestions: string[] = [];\n\n    if (options?.reportFormat && !['detailed', 'summary', 'minimal'].includes(options.reportFormat)) {\n      warnings.push(`不明なレポート形式: ${options.reportFormat}`);\n      suggestions.push('reportFormatは \"detailed\", \"summary\", \"minimal\" のいずれかを指定してください');\n    }\n\n    if (options?.enablePredictions && !options?.enableTrends) {\n      warnings.push('予測機能を有効にする場合、トレンド機能も有効にすることをお勧めします');\n    }\n\n    return { isValid: true, errors: [], warnings, suggestions };\n  }\n\n  /**\n   * グレード閾値を正常化\n   */\n  private sanitizeGradeThresholds(thresholds: Partial<Record<GradeType, number>> | JsonValue): Record<GradeType, number> {\n    const sanitized: Record<GradeType, number> = { ...GRADE_THRESHOLDS };\n\n    if (!isJsonObject(thresholds)) {\n      return sanitized;\n    }\n\n    const grades: GradeType[] = ['A', 'B', 'C', 'D', 'F'];\n    for (const grade of grades) {\n      const value = thresholds[grade];\n      if (typeof value === 'number') {\n        sanitized[grade] = Math.max(0, Math.min(100, value));\n      }\n    }\n\n    return sanitized;\n  }\n\n  /**\n   * グレード閾値を最適化\n   */\n  private optimizeGradeThresholds(\n    current: Record<GradeType, number>,\n    distribution: Record<GradeType, number>,\n    averageScore: number\n  ): Record<GradeType, number> {\n    const optimized = { ...current };\n    \n    // 平均スコアに基づく調整\n    if (averageScore > 85) {\n      // 平均が高い場合は基準を厳しく\n      optimized.A = Math.min(optimized.A + 2, 95);\n      optimized.B = Math.min(optimized.B + 2, optimized.A - 5);\n    } else if (averageScore < 70) {\n      // 平均が低い場合は基準を緩く\n      optimized.A = Math.max(optimized.A - 2, 85);\n      optimized.B = Math.max(optimized.B - 2, optimized.A - 15);\n    }\n\n    // 分布に基づく調整（極端な偏りを修正）\n    const totalFiles = Object.values(distribution).reduce((sum, count) => sum + count, 0);\n    if (totalFiles > 0) {\n      const aRatio = distribution.A / totalFiles;\n      const fRatio = distribution.F / totalFiles;\n\n      if (aRatio > 0.5) {\n        // A評価が多すぎる場合は基準を厳しく\n        optimized.A += 3;\n      } else if (fRatio > 0.3) {\n        // F評価が多すぎる場合は基準を緩く\n        optimized.A -= 2;\n        optimized.B -= 2;\n      }\n    }\n\n    return optimized;\n  }\n}"],"version":3}