6c243fb61068f615d214ec6ceeba86ad
"use strict";
/**
 * パッケージ分析クラス
 * package.json、lockファイル、依存関係の管理を担当
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.PackageAnalyzer = void 0;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const glob = __importStar(require("glob"));
class PackageAnalyzer {
    BUILT_IN_MODULES = new Set([
        'fs', 'path', 'http', 'https', 'crypto', 'os', 'util', 'stream',
        'url', 'querystring', 'child_process', 'cluster', 'events',
        'buffer', 'process', 'console', 'module', 'require', 'assert',
        'net', 'tls', 'dns', 'readline', 'repl', 'vm', 'zlib'
    ]);
    /**
     * パッケージマネージャーを検出
     */
    async detectPackageManager(projectPath) {
        // yarn.lockがあればyarn
        if (fs.existsSync(path.join(projectPath, 'yarn.lock'))) {
            return 'yarn';
        }
        // pnpm-lock.yamlがあればpnpm
        if (fs.existsSync(path.join(projectPath, 'pnpm-lock.yaml'))) {
            return 'pnpm';
        }
        // package-lock.jsonがあればnpm
        if (fs.existsSync(path.join(projectPath, 'package-lock.json'))) {
            return 'npm';
        }
        // デフォルトはnpm
        return 'npm';
    }
    /**
     * package.jsonを解析
     */
    async analyzePackageJson(projectPath) {
        const packageJsonPath = path.join(projectPath, 'package.json');
        if (!fs.existsSync(packageJsonPath)) {
            return {
                name: undefined,
                version: undefined,
                dependencies: {},
                devDependencies: {},
                peerDependencies: {},
                allDependencies: []
            };
        }
        try {
            const content = fs.readFileSync(packageJsonPath, 'utf-8');
            const packageJson = JSON.parse(content);
            const dependencies = packageJson.dependencies || {};
            const devDependencies = packageJson.devDependencies || {};
            const peerDependencies = packageJson.peerDependencies || {};
            const allDependencies = [
                ...Object.keys(dependencies),
                ...Object.keys(devDependencies),
                ...Object.keys(peerDependencies)
            ];
            return {
                name: packageJson.name,
                version: packageJson.version,
                dependencies,
                devDependencies,
                peerDependencies,
                allDependencies
            };
        }
        catch (error) {
            // パースエラーの場合は空のオブジェクトを返す
            return {
                name: undefined,
                version: undefined,
                dependencies: {},
                devDependencies: {},
                peerDependencies: {},
                allDependencies: []
            };
        }
    }
    /**
     * 未使用の依存関係を検出
     */
    async findUnusedDependencies(projectPath) {
        const packageAnalysis = await this.analyzePackageJson(projectPath);
        const allDeps = packageAnalysis.allDependencies;
        if (allDeps.length === 0) {
            return [];
        }
        const usedPackages = await this.findUsedPackages(projectPath);
        const unusedDeps = allDeps.filter(dep => !usedPackages.has(dep));
        return unusedDeps;
    }
    /**
     * 不足している依存関係を検出
     */
    async findMissingDependencies(projectPath) {
        const packageAnalysis = await this.analyzePackageJson(projectPath);
        const installedDeps = new Set(packageAnalysis.allDependencies);
        const usedPackages = await this.findUsedPackages(projectPath);
        const missingDeps = [];
        usedPackages.forEach(pkg => {
            if (!installedDeps.has(pkg) && !this.BUILT_IN_MODULES.has(pkg)) {
                missingDeps.push(pkg);
            }
        });
        return missingDeps;
    }
    /**
     * バージョン制約を分析
     */
    async analyzeVersionConstraints(projectPath) {
        const packageAnalysis = await this.analyzePackageJson(projectPath);
        const results = [];
        const allDeps = {
            ...packageAnalysis.dependencies,
            ...packageAnalysis.devDependencies,
            ...packageAnalysis.peerDependencies
        };
        for (const [pkg, version] of Object.entries(allDeps)) {
            const result = this.analyzeVersionString(pkg, version);
            results.push(result);
        }
        return results;
    }
    /**
     * lockファイルを解析
     */
    async parseLockFiles(projectPath) {
        const lockInfo = new Map();
        // yarn.lockをパース
        const yarnLockPath = path.join(projectPath, 'yarn.lock');
        if (fs.existsSync(yarnLockPath)) {
            try {
                const content = fs.readFileSync(yarnLockPath, 'utf-8');
                const parsed = this.parseYarnLock(content);
                parsed.forEach((version, name) => {
                    lockInfo.set(name, version);
                });
            }
            catch (error) {
                // yarn.lockの解析に失敗した場合は無視
            }
        }
        // package-lock.jsonをパース（yarn.lockがない場合）
        if (lockInfo.size === 0) {
            const packageLockPath = path.join(projectPath, 'package-lock.json');
            if (fs.existsSync(packageLockPath)) {
                try {
                    const content = fs.readFileSync(packageLockPath, 'utf-8');
                    const packageLock = JSON.parse(content);
                    const packages = this.parsePackageLock(packageLock);
                    packages.forEach((version, name) => {
                        lockInfo.set(name, version);
                    });
                }
                catch (error) {
                    // package-lock.jsonの解析に失敗した場合は無視
                }
            }
        }
        return lockInfo;
    }
    /**
     * プロジェクト内で使用されているパッケージを検出
     * @private
     */
    async findUsedPackages(projectPath) {
        const usedPackages = new Set();
        const sourceFiles = glob.sync('**/*.{js,jsx,ts,tsx,mjs,cjs}', {
            cwd: projectPath,
            ignore: ['node_modules/**', 'dist/**', 'build/**']
        });
        for (const file of sourceFiles) {
            const filePath = path.join(projectPath, file);
            try {
                const content = fs.readFileSync(filePath, 'utf-8');
                const imports = this.extractImports(content);
                imports.forEach(imp => {
                    if (!this.isRelativeImport(imp) && !this.BUILT_IN_MODULES.has(imp)) {
                        usedPackages.add(this.getPackageName(imp));
                    }
                });
            }
            catch (error) {
                // ファイル読み込みエラーは無視
            }
        }
        return usedPackages;
    }
    /**
     * コードからimport/requireを抽出
     * @private
     */
    extractImports(content) {
        const imports = new Set();
        // ES6 imports
        const importRegex = /import\s+(?:.*?\s+from\s+)?['"]([^'"]+)['"]/g;
        let match;
        while ((match = importRegex.exec(content)) !== null) {
            imports.add(match[1]);
        }
        // CommonJS requires
        const requireRegex = /require\s*\(\s*['"]([^'"]+)['"]\s*\)/g;
        while ((match = requireRegex.exec(content)) !== null) {
            imports.add(match[1]);
        }
        // Dynamic imports
        const dynamicImportRegex = /import\s*\(\s*['"]([^'"]+)['"]\s*\)/g;
        while ((match = dynamicImportRegex.exec(content)) !== null) {
            imports.add(match[1]);
        }
        return imports;
    }
    /**
     * 相対インポートかどうかを判定
     * @private
     */
    isRelativeImport(importPath) {
        return importPath.startsWith('./') ||
            importPath.startsWith('../') ||
            importPath.startsWith('/');
    }
    /**
     * インポートパスからパッケージ名を取得
     * @private
     */
    getPackageName(importPath) {
        // スコープ付きパッケージの場合
        if (importPath.startsWith('@')) {
            const parts = importPath.split('/');
            return parts.slice(0, 2).join('/');
        }
        // 通常のパッケージ
        return importPath.split('/')[0];
    }
    /**
     * バージョン文字列を分析
     * @private
     */
    analyzeVersionString(pkg, version) {
        let type;
        let isRisky = false;
        if (version === '*' || version === 'latest') {
            type = 'any';
            isRisky = true;
        }
        else if (version.startsWith('^')) {
            type = 'caret';
            isRisky = false;
        }
        else if (version.startsWith('~')) {
            type = 'tilde';
            isRisky = false;
        }
        else if (version.includes('>') || version.includes('<') || version.includes('||')) {
            type = 'range';
            isRisky = true;
        }
        else {
            type = 'exact';
            isRisky = false;
        }
        return {
            package: pkg,
            constraint: version,
            type,
            isRisky
        };
    }
    /**
     * yarn.lockをパース
     * @private
     */
    parseYarnLock(content) {
        const packages = new Map();
        const lines = content.split('\n');
        let currentPackage = '';
        for (const line of lines) {
            // パッケージ名の行
            if (line && !line.startsWith(' ') && line.includes('@')) {
                currentPackage = line.split('@')[0].trim().replace(/"/g, '');
            }
            // バージョンの行
            else if (line.trim().startsWith('version ')) {
                const version = line.trim().replace('version ', '').replace(/"/g, '');
                if (currentPackage) {
                    packages.set(currentPackage, version);
                    currentPackage = '';
                }
            }
        }
        return packages;
    }
    /**
     * package-lock.jsonをパース
     * @private
     */
    parsePackageLock(packageLock) {
        const packages = new Map();
        if (packageLock.packages) {
            Object.entries(packageLock.packages).forEach(([pkgPath, info]) => {
                if (pkgPath && pkgPath.startsWith('node_modules/')) {
                    const name = pkgPath.replace('node_modules/', '');
                    const packageInfo = info;
                    if (packageInfo?.version) {
                        packages.set(name, packageInfo.version);
                    }
                }
            });
        }
        // 旧形式のpackage-lock.json
        if (packageLock.dependencies) {
            Object.entries(packageLock.dependencies).forEach(([name, info]) => {
                if (info?.version) {
                    packages.set(name, info.version);
                }
            });
        }
        return packages;
    }
}
exports.PackageAnalyzer = PackageAnalyzer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,