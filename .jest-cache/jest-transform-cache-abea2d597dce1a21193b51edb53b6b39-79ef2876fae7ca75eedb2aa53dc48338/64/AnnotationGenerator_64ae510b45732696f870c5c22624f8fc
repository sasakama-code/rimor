dd607e056406d4b17b55e1714ca1c9d9
"use strict";
/**
 * Annotation Generator
 * v0.8.0 - Phase 4: Context Engineering
 *
 * 検出された問題に対応するインライン・アノテーションを生成
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AnnotationGenerator = void 0;
const inversify_1 = require("inversify");
const types_1 = require("./types");
let AnnotationGenerator = class AnnotationGenerator {
    defaultPrefix = 'RIMOR';
    /**
     * 問題に対するアノテーションを生成
     */
    generateAnnotation(issue, options) {
        const prefix = options?.prefix || this.defaultPrefix;
        const format = options?.format || 'inline';
        if (format === 'block') {
            return this.generateBlockAnnotation(issue, prefix, options);
        }
        else {
            return this.generateInlineAnnotation(issue, prefix, options);
        }
    }
    /**
     * インラインアノテーションを生成
     */
    generateInlineAnnotation(issue, prefix, options) {
        const parts = [];
        // プレフィックスと重要度
        parts.push(`${prefix}-${this.getSeverityTag(issue.severity)}:`);
        // 問題タイプ
        parts.push(`[${issue.severity}]`);
        parts.push(issue.type);
        // メッセージ
        parts.push('-');
        parts.push(issue.message);
        // データフロー情報（オプション）
        if (options?.includeDataFlow && issue.dataFlow) {
            parts.push(this.formatDataFlowInline(issue.dataFlow));
        }
        return `// ${parts.join(' ')}`;
    }
    /**
     * ブロックアノテーションを生成
     */
    generateBlockAnnotation(issue, prefix, options) {
        const lines = [];
        // 開始行
        lines.push('/**');
        lines.push(` * ${prefix} Security Analysis Report`);
        lines.push(` * `);
        // 問題の詳細
        lines.push(` * Issue: ${issue.type}`);
        lines.push(` * Severity: ${issue.severity}`);
        lines.push(` * ID: ${issue.id}`);
        lines.push(` * `);
        // メッセージ（複数行対応）
        const messageLines = issue.message.split('\n');
        messageLines.forEach(line => {
            lines.push(` * ${line}`);
        });
        // 推奨事項
        if (issue.recommendation) {
            lines.push(` * `);
            lines.push(` * Recommendation:`);
            const recommendationLines = issue.recommendation.split('\n');
            recommendationLines.forEach(line => {
                lines.push(` * ${line}`);
            });
        }
        // データフロー情報
        if (options?.includeDataFlow && issue.dataFlow) {
            lines.push(` * `);
            lines.push(` * Data Flow Analysis:`);
            lines.push(...this.formatDataFlowBlock(issue.dataFlow));
        }
        // 参考資料
        if (issue.references && issue.references.length > 0) {
            lines.push(` * `);
            lines.push(` * References:`);
            issue.references.forEach(ref => {
                lines.push(` * - ${ref}`);
            });
        }
        // 終了行
        lines.push(' */');
        return lines.join('\n');
    }
    /**
     * 複数の問題に対するアノテーションを行番号でグループ化
     */
    groupAnnotationsByLine(issues, options) {
        const annotationsByFile = new Map();
        issues.forEach(issue => {
            if (!issue.location)
                return;
            const file = issue.location.file;
            if (!annotationsByFile.has(file)) {
                annotationsByFile.set(file, []);
            }
            const annotation = this.generateAnnotation(issue, options);
            const annotationLine = {
                lineNumber: issue.location.startLine - 1, // 0-indexed
                annotation
            };
            annotationsByFile.get(file).push(annotationLine);
        });
        // 各ファイルのアノテーションを行番号でソート
        annotationsByFile.forEach((annotations, file) => {
            annotations.sort((a, b) => a.lineNumber - b.lineNumber);
        });
        return annotationsByFile;
    }
    /**
     * アノテーション用のスタンドアロンレポートを生成
     */
    generateAnnotationReport(issues) {
        const lines = [];
        lines.push('# Rimor Annotation Report');
        lines.push('');
        lines.push('## Summary');
        lines.push(`Total issues found: ${issues.length}`);
        lines.push('');
        // ファイル別にグループ化
        const issuesByFile = new Map();
        issues.forEach(issue => {
            if (!issue.location)
                return;
            const file = issue.location.file;
            if (!issuesByFile.has(file)) {
                issuesByFile.set(file, []);
            }
            issuesByFile.get(file).push(issue);
        });
        // ファイルごとにアノテーションを生成
        issuesByFile.forEach((fileIssues, file) => {
            lines.push(`## File: ${file}`);
            lines.push('');
            // 行番号でソート
            fileIssues.sort((a, b) => (a.location?.startLine || 0) - (b.location?.startLine || 0));
            fileIssues.forEach(issue => {
                lines.push(`### Line ${issue.location?.startLine || 0}: ${issue.type}`);
                lines.push('');
                lines.push('```');
                lines.push(this.generateAnnotation(issue, { format: 'inline' }));
                lines.push('```');
                lines.push('');
                if (issue.recommendation) {
                    lines.push(`**Recommendation**: ${issue.recommendation}`);
                    lines.push('');
                }
            });
        });
        return lines.join('\n');
    }
    /**
     * 重要度タグを取得
     */
    getSeverityTag(severity) {
        const tags = {
            [types_1.Severity.CRITICAL]: 'CRITICAL',
            [types_1.Severity.HIGH]: 'HIGH',
            [types_1.Severity.MEDIUM]: 'MEDIUM',
            [types_1.Severity.LOW]: 'LOW',
            [types_1.Severity.INFO]: 'INFO'
        };
        return tags[severity] || 'UNKNOWN';
    }
    /**
     * データフローをインライン形式でフォーマット
     */
    formatDataFlowInline(dataFlow) {
        const source = `${dataFlow.source.location.file}:${dataFlow.source.location.startLine}`;
        const sink = `${dataFlow.sink.location.file}:${dataFlow.sink.location.startLine}`;
        return `(Source: ${source} -> Sink: ${sink})`;
    }
    /**
     * データフローをブロック形式でフォーマット
     */
    formatDataFlowBlock(dataFlow) {
        const lines = [];
        // Source
        lines.push(` * Source: ${dataFlow.source.type}`);
        lines.push(` *   Location: ${dataFlow.source.location.file}:${dataFlow.source.location.startLine}`);
        // Path
        if (dataFlow.path && dataFlow.path.length > 0) {
            lines.push(` * Path:`);
            dataFlow.path.forEach((step, index) => {
                lines.push(` *   ${index + 1}. ${step.description || step.type}`);
                lines.push(` *      ${step.location.file}:${step.location.startLine}`);
            });
        }
        // Sink
        lines.push(` * Sink: ${dataFlow.sink.type}`);
        lines.push(` *   Location: ${dataFlow.sink.location.file}:${dataFlow.sink.location.startLine}`);
        return lines;
    }
    /**
     * ファイル拡張子に基づいてコメントスタイルを決定
     */
    getCommentStyle(filePath) {
        const ext = filePath.split('.').pop()?.toLowerCase() || '';
        const styles = {
            // C系言語
            'js': { inline: '//', blockStart: '/*', blockEnd: '*/' },
            'jsx': { inline: '//', blockStart: '/*', blockEnd: '*/' },
            'ts': { inline: '//', blockStart: '/*', blockEnd: '*/' },
            'tsx': { inline: '//', blockStart: '/*', blockEnd: '*/' },
            'java': { inline: '//', blockStart: '/*', blockEnd: '*/' },
            'c': { inline: '//', blockStart: '/*', blockEnd: '*/' },
            'cpp': { inline: '//', blockStart: '/*', blockEnd: '*/' },
            'cs': { inline: '//', blockStart: '/*', blockEnd: '*/' },
            'go': { inline: '//', blockStart: '/*', blockEnd: '*/' },
            'rust': { inline: '//', blockStart: '/*', blockEnd: '*/' },
            'php': { inline: '//', blockStart: '/*', blockEnd: '*/' },
            // スクリプト言語
            'py': { inline: '#', blockStart: '"""', blockEnd: '"""' },
            'rb': { inline: '#', blockStart: '=begin', blockEnd: '=end' },
            'sh': { inline: '#' },
            'bash': { inline: '#' },
            // マークアップ
            'html': { inline: '<!--', blockEnd: '-->' },
            'xml': { inline: '<!--', blockEnd: '-->' },
            'vue': { inline: '<!--', blockEnd: '-->' },
            // その他
            'sql': { inline: '--', blockStart: '/*', blockEnd: '*/' },
            'yaml': { inline: '#' },
            'yml': { inline: '#' }
        };
        return styles[ext] || { inline: '//' };
    }
    /**
     * 言語に応じたアノテーションを生成
     */
    generateLanguageSpecificAnnotation(issue, filePath, options) {
        const commentStyle = this.getCommentStyle(filePath);
        const baseAnnotation = this.generateAnnotation(issue, options);
        // インラインコメントスタイルに変換
        if (baseAnnotation.startsWith('//')) {
            return baseAnnotation.replace('//', commentStyle.inline);
        }
        // ブロックコメントスタイルに変換
        if (baseAnnotation.startsWith('/**') && commentStyle.blockStart) {
            let converted = baseAnnotation.replace('/**', commentStyle.blockStart);
            if (commentStyle.blockEnd) {
                converted = converted.replace('*/', commentStyle.blockEnd);
            }
            return converted;
        }
        return baseAnnotation;
    }
};
exports.AnnotationGenerator = AnnotationGenerator;
exports.AnnotationGenerator = AnnotationGenerator = __decorate([
    (0, inversify_1.injectable)()
], AnnotationGenerator);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,