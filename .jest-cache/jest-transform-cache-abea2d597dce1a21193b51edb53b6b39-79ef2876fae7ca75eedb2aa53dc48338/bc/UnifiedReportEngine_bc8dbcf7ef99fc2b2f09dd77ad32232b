5f9a1f00b0e3ac0e71fa231a114e5c3f
"use strict";
/**
 * UnifiedReportEngine
 * v0.9.0 - Issue #64: レポートシステムの統合
 * TDD GREEN段階 - 最小限の実装でテストを通す
 *
 * SOLID原則: 単一責任（レポート生成のみ）、開放閉鎖（戦略の追加が容易）
 * DRY原則: 共通ロジックの集約
 * KISS原則: シンプルな戦略パターン
 * YAGNI原則: 必要最小限の機能実装
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.UnifiedReportEngine = void 0;
const MarkdownFormatter_1 = require("../formatters/MarkdownFormatter");
/**
 * 統合レポートエンジン
 * 戦略パターンを使用して様々な形式のレポート生成を統合
 */
class UnifiedReportEngine {
    strategy;
    legacyAdapters = new Map();
    constructor(defaultStrategy) {
        // デフォルト戦略はMarkdown
        this.strategy = defaultStrategy || new MarkdownFormatter_1.MarkdownFormatter();
        this.initializeLegacyAdapters();
    }
    /**
     * フォーマット戦略を設定
     * SOLID原則: 開放閉鎖原則 - 新しい戦略の追加が容易
     */
    setStrategy(strategy) {
        if (!strategy) {
            // nullの場合はデフォルトにフォールバック
            this.strategy = new MarkdownFormatter_1.MarkdownFormatter();
            return;
        }
        this.strategy = strategy;
    }
    /**
     * 現在の戦略を取得
     */
    getCurrentStrategy() {
        return this.strategy;
    }
    /**
     * レポートを生成
     * KISS原則: シンプルな生成処理
     */
    async generate(result, options) {
        // 入力検証
        if (!result) {
            throw new Error('Invalid analysis result');
        }
        const startTime = Date.now();
        try {
            // 戦略に応じたフォーマット処理
            let content;
            // formatAsyncが定義されている場合は優先的に使用
            if (this.strategy.formatAsync) {
                content = await this.strategy.formatAsync(result, options);
            }
            else if (this.strategy.format) {
                content = await Promise.resolve(this.strategy.format(result, options));
            }
            else {
                throw new Error('Strategy must implement format or formatAsync method');
            }
            const processingTime = Date.now() - startTime;
            // レポート形式を判定
            const format = this.detectFormat(this.strategy.name);
            // 統合レポート形式で返す
            const report = {
                format,
                content,
                timestamp: new Date().toISOString(),
                metadata: options?.includeMetadata !== false ? {
                    generatedBy: 'UnifiedReportEngine',
                    version: '0.9.0',
                    processingTime
                } : undefined
            };
            return report;
        }
        catch (error) {
            // エラーハンドリング（Defensive Programming）
            if (error instanceof Error) {
                throw error;
            }
            throw new Error('Report generation failed');
        }
    }
    /**
     * レガシーアダプターを取得
     * 後方互換性のため
     */
    getLegacyAdapter(adapterName) {
        const adapter = this.legacyAdapters.get(adapterName);
        if (adapter) {
            // deprecated警告を出力
            console.warn(`Warning: ${adapterName} is deprecated. ${adapter.deprecationMessage}`);
        }
        return adapter;
    }
    /**
     * 戦略名からレポート形式を判定
     */
    detectFormat(strategyName) {
        const formatMap = {
            'ai-json': 'ai-json',
            'markdown': 'markdown',
            'html': 'html',
            'executive-summary': 'executive-summary',
            'structured-json': 'structured-json'
        };
        return formatMap[strategyName] || 'markdown';
    }
    /**
     * レガシーアダプターの初期化
     * DRY原則: アダプター実装の共通化
     */
    initializeLegacyAdapters() {
        // UnifiedAIFormatterのアダプター
        this.legacyAdapters.set('UnifiedAIFormatter', {
            format: async (result, options) => {
                // AIJsonFormatterを内部で使用
                const { AIJsonFormatter } = await Promise.resolve().then(() => __importStar(require('../formatters/AIJsonFormatter')));
                const formatter = new AIJsonFormatter();
                this.setStrategy(formatter);
                const report = await this.generate(result, options);
                return report.content;
            },
            isDeprecated: true,
            deprecationMessage: 'Use UnifiedReportEngine with AIJsonFormatter strategy instead'
        });
        // StructuredReporterのアダプター
        this.legacyAdapters.set('StructuredReporter', {
            format: async (result, options) => {
                // MarkdownFormatterを内部で使用
                const formatter = new MarkdownFormatter_1.MarkdownFormatter();
                this.setStrategy(formatter);
                const report = await this.generate(result, options);
                return report.content;
            },
            isDeprecated: true,
            deprecationMessage: 'Use UnifiedReportEngine with MarkdownFormatter strategy instead'
        });
    }
}
exports.UnifiedReportEngine = UnifiedReportEngine;
//# sourceMappingURL=UnifiedReportEngine.js.map