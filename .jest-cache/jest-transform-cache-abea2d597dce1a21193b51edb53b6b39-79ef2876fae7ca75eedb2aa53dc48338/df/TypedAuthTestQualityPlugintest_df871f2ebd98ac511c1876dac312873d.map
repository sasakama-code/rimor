{"file":"/Users/sasakama/Projects/Rimor/test/security/plugins/TypedAuthTestQualityPlugin.test.ts","mappings":"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","names":[],"sources":["/Users/sasakama/Projects/Rimor/test/security/plugins/TypedAuthTestQualityPlugin.test.ts"],"sourcesContent":["/**\n * TypedAuthTestQualityPluginのテストスイート\n * 型ベース認証テスト品質監査プラグインのテスト\n */\n\nimport { TypedAuthTestQualityPlugin } from '../../../src/security/plugins/TypedAuthTestQualityPlugin';\nimport {\n  TestMethod,\n  ProjectContext,\n  TestFile,\n  DetectionResult,\n  QualityScore,\n  IncrementalUpdate,\n  MethodSignature\n} from '../../../src/core/types';\nimport { SecurityMethodChange } from '../../../src/security/types/flow-types';\n\n// テスト用のTestMethodを作成するヘルパー関数\nconst createTestMethod = (name: string, content: string, filePath: string = 'auth.test.ts'): TestMethod => ({\n  name,\n  type: 'test',\n  content,\n  filePath,\n  signature: {\n    name,\n    parameters: [],\n    returnType: 'void',\n    annotations: [],\n    isAsync: content.includes('await')\n  },\n  location: {\n    start: { line: 1, column: 0 },\n    end: { line: content.split('\\n').length, column: 100 },\n    startLine: 1,\n    endLine: content.split('\\n').length,\n    startColumn: 0,\n    endColumn: 100\n  }\n});\n\ndescribe('TypedAuthTestQualityPlugin', () => {\n  let plugin: TypedAuthTestQualityPlugin;\n  \n  beforeEach(() => {\n    plugin = new TypedAuthTestQualityPlugin();\n  });\n  \n  describe('基本機能', () => {\n    it('プラグインが正しく初期化されること', () => {\n      expect(plugin).toBeDefined();\n      expect(plugin.id).toBe('typed-auth-test-quality');\n      expect(plugin.name).toBe('型ベース認証テスト品質監査');\n      expect(plugin.version).toBe('0.7.0');\n      expect(plugin.type).toBe('core');\n    });\n    \n    it('必要な型情報が定義されていること', () => {\n      expect(plugin.requiredTypes).toBeDefined();\n      expect(plugin.requiredTypes).toContain('user-input');\n      expect(plugin.requiredTypes).toContain('auth-token');\n      expect(plugin.providedTypes).toContain('validated-auth');\n    });\n  });\n  \n  describe('isApplicable', () => {\n    it('認証ライブラリが存在する場合に適用可能であること', () => {\n      const context: ProjectContext = {\n        packageJson: {\n          name: 'test-project',\n          version: '1.0.0',\n          dependencies: {\n            'passport': '^0.5.0'\n          }\n        },\n        filePatterns: {\n          test: [],\n          source: [],\n          ignore: []\n        }\n      };\n      \n      expect(plugin.isApplicable(context)).toBe(true);\n    });\n    \n    it('JWT関連ライブラリが存在する場合に適用可能であること', () => {\n      const context: ProjectContext = {\n        packageJson: {\n          name: 'test-project',\n          version: '1.0.0',\n          dependencies: {\n            'jwt': '^8.0.0'\n          }\n        },\n        filePatterns: {\n          test: [],\n          source: [],\n          ignore: []\n        }\n      };\n      \n      expect(plugin.isApplicable(context)).toBe(true);\n    });\n    \n    it('認証関連のテストファイルが存在する場合に適用可能であること', () => {\n      const context: ProjectContext = {\n        packageJson: {\n          name: 'test-project',\n          version: '1.0.0'\n        },\n        filePatterns: {\n          test: ['**/*auth*.test.ts', '**/*login*.spec.ts'],\n          source: [],\n          ignore: []\n        }\n      };\n      \n      expect(plugin.isApplicable(context)).toBe(true);\n    });\n    \n    it('認証に関連しないプロジェクトでは適用不可であること', () => {\n      const context: ProjectContext = {\n        packageJson: {\n          name: 'test-project',\n          version: '1.0.0',\n          dependencies: {\n            'lodash': '^4.0.0'\n          }\n        },\n        filePatterns: {\n          test: ['**/*.test.ts'],\n          source: [],\n          ignore: []\n        }\n      };\n      \n      expect(plugin.isApplicable(context)).toBe(false);\n    });\n  });\n  \n  describe('detectPatterns', () => {\n    it('ログイン成功パターンを検出できること', async () => {\n      const testFile: TestFile = {\n        path: 'auth.test.ts',\n        content: `\n          describe('Authentication', () => {\n            it('should login successfully with valid credentials', () => {\n              const result = login('user', 'password');\n              expect(result.success).toBe(true);\n            });\n          });\n        `,\n        metadata: {\n          framework: 'jest',\n          language: 'typescript',\n          lastModified: new Date()\n        }\n      };\n      \n      const patterns = await plugin.detectPatterns(testFile);\n      \n      expect(patterns.length).toBeGreaterThan(0);\n      expect(patterns.some(p => p.patternId === 'login-success')).toBe(true);\n    });\n    \n    it('ログイン失敗パターンを検出できること', async () => {\n      const testFile: TestFile = {\n        path: 'auth.test.ts',\n        content: `\n          it('should fail login with invalid credentials', () => {\n            const result = login('user', 'wrong');\n            expect(result.error).toBe('Invalid credentials');\n          });\n        `,\n        metadata: {\n          framework: 'jest',\n          language: 'typescript',\n          lastModified: new Date()\n        }\n      };\n      \n      const patterns = await plugin.detectPatterns(testFile);\n      \n      expect(patterns.some(p => p.patternId === 'login-failure')).toBe(true);\n    });\n    \n    it('トークン検証パターンを検出できること', async () => {\n      const testFile: TestFile = {\n        path: 'auth.test.ts',\n        content: `\n          test('should verify JWT token', () => {\n            const token = generateToken(user);\n            const verified = verifyToken(token);\n            expect(verified).toBeTruthy();\n          });\n        `,\n        metadata: {\n          framework: 'jest',\n          language: 'typescript',\n          lastModified: new Date()\n        }\n      };\n      \n      const patterns = await plugin.detectPatterns(testFile);\n      \n      expect(patterns.some(p => p.patternId === 'token-validation')).toBe(true);\n    });\n  });\n  \n  describe('evaluateQuality', () => {\n    it('全ての必須パターンが存在する場合に高スコアを返すこと', () => {\n      const patterns: DetectionResult[] = [\n        {\n          patternId: 'login-success',\n          patternName: 'ログイン成功テスト',\n          location: { file: 'auth.test.ts', line: 10, column: 0 },\n          confidence: 0.9,\n          evidence: []\n        },\n        {\n          patternId: 'login-failure',\n          patternName: 'ログイン失敗テスト',\n          location: { file: 'auth.test.ts', line: 20, column: 0 },\n          confidence: 0.9,\n          evidence: []\n        },\n        {\n          patternId: 'token-validation',\n          patternName: 'トークン検証テスト',\n          location: { file: 'auth.test.ts', line: 30, column: 0 },\n          confidence: 0.8,\n          evidence: []\n        },\n        {\n          patternId: 'session-management',\n          patternName: 'セッション管理テスト',\n          location: { file: 'auth.test.ts', line: 40, column: 0 },\n          confidence: 0.8,\n          evidence: []\n        }\n      ];\n      \n      const score = plugin.evaluateQuality(patterns);\n      \n      expect(score.overall).toBe(1.0); // 0.0-1.0の範囲に正規化済み\n      expect(score.breakdown?.completeness).toBe(100);\n    });\n    \n    it('必須パターンが不足している場合に低スコアを返すこと', () => {\n      const patterns: DetectionResult[] = [\n        {\n          patternId: 'login-success',\n          patternName: 'ログイン成功テスト',\n          location: { file: 'auth.test.ts', line: 10, column: 0 },\n          confidence: 0.9,\n          evidence: []\n        }\n      ];\n      \n      const score = plugin.evaluateQuality(patterns);\n      \n      expect(score.overall).toBeLessThan(0.5); // 0.0-1.0の範囲に正規化済み\n      expect(score.breakdown?.completeness).toBe(25); // 1/4 = 25%\n    });\n    \n    it('信頼度が計算されること', () => {\n      const patterns: DetectionResult[] = [\n        {\n          patternId: 'login-success',\n          patternName: 'ログイン成功テスト',\n          location: { file: 'auth.test.ts', line: 10, column: 0 },\n          confidence: 0.9,\n          evidence: []\n        },\n        {\n          patternId: 'login-failure',\n          patternName: 'ログイン失敗テスト',\n          location: { file: 'auth.test.ts', line: 20, column: 0 },\n          confidence: 0.7,\n          evidence: []\n        }\n      ];\n      \n      const score = plugin.evaluateQuality(patterns);\n      \n      expect(score.confidence).toBe(0.8); // (0.9 + 0.7) / 2\n    });\n  });\n  \n  describe('suggestImprovements', () => {\n    it('カバレッジが低い場合に改善提案を生成すること', () => {\n      const evaluation: QualityScore = {\n        overall: 0.5, // 0.0-1.0の範囲に正規化\n        dimensions: {\n          completeness: 0.5, // 0.0-1.0の範囲に正規化\n          correctness: 0.8,\n          maintainability: 0.8\n        },\n        breakdown: {\n          completeness: 50,\n          correctness: 80,\n          maintainability: 80\n        },\n        confidence: 0.7\n      };\n      \n      const improvements = plugin.suggestImprovements(evaluation);\n      \n      expect(improvements.length).toBeGreaterThan(0);\n      expect(improvements[0].id).toBe('auth-coverage-improvement');\n      expect(improvements[0].priority).toBe('high');\n    });\n    \n    it('カバレッジが十分な場合は改善提案を生成しないこと', () => {\n      const evaluation: QualityScore = {\n        overall: 90,\n        dimensions: {},\n        breakdown: {\n          completeness: 90,\n          correctness: 90,\n          maintainability: 90\n        },\n        confidence: 0.9\n      };\n      \n      const improvements = plugin.suggestImprovements(evaluation);\n      \n      expect(improvements.length).toBe(0);\n    });\n  });\n  \n  describe('analyzeMethod', () => {\n    it('認証関連のテストメソッドを解析できること', async () => {\n      const method: TestMethod = {\n        name: 'testLoginSuccess',\n        type: 'test',\n        content: `\n          const user = { username: 'test', password: 'password' };\n          const result = await login(user);\n          expect(result.token).toBeDefined();\n        `,\n        filePath: 'auth.test.ts',\n        signature: {\n          name: 'testLoginSuccess',\n          parameters: [],\n          returnType: 'void',\n          annotations: [],\n          isAsync: true\n        },\n        location: {\n          start: { line: 10, column: 0 },\n          end: { line: 14, column: 100 },\n          startLine: 10,\n          endLine: 14,\n          startColumn: 0,\n          endColumn: 100\n        }\n      };\n      \n      const result = await plugin.analyzeMethod(method);\n      \n      expect(result).toBeDefined();\n      expect(result.methodName).toBe('testLoginSuccess');\n      expect(result.analysisTime).toBeGreaterThanOrEqual(0);\n    });\n    \n    it('非認証関連のテストメソッドは空の結果を返すこと', async () => {\n      const method = createTestMethod(\n        'testCalculation',\n        `\n          const result = add(1, 2);\n          expect(result).toBe(3);\n        `,\n        'math.test.ts'\n      );\n      \n      const result = await plugin.analyzeMethod(method);\n      \n      expect(result.methodName).toBe('testCalculation');\n      expect(result.issues).toHaveLength(0);\n    });\n    \n    it('解析結果がキャッシュされること', async () => {\n      const method = createTestMethod(\n        'testAuthCache',\n        'const token = authenticate();'\n      );\n      \n      const result1 = await plugin.analyzeMethod(method);\n      const startTime = Date.now();\n      const result2 = await plugin.analyzeMethod(method);\n      const cacheTime = Date.now() - startTime;\n      \n      expect(result1).toEqual(result2);\n      expect(cacheTime).toBeLessThan(5); // キャッシュアクセスは5ms未満\n    });\n  });\n  \n  describe('trackDataFlow', () => {\n    it('データフローグラフを生成できること', async () => {\n      const method = createTestMethod(\n        'testDataFlow',\n        `\n          const credentials = getUserInput();\n          const sanitized = sanitize(credentials);\n          const result = authenticate(sanitized);\n        `\n      );\n      \n      const flowGraph = await plugin.trackDataFlow(method);\n      \n      expect(flowGraph).toBeDefined();\n      expect(flowGraph.nodes.size).toBeGreaterThan(0);\n    });\n  });\n  \n  describe('updateAnalysis', () => {\n    it('メソッドの追加を処理できること', async () => {\n      const changes: SecurityMethodChange[] = [\n        {\n          type: 'added',\n          method: createTestMethod(\n            'testNewAuth',\n            'const token = login();'\n          ),\n          changeType: 'added',\n          affectedFlows: []\n        }\n      ];\n      \n      const result = await plugin.updateAnalysis(changes);\n      \n      // updatedMethodsはMethodAnalysisResult[]型なので、メソッド名を抽出して確認\n      const updatedMethodNames = result.updatedMethods?.map(m => m.methodName) || [];\n      expect(updatedMethodNames).toContain('testNewAuth');\n    });\n    \n    it('メソッドの削除でキャッシュが無効化されること', async () => {\n      const method = createTestMethod(\n        'testToDelete',\n        'authenticate();'\n      );\n      \n      // まずメソッドを解析してキャッシュに保存\n      await plugin.analyzeMethod(method);\n      \n      // 削除の更新を実行\n      const changes: SecurityMethodChange[] = [\n        {\n          type: 'deleted',\n          method,\n          changeType: 'deleted',\n          affectedFlows: []\n        }\n      ];\n      \n      const result = await plugin.updateAnalysis(changes);\n      \n      // IncrementalUpdateにはinvalidatedCacheプロパティがないため、\n      // updatedMethodsまたはaffectedMethodsを確認\n      expect(result.affectedMethods.length).toBeGreaterThan(0);\n    });\n  });\n  \n  describe('型システム統合', () => {\n    it('汚染分析が実行されること', async () => {\n      const method: TestMethod = {\n        name: 'testTaintAnalysis',\n        type: 'test',\n        content: `\n          const userInput = request.body.password;\n          const hashed = bcrypt.hash(userInput);\n          saveToDatabase(hashed);\n        `,\n        filePath: 'auth.test.ts',\n        signature: {\n          name: 'testTaintAnalysis',\n          parameters: [],\n          returnType: 'void',\n          annotations: [],\n          isAsync: false\n        },\n        location: {\n          start: { line: 1, column: 0 },\n          end: { line: 4, column: 0 },\n          startLine: 1,\n          endLine: 4,\n          startColumn: 0,\n          endColumn: 0\n        }\n      };\n      \n      const result = await plugin.analyzeMethod(method);\n      \n      // 汚染分析の結果が反映されているか（メトリクスや推奨事項で確認）\n      expect(result.metrics).toBeDefined();\n    });\n  });\n});"],"version":3}