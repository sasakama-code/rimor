338f9287a4be611173c72a59f5ce9fa7
"use strict";
/**
 * Analyze AI JSON Command テスト
 * Issue #58: AIエージェント向けコンテキスト出力機能
 *
 * TDD: 統合テスト
 * t_wadaのTDD原則に従う
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const analyze_v0_8_1 = require("../../../src/cli/commands/analyze-v0.8");
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const os = __importStar(require("os"));
const analyze_ai_json_test_helper_1 = require("./analyze-ai-json.test.helper");
describe('Analyze AI JSON Command', () => {
    let tempDir;
    let command;
    let testContainer;
    let mockCliSecurity;
    beforeEach(() => {
        // 一時ディレクトリの作成
        tempDir = fs.mkdtempSync(path.join(os.tmpdir(), 'rimor-ai-json-test-'));
        // ヘルパーを使用してテスト環境をセットアップ
        testContainer = (0, analyze_ai_json_test_helper_1.createTestContainer)();
        mockCliSecurity = (0, analyze_ai_json_test_helper_1.createMockCliSecurity)();
        // コンテナインスタンスとセキュリティモックを渡してコマンド作成
        command = new analyze_v0_8_1.AnalyzeCommandV8(testContainer, mockCliSecurity);
    });
    afterEach(() => {
        // 一時ディレクトリの削除
        if (fs.existsSync(tempDir)) {
            fs.rmSync(tempDir, { recursive: true, force: true });
        }
    });
    describe('--format=ai-json オプション', () => {
        it('ai-json形式でコンソールに出力する', async () => {
            // Arrange
            const testProjectPath = (0, analyze_ai_json_test_helper_1.createTestProject)(tempDir);
            const relativePath = (0, analyze_ai_json_test_helper_1.getRelativePath)(testProjectPath);
            const consoleSpy = jest.spyOn(console, 'log').mockImplementation();
            const exitSpy = (0, analyze_ai_json_test_helper_1.createProcessExitSpy)();
            // Act
            await command.execute({
                path: relativePath,
                format: 'ai-json'
            });
            // Assert
            expect(consoleSpy).toHaveBeenCalled();
            // セキュリティログを除外してJSONのみを抽出
            const outputs = consoleSpy.mock.calls.map(call => call.join(' '));
            const jsonOutput = outputs.find(output => {
                try {
                    const parsed = JSON.parse(output);
                    return parsed && typeof parsed === 'object' && 'overallAssessment' in parsed;
                }
                catch {
                    return false;
                }
            });
            expect(jsonOutput).toBeDefined();
            const json = JSON.parse(jsonOutput);
            expect(json).toHaveProperty('overallAssessment');
            expect(json).toHaveProperty('keyRisks');
            expect(json).toHaveProperty('fullReportUrl');
            consoleSpy.mockRestore();
            exitSpy.mockRestore();
        });
        it('--output-ai-json オプションでファイルに出力する', async () => {
            // Arrange
            const testProjectPath = (0, analyze_ai_json_test_helper_1.createTestProject)(tempDir);
            const relativePath = (0, analyze_ai_json_test_helper_1.getRelativePath)(testProjectPath);
            const outputDir = path.join(tempDir, 'output');
            fs.mkdirSync(outputDir, { recursive: true });
            const outputPath = path.join(outputDir, 'ai-report.json');
            const exitSpy = (0, analyze_ai_json_test_helper_1.createProcessExitSpy)();
            // Act
            await command.execute({
                path: relativePath,
                format: 'ai-json',
                outputAiJson: outputPath
            });
            // ファイル作成を待つ（最大5秒）
            let fileExists = false;
            let attempts = 0;
            const maxAttempts = 50;
            while (!fileExists && attempts < maxAttempts) {
                await new Promise(resolve => setTimeout(resolve, 100));
                fileExists = fs.existsSync(outputPath);
                attempts++;
            }
            // Assert
            if (!fileExists) {
                // ディレクトリ内容を確認
                const outputDirContents = fs.readdirSync(outputDir);
                console.log('Output directory contents:', outputDirContents);
                // 代替ファイル名も確認
                const alternativeFiles = outputDirContents.filter(file => file.endsWith('.json'));
                if (alternativeFiles.length > 0) {
                    const alternativeFile = path.join(outputDir, alternativeFiles[0]);
                    const content = fs.readFileSync(alternativeFile, 'utf-8');
                    const json = JSON.parse(content);
                    expect(json).toHaveProperty('overallAssessment');
                    expect(json).toHaveProperty('keyRisks');
                    expect(json).toHaveProperty('fullReportUrl');
                    return;
                }
            }
            expect(fileExists).toBe(true);
            const content = fs.readFileSync(outputPath, 'utf-8');
            const json = JSON.parse(content);
            expect(json).toHaveProperty('overallAssessment');
            expect(json).toHaveProperty('keyRisks');
            expect(json).toHaveProperty('fullReportUrl');
            exitSpy.mockRestore();
        });
    });
    describe('AI JSONフォーマット', () => {
        it('overallAssessmentに必要な情報を含む', async () => {
            // Arrange
            const testProjectPath = (0, analyze_ai_json_test_helper_1.createTestProject)(tempDir);
            const relativePath = (0, analyze_ai_json_test_helper_1.getRelativePath)(testProjectPath);
            const outputPath = path.join(tempDir, 'ai-report.json');
            const exitSpy = (0, analyze_ai_json_test_helper_1.createProcessExitSpy)();
            // Act
            await command.execute({
                path: relativePath,
                outputAiJson: outputPath
            });
            // ファイル作成を少し待つ
            await new Promise(resolve => setTimeout(resolve, 200));
            // Assert
            const json = JSON.parse(fs.readFileSync(outputPath, 'utf-8'));
            expect(json.overallAssessment).toContain('総合スコア');
            expect(json.overallAssessment).toContain('グレード');
            exitSpy.mockRestore();
        });
        it('keyRisksが正しい構造を持つ', async () => {
            // Arrange
            const testProjectPath = (0, analyze_ai_json_test_helper_1.createTestProject)(tempDir);
            const relativePath = (0, analyze_ai_json_test_helper_1.getRelativePath)(testProjectPath);
            const outputPath = path.join(tempDir, 'ai-report.json');
            const exitSpy = (0, analyze_ai_json_test_helper_1.createProcessExitSpy)();
            // Act
            await command.execute({
                path: relativePath,
                outputAiJson: outputPath
            });
            // ファイル作成を少し待つ
            await new Promise(resolve => setTimeout(resolve, 200));
            // Assert
            const json = JSON.parse(fs.readFileSync(outputPath, 'utf-8'));
            if (json.keyRisks.length > 0) {
                const firstRisk = json.keyRisks[0];
                expect(firstRisk).toHaveProperty('problem');
                expect(firstRisk).toHaveProperty('riskLevel');
                expect(firstRisk).toHaveProperty('context');
                expect(firstRisk.context).toHaveProperty('filePath');
                expect(firstRisk.context).toHaveProperty('codeSnippet');
                expect(firstRisk.context).toHaveProperty('startLine');
                expect(firstRisk.context).toHaveProperty('endLine');
                expect(firstRisk).toHaveProperty('suggestedAction');
                expect(firstRisk.suggestedAction).toHaveProperty('type');
                expect(firstRisk.suggestedAction).toHaveProperty('description');
            }
            exitSpy.mockRestore();
        });
        it('fullReportUrlが正しく設定される', async () => {
            // Arrange
            const testProjectPath = (0, analyze_ai_json_test_helper_1.createTestProject)(tempDir);
            const relativePath = (0, analyze_ai_json_test_helper_1.getRelativePath)(testProjectPath);
            const outputDir = path.join(tempDir, 'reports');
            fs.mkdirSync(outputDir, { recursive: true });
            const outputPath = path.join(outputDir, 'ai-report.json');
            const exitSpy = (0, analyze_ai_json_test_helper_1.createProcessExitSpy)();
            // Act
            await command.execute({
                path: relativePath,
                outputAiJson: outputPath
            });
            // ファイル作成を少し待つ
            await new Promise(resolve => setTimeout(resolve, 200));
            // Assert
            const json = JSON.parse(fs.readFileSync(outputPath, 'utf-8'));
            // デフォルトパスか実際のreportsディレクトリパスであることを確認
            expect(json.fullReportUrl).toMatch(/\.rimor\/reports\/index\.html$|reports\/index\.html$/);
            exitSpy.mockRestore();
        });
    });
    describe('エラーハンドリング', () => {
        it('存在しないパスでエラーメッセージを表示', async () => {
            // Arrange
            const nonExistentPath = path.join(tempDir, 'non-existent');
            const consoleSpy = jest.spyOn(console, 'error').mockImplementation();
            const exitSpy = (0, analyze_ai_json_test_helper_1.createProcessExitSpy)();
            // Act & Assert
            await expect(command.execute({
                path: nonExistentPath,
                format: 'ai-json'
            })).rejects.toThrow(/Process\.exit called/);
            expect(consoleSpy).toHaveBeenCalled();
            consoleSpy.mockRestore();
            exitSpy.mockRestore();
        });
        it('書き込み権限がないディレクトリでエラーメッセージを表示', async () => {
            // Arrange
            const testProjectPath = (0, analyze_ai_json_test_helper_1.createTestProject)(tempDir);
            const relativePath = (0, analyze_ai_json_test_helper_1.getRelativePath)(testProjectPath);
            const outputPath = '/root/ai-report.json'; // 通常書き込み権限がないパス
            const consoleSpy = jest.spyOn(console, 'error').mockImplementation();
            const exitSpy = (0, analyze_ai_json_test_helper_1.createProcessExitSpy)();
            // Act & Assert
            await expect(command.execute({
                path: relativePath,
                format: 'ai-json',
                outputAiJson: outputPath
            })).rejects.toThrow(/Process\.exit called/);
            expect(consoleSpy).toHaveBeenCalled();
            const errorMessage = consoleSpy.mock.calls.map(call => call.join('')).join('');
            expect(errorMessage).toContain('AI JSON生成に失敗しました');
            consoleSpy.mockRestore();
            exitSpy.mockRestore();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,