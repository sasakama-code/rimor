{"file":"/Users/sasakama/Projects/Rimor/src/reporting/types.ts","mappings":";;;AAmBA;;GAEG;AACH,IAAY,QAMX;AAND,WAAY,QAAQ;IAClB,iCAAqB,CAAA;IACrB,yBAAa,CAAA;IACb,6BAAiB,CAAA;IACjB,uBAAW,CAAA;IACX,yBAAa,CAAA;AACf,CAAC,EANW,QAAQ,wBAAR,QAAQ,QAMnB;AAED;;GAEG;AACH,wBAAwB;AACxB,IAAY,SAaX;AAbD,WAAY,SAAS;IACnB,4CAA+B,CAAA;IAC/B,wBAAW,CAAA;IACX,8CAAiC,CAAA;IACjC,oDAAuC,CAAA;IACvC,8CAAiC,CAAA;IACjC,gDAAmC,CAAA;IACnC,0CAA6B,CAAA;IAC7B,8DAAiD,CAAA;IACjD,0CAA6B,CAAA;IAC7B,0CAA6B,CAAA;IAC7B,oEAAuD,CAAA;IACvD,gEAAmD,CAAA;AACrD,CAAC,EAbW,SAAS,yBAAT,SAAS,QAapB","names":[],"sources":["/Users/sasakama/Projects/Rimor/src/reporting/types.ts"],"sourcesContent":["import { CoreTypes, TypeGuards, TypeUtils } from '../core/types/core-definitions';\n/**\n * Reporting Type Definitions\n * v0.8.0 - Phase 4: Context Engineering\n * \n * 決定論的レポーティングのための型定義\n * JSONスキーマ（schema.json）に準拠\n */\n\n/**\n * 分析結果のメタデータ\n */\nexport interface AnalysisMetadata {\n  version: string;\n  timestamp: string;\n  analyzedPath: string;\n  duration: number;\n}\n\n/**\n * 重要度レベル\n */\nexport enum Severity {\n  CRITICAL = 'critical',\n  HIGH = 'high',\n  MEDIUM = 'medium',\n  LOW = 'low',\n  INFO = 'info'\n}\n\n/**\n * 問題タイプの分類\n */\n// Migrated to CoreTypes\nexport enum IssueType {\n  SQL_INJECTION = 'SQL_INJECTION',\n  XSS = 'XSS',\n  PATH_TRAVERSAL = 'PATH_TRAVERSAL',\n  COMMAND_INJECTION = 'COMMAND_INJECTION',\n  LDAP_INJECTION = 'LDAP_INJECTION',\n  XPATH_INJECTION = 'XPATH_INJECTION',\n  MISSING_TEST = 'MISSING_TEST',\n  INSUFFICIENT_ASSERTION = 'INSUFFICIENT_ASSERTION',\n  TEST_QUALITY = 'TEST_QUALITY',\n  CODE_QUALITY = 'CODE_QUALITY',\n  SECURITY_MISCONFIGURATION = 'SECURITY_MISCONFIGURATION',\n  SENSITIVE_DATA_EXPOSURE = 'SENSITIVE_DATA_EXPOSURE'\n}\n\n/**\n * コード位置情報\n */\nexport interface CodeLocation {\n  file: string;\n  startLine: number;\n  endLine: number;\n  startColumn?: number;\n  endColumn?: number;\n}\n\n/**\n * データフローの要素\n */\nexport interface DataFlowNode {\n  location: CodeLocation;\n  type: string;\n  description?: string;\n}\n\n/**\n * 汚染データフロー情報\n */\nexport interface DataFlow {\n  source: DataFlowNode;\n  sink: DataFlowNode;\n  path: DataFlowNode[];\n}\n\n/**\n * 検出された問題\n * CoreTypes.Issueを使用してください\n */\n// Migrated to CoreTypes - Import from core-definitions\nimport type { Issue as CoreIssue } from '../core/types/core-definitions';\nexport type Issue = CoreIssue & {\n  location?: CodeLocation;\n  dataFlow?: DataFlow;\n  recommendation?: string;\n  codeSnippet?: string;\n  references?: string[];\n};\n\n/**\n * 重要度別の問題数\n */\n// Migrated to CoreTypes\nexport interface IssueBySeverity {\n  critical: number;\n  high: number;\n  medium: number;\n  low: number;\n  info: number;\n}\n\n/**\n * 分析サマリー\n */\nexport interface AnalysisSummary {\n  totalFiles: number;\n  totalIssues: number;\n  issueBySeverity: IssueBySeverity;\n  issueByType: Record<string, number>;\n}\n\n/**\n * モジュール別カバレッジ\n */\nexport interface ModuleCoverage {\n  coverage: number;\n  testedFiles: number;\n  untestedFiles: number;\n}\n\n/**\n * テストカバレッジメトリクス\n */\nexport interface TestCoverageMetrics {\n  overall: number;\n  byModule: Record<string, ModuleCoverage>;\n  missingTests?: Array<{\n    file: string;\n    reason: string;\n  }>;\n}\n\n/**\n * 複雑度の高いメソッド\n */\nexport interface HighComplexityMethod {\n  method: string;\n  complexity: number;\n  location: CodeLocation;\n}\n\n/**\n * コード品質メトリクス\n */\nexport interface CodeQualityMetrics {\n  complexity?: {\n    average: number;\n    max: number;\n    highComplexityMethods: HighComplexityMethod[];\n  };\n  maintainability?: {\n    score: number;\n    issues: string[];\n  };\n}\n\n/**\n * 分析メトリクス\n */\nexport interface AnalysisMetrics {\n  testCoverage: TestCoverageMetrics;\n  codeQuality: CodeQualityMetrics;\n}\n\n/**\n * プラグイン実行結果\n */\nexport interface PluginResult {\n  executed: boolean;\n  duration?: number;\n  issues?: number;\n  metadata?: Record<string, any>;\n}\n\n/**\n * 構造化分析結果\n * これが「単一の真実の源」となる\n */\nexport interface StructuredAnalysisResult {\n  metadata: AnalysisMetadata;\n  summary: AnalysisSummary;\n  issues: Issue[];\n  metrics: AnalysisMetrics;\n  plugins?: Record<string, PluginResult>;\n}\n\n/**\n * レポート生成オプション\n */\nexport interface ReportGenerationOptions {\n  includeDetails?: boolean;\n  includeSummary?: boolean;\n  includeRecommendations?: boolean;\n  includeCodeSnippets?: boolean;\n  includeDataFlow?: boolean;\n  severityFilter?: Severity[];\n  typeFilter?: IssueType[];\n}\n\n/**\n * アノテーション生成オプション\n */\nexport interface AnnotationOptions {\n  prefix?: string;\n  format?: 'inline' | 'block';\n  includeDataFlow?: boolean;\n  overwrite?: boolean;\n}"],"version":3}