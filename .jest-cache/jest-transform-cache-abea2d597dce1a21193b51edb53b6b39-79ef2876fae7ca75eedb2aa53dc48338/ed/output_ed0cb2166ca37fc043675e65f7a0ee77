61b38bbbd037201c903f6f090f89b606
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.OutputFormatter = void 0;
let chalkInstance = null;
let chalkPromise = null;
function getChalk() {
    if (!chalkPromise) {
        chalkPromise = loadChalk();
    }
    return chalkPromise;
}
async function loadChalk() {
    if (chalkInstance) {
        return chalkInstance;
    }
    try {
        if (process.env.NODE_ENV === 'test') {
            const mockChalk = {
                bold: Object.assign((s) => s, {
                    blue: (s) => s
                }),
                green: (s) => s,
                red: (s) => s,
                yellow: (s) => s,
                blue: (s) => s,
                gray: (s) => s
            };
            chalkInstance = mockChalk;
        }
        else {
            const chalk = await Promise.resolve().then(() => __importStar(require('chalk')));
            chalkInstance = chalk.default;
        }
    }
    catch (error) {
        const mockChalk = {
            bold: Object.assign((s) => s, {
                blue: (s) => s
            }),
            green: (s) => s,
            red: (s) => s,
            yellow: (s) => s,
            blue: (s) => s,
            gray: (s) => s
        };
        chalkInstance = mockChalk;
    }
    return chalkInstance;
}
class OutputFormatter {
    static async header(title) {
        const c = await getChalk();
        return c.bold.blue(`üîç ${title}\n`) +
            c.gray('‚îÅ'.repeat(title.length + 4));
    }
    static async success(message) {
        const c = await getChalk();
        return c.green(`‚úÖ ${message}`);
    }
    static async error(message) {
        const c = await getChalk();
        return c.red(`‚ùå ${message}`);
    }
    static async warning(message) {
        const c = await getChalk();
        return c.yellow(`‚ö†Ô∏è  ${message}`);
    }
    static async info(message) {
        const c = await getChalk();
        return c.blue(`‚ÑπÔ∏è  ${message}`);
    }
    static async summary(filesAnalyzed, issuesFound, executionTime) {
        const c = await getChalk();
        const testCoverage = filesAnalyzed > 0 ? Math.round(((filesAnalyzed - issuesFound) / filesAnalyzed) * 100) : 0;
        return [
            c.bold('\nÂàÜÊûê„Çµ„Éû„É™„Éº'),
            `ÂàÜÊûêÂØæË±°: ${filesAnalyzed}„Éï„Ç°„Ç§„É´`,
            `${issuesFound > 0 ? '‚ùå' : '‚úÖ'} „ÉÜ„Çπ„Éà‰∏çË∂≥: ${issuesFound}‰ª∂`,
            `„ÉÜ„Çπ„Éà„Ç´„Éê„É¨„ÉÉ„Ç∏: ${testCoverage}%`,
            `ÂÆüË°åÊôÇÈñì: ${executionTime}ms`
        ].join('\n');
    }
    static async issueList(issues) {
        const c = await getChalk();
        if (issues.length === 0) {
            return c.green('\nÂïèÈ°å„ÅØË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„ÅüÔºÅ');
        }
        const lines = [c.bold('\nË¶ã„Å§„Åã„Å£„ÅüÂïèÈ°å:')];
        issues.forEach((issue, index) => {
            const severity = (issue.severity === 'error' || issue.severity === 'high') ? '‚ùå' : '‚ö†Ô∏è';
            const location = issue.line ? ` (Ë°å: ${issue.line})` : '';
            lines.push(`${index + 1}. ${severity} ${issue.message}${location}`);
        });
        return lines.join('\n');
    }
}
exports.OutputFormatter = OutputFormatter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,