{"file":"/Users/sasakama/Projects/Rimor/src/core/fileDiscovery.ts","mappings":"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","names":[],"sources":["/Users/sasakama/Projects/Rimor/src/core/fileDiscovery.ts"],"sourcesContent":["import { readdir } from 'fs/promises';\nimport { resolve } from 'path';\n\nexport async function* findTestFiles(\n  dir: string,\n  excludePatterns: string[] = [],\n  projectRoot?: string,\n  depth: number = 0\n): AsyncGenerator<string> {\n  // セキュリティ: 探索深度制限（無限再帰防止）\n  if (depth > 20) {\n    return;\n  }\n\n  // セキュリティ: プロジェクトルートの設定\n  if (!projectRoot) {\n    projectRoot = process.cwd();\n  }\n\n  // セキュリティ: パス検証\n  const { PathSecurity } = await import('../utils/pathSecurity');\n  if (!PathSecurity.validateProjectPath(dir, projectRoot)) {\n    console.warn(`セキュリティ警告: プロジェクト範囲外のディレクトリをスキップ: ${dir}`);\n    return;\n  }\n\n  try {\n    const dirents = await readdir(dir, { withFileTypes: true });\n  \n    for (const dirent of dirents) {\n      // セキュリティ: ファイル名の検証\n      if (!isValidFileName(dirent.name)) {\n        continue;\n      }\n\n      const path = resolve(dir, dirent.name);\n      \n      // セキュリティ: 解決されたパスの検証\n      if (!PathSecurity.validateProjectPath(path, projectRoot)) {\n        continue;\n      }\n      \n      // 除外パターンの検証（より安全な方法）\n      if (shouldExcludePath(path, excludePatterns)) {\n        continue;\n      }\n      \n      if (dirent.isDirectory()) {\n        // セキュリティ: シンボリックリンクのスキップ\n        if (dirent.isSymbolicLink()) {\n          continue;\n        }\n\n        if (dirent.name === '__tests__') {\n          const nestedDirents = await readdir(path, { withFileTypes: true });\n          for (const nested of nestedDirents) {\n            if (nested.isFile() && isValidFileName(nested.name)) {\n              const nestedPath = resolve(path, nested.name);\n              if (PathSecurity.validateProjectPath(nestedPath, projectRoot)) {\n                yield nestedPath;\n              }\n            }\n          }\n        } else {\n          yield* findTestFiles(path, excludePatterns, projectRoot, depth + 1);\n        }\n      } else if (dirent.isFile() && isTestFile(dirent.name)) {\n        yield path;\n      }\n    }\n  } catch (error) {\n    // ディレクトリアクセスエラーは警告として処理\n    console.warn(`ディレクトリアクセスエラー: ${dir}`, error);\n  }\n}\n\n/**\n * 安全な除外パターンチェック\n */\nfunction shouldExcludePath(path: string, excludePatterns: string[]): boolean {\n  // セキュリティ: 除外パターンの検証\n  const safePatterns = excludePatterns.filter(pattern => \n    typeof pattern === 'string' && \n    pattern.length > 0 && \n    pattern.length < 200 &&\n    !pattern.includes('..') &&\n    !/[<>:\"|?*]/.test(pattern)\n  );\n\n  return safePatterns.some(pattern => {\n    // 単純な文字列マッチのみ使用（正規表現を避ける）\n    return path.includes(pattern);\n  });\n}\n\n/**\n * ファイル名の安全性チェック\n */\nfunction isValidFileName(filename: string): boolean {\n  // 基本的な検証\n  if (!filename || filename.length === 0 || filename.length > 255) {\n    return false;\n  }\n\n  // 危険なファイル名パターンの検出\n  const dangerousPatterns = [\n    /^\\./,  // 隠しファイル（制限）\n    /\\0/,   // NULL文字\n    /[<>:\"|?*]/,  // Windows不正文字\n    /^(CON|PRN|AUX|NUL|COM[1-9]|LPT[1-9])$/i,  // Windows予約名\n    /\\.\\./,  // パストラバーサル\n  ];\n\n  for (const pattern of dangerousPatterns) {\n    if (pattern.test(filename)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport function isTestFile(filename: string): boolean {\n  return /\\.(test|spec)\\.(js|ts)$/.test(filename);\n}"],"version":3}