{"file":"/Users/sasakama/Projects/Rimor/src/testing/jest-ai-reporter.ts","mappings":"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","names":[],"sources":["/Users/sasakama/Projects/Rimor/src/testing/jest-ai-reporter.ts"],"sourcesContent":["import type { Reporter, Test, TestResult, AggregatedResult } from '@jest/reporters';\nimport { TestErrorContextCollector, TestErrorContext } from './error-context';\nimport { AITestErrorFormatter } from './ai-error-formatter';\nimport { CITraceabilityCollector, CITraceability } from './ci-traceability';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { PathSecurity } from '../utils/pathSecurity';\nimport { sanitizeForAIReport } from '../utils/stringSanitizer';\n\n/**\n * Jest用AIエラーレポーター\n * Context Engineeringベースでエラー情報を収集・フォーマット\n */\n/**\n * Jestレポーターオプション\n */\nexport interface JestAIReporterOptions {\n  outputPath?: string;\n  enableConsoleOutput?: boolean;\n  [key: string]: unknown;\n}\n\n\nexport class JestAIReporter implements Reporter {\n  private errorCollector: TestErrorContextCollector;\n  private errorFormatter: AITestErrorFormatter;\n  private collectedErrors: TestErrorContext[] = [];\n  private suiteErrors: Map<string, Error> = new Map();\n  private outputPath: string;\n  private enableConsoleOutput: boolean;\n  private ciTraceability: CITraceability | null = null;\n  private testRunStartTime: Date | null = null;\n  private totalFailedTests: number = 0;\n  private totalFailedSuites: number = 0;\n  private processedTestFiles: Set<string> = new Set();\n  \n  constructor(globalConfig: unknown, options: JestAIReporterOptions = {}) {\n    this.errorCollector = new TestErrorContextCollector();\n    this.errorFormatter = new AITestErrorFormatter();\n    \n    // デフォルトの出力先を.rimor/reports/に設定\n    const defaultOutputDir = path.join(process.cwd(), '.rimor', 'reports');\n    \n    // ディレクトリが存在しない場合は作成（エラーハンドリング強化）\n    try {\n      if (!fs.existsSync(defaultOutputDir)) {\n        fs.mkdirSync(defaultOutputDir, { recursive: true });\n      }\n    } catch (error) {\n      // ディレクトリ作成に失敗した場合は、現在のディレクトリを使用\n      console.warn('AI Reporter: .rimor/reports/ ディレクトリの作成に失敗しました。現在のディレクトリを使用します。');\n      this.outputPath = options.outputPath || path.join(process.cwd(), 'test-errors-ai.md');\n      this.enableConsoleOutput = options.enableConsoleOutput !== false;\n      return;\n    }\n    \n    this.outputPath = options.outputPath || path.join(defaultOutputDir, 'test-errors-ai.md');\n    this.enableConsoleOutput = options.enableConsoleOutput !== false;\n  }\n  \n  /**\n   * テスト実行開始時\n   */\n  onRunStart(results: AggregatedResult, options: unknown): void {\n    this.collectedErrors = [];\n    this.suiteErrors.clear();\n    this.testRunStartTime = new Date();\n    this.totalFailedTests = 0;\n    this.totalFailedSuites = 0;\n    this.processedTestFiles.clear();\n    \n    // デバッグモード有効時の追加ログ\n    if (process.env.DEBUG_AI_REPORTER === 'true') {\n      console.log(`[AI Reporter Debug] Test run started at: ${this.testRunStartTime.toISOString()}`);\n      console.log(`[AI Reporter Debug] Number of test suites: ${results.numTotalTestSuites || 'unknown'}`);\n    }\n    \n    // CI環境情報を収集\n    this.ciTraceability = CITraceabilityCollector.collect();\n    \n    if (this.enableConsoleOutput) {\n      // CI環境では最小限の出力\n      if (process.env.CI === 'true') {\n        console.log('\\n🤖 AI Error Reporter: 有効');\n      } else {\n        console.log('\\n🤖 AI Error Reporter: エラー収集を開始します...');\n        console.log(`📅 実行開始時刻: ${this.testRunStartTime.toISOString()}`);\n        if (this.ciTraceability) {\n          console.log(`📍 CI実行: ${this.ciTraceability.workflow} #${this.ciTraceability.runNumber}`);\n        }\n        console.log('');\n      }\n    }\n  }\n  \n  /**\n   * 各テストファイル実行後\n   */\n  async onTestFileResult(\n    test: Test,\n    testResult: TestResult,\n    results: AggregatedResult\n  ): Promise<void> {\n    // デバッグログ: 処理開始\n    if (process.env.DEBUG_AI_REPORTER === 'true') {\n      console.log(`[AI Reporter Debug] Processing test file: ${test.path}`);\n      console.log(`[AI Reporter Debug] Failed tests: ${testResult.numFailingTests}, Suite error: ${!!testResult.testExecError}`);\n    }\n    \n    // 重複処理を防ぐ（ただし、ファイルパスとエラー状態でより精密にチェック）\n    const fileKey = `${test.path}-${testResult.numFailingTests}-${!!testResult.testExecError}`;\n    if (this.processedTestFiles.has(fileKey)) {\n      if (process.env.DEBUG_AI_REPORTER === 'true') {\n        console.log(`[AI Reporter Debug] Skipping duplicate processing for: ${fileKey}`);\n      }\n      return;\n    }\n    this.processedTestFiles.add(fileKey);\n    \n    // スイートレベルのエラーをチェック（モジュール未検出、コンパイルエラーなど）\n    if (testResult.testExecError) {\n      this.totalFailedSuites++;\n      await this.collectSuiteError(test.path, testResult.testExecError);\n    }\n    \n    // 失敗したテストのみ処理\n    if (testResult.numFailingTests === 0) {\n      if (process.env.DEBUG_AI_REPORTER === 'true') {\n        console.log(`[AI Reporter Debug] No failing tests in: ${test.path}`);\n      }\n      return;\n    }\n    \n    // 失敗テスト数を追跡\n    this.totalFailedTests += testResult.numFailingTests;\n    \n    // デバッグログ出力\n    if (process.env.DEBUG_AI_REPORTER === 'true') {\n      console.log(`[AI Reporter Debug] Processing ${test.path}: ${testResult.numFailingTests} failures`);\n    }\n    \n    // エラーコンテキストの収集\n    for (const assertion of testResult.testResults) {\n      if (assertion.status === 'failed' && assertion.failureMessages.length > 0) {\n        try {\n          // 各エラーメッセージを処理（複数のエラーメッセージがある場合）\n          for (const failureMessage of assertion.failureMessages) {\n            if (!failureMessage || failureMessage.trim() === '') continue;\n            \n            // エラーオブジェクトの再構築\n            const error = this.reconstructError(failureMessage);\n            \n            // コンテキスト収集\n            const context = await this.errorCollector.collectErrorContext(\n              error,\n              test.path,\n              assertion.fullName,\n              process.cwd()\n            );\n            \n            // トレーサビリティ情報を追加（CIとローカル両方）\n            const traceabilityInfo = this.ciTraceability || {\n              runId: 'local',\n              runNumber: 'local',\n              workflow: 'local',\n              job: 'local',\n              actor: process.env.USER || 'unknown',\n              repository: 'local',\n              branch: 'local',\n              sha: 'local',\n              nodeVersion: process.version,\n              os: process.platform,\n              timestamp: this.testRunStartTime?.toISOString() || new Date().toISOString(),\n              errorHash: ''\n            };\n            \n            context.ciTraceability = {\n              ...traceabilityInfo,\n              errorHash: CITraceabilityCollector.generateErrorHash({\n                testFile: test.path,\n                testName: assertion.fullName,\n                errorMessage: failureMessage\n              })\n            };\n            \n            this.collectedErrors.push(context);\n            \n            if (this.enableConsoleOutput && process.env.CI !== 'true') {\n              console.log(`  ❌ ${assertion.fullName}`);\n            }\n          }\n        } catch (collectError) {\n          // 収集エラーは無視（テスト実行を妨げない）\n          if (process.env.CI !== 'true') {\n            console.error('Error collecting context:', collectError);\n          }\n        }\n      }\n    }\n    \n    // デバッグログ: 現在の収集状況\n    if (process.env.DEBUG_AI_REPORTER === 'true') {\n      console.log(`[AI Reporter Debug] Total errors collected so far: ${this.collectedErrors.length}`);\n    }\n  }\n  \n  /**\n   * テスト実行完了時\n   */\n  async onRunComplete(contexts: Set<unknown>, results: AggregatedResult): Promise<void> {\n    // デバッグログ: 最終的な収集状況\n    if (process.env.DEBUG_AI_REPORTER === 'true') {\n      console.log(`\\n[AI Reporter Debug] Final report:`);\n      console.log(`  - Total failed tests (Jest): ${results.numFailedTests}`);\n      console.log(`  - Total failed test suites (Jest): ${results.numFailedTestSuites}`);\n      console.log(`  - Total errors collected: ${this.collectedErrors.length}`);\n      console.log(`  - Total test files processed: ${this.processedTestFiles.size}`);\n    }\n    \n    if (this.collectedErrors.length === 0) {\n      if (this.enableConsoleOutput && process.env.CI !== 'true') {\n        console.log('\\n✅ すべてのテストがパスしました！\\n');\n      }\n      return;\n    }\n    \n    try {\n      // AI向けレポートの生成\n      const report = await this.errorFormatter.formatErrors(\n        this.collectedErrors,\n        process.cwd()\n      );\n      \n      // 実行情報をレポートに追加\n      const endTime = new Date();\n      const duration = this.testRunStartTime \n        ? Math.round((endTime.getTime() - this.testRunStartTime.getTime()) / 1000)\n        : undefined;\n      \n      (report as any).executionInfo = {\n        startTime: this.testRunStartTime?.toISOString() || new Date().toISOString(),\n        endTime: endTime.toISOString(),\n        duration: duration,\n        environment: process.env.CI === 'true' ? 'CI' : 'local',\n        totalFilesProcessed: this.processedTestFiles.size,\n        totalErrorsCollected: this.collectedErrors.length,\n        jestReportedFailures: results.numFailedTests,\n        jestReportedFailedSuites: results.numFailedTestSuites,\n        totalSuiteErrors: this.suiteErrors.size\n      };\n      \n      // マークダウン形式で出力（PIIマスキング適用）\n      const markdown = this.errorFormatter.formatAsMarkdown(report);\n      const maskedMarkdown = PathSecurity.maskAllPaths(markdown, 'Rimor');\n      await fs.promises.writeFile(this.outputPath, maskedMarkdown, 'utf-8');\n      \n      // JSON形式でも出力（PIIマスキング適用）\n      const jsonPath = this.outputPath.replace(/\\.md$/, '.json');\n      const json = this.errorFormatter.formatAsJSON(report);\n      const maskedJson = PathSecurity.maskAllPaths(json, 'Rimor');\n      await fs.promises.writeFile(jsonPath, maskedJson, 'utf-8');\n      \n      // サマリー形式でも出力（CI環境でのPRコメント用）\n      const summaryPath = this.outputPath.replace(/\\.md$/, '-summary.md');\n      const summaryMarkdown = this.errorFormatter.formatAsSummaryMarkdown(report);\n      const maskedSummaryMarkdown = PathSecurity.maskAllPaths(summaryMarkdown, 'Rimor');\n      await fs.promises.writeFile(summaryPath, maskedSummaryMarkdown, 'utf-8');\n      \n      if (this.enableConsoleOutput) {\n        this.printSummary(report);\n      }\n      \n    } catch (error) {\n      if (process.env.CI !== 'true') {\n        console.error('AI Error Reporter failed:', error);\n      }\n    }\n  }\n  \n  /**\n   * エラーメッセージからErrorオブジェクトを再構築\n   */\n  private reconstructError(failureMessage: string): Error {\n    const error = new Error();\n    \n    // ANSIエスケープシーケンスを除去してからパース\n    const sanitizedMessage = sanitizeForAIReport(failureMessage);\n    \n    // Jestのエラーメッセージフォーマットを解析\n    const lines = sanitizedMessage.split('\\n');\n    \n    // エラーメッセージの抽出（様々なエラータイプに対応）\n    const errorTypeMatch = sanitizedMessage.match(/(Error|TypeError|ReferenceError|SyntaxError|RangeError): (.+?)(?:\\n|$)/);\n    if (errorTypeMatch) {\n      error.message = `${errorTypeMatch[1]}: ${errorTypeMatch[2]}`;\n    } else {\n      // アサーションエラーの場合\n      const assertMatch = sanitizedMessage.match(/expect\\(.*?\\)[\\s\\S]*?Expected: (.+?)\\n[\\s\\S]*?Received: (.+?)(?:\\n|$)/);\n      if (assertMatch) {\n        error.message = `Expected: ${assertMatch[1]}, Received: ${assertMatch[2]}`;\n        const errorWithDetails = error as Error & { expected?: string; actual?: string };\n        errorWithDetails.expected = assertMatch[1];\n        errorWithDetails.actual = assertMatch[2];\n      } else {\n        // その他のエラーメッセージパターン\n        const firstNonEmptyLine = lines.find(line => line.trim().length > 0);\n        error.message = firstNonEmptyLine || 'Unknown error';\n      }\n    }\n    \n    // スタックトレースの抽出（サニタイズ済み）\n    const stackStart = sanitizedMessage.indexOf('    at ');\n    if (stackStart !== -1) {\n      error.stack = sanitizedMessage.substring(stackStart);\n    }\n    \n    return error;\n  }\n  \n  /**\n   * スイートレベルのエラーを収集\n   */\n  private async collectSuiteError(testFilePath: string, execError: unknown): Promise<void> {\n    try {\n      const rawErrorMessage = typeof execError === 'string' ? execError : \n                          (execError as any)?.message || 'Test suite execution failed';\n      \n      // エラーメッセージをサニタイズ\n      const errorMessage = sanitizeForAIReport(rawErrorMessage);\n      \n      // モジュール未検出エラーのパターンをチェック\n      const isModuleNotFound = errorMessage.includes('Cannot find module') || \n                              errorMessage.includes('Module not found');\n      const isCompilationError = errorMessage.includes('SyntaxError') || \n                                 errorMessage.includes('TypeError') ||\n                                 errorMessage.includes('ReferenceError');\n      \n      // エラータイプを判定\n      const errorType = isModuleNotFound ? 'MODULE_NOT_FOUND' :\n                       isCompilationError ? 'COMPILATION_ERROR' :\n                       'SUITE_EXECUTION_ERROR';\n      \n      // エラーコンテキストを作成\n      const context: TestErrorContext = {\n        timestamp: new Date().toISOString(),\n        testFile: testFilePath,\n        testName: `[Test Suite] ${path.basename(testFilePath)}`,\n        errorType: errorType as any,\n        \n        error: {\n          message: errorMessage,\n          stack: sanitizeForAIReport((execError as any)?.stack || '')\n        },\n        \n        codeContext: {\n          failedLine: 0,\n          failedCode: '',\n          surroundingCode: {\n            before: '',\n            after: ''\n          },\n          testStructure: {\n            describes: [],\n            currentTest: `[Suite] ${path.basename(testFilePath)}`,\n            hooks: []\n          }\n        },\n        \n        environment: {\n          nodeVersion: process.version,\n          ciEnvironment: process.env.CI === 'true',\n          memoryUsage: process.memoryUsage()\n        },\n        \n        relatedFiles: {\n          dependencies: [],\n          configFiles: []\n        },\n        \n        ciTraceability: this.ciTraceability || undefined,\n        \n        suggestedActions: [{\n          priority: errorType === 'MODULE_NOT_FOUND' ? 'high' :\n                   errorType === 'COMPILATION_ERROR' ? 'high' : 'medium',\n          action: this.generateSuiteErrorFix(errorType, errorMessage),\n          reasoning: `Test suite failed to load due to ${errorType}`\n        }]\n      };\n      \n      this.collectedErrors.push(context);\n      this.suiteErrors.set(testFilePath, execError as Error);\n      \n      if (this.enableConsoleOutput && process.env.CI !== 'true') {\n        console.log(`  ⚠️ Suite Error [${errorType}]: ${path.basename(testFilePath)}`);\n      }\n    } catch (error) {\n      if (process.env.DEBUG_AI_REPORTER === 'true') {\n        console.error('Failed to collect suite error:', error);\n      }\n    }\n  }\n  \n  /**\n   * スイートエラーの修正提案を生成\n   */\n  private generateSuiteErrorFix(errorType: string, errorMessage: string): string {\n    switch (errorType) {\n      case 'MODULE_NOT_FOUND':\n        const moduleMatch = errorMessage.match(/Cannot find module ['\"](.+?)['\"]/);\n        const moduleName = moduleMatch ? moduleMatch[1] : 'unknown';\n        return `1. ビルドを実行: npm run build\\n2. 依存関係を確認: npm install\\n3. モジュールパスを確認: ${moduleName}`;\n      \n      case 'COMPILATION_ERROR':\n        return '1. TypeScriptのコンパイルエラーを確認: npx tsc --noEmit\\n2. ビルドを再実行: npm run build:full';\n      \n      default:\n        return 'テストファイルの構文とインポートを確認してください';\n    }\n  }\n  \n  /**\n   * コンソールにサマリーを出力\n   */\n  private printSummary(report: {\n    summary: {\n      totalErrors: number;\n      criticalErrors: number;\n      testFileCount: number;\n      estimatedFixTime: number;\n      commonPatterns: string[];\n    };\n    quickActions: Array<{\n      description: string;\n      command: string;\n    }>;\n  }): void {\n    // CI環境では最小限の出力\n    if (process.env.CI === 'true') {\n      const maskedPath = PathSecurity.toRelativeOrMasked(this.outputPath);\n      console.log(`\\n🤖 AI Error Report: ${report.summary.totalErrors}個のエラーを検出 → ${maskedPath}\\n`);\n      return;\n    }\n    \n    // ローカル環境では詳細な出力\n    console.log('\\n' + '='.repeat(80));\n    console.log('🤖 AI Error Report Summary');\n    console.log('='.repeat(80));\n    \n    // 実行日時を表示\n    if (this.testRunStartTime) {\n      console.log(`\\n📅 実行日時: ${this.testRunStartTime.toISOString()}`);\n    }\n    \n    console.log(`\\n📊 統計:`);\n    console.log(`  - 総エラー数: ${report.summary.totalErrors}`);\n    console.log(`  - 重大エラー: ${report.summary.criticalErrors}`);\n    console.log(`  - 影響ファイル: ${report.summary.testFileCount}`);\n    console.log(`  - 推定修正時間: ${report.summary.estimatedFixTime}分`);\n    \n    // エラー数の不一致を警告\n    if (this.totalFailedTests > 0 && report.summary.totalErrors < this.totalFailedTests) {\n      console.log(`\\n⚠️  警告: Jestが検出した失敗テスト数(${this.totalFailedTests})と記録されたエラー数(${report.summary.totalErrors})に差があります`);\n      console.log(`    一部のエラーが記録されていない可能性があります`);\n    }\n    \n    if (report.summary.commonPatterns.length > 0) {\n      console.log(`\\n🔍 検出されたパターン:`);\n      report.summary.commonPatterns.forEach((pattern) => {\n        console.log(`  - ${pattern}`);\n      });\n    }\n    \n    if (report.quickActions.length > 0) {\n      console.log(`\\n💡 推奨アクション:`);\n      report.quickActions.forEach((action, index) => {\n        console.log(`  ${index + 1}. ${action.description}`);\n        console.log(`     $ ${action.command}`);\n      });\n    }\n    \n    // 出力パスをマスキングして表示\n    const maskedPath = PathSecurity.toRelativeOrMasked(this.outputPath);\n    console.log(`\\n📄 詳細レポート: ${maskedPath}`);\n    console.log('='.repeat(80) + '\\n');\n  }\n}\n\n/**\n * Jestカスタムレポーターのエクスポート\n * jest.config.mjsで使用\n */\nexport default JestAIReporter;"],"version":3}