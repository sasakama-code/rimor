f6ea24fa7281856a1ea83fdd74593a8f
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.findTestFiles = findTestFiles;
exports.isTestFile = isTestFile;
const promises_1 = require("fs/promises");
const path_1 = require("path");
async function* findTestFiles(dir, excludePatterns = [], projectRoot, depth = 0) {
    // セキュリティ: 探索深度制限（無限再帰防止）
    if (depth > 20) {
        return;
    }
    // セキュリティ: プロジェクトルートの設定
    if (!projectRoot) {
        projectRoot = process.cwd();
    }
    // セキュリティ: パス検証
    const { PathSecurity } = await Promise.resolve().then(() => __importStar(require('../utils/pathSecurity')));
    if (!PathSecurity.validateProjectPath(dir, projectRoot)) {
        console.warn(`セキュリティ警告: プロジェクト範囲外のディレクトリをスキップ: ${dir}`);
        return;
    }
    try {
        const dirents = await (0, promises_1.readdir)(dir, { withFileTypes: true });
        for (const dirent of dirents) {
            // セキュリティ: ファイル名の検証
            if (!isValidFileName(dirent.name)) {
                continue;
            }
            const path = (0, path_1.resolve)(dir, dirent.name);
            // セキュリティ: 解決されたパスの検証
            if (!PathSecurity.validateProjectPath(path, projectRoot)) {
                continue;
            }
            // 除外パターンの検証（より安全な方法）
            if (shouldExcludePath(path, excludePatterns)) {
                continue;
            }
            if (dirent.isDirectory()) {
                // セキュリティ: シンボリックリンクのスキップ
                if (dirent.isSymbolicLink()) {
                    continue;
                }
                if (dirent.name === '__tests__') {
                    const nestedDirents = await (0, promises_1.readdir)(path, { withFileTypes: true });
                    for (const nested of nestedDirents) {
                        if (nested.isFile() && isValidFileName(nested.name)) {
                            const nestedPath = (0, path_1.resolve)(path, nested.name);
                            if (PathSecurity.validateProjectPath(nestedPath, projectRoot)) {
                                yield nestedPath;
                            }
                        }
                    }
                }
                else {
                    yield* findTestFiles(path, excludePatterns, projectRoot, depth + 1);
                }
            }
            else if (dirent.isFile() && isTestFile(dirent.name)) {
                yield path;
            }
        }
    }
    catch (error) {
        // ディレクトリアクセスエラーは警告として処理
        console.warn(`ディレクトリアクセスエラー: ${dir}`, error);
    }
}
/**
 * 安全な除外パターンチェック
 */
function shouldExcludePath(path, excludePatterns) {
    // セキュリティ: 除外パターンの検証
    const safePatterns = excludePatterns.filter(pattern => typeof pattern === 'string' &&
        pattern.length > 0 &&
        pattern.length < 200 &&
        !pattern.includes('..') &&
        !/[<>:"|?*]/.test(pattern));
    return safePatterns.some(pattern => {
        // 単純な文字列マッチのみ使用（正規表現を避ける）
        return path.includes(pattern);
    });
}
/**
 * ファイル名の安全性チェック
 */
function isValidFileName(filename) {
    // 基本的な検証
    if (!filename || filename.length === 0 || filename.length > 255) {
        return false;
    }
    // 危険なファイル名パターンの検出
    const dangerousPatterns = [
        /^\./, // 隠しファイル（制限）
        /\0/, // NULL文字
        /[<>:"|?*]/, // Windows不正文字
        /^(CON|PRN|AUX|NUL|COM[1-9]|LPT[1-9])$/i, // Windows予約名
        /\.\./, // パストラバーサル
    ];
    for (const pattern of dangerousPatterns) {
        if (pattern.test(filename)) {
            return false;
        }
    }
    return true;
}
function isTestFile(filename) {
    return /\.(test|spec)\.(js|ts)$/.test(filename);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,