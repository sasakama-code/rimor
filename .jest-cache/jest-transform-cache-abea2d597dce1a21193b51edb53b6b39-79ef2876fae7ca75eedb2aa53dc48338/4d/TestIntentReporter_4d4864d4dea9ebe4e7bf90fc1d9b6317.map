{"file":"/Users/sasakama/Projects/Rimor/src/intent-analysis/TestIntentReporter.ts","mappings":"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","names":[],"sources":["/Users/sasakama/Projects/Rimor/src/intent-analysis/TestIntentReporter.ts"],"sourcesContent":["/**\n * Test Intent Reporter\n * v0.9.0 - テスト意図実現度のレポート生成\n * TDD Green Phase - テストを通す最小限の実装\n */\n\nimport { CoreTypes, TypeGuards, TypeUtils } from '../core/types/core-definitions';\nimport { TestRealizationResult, IntentRiskLevel, Severity } from './ITestIntentAnalyzer';\n\n/**\n * レポートサマリー\n */\nexport interface ReportSummary {\n  totalFiles: number;\n  criticalRiskCount: number;\n  highRiskCount: number;\n  mediumRiskCount: number;\n  lowRiskCount: number;\n  averageRealizationScore: number;\n}\n\n/**\n * テスト意図実現度レポーター\n * KISS原則: シンプルなレポート生成から開始\n */\nexport class TestIntentReporter {\n  /**\n   * Markdown形式のレポートを生成\n   * YAGNI原則: 必要最小限の実装\n   */\n  generateMarkdownReport(results: TestRealizationResult[]): string {\n    const summary = this.generateSummary(results);\n    let markdown = '# テスト意図実現度監査レポート\\n\\n';\n    \n    // サマリーセクション\n    markdown += '## サマリー\\n\\n';\n    \n    // 警告表示\n    if (summary.criticalRiskCount > 0) {\n      markdown += '⚠️ **警告**: CRITICALレベルのリスクが検出されました\\n\\n';\n    }\n    \n    // リスク統計\n    markdown += `- CRITICALリスク: ${summary.criticalRiskCount}件\\n`;\n    markdown += `- HIGHリスク: ${summary.highRiskCount}件\\n`;\n    markdown += `- MEDIUMリスク: ${summary.mediumRiskCount}件\\n`;\n    markdown += `- LOWリスク: ${summary.lowRiskCount}件\\n\\n`;\n    \n    // 統計情報\n    markdown += '## 統計情報\\n\\n';\n    markdown += `- 分析ファイル数: ${summary.totalFiles}\\n`;\n    markdown += `- 平均実現度: ${summary.averageRealizationScore.toFixed(1)}%\\n`;\n    \n    if (results.length > 0) {\n      const scores = results.map(r => r.realizationScore);\n      const minScore = Math.min(...scores);\n      const maxScore = Math.max(...scores);\n      markdown += `- 最低実現度: ${minScore}%\\n`;\n      markdown += `- 最高実現度: ${maxScore}%\\n`;\n    }\n    \n    markdown += '\\n';\n    \n    // 改善提案セクション\n    const allGaps = results.flatMap(r => r.gaps);\n    if (allGaps.length > 0) {\n      markdown += '## 改善提案（優先度順）\\n\\n';\n      \n      // 重要度でソート\n      const sortedGaps = allGaps.sort((a, b) => {\n        const severityOrder = {\n          [Severity.CRITICAL]: 0,\n          [Severity.HIGH]: 1,\n          [Severity.MEDIUM]: 2,\n          [Severity.LOW]: 3\n        };\n        return severityOrder[a.severity] - severityOrder[b.severity];\n      });\n      \n      sortedGaps.forEach(gap => {\n        markdown += `- **[${gap.severity.toUpperCase()}]** ${gap.description}\\n`;\n        gap.suggestions.forEach(suggestion => {\n          markdown += `  - ${suggestion}\\n`;\n        });\n      });\n      \n      markdown += '\\n';\n    }\n    \n    // 個別ファイルの結果\n    results.forEach(result => {\n      const file = result.file || 'unknown';\n      const description = result.description || result.intent.description;\n      \n      markdown += `### ${file}\\n\\n`;\n      markdown += `- テスト: ${description}\\n`;\n      markdown += `- 実現度: ${result.realizationScore}%\\n`;\n      markdown += `- リスクレベル: ${result.riskLevel.toUpperCase()}\\n`;\n      \n      if (result.gaps.length > 0) {\n        markdown += '- ギャップ:\\n';\n        result.gaps.forEach(gap => {\n          markdown += `  - ${gap.description}\\n`;\n        });\n      }\n      \n      markdown += '\\n';\n    });\n    \n    return markdown;\n  }\n\n  /**\n   * HTML形式のレポートを生成\n   * KISS原則: シンプルなHTML構造\n   */\n  generateHTMLReport(results: TestRealizationResult[]): string {\n    const summary = this.generateSummary(results);\n    \n    let html = `<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"UTF-8\">\n  <title>テスト意図実現度監査レポート</title>\n  <style>\n    body { font-family: Arial, sans-serif; margin: 20px; }\n    .critical { background-color: #ff4444; color: white; padding: 2px 8px; border-radius: 4px; }\n    .high { background-color: #ff8800; color: white; padding: 2px 8px; border-radius: 4px; }\n    .medium { background-color: #ffaa00; color: white; padding: 2px 8px; border-radius: 4px; }\n    .low { background-color: #44aa00; color: white; padding: 2px 8px; border-radius: 4px; }\n    .minimal { background-color: #00aa44; color: white; padding: 2px 8px; border-radius: 4px; }\n    .progress-bar { background-color: #f0f0f0; height: 20px; border-radius: 10px; overflow: hidden; }\n    .progress-fill { background-color: #4CAF50; height: 100%; }\n  </style>\n</head>\n<body>\n  <h1>テスト意図実現度監査レポート</h1>\n`;\n    \n    // 個別ファイルの結果\n    results.forEach(result => {\n      const file = result.file || 'unknown';\n      const description = result.description || result.intent.description;\n      const riskClass = result.riskLevel.toLowerCase();\n      \n      html += `<div style=\"margin: 20px 0; padding: 15px; border: 1px solid #ddd; border-radius: 5px;\">`;\n      html += `<h3>${file}</h3>`;\n      html += `<p>${description}</p>`;\n      html += `<p>実現度: ${result.realizationScore}%</p>`;\n      html += `<div class=\"progress-bar\"><div class=\"progress-fill\" style=\"width: ${result.realizationScore}%\"></div></div>`;\n      html += `<p>リスクレベル: <span class=\"${riskClass}\">${result.riskLevel.toUpperCase()}</span></p>`;\n      html += `</div>`;\n    });\n    \n    html += `</body></html>`;\n    return html;\n  }\n\n  /**\n   * サマリー情報を生成\n   * DRY原則: 共通のサマリー生成ロジック\n   */\n  generateSummary(results: TestRealizationResult[]): ReportSummary {\n    const totalFiles = results.length;\n    let criticalRiskCount = 0;\n    let highRiskCount = 0;\n    let mediumRiskCount = 0;\n    let lowRiskCount = 0;\n    let totalScore = 0;\n    \n    results.forEach(result => {\n      totalScore += result.realizationScore;\n      \n      switch (result.riskLevel) {\n        case IntentRiskLevel.CRITICAL:\n          criticalRiskCount++;\n          break;\n        case IntentRiskLevel.HIGH:\n          highRiskCount++;\n          break;\n        case IntentRiskLevel.MEDIUM:\n          mediumRiskCount++;\n          break;\n        case IntentRiskLevel.LOW:\n          lowRiskCount++;\n          break;\n      }\n    });\n    \n    const averageRealizationScore = totalFiles > 0 ? totalScore / totalFiles : 0;\n    \n    return {\n      totalFiles,\n      criticalRiskCount,\n      highRiskCount,\n      mediumRiskCount,\n      lowRiskCount,\n      averageRealizationScore\n    };\n  }\n}"],"version":3}