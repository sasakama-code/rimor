{"file":"/Users/sasakama/Projects/Rimor/src/intent-analysis/BusinessLogicMapper.ts","mappings":"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","names":[],"sources":["/Users/sasakama/Projects/Rimor/src/intent-analysis/BusinessLogicMapper.ts"],"sourcesContent":["/**\n * Business Logic Mapper\n * v0.9.0 Phase 2 - テストとビジネスロジックの関連付け実装\n * \n * KISS原則: シンプルな実装から開始\n * YAGNI原則: 必要最小限の機能のみ実装\n * DRY原則: 重複を避ける\n */\n\nimport {\n  IBusinessLogicMapper,\n  BusinessLogicMapping,\n  BusinessLogicFile,\n  BusinessFunction,\n  BusinessCriticality,\n  ImpactScope,\n  RiskAssessment,\n  DomainImportanceConfig\n} from './IBusinessLogicMapper';\nimport { CallGraphNode, TypeInfo } from './ITypeScriptAnalyzer';\nimport { DomainInference } from './IDomainInferenceEngine';\nimport { DomainInferenceEngine } from './DomainInferenceEngine';\n\nexport class BusinessLogicMapper implements IBusinessLogicMapper {\n  private domainEngine: DomainInferenceEngine;\n  \n  // ドメイン重要度設定\n  private importanceConfig: DomainImportanceConfig = {\n    weightMap: {\n      critical: 70,\n      high: 50,\n      medium: 30,\n      low: 15\n    },\n    criticalDomains: ['payment', 'authentication', 'user-management', 'security', 'billing'],\n    domainBonus: 15,\n    disableDomainOverrides: false\n  };\n\n  constructor() {\n    this.domainEngine = new DomainInferenceEngine();\n  }\n\n  async mapTestToBusinessLogic(\n    testFilePath: string,\n    callGraph: CallGraphNode[],\n    typeInfo: Map<string, TypeInfo>\n  ): Promise<BusinessLogicMapping> {\n    // テストファイルから関連するビジネスロジックファイルを収集\n    const businessLogicFiles: BusinessLogicFile[] = [];\n    const processedFiles = new Set<string>();\n    const affectedDomains = new Set<string>();\n\n    // 呼び出しグラフを走査してビジネスロジックファイルを収集\n    for (const node of callGraph) {\n      await this.collectBusinessLogicFiles(\n        node,\n        businessLogicFiles,\n        processedFiles,\n        typeInfo,\n        affectedDomains\n      );\n    }\n\n    // カバレッジ深度の計算（KISS: シンプルな計算）\n    const coverageDepth = this.calculateCoverageDepth(businessLogicFiles);\n\n    // ビジネスクリティカル度の計算\n    const allFunctions = businessLogicFiles.flatMap(f => f.functions);\n    const primaryDomain = businessLogicFiles[0]?.domain || {\n      domain: 'unknown',\n      confidence: 0,\n      concepts: [],\n      businessImportance: 'low' as const\n    };\n    const businessCriticality = await this.calculateBusinessImportance(allFunctions, primaryDomain);\n\n    // 影響範囲の分析\n    const impactScope: ImpactScope = {\n      directImpact: businessLogicFiles.length,\n      indirectImpact: 0, // YAGNI: 今は実装しない\n      affectedDomains: Array.from(affectedDomains),\n      onCriticalPath: await this.checkCriticalPath(businessLogicFiles)\n    };\n\n    // リスク評価\n    const riskAssessment = this.assessRisk(businessLogicFiles, coverageDepth);\n\n    return {\n      testFilePath,\n      businessLogicFiles,\n      coverageDepth,\n      businessCriticality,\n      impactScope,\n      riskAssessment\n    };\n  }\n\n  private async collectBusinessLogicFiles(\n    node: CallGraphNode,\n    businessLogicFiles: BusinessLogicFile[],\n    processedFiles: Set<string>,\n    typeInfo: Map<string, TypeInfo>,\n    affectedDomains: Set<string>\n  ): Promise<void> {\n    if (processedFiles.has(node.filePath)) {\n      return;\n    }\n    processedFiles.add(node.filePath);\n\n    // ドメイン推論\n    const domain = await this.inferDomainFromFile(node.filePath, typeInfo);\n    if (domain.domain !== 'unknown') {\n      affectedDomains.add(domain.domain);\n    }\n\n    // ビジネス関数の作成\n    const businessFunction: BusinessFunction = {\n      name: node.name,\n      line: node.line,\n      isTested: true, // テストから到達可能なので\n      complexity: this.estimateComplexity(node),\n      dependencyCount: node.calls.length,\n      containsBusinessRules: await this.checkBusinessRules(node.name)\n    };\n\n    // 既存のファイルに追加するか、新規作成\n    let file = businessLogicFiles.find(f => f.filePath === node.filePath);\n    if (!file) {\n      file = {\n        filePath: node.filePath,\n        domain,\n        functions: [],\n        importanceScore: 0\n      };\n      businessLogicFiles.push(file);\n    }\n    file.functions.push(businessFunction);\n\n    // 重要度スコアの計算\n    file.importanceScore = this.calculateFileImportance(file);\n\n    // 子ノードを再帰的に処理\n    for (const child of node.calls) {\n      await this.collectBusinessLogicFiles(\n        child,\n        businessLogicFiles,\n        processedFiles,\n        typeInfo,\n        affectedDomains\n      );\n    }\n  }\n\n  private async inferDomainFromFile(\n    filePath: string,\n    typeInfo: Map<string, TypeInfo>\n  ): Promise<DomainInference> {\n    // ファイルパスからドメインを推論\n    const pathParts = filePath.split('/');\n    const fileName = pathParts[pathParts.length - 1].replace(/\\.(ts|js)$/, '');\n    \n    // ファイル名から型情報を探す\n    const type = typeInfo.get(fileName);\n    if (type) {\n      return await this.domainEngine.inferDomainFromType(type);\n    }\n\n    // サービス名から関連する型を探す（UserService -> User）\n    for (const [key, value] of typeInfo) {\n      if (fileName.toLowerCase().includes(key.toLowerCase())) {\n        return await this.domainEngine.inferDomainFromType(value);\n      }\n    }\n\n    // パスベースの推論（信頼度を控えめに設定）\n    if (filePath.includes('payment') || filePath.includes('Payment')) {\n      return {\n        domain: 'payment',\n        confidence: 0.6,\n        concepts: ['決済'],\n        businessImportance: 'high'  // criticalではなくhighをデフォルトに\n      };\n    } else if (filePath.includes('order') || filePath.includes('Order')) {\n      return {\n        domain: 'order-management',\n        confidence: 0.6,\n        concepts: ['注文'],\n        businessImportance: 'high'\n      };\n    } else if (filePath.includes('user') || filePath.includes('User')) {\n      return {\n        domain: 'user-management',\n        confidence: 0.6,\n        concepts: ['ユーザー管理'],\n        businessImportance: 'high'\n      };\n    }\n\n    return {\n      domain: 'unknown',\n      confidence: 0.3,\n      concepts: [],\n      businessImportance: 'low'\n    };\n  }\n\n  private calculateCoverageDepth(files: BusinessLogicFile[]): number {\n    if (files.length === 0) return 0;\n    \n    // 高重要度ファイルの割合とテスト済み関数の割合から計算\n    const importantFiles = files.filter(f => f.importanceScore > 70);\n    const importanceRatio = importantFiles.length / files.length;\n    \n    const allFunctions = files.flatMap(f => f.functions);\n    const testedFunctions = allFunctions.filter(f => f.isTested);\n    const testRatio = testedFunctions.length / (allFunctions.length || 1);\n    \n    // 重み付け平均（KISS）\n    return importanceRatio * 0.4 + testRatio * 0.6;\n  }\n\n  private calculateFileImportance(file: BusinessLogicFile): number {\n    const domainWeight = this.getDomainWeight(file.domain.businessImportance);\n    const complexityScore = Math.min(\n      100,\n      file.functions.reduce((sum, f) => sum + f.complexity * 5, 0)\n    );\n    const businessRuleScore = file.functions.filter(f => f.containsBusinessRules).length * 20;\n    \n    // 設定されたクリティカルドメインに対してボーナスを付与\n    const criticalDomains = this.importanceConfig.criticalDomains || [];\n    const domainBonus = criticalDomains.includes(file.domain.domain) \n      ? (this.importanceConfig.domainBonus || 15) \n      : 0;\n    \n    return Math.min(100, domainWeight + complexityScore * 0.3 + businessRuleScore * 0.5 + domainBonus);\n  }\n\n  private getDomainWeight(importance: string): number {\n    // 設定された重み付けを使用（設定がない場合はデフォルト値）\n    if (this.importanceConfig.weightMap) {\n      const key = importance as keyof typeof this.importanceConfig.weightMap;\n      return this.importanceConfig.weightMap[key] ?? 15;\n    }\n    \n    // デフォルト値\n    const defaultWeights: Record<string, number> = {\n      critical: 70,\n      high: 50,\n      medium: 30,\n      low: 15\n    };\n    return defaultWeights[importance] || 15;\n  }\n\n  private estimateComplexity(node: CallGraphNode): number {\n    // KISS: 簡単な推定\n    return 5 + node.calls.length * 2;\n  }\n\n  private async checkBusinessRules(functionName: string): Promise<boolean> {\n    // KISS: 関数名からの簡単な推定\n    const businessRulePatterns = [\n      /calculate/i,\n      /validate/i,\n      /process/i,\n      /check/i,\n      /verify/i,\n      /tax/i,\n      /discount/i,\n      /payment/i,\n      /order/i\n    ];\n    \n    return businessRulePatterns.some(pattern => pattern.test(functionName));\n  }\n\n  private async checkCriticalPath(files: BusinessLogicFile[]): Promise<boolean> {\n    // クリティカルなドメインに属するファイルがあるかチェック\n    const criticalDomains = ['payment', 'authentication', 'billing', 'order-management'];\n    return files.some(f => criticalDomains.includes(f.domain.domain));\n  }\n\n  private assessRisk(files: BusinessLogicFile[], coverageDepth: number): RiskAssessment {\n    // カバレッジリスク\n    const coverageRisk = coverageDepth < 0.5 ? 'high' : coverageDepth < 0.7 ? 'medium' : 'low';\n    \n    // 複雑度リスク\n    const avgComplexity = this.calculateAverageComplexity(files);\n    const complexityRisk = avgComplexity > 10 ? 'high' : avgComplexity > 5 ? 'medium' : 'low';\n    \n    // 変更リスク（YAGNI: 今は簡単な実装）\n    const changeRisk = 'medium';\n    \n    // 総合リスクスコア\n    const riskScores = { high: 30, medium: 20, low: 10 };\n    const overallRiskScore = \n      riskScores[coverageRisk] + \n      riskScores[complexityRisk] + \n      riskScores[changeRisk];\n    \n    return {\n      coverageRisk,\n      complexityRisk,\n      changeRisk,\n      overallRiskScore\n    };\n  }\n\n  private calculateAverageComplexity(files: BusinessLogicFile[]): number {\n    const allFunctions = files.flatMap(f => f.functions);\n    if (allFunctions.length === 0) return 0;\n    \n    const totalComplexity = allFunctions.reduce((sum, f) => sum + f.complexity, 0);\n    return totalComplexity / allFunctions.length;\n  }\n\n  async calculateBusinessImportance(\n    functions: BusinessFunction[],\n    domain: DomainInference\n  ): Promise<BusinessCriticality> {\n    const reasons: string[] = [];\n    let score = 0;\n\n    // 全ての関数が単純（複雑度低、依存なし）かチェック\n    const allSimple = functions.every(f => \n      f.complexity <= 7 && f.dependencyCount === 0\n    );\n\n    // 単純な関数のみの場合は、ドメインに関わらずlowとする\n    if (allSimple && functions.length > 0) {\n      reasons.push('全ての関数が単純（低複雑度、依存関係なし）');\n      return {\n        level: 'low',\n        score: 30,\n        reasons\n      };\n    }\n\n    // ドメインの重要度を基準スコアとする\n    score += this.getDomainWeight(domain.businessImportance);\n\n    // ビジネスルールを含む関数の評価\n    const businessRuleFunctions = functions.filter(f => f.containsBusinessRules);\n    if (businessRuleFunctions.length > 0) {\n      reasons.push('ビジネスルールを含む関数が存在');\n      score += businessRuleFunctions.length * 10;\n    }\n\n    // 高複雑度関数の評価\n    const complexFunctions = functions.filter(f => f.complexity >= 15);\n    if (complexFunctions.length > 0) {\n      reasons.push('高複雑度の関数が存在');\n      score += complexFunctions.length * 10;\n    }\n\n    // 依存関係の多い関数の評価\n    const highDependencyFunctions = functions.filter(f => f.dependencyCount > 3);\n    if (highDependencyFunctions.length > 0) {\n      reasons.push('依存関係の多い関数が存在');\n      score += highDependencyFunctions.length * 3;\n    }\n\n    // レベルの判定\n    let level: 'critical' | 'high' | 'medium' | 'low';\n    // billing ドメインかつビジネスルールを含む場合は特別扱い\n    if (domain.domain === 'billing' && businessRuleFunctions.length > 0) {\n      level = 'high';\n      score = Math.max(score, 76); // 最低でも76点を保証\n    } else if (score >= 80) {\n      level = 'critical';\n    } else if (score >= 60) {\n      level = 'high';\n    } else if (score >= 40) {\n      level = 'medium';\n    } else {\n      level = 'low';\n    }\n\n    return {\n      level,\n      reasons,\n      score: Math.min(100, score)\n    };\n  }\n\n  async analyzeImpactScope(\n    callGraph: CallGraphNode[],\n    startNode: CallGraphNode\n  ): Promise<ImpactScope> {\n    const visited = new Set<string>();\n    const affectedDomains = new Set<string>();\n    let directImpact = 0;\n\n    // DFSで影響範囲を探索\n    const traverse = (node: CallGraphNode, depth: number) => {\n      const nodeId = `${node.filePath}:${node.name}`;\n      if (visited.has(nodeId)) return;\n      visited.add(nodeId);\n\n      if (depth > 0) {  // 0より大きい場合は直接影響\n        directImpact++;\n      }\n\n      // ドメイン推論（簡易版）\n      if (node.filePath.includes('payment')) {\n        affectedDomains.add('payment');\n      } else if (node.filePath.includes('order')) {\n        affectedDomains.add('order-management');\n      }\n\n      // 子ノードを走査\n      for (const child of node.calls) {\n        traverse(child, depth + 1);\n      }\n    };\n\n    // startNodeの子ノードから開始\n    for (const child of startNode.calls) {\n      traverse(child, 1);\n    }\n\n    return {\n      directImpact,\n      indirectImpact: 0, // YAGNI\n      affectedDomains: Array.from(affectedDomains),\n      onCriticalPath: false // 別途判定\n    };\n  }\n\n  async detectBusinessRules(\n    functionBody: string,\n    typeInfo: Map<string, TypeInfo>\n  ): Promise<boolean> {\n    // ビジネスルールのパターンを検出\n    const businessPatterns = [\n      /if\\s*\\([^)]*\\>\\s*\\d+/,     // 数値比較\n      /if\\s*\\([^)]*\\<\\s*\\d+/,\n      /\\*\\s*0\\.\\d+/,              // パーセンテージ計算\n      /discount/i,                 // ビジネス用語\n      /tax/i,\n      /fee/i,\n      /rate/i,\n      /customer\\.type/i,          // ビジネスエンティティ\n      /PREMIUM|STANDARD|BASIC/    // ビジネス定数\n    ];\n\n    // パターンマッチング\n    const hasBusinessPattern = businessPatterns.some(pattern => pattern.test(functionBody));\n    \n    // 単純な文字列操作は除外\n    const isSimpleUtility = /^\\s*return\\s+\\w+\\.(trim|toLowerCase|toUpperCase|split|join)/.test(functionBody);\n    \n    return hasBusinessPattern && !isSimpleUtility;\n  }\n\n  async isOnCriticalPath(\n    node: CallGraphNode,\n    domains: string[]\n  ): Promise<boolean> {\n    // ファイルパスからドメインを推定\n    const filePath = node.filePath.toLowerCase();\n    \n    // クリティカルなパターン\n    const criticalPatterns = domains.map(d => new RegExp(d.replace('-', ''), 'i'));\n    \n    return criticalPatterns.some(pattern => pattern.test(filePath));\n  }\n  \n  /**\n   * ドメイン重要度設定を適用\n   */\n  setDomainImportanceConfig(config: DomainImportanceConfig): void {\n    this.importanceConfig = { ...this.importanceConfig, ...config };\n  }\n}"],"version":3}