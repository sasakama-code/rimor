8abebcd8d934561854ab66823624b5b2
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.UnifiedPluginManager = void 0;
const errorHandler_1 = require("../utils/errorHandler");
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
/**
 * UnifiedPluginManager v0.9.0
 * PluginManagerとPluginManagerExtendedの統合実装
 * SOLID原則に準拠した設計
 */
class UnifiedPluginManager {
    legacyPlugins = [];
    qualityPlugins = [];
    projectRoot;
    defaultTimeout = 60000;
    constructor(projectRoot = process.cwd()) {
        this.projectRoot = projectRoot;
    }
    /**
     * レガシープラグイン（IPlugin）の登録
     * pluginManager.tsの機能を継承
     */
    registerLegacy(plugin) {
        // プラグイン名の検証
        if (!plugin.name || typeof plugin.name !== 'string') {
            errorHandler_1.errorHandler.handleError(new Error('プラグイン名が不正です'), errorHandler_1.ErrorType.PLUGIN_ERROR, 'プラグインの登録に失敗しました', { pluginName: plugin.name });
            return;
        }
        // プラグイン名の安全性チェック
        if (!/^[a-zA-Z0-9_-]+$/.test(plugin.name)) {
            errorHandler_1.errorHandler.handleError(new Error(`不正なプラグイン名: ${plugin.name}`), errorHandler_1.ErrorType.PLUGIN_ERROR, 'プラグイン名に使用禁止文字が含まれています', { pluginName: plugin.name });
            return;
        }
        this.legacyPlugins.push(plugin);
    }
    /**
     * 品質プラグイン（ITestQualityPlugin）の登録
     * pluginManagerExtended.tsの機能を継承
     */
    registerQuality(plugin) {
        this.qualityPlugins.push(plugin);
    }
    /**
     * 後方互換性のためのエイリアス
     */
    register(plugin) {
        this.registerLegacy(plugin);
    }
    registerPlugin(plugin) {
        this.registerQuality(plugin);
    }
    registerQualityPlugin(plugin) {
        this.registerQuality(plugin);
    }
    registerLegacyPlugin(plugin) {
        this.registerLegacy(plugin);
    }
    /**
     * レガシープラグインの取得
     */
    getLegacyPlugins() {
        return [...this.legacyPlugins];
    }
    /**
     * 品質プラグインの取得
     */
    getQualityPlugins() {
        return [...this.qualityPlugins];
    }
    /**
     * 後方互換性のためのエイリアス
     */
    getPlugins() {
        // 呼び出し元のコンテキストに応じて適切なプラグインを返す
        // デフォルトはレガシープラグイン
        return this.getLegacyPlugins();
    }
    /**
     * レガシープラグインの実行
     * pluginManager.tsの機能を継承
     */
    async runLegacyPlugins(filePath) {
        const issues = [];
        for (const plugin of this.legacyPlugins) {
            try {
                const pluginIssues = await plugin.analyze(filePath);
                issues.push(...pluginIssues);
            }
            catch (error) {
                errorHandler_1.errorHandler.handleError(error, errorHandler_1.ErrorType.PLUGIN_ERROR, `プラグイン ${plugin.name} の実行中にエラーが発生しました`, { pluginName: plugin.name, filePath });
            }
        }
        return issues;
    }
    /**
     * 後方互換性のためのエイリアス
     * parallelAnalyzer.ts等から使用される
     */
    async runAll(filePath) {
        return this.runLegacyPlugins(filePath);
    }
    /**
     * 後方互換性のためのエイリアス
     * テストから使用される
     */
    async run(filePath) {
        const issues = await this.runLegacyPlugins(filePath);
        const errors = [];
        // エラーハンドリング（必要に応じて追加）
        return { issues, errors: errors.length > 0 ? errors : undefined };
    }
    /**
     * 品質分析の実行
     * pluginManagerExtended.tsの機能を継承
     */
    async runQualityAnalysis(testFile, context, options = {}) {
        const startTime = Date.now();
        const results = [];
        const timeout = options.timeout || this.defaultTimeout;
        // 適用可能なプラグインを取得
        const applicablePlugins = this.qualityPlugins.filter(plugin => {
            if (options.skipPlugins?.includes(plugin.id)) {
                return false;
            }
            try {
                return plugin.isApplicable(context);
            }
            catch (error) {
                console.error(`プラグイン ${plugin.id} の適用性チェック中にエラー: ${error}`);
                return false;
            }
        });
        let successfulPlugins = 0;
        let failedPlugins = 0;
        // 各プラグインを実行
        for (const plugin of applicablePlugins) {
            const pluginStartTime = Date.now();
            try {
                // タイムアウト設定付きで実行
                const patterns = await this.executeWithTimeout(plugin.detectPatterns(testFile), timeout, `プラグイン ${plugin.id} がタイムアウトしました`);
                const quality = plugin.evaluateQuality(patterns);
                const improvements = plugin.suggestImprovements(quality);
                results.push({
                    pluginId: plugin.id,
                    pluginName: plugin.name,
                    detectionResults: patterns,
                    qualityScore: quality,
                    improvements,
                    executionTime: Date.now() - pluginStartTime
                });
                successfulPlugins++;
            }
            catch (error) {
                const errorMessage = error instanceof Error ? error.message : String(error);
                results.push({
                    pluginId: plugin.id,
                    pluginName: plugin.name,
                    detectionResults: [],
                    qualityScore: {
                        overall: 0,
                        dimensions: {},
                        confidence: 0.5,
                        details: {
                            strengths: [],
                            weaknesses: [],
                            suggestions: []
                        }
                    },
                    improvements: [],
                    executionTime: Date.now() - pluginStartTime,
                    error: errorMessage
                });
                failedPlugins++;
            }
        }
        return {
            pluginResults: results,
            executionStats: {
                totalPlugins: applicablePlugins.length,
                successfulPlugins,
                failedPlugins,
                totalExecutionTime: Date.now() - startTime
            }
        };
    }
    /**
     * 後方互換性のためのエイリアス
     */
    async analyzeFileQuality(testFile, context, options = {}) {
        return this.runQualityAnalysis(testFile, context, options);
    }
    /**
     * 統合分析の実行（新機能）
     * レガシーと品質プラグインの両方を実行
     */
    async runUnifiedAnalysis(filePath, context, options = {}) {
        // ファイル内容を読み込み
        const fileContent = await this.readFile(filePath);
        const testFile = {
            path: filePath,
            content: fileContent,
            framework: context.testFramework,
            testMethods: this.extractTestCases(fileContent),
            testCount: this.extractTestCases(fileContent).length
        };
        // 並列実行
        const [legacyIssues, qualityResults] = await Promise.all([
            this.runLegacyPlugins(filePath),
            this.runQualityAnalysis(testFile, context, options)
        ]);
        // 統合スコアの計算（オプション）
        const combinedScore = this.calculateCombinedScore(legacyIssues, qualityResults);
        return {
            legacyIssues,
            qualityResults,
            combinedScore
        };
    }
    /**
     * タイムアウト付き実行
     */
    async executeWithTimeout(promise, timeout, errorMessage) {
        const timeoutPromise = new Promise((_, reject) => {
            setTimeout(() => reject(new Error(errorMessage)), timeout);
        });
        return Promise.race([promise, timeoutPromise]);
    }
    /**
     * ファイル読み込み（ヘルパー）
     */
    async readFile(filePath) {
        try {
            const absolutePath = path.isAbsolute(filePath)
                ? filePath
                : path.join(this.projectRoot, filePath);
            return await fs.promises.readFile(absolutePath, 'utf-8');
        }
        catch (error) {
            return '';
        }
    }
    /**
     * import文の抽出（簡易実装）
     */
    extractImports(content) {
        const importRegex = /import\s+(?:.*\s+from\s+)?['"]([^'"]+)['"]/g;
        const imports = [];
        let match;
        while ((match = importRegex.exec(content)) !== null) {
            imports.push(match[1]);
        }
        return imports;
    }
    /**
     * テストケースの抽出（簡易実装）
     */
    extractTestCases(content) {
        const testRegex = /(?:(it|test|describe))\s*\(['"]([^'"]+)['"]/g;
        const testCases = [];
        let match;
        let lineNumber = 1;
        while ((match = testRegex.exec(content)) !== null) {
            // 簡易的な行番号計算
            const beforeMatch = content.substring(0, match.index);
            lineNumber = beforeMatch.split('\n').length;
            testCases.push({
                name: match[2],
                type: match[1] === 'describe' ? 'suite' : 'test',
                location: {
                    start: { line: lineNumber, column: 0 },
                    end: { line: lineNumber, column: match[0].length }
                }
            });
        }
        return testCases;
    }
    /**
     * 統合スコアの計算
     */
    calculateCombinedScore(legacyIssues, qualityResults) {
        // レガシーIssueによる減点
        const legacyPenalty = legacyIssues.length * 5;
        // 品質スコアの平均
        const qualityScores = qualityResults.pluginResults
            .filter(r => !r.error)
            .map(r => r.qualityScore.overall || 0);
        const avgQualityScore = qualityScores.length > 0
            ? qualityScores.reduce((a, b) => (a || 0) + (b || 0), 0) / qualityScores.length
            : 50;
        // 統合スコア（0-100の範囲に正規化）
        return Math.max(0, Math.min(100, avgQualityScore - legacyPenalty));
    }
}
exports.UnifiedPluginManager = UnifiedPluginManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,