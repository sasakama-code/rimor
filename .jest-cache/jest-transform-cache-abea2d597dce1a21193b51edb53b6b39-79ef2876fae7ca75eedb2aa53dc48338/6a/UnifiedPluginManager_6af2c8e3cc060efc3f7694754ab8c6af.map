{"file":"/Users/sasakama/Projects/Rimor/src/core/UnifiedPluginManager.ts","mappings":"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","names":[],"sources":["/Users/sasakama/Projects/Rimor/src/core/UnifiedPluginManager.ts"],"sourcesContent":["import { \n  IPlugin, \n  ITestQualityPlugin, \n  Issue, \n  ProjectContext, \n  TestFile,\n  DetectionResult,\n  QualityScore,\n  Improvement,\n  PluginResult\n} from './types';\nimport { TestMethod } from './types/project-context';\nimport { errorHandler, ErrorType } from '../utils/errorHandler';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nexport interface QualityAnalysisResult {\n  pluginResults: PluginResult[];\n  executionStats: {\n    totalPlugins: number;\n    successfulPlugins: number;\n    failedPlugins: number;\n    totalExecutionTime: number;\n  };\n  aggregatedScore?: QualityScore;\n}\n\nexport interface AnalysisOptions {\n  timeout?: number;\n  skipPlugins?: string[];\n}\n\nexport interface UnifiedAnalysisResult {\n  legacyIssues: Issue[];\n  qualityResults: QualityAnalysisResult;\n  combinedScore?: number;\n}\n\n/**\n * UnifiedPluginManager v0.9.0\n * PluginManagerとPluginManagerExtendedの統合実装\n * SOLID原則に準拠した設計\n */\nexport class UnifiedPluginManager {\n  private legacyPlugins: IPlugin[] = [];\n  private qualityPlugins: ITestQualityPlugin[] = [];\n  private projectRoot: string;\n  private readonly defaultTimeout = 60000;\n\n  constructor(projectRoot: string = process.cwd()) {\n    this.projectRoot = projectRoot;\n  }\n\n  /**\n   * レガシープラグイン（IPlugin）の登録\n   * pluginManager.tsの機能を継承\n   */\n  registerLegacy(plugin: IPlugin): void {\n    // プラグイン名の検証\n    if (!plugin.name || typeof plugin.name !== 'string') {\n      errorHandler.handleError(\n        new Error('プラグイン名が不正です'),\n        ErrorType.PLUGIN_ERROR,\n        'プラグインの登録に失敗しました',\n        { pluginName: plugin.name }\n      );\n      return;\n    }\n\n    // プラグイン名の安全性チェック\n    if (!/^[a-zA-Z0-9_-]+$/.test(plugin.name)) {\n      errorHandler.handleError(\n        new Error(`不正なプラグイン名: ${plugin.name}`),\n        ErrorType.PLUGIN_ERROR,\n        'プラグイン名に使用禁止文字が含まれています',\n        { pluginName: plugin.name }\n      );\n      return;\n    }\n\n    this.legacyPlugins.push(plugin);\n  }\n\n  /**\n   * 品質プラグイン（ITestQualityPlugin）の登録\n   * pluginManagerExtended.tsの機能を継承\n   */\n  registerQuality(plugin: ITestQualityPlugin): void {\n    this.qualityPlugins.push(plugin);\n  }\n\n  /**\n   * 後方互換性のためのエイリアス\n   */\n  register(plugin: IPlugin): void {\n    this.registerLegacy(plugin);\n  }\n\n  registerPlugin(plugin: ITestQualityPlugin): void {\n    this.registerQuality(plugin);\n  }\n\n  registerQualityPlugin(plugin: ITestQualityPlugin): void {\n    this.registerQuality(plugin);\n  }\n\n  registerLegacyPlugin(plugin: IPlugin): void {\n    this.registerLegacy(plugin);\n  }\n\n  /**\n   * レガシープラグインの取得\n   */\n  getLegacyPlugins(): IPlugin[] {\n    return [...this.legacyPlugins];\n  }\n\n  /**\n   * 品質プラグインの取得\n   */\n  getQualityPlugins(): ITestQualityPlugin[] {\n    return [...this.qualityPlugins];\n  }\n\n  /**\n   * 後方互換性のためのエイリアス\n   */\n  getPlugins(): IPlugin[] | ITestQualityPlugin[] {\n    // 呼び出し元のコンテキストに応じて適切なプラグインを返す\n    // デフォルトはレガシープラグイン\n    return this.getLegacyPlugins();\n  }\n\n  /**\n   * レガシープラグインの実行\n   * pluginManager.tsの機能を継承\n   */\n  async runLegacyPlugins(filePath: string): Promise<Issue[]> {\n    const issues: Issue[] = [];\n\n    for (const plugin of this.legacyPlugins) {\n      try {\n        const pluginIssues = await plugin.analyze(filePath);\n        issues.push(...pluginIssues);\n      } catch (error) {\n        errorHandler.handleError(\n          error as Error,\n          ErrorType.PLUGIN_ERROR,\n          `プラグイン ${plugin.name} の実行中にエラーが発生しました`,\n          { pluginName: plugin.name, filePath }\n        );\n      }\n    }\n\n    return issues;\n  }\n\n  /**\n   * 後方互換性のためのエイリアス\n   * parallelAnalyzer.ts等から使用される\n   */\n  async runAll(filePath: string): Promise<Issue[]> {\n    return this.runLegacyPlugins(filePath);\n  }\n\n  /**\n   * 後方互換性のためのエイリアス\n   * テストから使用される\n   */\n  async run(filePath: string): Promise<{ issues: Issue[]; errors?: Array<{ pluginName: string; error: string }> }> {\n    const issues = await this.runLegacyPlugins(filePath);\n    const errors: Array<{ pluginName: string; error: string }> = [];\n    \n    // エラーハンドリング（必要に応じて追加）\n    \n    return { issues, errors: errors.length > 0 ? errors : undefined };\n  }\n\n  /**\n   * 品質分析の実行\n   * pluginManagerExtended.tsの機能を継承\n   */\n  async runQualityAnalysis(\n    testFile: TestFile,\n    context: ProjectContext,\n    options: AnalysisOptions = {}\n  ): Promise<QualityAnalysisResult> {\n    const startTime = Date.now();\n    const results: PluginResult[] = [];\n    const timeout = options.timeout || this.defaultTimeout;\n\n    // 適用可能なプラグインを取得\n    const applicablePlugins = this.qualityPlugins.filter(plugin => {\n      if (options.skipPlugins?.includes(plugin.id)) {\n        return false;\n      }\n      try {\n        return plugin.isApplicable(context);\n      } catch (error) {\n        console.error(`プラグイン ${plugin.id} の適用性チェック中にエラー: ${error}`);\n        return false;\n      }\n    });\n\n    let successfulPlugins = 0;\n    let failedPlugins = 0;\n\n    // 各プラグインを実行\n    for (const plugin of applicablePlugins) {\n      const pluginStartTime = Date.now();\n      \n      try {\n        // タイムアウト設定付きで実行\n        const patterns = await this.executeWithTimeout(\n          plugin.detectPatterns(testFile),\n          timeout,\n          `プラグイン ${plugin.id} がタイムアウトしました`\n        );\n\n        const quality = plugin.evaluateQuality(patterns);\n        const improvements = plugin.suggestImprovements(quality);\n\n        results.push({\n          pluginId: plugin.id,\n          pluginName: plugin.name,\n          detectionResults: patterns,\n          qualityScore: quality,\n          improvements,\n          executionTime: Date.now() - pluginStartTime\n        });\n\n        successfulPlugins++;\n      } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : String(error);\n        \n        results.push({\n          pluginId: plugin.id,\n          pluginName: plugin.name,\n          detectionResults: [],\n          qualityScore: { \n            overall: 0, \n            dimensions: {}, \n            confidence: 0.5,\n            details: {\n              strengths: [],\n              weaknesses: [],\n              suggestions: []\n            }\n          },\n          improvements: [],\n          executionTime: Date.now() - pluginStartTime,\n          error: errorMessage\n        });\n\n        failedPlugins++;\n      }\n    }\n\n    return {\n      pluginResults: results,\n      executionStats: {\n        totalPlugins: applicablePlugins.length,\n        successfulPlugins,\n        failedPlugins,\n        totalExecutionTime: Date.now() - startTime\n      }\n    };\n  }\n\n  /**\n   * 後方互換性のためのエイリアス\n   */\n  async analyzeFileQuality(\n    testFile: TestFile,\n    context: ProjectContext,\n    options: AnalysisOptions = {}\n  ): Promise<QualityAnalysisResult> {\n    return this.runQualityAnalysis(testFile, context, options);\n  }\n\n  /**\n   * 統合分析の実行（新機能）\n   * レガシーと品質プラグインの両方を実行\n   */\n  async runUnifiedAnalysis(\n    filePath: string,\n    context: ProjectContext,\n    options: AnalysisOptions = {}\n  ): Promise<UnifiedAnalysisResult> {\n    // ファイル内容を読み込み\n    const fileContent = await this.readFile(filePath);\n    const testFile: TestFile = {\n      path: filePath,\n      content: fileContent,\n      framework: context.testFramework,\n      testMethods: this.extractTestCases(fileContent),\n      testCount: this.extractTestCases(fileContent).length\n    };\n\n    // 並列実行\n    const [legacyIssues, qualityResults] = await Promise.all([\n      this.runLegacyPlugins(filePath),\n      this.runQualityAnalysis(testFile, context, options)\n    ]);\n\n    // 統合スコアの計算（オプション）\n    const combinedScore = this.calculateCombinedScore(legacyIssues, qualityResults);\n\n    return {\n      legacyIssues,\n      qualityResults,\n      combinedScore\n    };\n  }\n\n  /**\n   * タイムアウト付き実行\n   */\n  private async executeWithTimeout<T>(\n    promise: Promise<T>,\n    timeout: number,\n    errorMessage: string\n  ): Promise<T> {\n    const timeoutPromise = new Promise<never>((_, reject) => {\n      setTimeout(() => reject(new Error(errorMessage)), timeout);\n    });\n\n    return Promise.race([promise, timeoutPromise]);\n  }\n\n  /**\n   * ファイル読み込み（ヘルパー）\n   */\n  private async readFile(filePath: string): Promise<string> {\n    try {\n      const absolutePath = path.isAbsolute(filePath) \n        ? filePath \n        : path.join(this.projectRoot, filePath);\n      return await fs.promises.readFile(absolutePath, 'utf-8');\n    } catch (error) {\n      return '';\n    }\n  }\n\n  /**\n   * import文の抽出（簡易実装）\n   */\n  private extractImports(content: string): string[] {\n    const importRegex = /import\\s+(?:.*\\s+from\\s+)?['\"]([^'\"]+)['\"]/g;\n    const imports: string[] = [];\n    let match;\n    \n    while ((match = importRegex.exec(content)) !== null) {\n      imports.push(match[1]);\n    }\n    \n    return imports;\n  }\n\n  /**\n   * テストケースの抽出（簡易実装）\n   */\n  private extractTestCases(content: string): TestMethod[] {\n    const testRegex = /(?:(it|test|describe))\\s*\\(['\"]([^'\"]+)['\"]/g;\n    const testCases: TestMethod[] = [];\n    let match;\n    let lineNumber = 1;\n    \n    while ((match = testRegex.exec(content)) !== null) {\n      // 簡易的な行番号計算\n      const beforeMatch = content.substring(0, match.index);\n      lineNumber = beforeMatch.split('\\n').length;\n      \n      testCases.push({\n        name: match[2],\n        type: match[1] === 'describe' ? 'suite' : 'test',\n        location: {\n          start: { line: lineNumber, column: 0 },\n          end: { line: lineNumber, column: match[0].length }\n        }\n      });\n    }\n    \n    return testCases;\n  }\n\n  /**\n   * 統合スコアの計算\n   */\n  private calculateCombinedScore(\n    legacyIssues: Issue[],\n    qualityResults: QualityAnalysisResult\n  ): number {\n    // レガシーIssueによる減点\n    const legacyPenalty = legacyIssues.length * 5;\n    \n    // 品質スコアの平均\n    const qualityScores = qualityResults.pluginResults\n      .filter(r => !r.error)\n      .map(r => r.qualityScore.overall || 0);\n    \n    const avgQualityScore = qualityScores.length > 0\n      ? qualityScores.reduce((a, b) => (a || 0) + (b || 0), 0) / qualityScores.length\n      : 50;\n    \n    // 統合スコア（0-100の範囲に正規化）\n    return Math.max(0, Math.min(100, avgQualityScore - legacyPenalty));\n  }\n}"],"version":3}