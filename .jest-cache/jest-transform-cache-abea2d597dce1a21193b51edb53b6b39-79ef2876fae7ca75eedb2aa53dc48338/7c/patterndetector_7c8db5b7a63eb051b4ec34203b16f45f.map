{"file":"/Users/sasakama/Projects/Rimor/src/analyzers/structure-analysis/pattern-detector.ts","mappings":"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","names":[],"sources":["/Users/sasakama/Projects/Rimor/src/analyzers/structure-analysis/pattern-detector.ts"],"sourcesContent":["import { ProjectStructure } from '../types';\n\n/**\n * デザインパターン検出結果\n */\nexport interface DesignPattern {\n  type: string;\n  confidence: number;\n  location: string;\n  description?: string;\n}\n\n/**\n * アンチパターン検出結果\n */\nexport interface AntiPattern {\n  type: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  location: string;\n  recommendation: string;\n  description?: string;\n}\n\n/**\n * パターン分析レポート\n */\nexport interface PatternAnalysis {\n  designPatterns: DesignPattern[];\n  antiPatterns: AntiPattern[];\n  recommendations: PatternRecommendation[];\n  score: number;\n}\n\n/**\n * パターン改善推奨事項\n */\nexport interface PatternRecommendation {\n  pattern: string;\n  action: string;\n  priority: 'low' | 'medium' | 'high';\n  estimatedEffort?: string;\n}\n\n/**\n * パターンレポート\n */\nexport interface PatternReport {\n  summary: {\n    totalDesignPatterns: number;\n    totalAntiPatterns: number;\n    overallScore: number;\n    grade: string;\n  };\n  designPatterns: DesignPattern[];\n  antiPatterns: AntiPattern[];\n  recommendations: PatternRecommendation[];\n  metrics: {\n    patternDiversity: number;\n    antiPatternSeverity: number;\n  };\n}\n\n/**\n * デザインパターン・アンチパターン検出器\n * SOLID原則、DRY原則、KISS原則に基づいた実装\n */\nexport class PatternDetector {\n  // デザインパターンの検出パターン\n  private readonly DESIGN_PATTERNS = {\n    Singleton: {\n      indicators: ['private static instance', 'getInstance', 'private constructor'],\n      confidence: 0.9\n    },\n    Factory: {\n      indicators: ['Factory', 'create', 'switch', 'case', 'return new'],\n      confidence: 0.8\n    },\n    Observer: {\n      indicators: ['listeners', 'on(', 'emit(', 'subscribe', 'notify', 'observers'],\n      confidence: 0.85\n    },\n    Strategy: {\n      indicators: ['Strategy', 'algorithm', 'execute', 'interface', 'implements'],\n      confidence: 0.75\n    },\n    Builder: {\n      indicators: ['Builder', 'build(', 'with', 'set', 'return this'],\n      confidence: 0.8\n    },\n    Decorator: {\n      indicators: ['Decorator', 'wrapper', 'extends', 'super(', 'enhance'],\n      confidence: 0.75\n    }\n  };\n\n  // アンチパターンの検出パターン\n  private readonly ANTI_PATTERNS = {\n    'God Object': {\n      indicators: {\n        methodCount: 20,\n        propertyCount: 15,\n        responsibilities: 5\n      },\n      severity: 'high' as const\n    },\n    'Spaghetti Code': {\n      indicators: {\n        maxNestingLevel: 5,\n        cyclomaticComplexity: 20\n      },\n      severity: 'medium' as const\n    },\n    'Copy-Paste Programming': {\n      indicators: {\n        duplicateThreshold: 0.7,\n        minLines: 5\n      },\n      severity: 'medium' as const\n    },\n    'Magic Numbers': {\n      indicators: {\n        pattern: /(?<![\\w])(?:[1-9]\\d{2,}|[2-9]\\d)(?![\\w])/g\n      },\n      severity: 'low' as const\n    },\n    'Dead Code': {\n      indicators: {\n        unusedPattern: /^\\s*\\/\\/.*$|^\\s*\\/\\*[\\s\\S]*?\\*\\//gm\n      },\n      severity: 'low' as const\n    }\n  };\n\n  /**\n   * デザインパターンを検出\n   */\n  detectDesignPatterns(fileContent: string, fileName: string): DesignPattern[] {\n    const patterns: DesignPattern[] = [];\n\n    try {\n      // Singleton パターン検出\n      if (this.isSingletonPattern(fileContent)) {\n        patterns.push({\n          type: 'Singleton',\n          confidence: this.DESIGN_PATTERNS.Singleton.confidence,\n          location: fileName,\n          description: 'Singleton pattern ensures only one instance of a class exists'\n        });\n      }\n\n      // Factory パターン検出\n      if (this.isFactoryPattern(fileContent)) {\n        patterns.push({\n          type: 'Factory',\n          confidence: this.DESIGN_PATTERNS.Factory.confidence,\n          location: fileName,\n          description: 'Factory pattern provides an interface for creating objects'\n        });\n      }\n\n      // Observer パターン検出\n      if (this.isObserverPattern(fileContent)) {\n        patterns.push({\n          type: 'Observer',\n          confidence: this.DESIGN_PATTERNS.Observer.confidence,\n          location: fileName,\n          description: 'Observer pattern defines a one-to-many dependency between objects'\n        });\n      }\n\n      // Strategy パターン検出\n      if (this.isStrategyPattern(fileContent)) {\n        patterns.push({\n          type: 'Strategy',\n          confidence: this.DESIGN_PATTERNS.Strategy.confidence,\n          location: fileName,\n          description: 'Strategy pattern defines a family of algorithms'\n        });\n      }\n\n      // Builder パターン検出\n      if (this.isBuilderPattern(fileContent)) {\n        patterns.push({\n          type: 'Builder',\n          confidence: this.DESIGN_PATTERNS.Builder.confidence,\n          location: fileName,\n          description: 'Builder pattern separates object construction from representation'\n        });\n      }\n\n      // Decorator パターン検出\n      if (this.isDecoratorPattern(fileContent)) {\n        patterns.push({\n          type: 'Decorator',\n          confidence: this.DESIGN_PATTERNS.Decorator.confidence,\n          location: fileName,\n          description: 'Decorator pattern adds new functionality to objects dynamically'\n        });\n      }\n    } catch (error) {\n      // エラーハンドリング（Defensive Programming）\n      console.error(`Error detecting design patterns in ${fileName}:`, error);\n    }\n\n    return patterns;\n  }\n\n  /**\n   * アンチパターンを検出\n   */\n  detectAntiPatterns(fileContent: string, fileName: string): AntiPattern[] {\n    const antiPatterns: AntiPattern[] = [];\n\n    try {\n      // God Object検出\n      if (this.isGodObject(fileContent)) {\n        antiPatterns.push({\n          type: 'God Object',\n          severity: 'high',\n          location: fileName,\n          recommendation: 'Consider applying Single Responsibility Principle. Break down the class into smaller, focused classes.',\n          description: 'Class has too many responsibilities'\n        });\n      }\n\n      // Spaghetti Code検出\n      if (this.isSpaghettiCode(fileContent)) {\n        antiPatterns.push({\n          type: 'Spaghetti Code',\n          severity: 'medium',\n          location: fileName,\n          recommendation: 'Consider refactoring deeply nested code. Extract methods and apply early returns.',\n          description: 'Code has excessive nesting and complexity'\n        });\n      }\n\n      // Copy-Paste Programming検出\n      if (this.isCopyPasteProgramming(fileContent)) {\n        antiPatterns.push({\n          type: 'Copy-Paste Programming',\n          severity: 'medium',\n          location: fileName,\n          recommendation: 'Apply DRY principle. Extract common logic into reusable functions or classes.',\n          description: 'Duplicate code detected'\n        });\n      }\n\n      // Magic Numbers検出\n      if (this.hasMagicNumbers(fileContent)) {\n        antiPatterns.push({\n          type: 'Magic Numbers',\n          severity: 'low',\n          location: fileName,\n          recommendation: 'Replace magic numbers with named constants for better readability.',\n          description: 'Hardcoded numeric values detected'\n        });\n      }\n\n      // Dead Code検出\n      if (this.hasDeadCode(fileContent)) {\n        antiPatterns.push({\n          type: 'Dead Code',\n          severity: 'low',\n          location: fileName,\n          recommendation: 'Remove commented or unused code to improve maintainability.',\n          description: 'Potentially unused code detected'\n        });\n      }\n    } catch (error) {\n      // エラーハンドリング（Defensive Programming）\n      console.error(`Error detecting anti-patterns in ${fileName}:`, error);\n    }\n\n    return antiPatterns;\n  }\n\n  /**\n   * プロジェクト全体のパターンを分析\n   */\n  async analyzeProjectPatterns(projectStructure: ProjectStructure): Promise<PatternAnalysis> {\n    const designPatterns: DesignPattern[] = [];\n    const antiPatterns: AntiPattern[] = [];\n\n    // プロジェクト構造から推測されるパターンを追加\n    if (projectStructure.architecture?.type === 'mvc') {\n      designPatterns.push({\n        type: 'MVC',\n        confidence: projectStructure.architecture.confidence || 0.7,\n        location: 'Project Architecture',\n        description: 'Model-View-Controller architectural pattern'\n      });\n    }\n\n    // ディレクトリ構造からFactoryパターンを検出\n    const hasFactoryDir = projectStructure.directories?.some(\n      dir => dir.path.toLowerCase().includes('factory') || dir.path.toLowerCase().includes('factories')\n    );\n    if (hasFactoryDir) {\n      designPatterns.push({\n        type: 'Factory',\n        confidence: 0.7,\n        location: 'Project Structure',\n        description: 'Factory pattern detected from directory structure'\n      });\n    }\n\n    // メトリクスから問題を検出\n    if (projectStructure.metrics) {\n      const { complexity, maintainability } = projectStructure.metrics;\n      \n      if (complexity?.averageCyclomaticComplexity && complexity.averageCyclomaticComplexity > 20) {\n        antiPatterns.push({\n          type: 'High Complexity',\n          severity: 'high',\n          location: 'Project',\n          recommendation: 'Reduce cyclomatic complexity by extracting methods and simplifying logic.',\n          description: `Average cyclomatic complexity: ${complexity.averageCyclomaticComplexity}`\n        });\n      }\n\n      if (maintainability?.maintainabilityIndex && maintainability.maintainabilityIndex < 50) {\n        antiPatterns.push({\n          type: 'Low Maintainability',\n          severity: 'medium',\n          location: 'Project',\n          recommendation: 'Improve code maintainability through refactoring and better documentation.',\n          description: `Maintainability index: ${maintainability.maintainabilityIndex}`\n        });\n      }\n    }\n\n    // 推奨事項を生成\n    const recommendations = this.generateRecommendations(designPatterns, antiPatterns);\n\n    // スコアを計算\n    const score = this.calculatePatternScore(designPatterns, antiPatterns);\n\n    return {\n      designPatterns,\n      antiPatterns,\n      recommendations,\n      score\n    };\n  }\n\n  /**\n   * パターンレポートを生成\n   */\n  generatePatternReport(analysis: PatternAnalysis): PatternReport {\n    const grade = this.calculateGrade(analysis.score);\n    const patternDiversity = this.calculatePatternDiversity(analysis.designPatterns);\n    const antiPatternSeverity = this.calculateAntiPatternSeverity(analysis.antiPatterns);\n\n    return {\n      summary: {\n        totalDesignPatterns: analysis.designPatterns.length,\n        totalAntiPatterns: analysis.antiPatterns.length,\n        overallScore: analysis.score,\n        grade\n      },\n      designPatterns: analysis.designPatterns,\n      antiPatterns: analysis.antiPatterns,\n      recommendations: analysis.recommendations,\n      metrics: {\n        patternDiversity,\n        antiPatternSeverity\n      }\n    };\n  }\n\n  // プライベートヘルパーメソッド（KISS原則に従いシンプルに実装）\n\n  private isSingletonPattern(content: string): boolean {\n    const indicators = this.DESIGN_PATTERNS.Singleton.indicators;\n    return indicators.filter(indicator => \n      content.toLowerCase().includes(indicator.toLowerCase())\n    ).length >= 2;\n  }\n\n  private isFactoryPattern(content: string): boolean {\n    const indicators = this.DESIGN_PATTERNS.Factory.indicators;\n    return indicators.filter(indicator => \n      content.toLowerCase().includes(indicator.toLowerCase())\n    ).length >= 3;\n  }\n\n  private isObserverPattern(content: string): boolean {\n    const indicators = this.DESIGN_PATTERNS.Observer.indicators;\n    return indicators.filter(indicator => \n      content.toLowerCase().includes(indicator.toLowerCase())\n    ).length >= 2;\n  }\n\n  private isStrategyPattern(content: string): boolean {\n    const indicators = this.DESIGN_PATTERNS.Strategy.indicators;\n    return indicators.filter(indicator => \n      content.toLowerCase().includes(indicator.toLowerCase())\n    ).length >= 2;\n  }\n\n  private isBuilderPattern(content: string): boolean {\n    const indicators = this.DESIGN_PATTERNS.Builder.indicators;\n    return indicators.filter(indicator => \n      content.toLowerCase().includes(indicator.toLowerCase())\n    ).length >= 3;\n  }\n\n  private isDecoratorPattern(content: string): boolean {\n    const indicators = this.DESIGN_PATTERNS.Decorator.indicators;\n    return indicators.filter(indicator => \n      content.toLowerCase().includes(indicator.toLowerCase())\n    ).length >= 2;\n  }\n\n  private isGodObject(content: string): boolean {\n    // クラス内のメソッド数をカウント（インデント対応）\n    const methodPatterns = [\n      /\\s+(public|private|protected)?\\s*\\w+\\s*\\([^)]*\\)\\s*[{:]/gm,\n      /\\s+\\w+\\s*\\([^)]*\\)\\s*\\{/gm,  // メソッド定義の簡易形式\n      /\\s+(async\\s+)?\\w+\\s*\\([^)]*\\)\\s*\\{/gm  // async関数も含む\n    ];\n    \n    let methodCount = 0;\n    for (const pattern of methodPatterns) {\n      const matches = content.match(pattern);\n      if (matches) {\n        methodCount = Math.max(methodCount, matches.length);\n      }\n    }\n    \n    // プロパティ数をカウント（インデント対応）\n    const propertyPatterns = [\n      /\\s+(private|public|protected)\\s+\\w+\\s*[:;]/gm,\n      /\\s+private\\s+\\w+:\\s*\\w+/gm  // private property: Type形式\n    ];\n    \n    let propertyCount = 0;\n    for (const pattern of propertyPatterns) {\n      const matches = content.match(pattern);\n      if (matches) {\n        propertyCount = Math.max(propertyCount, matches.length);\n      }\n    }\n\n    // God Objectの判定基準\n    return methodCount >= 12 || \n           (propertyCount >= 7 && methodCount >= 10) ||\n           methodCount > this.ANTI_PATTERNS['God Object'].indicators.methodCount ||\n           propertyCount > this.ANTI_PATTERNS['God Object'].indicators.propertyCount;\n  }\n\n  private isSpaghettiCode(content: string): boolean {\n    const nestingLevel = this.calculateMaxNesting(content);\n    return nestingLevel > this.ANTI_PATTERNS['Spaghetti Code'].indicators.maxNestingLevel;\n  }\n\n  private isCopyPasteProgramming(content: string): boolean {\n    const functions = content.match(/function\\s+\\w+[^{]*{[^}]*}/g) || [];\n    \n    for (let i = 0; i < functions.length; i++) {\n      for (let j = i + 1; j < functions.length; j++) {\n        const similarity = this.calculateSimilarity(functions[i], functions[j]);\n        if (similarity > this.ANTI_PATTERNS['Copy-Paste Programming'].indicators.duplicateThreshold) {\n          return true;\n        }\n      }\n    }\n    \n    return false;\n  }\n\n  private hasMagicNumbers(content: string): boolean {\n    const pattern = this.ANTI_PATTERNS['Magic Numbers'].indicators.pattern;\n    const matches = content.match(pattern);\n    return matches !== null && matches.length > 3;\n  }\n\n  private hasDeadCode(content: string): boolean {\n    const pattern = this.ANTI_PATTERNS['Dead Code'].indicators.unusedPattern;\n    const matches = content.match(pattern);\n    return matches !== null && matches.length > 10;\n  }\n\n  private calculateMaxNesting(content: string): number {\n    let maxNesting = 0;\n    let currentNesting = 0;\n    \n    for (const char of content) {\n      if (char === '{') {\n        currentNesting++;\n        maxNesting = Math.max(maxNesting, currentNesting);\n      } else if (char === '}') {\n        currentNesting = Math.max(0, currentNesting - 1);\n      }\n    }\n    \n    return maxNesting;\n  }\n\n  private calculateSimilarity(str1: string, str2: string): number {\n    const len1 = str1.length;\n    const len2 = str2.length;\n    const maxLen = Math.max(len1, len2);\n    \n    if (maxLen === 0) return 1.0;\n    \n    // 簡易的なレーベンシュタイン距離の実装\n    const distance = this.levenshteinDistance(str1, str2);\n    return 1 - (distance / maxLen);\n  }\n\n  private levenshteinDistance(str1: string, str2: string): number {\n    const matrix: number[][] = [];\n    \n    for (let i = 0; i <= str2.length; i++) {\n      matrix[i] = [i];\n    }\n    \n    for (let j = 0; j <= str1.length; j++) {\n      matrix[0][j] = j;\n    }\n    \n    for (let i = 1; i <= str2.length; i++) {\n      for (let j = 1; j <= str1.length; j++) {\n        if (str2.charAt(i - 1) === str1.charAt(j - 1)) {\n          matrix[i][j] = matrix[i - 1][j - 1];\n        } else {\n          matrix[i][j] = Math.min(\n            matrix[i - 1][j - 1] + 1,\n            matrix[i][j - 1] + 1,\n            matrix[i - 1][j] + 1\n          );\n        }\n      }\n    }\n    \n    return matrix[str2.length][str1.length];\n  }\n\n  private generateRecommendations(\n    designPatterns: DesignPattern[],\n    antiPatterns: AntiPattern[]\n  ): PatternRecommendation[] {\n    const recommendations: PatternRecommendation[] = [];\n\n    // アンチパターンに基づく推奨事項\n    antiPatterns.forEach(antiPattern => {\n      let priority: 'low' | 'medium' | 'high' = 'low';\n      if (antiPattern.severity === 'critical' || antiPattern.severity === 'high') {\n        priority = 'high';\n      } else if (antiPattern.severity === 'medium') {\n        priority = 'medium';\n      }\n\n      recommendations.push({\n        pattern: antiPattern.type,\n        action: antiPattern.recommendation,\n        priority,\n        estimatedEffort: this.estimateEffort(antiPattern)\n      });\n    });\n\n    // デザインパターンの改善提案\n    if (designPatterns.length === 0) {\n      recommendations.push({\n        pattern: 'Design Patterns',\n        action: 'Consider implementing common design patterns to improve code structure and maintainability.',\n        priority: 'low',\n        estimatedEffort: 'Medium'\n      });\n    }\n\n    // 推奨事項を優先度でソート\n    recommendations.sort((a, b) => {\n      const priorityOrder = { high: 0, medium: 1, low: 2 };\n      return priorityOrder[a.priority] - priorityOrder[b.priority];\n    });\n\n    return recommendations;\n  }\n\n  private estimateEffort(antiPattern: AntiPattern): string {\n    switch (antiPattern.severity) {\n      case 'critical':\n        return 'High';\n      case 'high':\n        return 'Medium-High';\n      case 'medium':\n        return 'Medium';\n      case 'low':\n        return 'Low';\n      default:\n        return 'Unknown';\n    }\n  }\n\n  private calculatePatternScore(\n    designPatterns: DesignPattern[],\n    antiPatterns: AntiPattern[]\n  ): number {\n    let score = 100;\n\n    // アンチパターンによる減点\n    antiPatterns.forEach(antiPattern => {\n      switch (antiPattern.severity) {\n        case 'critical':\n          score -= 20;\n          break;\n        case 'high':\n          score -= 15;\n          break;\n        case 'medium':\n          score -= 10;\n          break;\n        case 'low':\n          score -= 5;\n          break;\n      }\n    });\n\n    // デザインパターンによる加点\n    designPatterns.forEach(pattern => {\n      score += pattern.confidence * 5;\n    });\n\n    // スコアを0-100の範囲に制限\n    return Math.max(0, Math.min(100, score));\n  }\n\n  private calculateGrade(score: number): string {\n    if (score >= 90) return 'A';\n    if (score >= 80) return 'B';\n    if (score >= 70) return 'C';\n    if (score >= 60) return 'D';\n    if (score >= 50) return 'E';\n    return 'F';\n  }\n\n  private calculatePatternDiversity(patterns: DesignPattern[]): number {\n    const uniqueTypes = new Set(patterns.map(p => p.type));\n    return uniqueTypes.size / Math.max(1, patterns.length);\n  }\n\n  private calculateAntiPatternSeverity(antiPatterns: AntiPattern[]): number {\n    if (antiPatterns.length === 0) return 0;\n\n    const severityScores = {\n      critical: 4,\n      high: 3,\n      medium: 2,\n      low: 1\n    };\n\n    const totalSeverity = antiPatterns.reduce(\n      (sum, ap) => sum + severityScores[ap.severity],\n      0\n    );\n\n    return totalSeverity / antiPatterns.length;\n  }\n}"],"version":3}