{"file":"/Users/sasakama/Projects/Rimor/src/analyzers/dependency-analysis/usage-analyzer.ts","mappings":"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","names":[],"sources":["/Users/sasakama/Projects/Rimor/src/analyzers/dependency-analysis/usage-analyzer.ts"],"sourcesContent":["/**\n * 使用状況分析クラス\n * 依存関係の使用パターンと頻度を分析\n */\n\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as glob from 'glob';\nimport { DependencyUsageInfo } from '../dependency-types';\n\nexport interface ImportLocation {\n  file: string;\n  line: number;\n}\n\nexport interface ImportDepthAnalysis {\n  maxDepth: number;\n  averageDepth: number;\n  deepImports: Array<{\n    file: string;\n    depth: number;\n  }>;\n}\n\nexport interface UsageCategory {\n  core: string[];        // 頻繁に使用される中核的な依存関係\n  peripheral: string[];  // たまに使用される周辺的な依存関係\n  unused: string[];      // 使用されていない依存関係\n}\n\nexport interface UsageReport {\n  totalPackages: number;\n  usageStatistics: Array<{\n    package: string;\n    frequency: number;\n    percentage: number;\n    locations?: ImportLocation[];\n  }>;\n  categories?: UsageCategory;\n}\n\nexport class UsageAnalyzer {\n  private readonly BUILT_IN_MODULES = new Set([\n    'fs', 'path', 'http', 'https', 'crypto', 'os', 'util', 'stream',\n    'url', 'querystring', 'child_process', 'cluster', 'events',\n    'buffer', 'process', 'console', 'module', 'require', 'assert',\n    'net', 'tls', 'dns', 'readline', 'repl', 'vm', 'zlib'\n  ]);\n\n  private readonly SUPPORTED_EXTENSIONS = ['.js', '.jsx', '.ts', '.tsx', '.mjs', '.cjs'];\n  \n  /**\n   * プロジェクト内で使用されているパッケージを検出\n   */\n  async findUsedPackages(projectPath: string): Promise<string[]> {\n    const usedPackages = new Set<string>();\n    const sourceFiles = glob.sync('**/*.{js,jsx,ts,tsx,mjs,cjs}', {\n      cwd: projectPath,\n      ignore: ['node_modules/**', 'dist/**', 'build/**', 'coverage/**']\n    });\n\n    for (const file of sourceFiles) {\n      const filePath = path.join(projectPath, file);\n      try {\n        const content = fs.readFileSync(filePath, 'utf-8');\n        const imports = this.extractImports(content);\n        \n        imports.forEach(imp => {\n          if (!this.isRelativeImport(imp) && !this.BUILT_IN_MODULES.has(imp)) {\n            const packageName = this.getPackageName(imp);\n            usedPackages.add(packageName);\n          }\n        });\n      } catch (error) {\n        // ファイル読み込みエラーは無視\n      }\n    }\n\n    return Array.from(usedPackages);\n  }\n\n  /**\n   * パッケージの使用頻度を分析\n   */\n  async analyzeUsageFrequency(projectPath: string): Promise<Map<string, number>> {\n    const frequency = new Map<string, number>();\n    const sourceFiles = glob.sync('**/*.{js,jsx,ts,tsx,mjs,cjs}', {\n      cwd: projectPath,\n      ignore: ['node_modules/**', 'dist/**', 'build/**', 'coverage/**']\n    });\n\n    for (const file of sourceFiles) {\n      const filePath = path.join(projectPath, file);\n      try {\n        const content = fs.readFileSync(filePath, 'utf-8');\n        const imports = this.extractImports(content);\n        \n        imports.forEach(imp => {\n          if (!this.isRelativeImport(imp) && !this.BUILT_IN_MODULES.has(imp)) {\n            const packageName = this.getPackageName(imp);\n            frequency.set(packageName, (frequency.get(packageName) || 0) + 1);\n          }\n        });\n      } catch (error) {\n        // ファイル読み込みエラーは無視\n      }\n    }\n\n    return frequency;\n  }\n\n  /**\n   * 特定のパッケージがインポートされている場所を検出\n   */\n  async findImportLocations(projectPath: string, packageName: string): Promise<ImportLocation[]> {\n    const locations: ImportLocation[] = [];\n    const sourceFiles = glob.sync('**/*.{js,jsx,ts,tsx,mjs,cjs}', {\n      cwd: projectPath,\n      ignore: ['node_modules/**', 'dist/**', 'build/**', 'coverage/**']\n    });\n\n    for (const file of sourceFiles) {\n      const filePath = path.join(projectPath, file);\n      try {\n        const content = fs.readFileSync(filePath, 'utf-8');\n        const lines = content.split('\\n');\n        \n        lines.forEach((line, index) => {\n          const imports = this.extractImportsFromLine(line);\n          imports.forEach(imp => {\n            if (!this.isRelativeImport(imp) && this.getPackageName(imp) === packageName) {\n              locations.push({\n                file: filePath,\n                line: index + 1\n              });\n            }\n          });\n        });\n      } catch (error) {\n        // ファイル読み込みエラーは無視\n      }\n    }\n\n    return locations;\n  }\n\n  /**\n   * 循環インポートを検出\n   */\n  async detectCircularImports(projectPath: string): Promise<string[][]> {\n    const graph = await this.buildDependencyGraph(projectPath);\n    const cycles: string[][] = [];\n    const visited = new Set<string>();\n    const recursionStack = new Set<string>();\n\n    const detectCycle = (node: string, path: string[]): void => {\n      visited.add(node);\n      recursionStack.add(node);\n      path.push(node);\n\n      const dependencies = graph.get(node) || new Set<string>();\n      for (const dep of dependencies) {\n        if (!visited.has(dep)) {\n          detectCycle(dep, [...path]);\n        } else if (recursionStack.has(dep)) {\n          // 循環を検出\n          const cycleStart = path.indexOf(dep);\n          if (cycleStart !== -1) {\n            const cycle = [...path.slice(cycleStart), dep];\n            cycles.push(cycle);\n          }\n        }\n      }\n\n      recursionStack.delete(node);\n    };\n\n    for (const node of graph.keys()) {\n      if (!visited.has(node)) {\n        detectCycle(node, []);\n      }\n    }\n\n    return cycles;\n  }\n\n  /**\n   * インポートの深さを分析\n   */\n  async analyzeImportDepth(projectPath: string): Promise<ImportDepthAnalysis> {\n    const depths: number[] = [];\n    const deepImports: Array<{ file: string; depth: number }> = [];\n    const sourceFiles = glob.sync('**/*.{js,jsx,ts,tsx,mjs,cjs}', {\n      cwd: projectPath,\n      ignore: ['node_modules/**', 'dist/**', 'build/**', 'coverage/**']\n    });\n\n    for (const file of sourceFiles) {\n      const depth = file.split('/').length;\n      depths.push(depth);\n      \n      if (depth > 3) {\n        deepImports.push({\n          file: path.join(projectPath, file),\n          depth\n        });\n      }\n    }\n\n    const maxDepth = Math.max(...depths, 0);\n    const averageDepth = depths.length > 0 \n      ? depths.reduce((a, b) => a + b, 0) / depths.length \n      : 0;\n\n    return {\n      maxDepth,\n      averageDepth,\n      deepImports: deepImports.slice(0, 10) // 最も深い10個のみ返す\n    };\n  }\n\n  /**\n   * 使用状況でパッケージを分類\n   */\n  async categorizeUsage(projectPath: string): Promise<UsageCategory> {\n    const frequency = await this.analyzeUsageFrequency(projectPath);\n    const totalImports = Array.from(frequency.values()).reduce((a, b) => a + b, 0);\n    \n    const core: string[] = [];\n    const peripheral: string[] = [];\n    const unused: string[] = [];\n\n    frequency.forEach((count, pkg) => {\n      const percentage = (count / totalImports) * 100;\n      \n      if (count === 0) {\n        unused.push(pkg);\n      } else if (percentage > 5 || count > 5) {\n        core.push(pkg);\n      } else {\n        peripheral.push(pkg);\n      }\n    });\n\n    return { core, peripheral, unused };\n  }\n\n  /**\n   * 使用状況レポートを生成\n   */\n  async generateUsageReport(projectPath: string): Promise<UsageReport> {\n    const packages = await this.findUsedPackages(projectPath);\n    const frequency = await this.analyzeUsageFrequency(projectPath);\n    const categories = await this.categorizeUsage(projectPath);\n    \n    const totalImports = Array.from(frequency.values()).reduce((a, b) => a + b, 0);\n    const usageStatistics = Array.from(frequency.entries()).map(([pkg, count]) => ({\n      package: pkg,\n      frequency: count,\n      percentage: totalImports > 0 ? (count / totalImports) * 100 : 0\n    }));\n\n    // 頻度順にソート\n    usageStatistics.sort((a, b) => b.frequency - a.frequency);\n\n    return {\n      totalPackages: packages.length,\n      usageStatistics,\n      categories\n    };\n  }\n\n  /**\n   * 依存関係グラフを構築（内部使用）\n   * @private\n   */\n  private async buildDependencyGraph(projectPath: string): Promise<Map<string, Set<string>>> {\n    const graph = new Map<string, Set<string>>();\n    \n    // この実装では簡略化のため、パッケージレベルの依存関係のみを扱う\n    // 実際のプロジェクトでは、ファイルレベルの依存関係も考慮する必要がある\n    const sourceFiles = glob.sync('**/*.{js,jsx,ts,tsx,mjs,cjs}', {\n      cwd: projectPath,\n      ignore: ['node_modules/**', 'dist/**', 'build/**', 'coverage/**']\n    });\n\n    for (const file of sourceFiles) {\n      const filePath = path.join(projectPath, file);\n      try {\n        const content = fs.readFileSync(filePath, 'utf-8');\n        const imports = this.extractImports(content);\n        const filePackages = new Set<string>();\n        \n        imports.forEach(imp => {\n          if (!this.isRelativeImport(imp) && !this.BUILT_IN_MODULES.has(imp)) {\n            filePackages.add(this.getPackageName(imp));\n          }\n        });\n        \n        // 簡略化: ファイル名をノードとして使用\n        const fileName = path.basename(file, path.extname(file));\n        graph.set(fileName, filePackages);\n      } catch (error) {\n        // エラーは無視\n      }\n    }\n    \n    return graph;\n  }\n\n  /**\n   * コードからimport/requireを抽出\n   * @private\n   */\n  private extractImports(content: string): Set<string> {\n    const imports = new Set<string>();\n    \n    // ES6 imports\n    const importRegex = /import\\s+(?:.*?\\s+from\\s+)?['\"]([^'\"]+)['\"]/g;\n    let match;\n    while ((match = importRegex.exec(content)) !== null) {\n      imports.add(match[1]);\n    }\n    \n    // CommonJS requires\n    const requireRegex = /require\\s*\\(\\s*['\"]([^'\"]+)['\"]\\s*\\)/g;\n    while ((match = requireRegex.exec(content)) !== null) {\n      imports.add(match[1]);\n    }\n    \n    // Dynamic imports\n    const dynamicImportRegex = /import\\s*\\(\\s*['\"]([^'\"]+)['\"]\\s*\\)/g;\n    while ((match = dynamicImportRegex.exec(content)) !== null) {\n      imports.add(match[1]);\n    }\n\n    return imports;\n  }\n\n  /**\n   * 一行からimportを抽出\n   * @private\n   */\n  private extractImportsFromLine(line: string): Set<string> {\n    const imports = new Set<string>();\n    \n    // ES6 imports\n    const importMatch = /import\\s+(?:.*?\\s+from\\s+)?['\"]([^'\"]+)['\"]/g.exec(line);\n    if (importMatch) {\n      imports.add(importMatch[1]);\n    }\n    \n    // CommonJS requires\n    const requireMatch = /require\\s*\\(\\s*['\"]([^'\"]+)['\"]\\s*\\)/g.exec(line);\n    if (requireMatch) {\n      imports.add(requireMatch[1]);\n    }\n\n    return imports;\n  }\n\n  /**\n   * 相対インポートかどうかを判定\n   * @private\n   */\n  private isRelativeImport(importPath: string): boolean {\n    return importPath.startsWith('./') || \n           importPath.startsWith('../') || \n           importPath.startsWith('/');\n  }\n\n  /**\n   * インポートパスからパッケージ名を取得\n   * @private\n   */\n  private getPackageName(importPath: string): string {\n    // スコープ付きパッケージの場合\n    if (importPath.startsWith('@')) {\n      const parts = importPath.split('/');\n      return parts.slice(0, 2).join('/');\n    }\n    // 通常のパッケージ\n    return importPath.split('/')[0];\n  }\n}"],"version":3}