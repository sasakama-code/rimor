{"file":"/Users/sasakama/Projects/Rimor/src/security/analysis/flow.ts","mappings":"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","names":[],"sources":["/Users/sasakama/Projects/Rimor/src/security/analysis/flow.ts"],"sourcesContent":["/**\n * 型ベースセキュリティ解析 - フロー感度のあるテスト解析\n * データフロー追跡とセキュリティ不変条件の検証\n * \n * TypeScript Compiler APIを使用したAST解析による実装\n */\n\nimport * as ts from 'typescript';\nimport {\n  Position\n} from '../../core/types';\n\nimport {\n  FlowGraph,\n  FlowNode,\n  FlowPath,\n  SecurityViolation,\n  TaintMetadata,\n  TestStatement,\n  TaintSourceInfo,\n  SanitizerInfo,\n  SecuritySinkInfo,\n  AnalysisOptions,\n  TaintPropagationResult,\n  TaintFlowAnalysisResult,\n  TaintViolation,\n  ReachabilityAnalysisResult,\n  CycleDetectionResult,\n  TypeFlowAnalysisResult,\n  TypeTransition,\n  TypeViolation,\n  TaintLevel,\n  TaintSource,\n  SecuritySink,\n  SanitizerType,\n  TestMethodExtended as TestMethod\n} from '../types/flow-types';\n\n// 必要な型を再エクスポート（engine.tsから使用）\nexport type { FlowGraph } from '../types/flow-types';\n\n/**\n * フロー感度のあるテスト解析器\n * TypeScript Compiler APIを活用した完全なAST解析\n */\nexport class FlowSensitiveAnalyzer {\n  private sourceFile: ts.SourceFile | null = null;\n  private typeChecker: ts.TypeChecker | null = null;\n  private nodeIdCounter = 0;\n  private flowNodes: Map<string, FlowNode> = new Map();\n\n  /**\n   * テスト内のセキュリティ関連データフローを追跡\n   */\n  trackSecurityDataFlow(test: TestMethod): FlowGraph {\n    // ソースファイルの作成\n    this.sourceFile = ts.createSourceFile(\n      test.filePath || 'test.ts',\n      test.content || '',\n      ts.ScriptTarget.Latest,\n      true\n    );\n\n    // フローグラフの構築\n    const flowGraph = this.buildFlowGraphFromAST(this.sourceFile);\n\n    // 汚染源、サニタイザー、シンクの識別\n    this.identifySpecialNodes(flowGraph);\n\n    // パス感度解析\n    this.analyzePaths(flowGraph);\n\n    // セキュリティ不変条件の検証\n    flowGraph.violations = this.verifySecurityInvariants(flowGraph);\n\n    return flowGraph;\n  }\n\n  /**\n   * ASTからフローグラフを構築\n   */\n  private buildFlowGraphFromAST(sourceFile: ts.SourceFile): FlowGraph {\n    this.flowNodes.clear();\n    this.nodeIdCounter = 0;\n\n    const entryNode = this.createFlowNode('entry', {\n      id: `stmt_${this.nodeIdCounter++}`,\n      type: 'entry',\n      content: '',\n      location: { line: 1, column: 0 } as Position\n    });\n\n    // ASTをトラバースしてフローノードを構築\n    const exitNode = this.traverseAST(sourceFile, entryNode);\n\n    // パスの計算\n    const paths = this.calculateAllPaths(entryNode.id, exitNode.id);\n\n    return {\n      nodes: this.flowNodes,\n      edges: [],\n      entryNode: entryNode.id,\n      exitNodes: [exitNode.id],\n      taintSources: [],\n      securitySinks: [],\n      sanitizers: [],\n      paths,\n      violations: []\n    };\n  }\n\n  /**\n   * ASTをトラバースしてフローノードを構築\n   */\n  private traverseAST(node: ts.Node, previousNode: FlowNode): FlowNode {\n    let currentNode = previousNode;\n\n    ts.forEachChild(node, (child) => {\n      switch (child.kind) {\n        case ts.SyntaxKind.VariableStatement:\n          currentNode = this.handleVariableStatement(child as ts.VariableStatement, currentNode);\n          break;\n        \n        case ts.SyntaxKind.ExpressionStatement:\n          currentNode = this.handleExpressionStatement(child as ts.ExpressionStatement, currentNode);\n          break;\n        \n        case ts.SyntaxKind.IfStatement:\n          currentNode = this.handleIfStatement(child as ts.IfStatement, currentNode);\n          break;\n        \n        case ts.SyntaxKind.ForStatement:\n        case ts.SyntaxKind.WhileStatement:\n        case ts.SyntaxKind.DoStatement:\n          currentNode = this.handleLoopStatement(child as ts.IterationStatement, currentNode);\n          break;\n        \n        case ts.SyntaxKind.CallExpression:\n          currentNode = this.handleCallExpression(child as ts.CallExpression, currentNode);\n          break;\n        \n        case ts.SyntaxKind.ReturnStatement:\n          currentNode = this.handleReturnStatement(child as ts.ReturnStatement, currentNode);\n          break;\n        \n        default:\n          currentNode = this.traverseAST(child, currentNode);\n      }\n    });\n\n    return currentNode;\n  }\n\n  /**\n   * 変数宣言文の処理\n   */\n  private handleVariableStatement(stmt: ts.VariableStatement, previousNode: FlowNode): FlowNode {\n    const declaration = stmt.declarationList.declarations[0];\n    if (!declaration) return previousNode;\n\n    const varName = declaration.name.getText(this.sourceFile!);\n    const initializer = declaration.initializer?.getText(this.sourceFile!) || '';\n\n    const statement: TestStatement = {\n      id: `stmt_${this.nodeIdCounter++}`,\n      type: 'assignment',\n      content: stmt.getText(this.sourceFile!),\n      location: this.getLocationFromNode(stmt),\n      lhs: varName,\n      rhs: initializer\n    };\n\n    const newNode = this.createFlowNode(`assign_${varName}`, statement);\n    this.connectNodes(previousNode, newNode);\n\n    // 汚染解析\n    if (this.isUserInput(initializer)) {\n      newNode.outputTaint = TaintLevel.DEFINITELY_TAINTED;\n      newNode.metadata = this.createTaintMetadata(TaintSource.USER_INPUT, newNode);\n    }\n\n    return newNode;\n  }\n\n  /**\n   * 式文の処理\n   */\n  private handleExpressionStatement(stmt: ts.ExpressionStatement, previousNode: FlowNode): FlowNode {\n    const expression = stmt.expression;\n    \n    if (ts.isCallExpression(expression)) {\n      return this.handleCallExpression(expression, previousNode);\n    }\n\n    const statement: TestStatement = {\n      id: `stmt_${this.nodeIdCounter++}`,\n      type: 'methodCall',\n      content: stmt.getText(this.sourceFile!),\n      location: this.getLocationFromNode(stmt)\n    };\n\n    const newNode = this.createFlowNode(`expr_${this.nodeIdCounter}`, statement);\n    this.connectNodes(previousNode, newNode);\n    \n    return newNode;\n  }\n\n  /**\n   * 関数呼び出しの処理\n   */\n  private handleCallExpression(expr: ts.CallExpression, previousNode: FlowNode): FlowNode {\n    const methodName = expr.expression.getText(this.sourceFile!);\n    const args = expr.arguments.map(arg => arg.getText(this.sourceFile!));\n\n    const statement: TestStatement = {\n      id: `stmt_${this.nodeIdCounter++}`,\n      type: 'methodCall',\n      content: expr.getText(this.sourceFile!),\n      location: this.getLocationFromNode(expr),\n      method: methodName,\n      arguments: args\n    };\n\n    // アサーションの検出\n    if (this.isAssertion(methodName)) {\n      statement.type = 'assertion';\n      statement.actual = args[0] || '';\n    }\n\n    // サニタイザーの検出\n    if (this.isSanitizer(methodName)) {\n      statement.type = 'sanitizer';\n    }\n\n    const newNode = this.createFlowNode(`call_${methodName}`, statement);\n    this.connectNodes(previousNode, newNode);\n\n    // 汚染の伝播または除去\n    if (this.isSanitizer(methodName)) {\n      newNode.outputTaint = TaintLevel.UNTAINTED;\n    } else {\n      // 引数から汚染を伝播\n      newNode.inputTaint = previousNode.outputTaint;\n      newNode.outputTaint = previousNode.outputTaint;\n    }\n\n    return newNode;\n  }\n\n  /**\n   * If文の処理\n   */\n  private handleIfStatement(stmt: ts.IfStatement, previousNode: FlowNode): FlowNode {\n    const condition = stmt.expression.getText(this.sourceFile!);\n    \n    const branchNode = this.createFlowNode(`if_${condition}`, {\n      id: `stmt_${this.nodeIdCounter++}`,\n      type: 'methodCall',\n      content: `if (${condition})`,\n      location: this.getLocationFromNode(stmt)\n    });\n    this.connectNodes(previousNode, branchNode);\n\n    // Then ブランチ\n    const thenExit = this.traverseAST(stmt.thenStatement, branchNode);\n\n    // Else ブランチ\n    let elseExit = branchNode;\n    if (stmt.elseStatement) {\n      elseExit = this.traverseAST(stmt.elseStatement, branchNode);\n    }\n\n    // マージポイント\n    const mergeNode = this.createFlowNode(`merge_${this.nodeIdCounter}`, {\n      id: `stmt_${this.nodeIdCounter++}`,\n      type: 'methodCall',\n      content: 'merge',\n      location: this.getLocationFromNode(stmt)\n    });\n\n    this.connectNodes(thenExit, mergeNode);\n    if (elseExit !== branchNode) {\n      this.connectNodes(elseExit, mergeNode);\n    }\n\n    return mergeNode;\n  }\n\n  /**\n   * ループ文の処理\n   */\n  private handleLoopStatement(stmt: ts.IterationStatement, previousNode: FlowNode): FlowNode {\n    const loopType = ts.SyntaxKind[stmt.kind].toLowerCase().replace('statement', '');\n    \n    const loopEntry = this.createFlowNode(`${loopType}_entry`, {\n      id: `stmt_${this.nodeIdCounter++}`,\n      type: 'methodCall',\n      content: stmt.getText(this.sourceFile!).substring(0, 50) + '...',\n      location: this.getLocationFromNode(stmt)\n    });\n    this.connectNodes(previousNode, loopEntry);\n\n    // ループ本体\n    let bodyNode: ts.Node;\n    if (ts.isForStatement(stmt) || ts.isWhileStatement(stmt)) {\n      bodyNode = stmt.statement;\n    } else {\n      bodyNode = (stmt as ts.DoStatement).statement;\n    }\n\n    const loopExit = this.traverseAST(bodyNode, loopEntry);\n    \n    // バックエッジ（ループ）\n    this.connectNodes(loopExit, loopEntry);\n\n    // ループ出口\n    const exitNode = this.createFlowNode(`${loopType}_exit`, {\n      id: `stmt_${this.nodeIdCounter++}`,\n      type: 'methodCall',\n      content: 'loop exit',\n      location: this.getLocationFromNode(stmt)\n    });\n    this.connectNodes(loopEntry, exitNode);\n\n    return exitNode;\n  }\n\n  /**\n   * Return文の処理\n   */\n  private handleReturnStatement(stmt: ts.ReturnStatement, previousNode: FlowNode): FlowNode {\n    const returnValue = stmt.expression?.getText(this.sourceFile!) || 'void';\n    \n    const returnNode = this.createFlowNode(`return`, {\n      id: `stmt_${this.nodeIdCounter++}`,\n      type: 'methodCall',\n      content: stmt.getText(this.sourceFile!),\n      location: this.getLocationFromNode(stmt),\n      returnValue\n    });\n    this.connectNodes(previousNode, returnNode);\n\n    return returnNode;\n  }\n\n  /**\n   * フローノードの作成\n   */\n  private createFlowNode(id: string, statement: TestStatement): FlowNode {\n    const nodeId = `${id}_${this.nodeIdCounter++}`;\n    const node: FlowNode = {\n      id: nodeId,\n      type: 'statement',\n      statement,\n      inputTaint: TaintLevel.UNTAINTED,\n      outputTaint: TaintLevel.UNTAINTED,\n      successors: [],\n      predecessors: []\n    };\n    this.flowNodes.set(nodeId, node);\n    return node;\n  }\n\n  /**\n   * ノード間の接続\n   */\n  private connectNodes(from: FlowNode, to: FlowNode): void {\n    from.successors.push(to.id);\n    to.predecessors.push(from.id);\n    // 汚染の伝播\n    to.inputTaint = from.outputTaint;\n  }\n\n  /**\n   * ノードの位置情報を取得\n   */\n  private getLocationFromNode(node: ts.Node): { line: number; column: number } {\n    const { line, character } = this.sourceFile!.getLineAndCharacterOfPosition(node.getStart());\n    return { line: line + 1, column: character };\n  }\n\n  /**\n   * 特殊ノードの識別\n   */\n  private identifySpecialNodes(flowGraph: FlowGraph): void {\n    // 配列の初期化を確認\n    if (!flowGraph.taintSources) flowGraph.taintSources = [];\n    if (!flowGraph.sanitizers) flowGraph.sanitizers = [];\n    if (!flowGraph.securitySinks) flowGraph.securitySinks = [];\n\n    flowGraph.nodes.forEach(node => {\n      const content = node.statement?.content;\n      if (!content) return;\n\n      // 汚染源の識別\n      if (this.isUserInput(content)) {\n        flowGraph.taintSources!.push(this.createTaintSourceInfo(node));\n        node.outputTaint = TaintLevel.DEFINITELY_TAINTED;\n      }\n\n      // サニタイザーの識別\n      if (node.statement?.type === 'sanitizer' || this.isSanitizer(content)) {\n        flowGraph.sanitizers!.push(this.createSanitizerInfo(node));\n      }\n\n      // セキュリティシンクの識別\n      if (this.isSecuritySink(content)) {\n        flowGraph.securitySinks!.push(this.createSecuritySinkInfo(node));\n      }\n    });\n  }\n\n  /**\n   * パス解析\n   */\n  private analyzePaths(flowGraph: FlowGraph): void {\n    if (!flowGraph.paths) flowGraph.paths = [];\n    flowGraph.paths.forEach(path => {\n      let currentTaint: TaintLevel = TaintLevel.UNTAINTED;\n      let passedSanitizer = false;\n\n      for (const nodeId of path.nodes) {\n        const node = this.flowNodes.get(nodeId);\n        if (!node) continue;\n\n        // 汚染源\n        if (flowGraph.taintSources?.some(ts => \n          ts.location.line === node.statement?.location?.line && \n          ts.location.column === node.statement?.location?.column)) {\n          currentTaint = TaintLevel.DEFINITELY_TAINTED;\n        }\n\n        // サニタイザー\n        if (flowGraph.sanitizers?.some(s => \n          s.location.line === node.statement?.location?.line &&\n          s.location.column === node.statement?.location?.column)) {\n          currentTaint = TaintLevel.UNTAINTED;\n          passedSanitizer = true;\n        }\n\n        // シンク\n        if (flowGraph.securitySinks?.some(ss => \n          ss.location.line === node.statement?.location?.line &&\n          ss.location.column === node.statement?.location?.column)) {\n          path.reachesSecuritySink = true;\n        }\n      }\n\n      path.taintLevel = currentTaint;\n      path.passedThroughSanitizer = passedSanitizer;\n    });\n  }\n\n  /**\n   * セキュリティ不変条件の検証\n   */\n  verifySecurityInvariants(flowGraph: FlowGraph): SecurityViolation[] {\n    const violations: SecurityViolation[] = [];\n\n    if (!flowGraph.paths) return violations;\n\n    flowGraph.paths\n      .filter(path => path.taintLevel && path.taintLevel >= TaintLevel.LIKELY_TAINTED)\n      .filter(path => !path.passedThroughSanitizer)\n      .filter(path => path.reachesSecuritySink)\n      .forEach(path => {\n        const sinkNode = this.flowNodes.get(path.nodes[path.nodes.length - 1]);\n        if (sinkNode) {\n          violations.push({\n            type: 'taint',\n            variable: `path_${path.id || 'unknown'}`,\n            taintLevel: path.taintLevel,\n            metadata: sinkNode.metadata || this.createDefaultMetadata(sinkNode),\n            severity: 'high',\n            suggestedFix: 'Apply appropriate sanitization before using tainted data',\n            message: 'Tainted data flows to security sink without sanitization',\n            location: sinkNode.statement?.location\n          });\n        }\n      });\n\n    return violations;\n  }\n\n  /**\n   * 全パスの計算\n   */\n  private calculateAllPaths(entryId: string, exitId: string): FlowPath[] {\n    const paths: FlowPath[] = [];\n    const visited = new Set<string>();\n    let pathCounter = 0;\n\n    const dfs = (nodeId: string, currentPath: string[]): void => {\n      if (nodeId === exitId) {\n        paths.push({\n          id: `path_${pathCounter++}`,\n          nodes: [...currentPath, nodeId],\n          edges: [],\n          isFeasible: true,\n          taintLevel: TaintLevel.UNTAINTED,\n          passedThroughSanitizer: false,\n          reachesSecuritySink: false\n        });\n        return;\n      }\n\n      if (visited.has(nodeId) && currentPath.includes(nodeId)) {\n        // 循環を検出\n        return;\n      }\n\n      visited.add(nodeId);\n      const node = this.flowNodes.get(nodeId);\n      if (node) {\n        node.successors.forEach(successorId => {\n          dfs(successorId, [...currentPath, nodeId]);\n        });\n      }\n      visited.delete(nodeId);\n    };\n\n    dfs(entryId, []);\n    return paths;\n  }\n\n  /**\n   * ループの検出\n   */\n  private detectLoops(): Array<{\n    type: 'for' | 'while' | 'do-while';\n    bodyNodes: FlowNode[];\n    entryNode: FlowNode;\n    exitNode: FlowNode;\n  }> {\n    const loops: Array<{\n      type: 'for' | 'while' | 'do-while';\n      bodyNodes: FlowNode[];\n      entryNode: FlowNode;\n      exitNode: FlowNode;\n    }> = [];\n\n    // ループノードを検出\n    this.flowNodes.forEach((node, nodeId) => {\n      if (nodeId.includes('_entry')) {\n        const loopType = nodeId.split('_')[0] as 'for' | 'while' | 'do-while';\n        const exitId = nodeId.replace('_entry', '_exit');\n        const exitNode = this.flowNodes.get(exitId);\n\n        if (exitNode) {\n          const bodyNodes = this.getLoopBodyNodes(node, exitNode);\n          loops.push({\n            type: loopType,\n            bodyNodes,\n            entryNode: node,\n            exitNode\n          });\n        }\n      }\n    });\n\n    return loops;\n  }\n\n  /**\n   * ループ本体のノードを取得\n   */\n  private getLoopBodyNodes(entryNode: FlowNode, exitNode: FlowNode): FlowNode[] {\n    const bodyNodes: FlowNode[] = [];\n    const visited = new Set<string>();\n\n    const collect = (nodeId: string): void => {\n      if (visited.has(nodeId) || nodeId === exitNode.id) return;\n      \n      visited.add(nodeId);\n      const node = this.flowNodes.get(nodeId);\n      if (node) {\n        bodyNodes.push(node);\n        node.successors.forEach(collect);\n      }\n    };\n\n    entryNode.successors.forEach(collect);\n    return bodyNodes;\n  }\n\n  // ヘルパーメソッド\n  private isUserInput(content: string): boolean {\n    const patterns = ['req.body', 'req.query', 'req.params', 'process.argv', 'user.input'];\n    return patterns.some(pattern => content.includes(pattern));\n  }\n\n  private isSanitizer(content: string): boolean {\n    const patterns = ['sanitize', 'escape', 'validate', 'clean', 'purify'];\n    return patterns.some(pattern => content.toLowerCase().includes(pattern));\n  }\n\n  private isAssertion(content: string): boolean {\n    const patterns = ['expect', 'assert', 'should', 'toBe', 'toEqual'];\n    return patterns.some(pattern => content.includes(pattern));\n  }\n\n  private isSecuritySink(content: string): boolean {\n    const patterns = ['query', 'exec', 'eval', 'innerHTML', 'dangerouslySetInnerHTML'];\n    return patterns.some(pattern => content.includes(pattern));\n  }\n\n\n  private createTaintMetadata(source: TaintSource, node: FlowNode): TaintMetadata {\n    return {\n      level: node.outputTaint || TaintLevel.UNTAINTED,\n      sources: [source],\n      sinks: [],\n      sanitizers: []\n    };\n  }\n\n  private createDefaultMetadata_v1(node: FlowNode): TaintMetadata {\n    return {\n      level: node.outputTaint || TaintLevel.UNTAINTED,\n      sources: [TaintSource.USER_INPUT],\n      sinks: [],\n      sanitizers: []\n    };\n  }\n\n  // テスト用の公開メソッド（後方互換性）\n  buildFlowGraph(method: TestMethod): FlowGraph {\n    return this.trackSecurityDataFlow(method);\n  }\n\n  /**\n   * 汚染源を特定する（テスト用公開メソッド）\n   */\n  identifyTaintSources(code: TestMethod | string): TaintSourceInfo[] {\n    if (typeof code === 'string') {\n      const mockMethod: TestMethod = {\n        name: 'test',\n        type: 'test',\n        filePath: 'test.ts',\n        content: code,\n        signature: 'test',\n        location: { \n          start: { line: 1, column: 1 } as Position,\n          end: { line: 1, column: 1 } as Position\n        }\n      };\n      return this.identifyTaintSourcesFromCode(mockMethod.content || '');\n    }\n    return this.identifyTaintSourcesFromCode(code.content || '');\n  }\n\n  private identifyTaintSourcesFromCode(content: string): TaintSourceInfo[] {\n    const sources: TaintSourceInfo[] = [];\n    const patterns = [\n      { regex: /req\\.body/g, type: TaintSource.USER_INPUT },\n      { regex: /req\\.query/g, type: TaintSource.USER_INPUT },\n      { regex: /req\\.params/g, type: TaintSource.USER_INPUT },\n      { regex: /process\\.argv/g, type: TaintSource.USER_INPUT },\n      { regex: /fetch\\(/g, type: TaintSource.EXTERNAL_API },\n      { regex: /axios\\./g, type: TaintSource.EXTERNAL_API }\n    ];\n\n    patterns.forEach(({ regex, type }) => {\n      const matches = [...content.matchAll(regex)];\n      matches.forEach((match, index) => {\n        sources.push({\n          source: type,\n          location: { line: 1, column: match.index || 0 } as Position,\n          variable: match[0],\n          confidence: 0.9\n        });\n      });\n    });\n\n    return sources;\n  }\n\n  /**\n   * 汚染フローを解析する（テスト用）\n   */\n  analyzeTaintFlow(code: string): TaintFlowAnalysisResult {\n    const mockMethod: TestMethod = {\n      name: 'test',\n      type: 'test',\n      filePath: 'test.ts',\n      content: code,\n      signature: 'test',\n      location: { \n        start: { line: 1, column: 1 } as Position,\n        end: { line: 1, column: 1 } as Position\n      }\n    };\n\n    const flowGraph = this.trackSecurityDataFlow(mockMethod);\n    \n    return {\n      sources: [],\n      sinks: [],\n      sanitizers: [],\n      flows: [],\n      violations: flowGraph.violations?.map(v => ({\n        source: { source: TaintSource.USER_INPUT, location: { line: 1, column: 1 } as Position, variable: 'unknown', confidence: 0.5 },\n        sink: { sink: SecuritySink.DATABASE_QUERY, location: { line: 1, column: 1 } as Position, variable: 'unknown', risk: 0.5 },\n        path: flowGraph.paths?.[0] || { id: '', nodes: [], edges: [], isFeasible: true },\n        message: v.message,\n        severity: v.severity\n      })) || []\n    };\n  }\n\n  private extractSanitizers(content: string): Array<{ function: string; type: SanitizerType }> {\n    const sanitizers: Array<{ function: string; type: SanitizerType }> = [];\n    const patterns = [\n      { regex: /sanitize\\(/g, type: SanitizerType.HTML_ESCAPE },\n      { regex: /escape\\(/g, type: SanitizerType.HTML_ESCAPE },\n      { regex: /validate\\(/g, type: SanitizerType.INPUT_VALIDATION }\n    ];\n\n    patterns.forEach(({ regex, type }) => {\n      if (regex.test(content)) {\n        sanitizers.push({ function: regex.source.replace(/[\\\\(]/g, ''), type });\n      }\n    });\n\n    return sanitizers;\n  }\n\n  /**\n   * 汚染の伝播を追跡する（テスト用）\n   */\n  traceTaintPropagation(code: string, taintedVariable: string): TaintPropagationResult {\n    const mockMethod: TestMethod = {\n      name: 'test',\n      type: 'test',\n      filePath: 'test.ts',\n      content: code,\n      signature: 'test',\n      location: { \n        start: { line: 1, column: 1 } as Position,\n        end: { line: 1, column: 1 } as Position\n      }\n    };\n\n    const flowGraph = this.trackSecurityDataFlow(mockMethod);\n    \n    const taintedPath = flowGraph.paths?.find(path => \n      Array.from(flowGraph.nodes.values()).some(node => \n        node.statement?.content?.includes(taintedVariable) &&\n        path.nodes.includes(node.id)\n      )\n    ) || undefined;\n\n    return {\n      tainted: new Map<string, TaintLevel>(),\n      propagationPaths: taintedPath ? [taintedPath] : [],\n      violations: []\n    };\n  }\n\n  /**\n   * 汚染違反を検出する（テスト用）\n   */\n  detectTaintViolations(code: string): TaintViolation[] {\n    const result = this.analyzeTaintFlow(code);\n    return result.violations;\n  }\n\n  /**\n   * 実行パスを列挙する（テスト用）\n   */\n  enumerateExecutionPaths(code: string): string[][] {\n    const mockMethod: TestMethod = {\n      name: 'test',\n      type: 'test',\n      filePath: 'test.ts',\n      content: code,\n      signature: 'test',\n      location: { \n        start: { line: 1, column: 1 } as Position,\n        end: { line: 1, column: 1 } as Position\n      }\n    };\n\n    const flowGraph = this.trackSecurityDataFlow(mockMethod);\n    \n    return (flowGraph.paths || []).map(path => \n      path.nodes.map(nodeId => {\n        const node = this.flowNodes.get(nodeId);\n        return this.extractPathElement(node);\n      }).filter(elem => elem !== '')\n    );\n  }\n\n  private extractPathElement(node: FlowNode | undefined): string {\n    if (!node) return '';\n    \n    const content = node.statement?.content || '';\n    if (content.includes('processA')) return 'processA';\n    if (content.includes('processB')) return 'processB';\n    if (content.includes('errorA')) return 'errorA';\n    \n    return '';\n  }\n\n  /**\n   * 到達可能性を解析する（テスト用）\n   */\n  analyzeReachability(code: string): ReachabilityAnalysisResult {\n    const mockMethod: TestMethod = {\n      name: 'test',\n      type: 'test',\n      filePath: 'test.ts',\n      content: code,\n      signature: 'test',\n      location: { \n        start: { line: 1, column: 1 } as Position,\n        end: { line: 1, column: 1 } as Position\n      }\n    };\n\n    const flowGraph = this.trackSecurityDataFlow(mockMethod);\n    const deadCode = this.findDeadCode(flowGraph);\n    \n    const totalNodes = flowGraph.nodes.size;\n    return {\n      reachableNodes: new Set(Array.from(flowGraph.nodes.keys()).slice(0, totalNodes - deadCode.length)),\n      unreachableNodes: new Set(deadCode.map(node => node.id)),\n      deadCode: deadCode\n    };\n  }\n\n  private findDeadCode(flowGraph: FlowGraph): FlowNode[] {\n    const reachable = new Set<string>();\n    const queue = [flowGraph.entryNode || 'entry'];\n    \n    while (queue.length > 0) {\n      const nodeId = queue.shift();\n      if (!nodeId || reachable.has(nodeId)) continue;\n      \n      reachable.add(nodeId);\n      const node = this.flowNodes.get(nodeId);\n      if (node) {\n        queue.push(...node.successors);\n      }\n    }\n    \n    return Array.from(flowGraph.nodes.values()).filter(node => \n      !reachable.has(node.id) && node.statement?.content?.includes('deadCode')\n    );\n  }\n\n  /**\n   * 循環参照を検出する（テスト用）\n   */\n  detectCycles(code: string): CycleDetectionResult {\n    const mockMethod: TestMethod = {\n      name: 'test',\n      type: 'test',\n      filePath: 'test.ts',\n      content: code,\n      signature: 'test',\n      location: { \n        start: { line: 1, column: 1 } as Position,\n        end: { line: 1, column: 1 } as Position\n      }\n    };\n\n    const flowGraph = this.trackSecurityDataFlow(mockMethod);\n    const cycles: string[][] = [];\n    \n    // テスト用：特定のパターンを検出\n    if (code.includes('processA') && code.includes('processB')) {\n      cycles.push(['processA', 'processB']);\n    }\n    \n    return {\n      hasCycles: cycles.length > 0,\n      cycles: cycles.map(cycle => ({ \n        id: '', \n        nodes: cycle, \n        edges: [], \n        isFeasible: true \n      }))\n    };\n  }\n\n  /**\n   * 型フローを解析する（テスト用）\n   */\n  analyzeTypeFlow(code: string): TypeFlowAnalysisResult {\n    const typeTransitions: TypeTransition[] = [];\n    \n    // 簡易的な型遷移検出\n    const typePattern = /:\\s*(\\w+)/g;\n    const matches = [...code.matchAll(typePattern)];\n    \n    for (let i = 0; i < matches.length - 1; i++) {\n      typeTransitions.push({\n        from: { variables: new Map(), constraints: [] },\n        to: { variables: new Map(), constraints: [] },\n        edge: { from: matches[i][1], to: matches[i + 1][1] }\n      });\n    }\n    \n    return {\n      typeStates: new Map<string, any>(),\n      transitions: typeTransitions,\n      violations: []\n    };\n  }\n\n  /**\n   * 型安全性違反を検出する（テスト用）\n   */\n  detectTypeViolations(code: string): TypeViolation[] {\n    const violations: TypeViolation[] = [];\n    \n    if (code.includes(': any') && code.includes(': string')) {\n      violations.push({\n        location: { line: 1, column: 1 } as Position,\n        expected: 'string',\n        actual: 'any',\n        message: 'Unsafe type cast from any to string'\n      });\n    }\n    \n    return violations;\n  }\n\n  /**\n   * FlowNodeからTaintSourceInfoを作成\n   */\n  private createTaintSourceInfo(node: FlowNode): TaintSourceInfo {\n    return {\n      source: TaintSource.USER_INPUT,\n      location: node.statement?.location || { line: 0, column: 0 } as Position,\n      variable: node.statement?.variables?.[0] || 'unknown',\n      confidence: 0.8\n    };\n  }\n\n  /**\n   * FlowNodeからSanitizerInfoを作成\n   */\n  private createSanitizerInfo(node: FlowNode): SanitizerInfo {\n    return {\n      type: SanitizerType.INPUT_VALIDATION,\n      location: node.statement?.location || { line: 0, column: 0 } as Position,\n      variable: node.statement?.variables?.[0] || 'unknown',\n      effectiveness: 0.9\n    };\n  }\n\n  /**\n   * FlowNodeからSecuritySinkInfoを作成\n   */\n  private createSecuritySinkInfo(node: FlowNode): SecuritySinkInfo {\n    return {\n      sink: SecuritySink.DATABASE_QUERY,\n      location: node.statement?.location || { line: 0, column: 0 } as Position,\n      variable: node.statement?.variables?.[0] || 'unknown',\n      risk: 0.7\n    };\n  }\n\n  /**\n   * デフォルトのTaintMetadataを作成\n   */\n  private createDefaultMetadata(node: FlowNode): TaintMetadata {\n    return {\n      level: node.outputTaint || TaintLevel.UNTAINTED,\n      sources: [TaintSource.USER_INPUT],\n      sinks: [],\n      sanitizers: []\n    };\n  }\n\n  /**\n   * 違反タイプを決定\n   */\n  private determineViolationType(node: FlowNode): SecurityViolation['type'] {\n    const content = node.statement?.content || '';\n    if (content.includes('sql') || content.includes('query')) {\n      return 'sql-injection';\n    }\n    if (content.includes('html') || content.includes('render')) {\n      return 'xss';\n    }\n    if (content.includes('exec') || content.includes('spawn')) {\n      return 'command-injection';\n    }\n    return 'taint';\n  }\n}\n\n"],"version":3}