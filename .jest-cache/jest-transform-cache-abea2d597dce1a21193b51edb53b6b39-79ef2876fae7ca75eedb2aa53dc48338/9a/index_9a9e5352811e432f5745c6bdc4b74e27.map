{"file":"/Users/sasakama/Projects/Rimor/src/container/index.ts","mappings":";AAAA;;;GAGG;;;AAoGiB,kDAAmB;AAlGvC,4BAA0B;AAC1B,yCAAsC;AACtC,mCAAgC;AAgGS,sFAhGhC,aAAK,OAgGgC;AA1F9C,0BAA0B;AAC1B,MAAM,SAAS,GAAG,IAAI,qBAAS,EAAE,CAAC;AAyFzB,8BAAS;AAvFlB,wBAAwB;AACxB,MAAM,YAAY,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,CAAC;AAC3D,MAAM,aAAa,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,aAAa,IAAI,CAAC,YAAY,CAAC;AAE9E;;GAEG;AACH,SAAS,mBAAmB;IAC1B,0BAA0B;IAC1B,SAAS,CAAC,SAAS,EAAE,CAAC;IAEtB,wBAAwB;IACxB,gBAAgB,EAAE,CAAC;IAEnB,gCAAgC;IAChC,IAAI,aAAa,EAAE,CAAC;QAClB,uBAAuB,EAAE,CAAC;IAC5B,CAAC;SAAM,CAAC;QACN,sBAAsB,EAAE,CAAC;IAC3B,CAAC;IAED,OAAO,SAAS,CAAC;AACnB,CAAC;AAED;;GAEG;AACH,SAAS,gBAAgB;IACvB,2CAA2C;IAC3C,MAAM,EACJ,kBAAkB,EAClB,mBAAmB,EACnB,sBAAsB,EACtB,iBAAiB,EAClB,GAAG,OAAO,CAAC,yBAAyB,CAAC,CAAC;IAEvC,4DAA4D;IAE5D,wBAAwB;IACxB,SAAS,CAAC,IAAI,CAAkB,aAAK,CAAC,cAAc,CAAC;SAClD,EAAE,CAAC,kBAAkB,CAAC;SACtB,gBAAgB,EAAE,CAAC;IAEtB,SAAS,CAAC,IAAI,CAAmB,aAAK,CAAC,eAAe,CAAC;SACpD,EAAE,CAAC,mBAAmB,CAAC;SACvB,gBAAgB,EAAE,CAAC;IAEtB,SAAS,CAAC,IAAI,CAAY,aAAK,CAAC,QAAQ,CAAC;SACtC,EAAE,CAAC,sBAAsB,CAAC;SAC1B,gBAAgB,EAAE,CAAC;IAEtB,SAAS,CAAC,IAAI,CAAiB,aAAK,CAAC,aAAa,CAAC;SAChD,EAAE,CAAC,iBAAiB,CAAC;SACrB,gBAAgB,EAAE;SAClB,YAAY,CAAC,CAAC,OAAO,EAAE,aAAa,EAAE,EAAE;QACvC,gBAAgB;QAChB,MAAM,mBAAmB,GAAG,OAAO,CAAC,0BAA0B,CAAC,CAAC,mBAAmB,CAAC;QACpF,MAAM,qBAAqB,GAAG,OAAO,CAAC,4BAA4B,CAAC,CAAC,qBAAqB,CAAC;QAC1F,MAAM,mBAAmB,GAAG,OAAO,CAAC,6CAA6C,CAAC,CAAC,mBAAmB,CAAC;QAEvG,uBAAuB;QACvB,aAAa,CAAC,QAAQ,CAAC,IAAI,mBAAmB,CAAC,IAAI,mBAAmB,EAAE,CAAC,CAAC,CAAC;QAC3E,aAAa,CAAC,QAAQ,CAAC,IAAI,mBAAmB,CAAC,IAAI,qBAAqB,EAAE,CAAC,CAAC,CAAC;QAE7E,OAAO,aAAa,CAAC;IACvB,CAAC,CAAC,CAAC;AACP,CAAC;AAED;;GAEG;AACH,SAAS,uBAAuB;IAC9B,6BAA6B;IAC7B,SAAS,CAAC,IAAI,CAAU,oBAAoB,CAAC,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;IACpE,SAAS,CAAC,IAAI,CAAU,6BAA6B,CAAC,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;AAC/E,CAAC;AAED;;GAEG;AACH,SAAS,sBAAsB;IAC7B,uBAAuB;IACvB,SAAS,CAAC,IAAI,CAAU,oBAAoB,CAAC,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;IACrE,SAAS,CAAC,IAAI,CAAU,6BAA6B,CAAC,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;AAChF,CAAC","names":[],"sources":["/Users/sasakama/Projects/Rimor/src/container/index.ts"],"sourcesContent":["/**\n * Dependency Injection コンテナ設定\n * v0.8.0 - Inversifyを使用した簡素化されたDIコンテナ\n */\n\nimport 'reflect-metadata';\nimport { Container } from 'inversify';\nimport { TYPES } from './types';\nimport type { IAnalysisEngine } from '../core/interfaces/IAnalysisEngine';\nimport type { ISecurityAuditor } from '../core/interfaces/ISecurityAuditor';\nimport type { IReporter } from '../core/interfaces/IReporter';\nimport type { IPluginManager } from '../core/interfaces/IPluginManager';\n\n// Create the DI container\nconst container = new Container();\n\n// Environment detection\nconst isProduction = process.env.NODE_ENV === 'production';\nconst isDevelopment = process.env.NODE_ENV === 'development' || !isProduction;\n\n/**\n * Initialize the DI container with bindings\n */\nfunction initializeContainer(): Container {\n  // Clear existing bindings\n  container.unbindAll();\n  \n  // Core service bindings\n  bindCoreServices();\n  \n  // Environment-specific bindings\n  if (isDevelopment) {\n    bindDevelopmentServices();\n  } else {\n    bindProductionServices();\n  }\n  \n  return container;\n}\n\n/**\n * Bind core services\n */\nfunction bindCoreServices(): void {\n  // Lazy load to avoid circular dependencies\n  const { \n    AnalysisEngineImpl,\n    SecurityAuditorImpl,\n    StructuredReporterImpl,\n    PluginManagerImpl\n  } = require('../core/implementations');\n  \n  // Interfaces are types, not values - use import type syntax\n  \n  // Core service bindings\n  container.bind<IAnalysisEngine>(TYPES.AnalysisEngine)\n    .to(AnalysisEngineImpl)\n    .inSingletonScope();\n    \n  container.bind<ISecurityAuditor>(TYPES.SecurityAuditor)\n    .to(SecurityAuditorImpl)\n    .inSingletonScope();\n    \n  container.bind<IReporter>(TYPES.Reporter)\n    .to(StructuredReporterImpl)\n    .inSingletonScope();\n    \n  container.bind<IPluginManager>(TYPES.PluginManager)\n    .to(PluginManagerImpl)\n    .inSingletonScope()\n    .onActivation((context, pluginManager) => {\n      // デフォルトプラグインを登録\n      const TestExistencePlugin = require('../plugins/testExistence').TestExistencePlugin;\n      const AssertionExistsPlugin = require('../plugins/assertionExists').AssertionExistsPlugin;\n      const LegacyPluginAdapter = require('../core/implementations/LegacyPluginAdapter').LegacyPluginAdapter;\n      \n      // レガシープラグインをアダプター経由で登録\n      pluginManager.register(new LegacyPluginAdapter(new TestExistencePlugin()));\n      pluginManager.register(new LegacyPluginAdapter(new AssertionExistsPlugin()));\n      \n      return pluginManager;\n    });\n}\n\n/**\n * Development-specific bindings\n */\nfunction bindDevelopmentServices(): void {\n  // Development環境では詳細なログ出力を有効化\n  container.bind<boolean>('EnableDebugLogging').toConstantValue(true);\n  container.bind<boolean>('EnablePerformanceMonitoring').toConstantValue(true);\n}\n\n/**\n * Production-specific bindings\n */\nfunction bindProductionServices(): void {\n  // Production環境では最適化を重視\n  container.bind<boolean>('EnableDebugLogging').toConstantValue(false);\n  container.bind<boolean>('EnablePerformanceMonitoring').toConstantValue(false);\n}\n\n// Export configured container\nexport { container, initializeContainer, TYPES };"],"version":3}