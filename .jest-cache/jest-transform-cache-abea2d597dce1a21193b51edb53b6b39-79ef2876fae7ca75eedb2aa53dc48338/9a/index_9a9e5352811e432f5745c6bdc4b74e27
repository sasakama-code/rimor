aedc5166720db8ead8b7afeab74216af
"use strict";
/**
 * Dependency Injection コンテナ設定
 * v0.8.0 - Inversifyを使用した簡素化されたDIコンテナ
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TYPES = exports.container = void 0;
exports.initializeContainer = initializeContainer;
require("reflect-metadata");
const inversify_1 = require("inversify");
const types_1 = require("./types");
Object.defineProperty(exports, "TYPES", { enumerable: true, get: function () { return types_1.TYPES; } });
// Create the DI container
const container = new inversify_1.Container();
exports.container = container;
// Environment detection
const isProduction = process.env.NODE_ENV === 'production';
const isDevelopment = process.env.NODE_ENV === 'development' || !isProduction;
/**
 * Initialize the DI container with bindings
 */
function initializeContainer() {
    // Clear existing bindings
    container.unbindAll();
    // Core service bindings
    bindCoreServices();
    // Environment-specific bindings
    if (isDevelopment) {
        bindDevelopmentServices();
    }
    else {
        bindProductionServices();
    }
    return container;
}
/**
 * Bind core services
 */
function bindCoreServices() {
    // Lazy load to avoid circular dependencies
    const { AnalysisEngineImpl, SecurityAuditorImpl, StructuredReporterImpl, PluginManagerImpl } = require('../core/implementations');
    // Interfaces are types, not values - use import type syntax
    // Core service bindings
    container.bind(types_1.TYPES.AnalysisEngine)
        .to(AnalysisEngineImpl)
        .inSingletonScope();
    container.bind(types_1.TYPES.SecurityAuditor)
        .to(SecurityAuditorImpl)
        .inSingletonScope();
    container.bind(types_1.TYPES.Reporter)
        .to(StructuredReporterImpl)
        .inSingletonScope();
    container.bind(types_1.TYPES.PluginManager)
        .to(PluginManagerImpl)
        .inSingletonScope()
        .onActivation((context, pluginManager) => {
        // デフォルトプラグインを登録
        const TestExistencePlugin = require('../plugins/testExistence').TestExistencePlugin;
        const AssertionExistsPlugin = require('../plugins/assertionExists').AssertionExistsPlugin;
        const LegacyPluginAdapter = require('../core/implementations/LegacyPluginAdapter').LegacyPluginAdapter;
        // レガシープラグインをアダプター経由で登録
        pluginManager.register(new LegacyPluginAdapter(new TestExistencePlugin()));
        pluginManager.register(new LegacyPluginAdapter(new AssertionExistsPlugin()));
        return pluginManager;
    });
}
/**
 * Development-specific bindings
 */
function bindDevelopmentServices() {
    // Development環境では詳細なログ出力を有効化
    container.bind('EnableDebugLogging').toConstantValue(true);
    container.bind('EnablePerformanceMonitoring').toConstantValue(true);
}
/**
 * Production-specific bindings
 */
function bindProductionServices() {
    // Production環境では最適化を重視
    container.bind('EnableDebugLogging').toConstantValue(false);
    container.bind('EnablePerformanceMonitoring').toConstantValue(false);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL3Nhc2FrYW1hL1Byb2plY3RzL1JpbW9yL3NyYy9jb250YWluZXIvaW5kZXgudHMiLCJtYXBwaW5ncyI6IjtBQUFBOzs7R0FHRzs7O0FBb0dpQixrREFBbUI7QUFsR3ZDLDRCQUEwQjtBQUMxQix5Q0FBc0M7QUFDdEMsbUNBQWdDO0FBZ0dTLHNGQWhHaEMsYUFBSyxPQWdHZ0M7QUExRjlDLDBCQUEwQjtBQUMxQixNQUFNLFNBQVMsR0FBRyxJQUFJLHFCQUFTLEVBQUUsQ0FBQztBQXlGekIsOEJBQVM7QUF2RmxCLHdCQUF3QjtBQUN4QixNQUFNLFlBQVksR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsS0FBSyxZQUFZLENBQUM7QUFDM0QsTUFBTSxhQUFhLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEtBQUssYUFBYSxJQUFJLENBQUMsWUFBWSxDQUFDO0FBRTlFOztHQUVHO0FBQ0gsU0FBUyxtQkFBbUI7SUFDMUIsMEJBQTBCO0lBQzFCLFNBQVMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUV0Qix3QkFBd0I7SUFDeEIsZ0JBQWdCLEVBQUUsQ0FBQztJQUVuQixnQ0FBZ0M7SUFDaEMsSUFBSSxhQUFhLEVBQUUsQ0FBQztRQUNsQix1QkFBdUIsRUFBRSxDQUFDO0lBQzVCLENBQUM7U0FBTSxDQUFDO1FBQ04sc0JBQXNCLEVBQUUsQ0FBQztJQUMzQixDQUFDO0lBRUQsT0FBTyxTQUFTLENBQUM7QUFDbkIsQ0FBQztBQUVEOztHQUVHO0FBQ0gsU0FBUyxnQkFBZ0I7SUFDdkIsMkNBQTJDO0lBQzNDLE1BQU0sRUFDSixrQkFBa0IsRUFDbEIsbUJBQW1CLEVBQ25CLHNCQUFzQixFQUN0QixpQkFBaUIsRUFDbEIsR0FBRyxPQUFPLENBQUMseUJBQXlCLENBQUMsQ0FBQztJQUV2Qyw0REFBNEQ7SUFFNUQsd0JBQXdCO0lBQ3hCLFNBQVMsQ0FBQyxJQUFJLENBQWtCLGFBQUssQ0FBQyxjQUFjLENBQUM7U0FDbEQsRUFBRSxDQUFDLGtCQUFrQixDQUFDO1NBQ3RCLGdCQUFnQixFQUFFLENBQUM7SUFFdEIsU0FBUyxDQUFDLElBQUksQ0FBbUIsYUFBSyxDQUFDLGVBQWUsQ0FBQztTQUNwRCxFQUFFLENBQUMsbUJBQW1CLENBQUM7U0FDdkIsZ0JBQWdCLEVBQUUsQ0FBQztJQUV0QixTQUFTLENBQUMsSUFBSSxDQUFZLGFBQUssQ0FBQyxRQUFRLENBQUM7U0FDdEMsRUFBRSxDQUFDLHNCQUFzQixDQUFDO1NBQzFCLGdCQUFnQixFQUFFLENBQUM7SUFFdEIsU0FBUyxDQUFDLElBQUksQ0FBaUIsYUFBSyxDQUFDLGFBQWEsQ0FBQztTQUNoRCxFQUFFLENBQUMsaUJBQWlCLENBQUM7U0FDckIsZ0JBQWdCLEVBQUU7U0FDbEIsWUFBWSxDQUFDLENBQUMsT0FBTyxFQUFFLGFBQWEsRUFBRSxFQUFFO1FBQ3ZDLGdCQUFnQjtRQUNoQixNQUFNLG1CQUFtQixHQUFHLE9BQU8sQ0FBQywwQkFBMEIsQ0FBQyxDQUFDLG1CQUFtQixDQUFDO1FBQ3BGLE1BQU0scUJBQXFCLEdBQUcsT0FBTyxDQUFDLDRCQUE0QixDQUFDLENBQUMscUJBQXFCLENBQUM7UUFDMUYsTUFBTSxtQkFBbUIsR0FBRyxPQUFPLENBQUMsNkNBQTZDLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQztRQUV2Ryx1QkFBdUI7UUFDdkIsYUFBYSxDQUFDLFFBQVEsQ0FBQyxJQUFJLG1CQUFtQixDQUFDLElBQUksbUJBQW1CLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDM0UsYUFBYSxDQUFDLFFBQVEsQ0FBQyxJQUFJLG1CQUFtQixDQUFDLElBQUkscUJBQXFCLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFFN0UsT0FBTyxhQUFhLENBQUM7SUFDdkIsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDO0FBRUQ7O0dBRUc7QUFDSCxTQUFTLHVCQUF1QjtJQUM5Qiw2QkFBNkI7SUFDN0IsU0FBUyxDQUFDLElBQUksQ0FBVSxvQkFBb0IsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNwRSxTQUFTLENBQUMsSUFBSSxDQUFVLDZCQUE2QixDQUFDLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQy9FLENBQUM7QUFFRDs7R0FFRztBQUNILFNBQVMsc0JBQXNCO0lBQzdCLHVCQUF1QjtJQUN2QixTQUFTLENBQUMsSUFBSSxDQUFVLG9CQUFvQixDQUFDLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3JFLFNBQVMsQ0FBQyxJQUFJLENBQVUsNkJBQTZCLENBQUMsQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDaEYsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvc2FzYWthbWEvUHJvamVjdHMvUmltb3Ivc3JjL2NvbnRhaW5lci9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIERlcGVuZGVuY3kgSW5qZWN0aW9uIOOCs+ODs+ODhuODiuioreWumlxuICogdjAuOC4wIC0gSW52ZXJzaWZ544KS5L2/55So44GX44Gf57Ch57Sg5YyW44GV44KM44GfREnjgrPjg7Pjg4bjg4pcbiAqL1xuXG5pbXBvcnQgJ3JlZmxlY3QtbWV0YWRhdGEnO1xuaW1wb3J0IHsgQ29udGFpbmVyIH0gZnJvbSAnaW52ZXJzaWZ5JztcbmltcG9ydCB7IFRZUEVTIH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgdHlwZSB7IElBbmFseXNpc0VuZ2luZSB9IGZyb20gJy4uL2NvcmUvaW50ZXJmYWNlcy9JQW5hbHlzaXNFbmdpbmUnO1xuaW1wb3J0IHR5cGUgeyBJU2VjdXJpdHlBdWRpdG9yIH0gZnJvbSAnLi4vY29yZS9pbnRlcmZhY2VzL0lTZWN1cml0eUF1ZGl0b3InO1xuaW1wb3J0IHR5cGUgeyBJUmVwb3J0ZXIgfSBmcm9tICcuLi9jb3JlL2ludGVyZmFjZXMvSVJlcG9ydGVyJztcbmltcG9ydCB0eXBlIHsgSVBsdWdpbk1hbmFnZXIgfSBmcm9tICcuLi9jb3JlL2ludGVyZmFjZXMvSVBsdWdpbk1hbmFnZXInO1xuXG4vLyBDcmVhdGUgdGhlIERJIGNvbnRhaW5lclxuY29uc3QgY29udGFpbmVyID0gbmV3IENvbnRhaW5lcigpO1xuXG4vLyBFbnZpcm9ubWVudCBkZXRlY3Rpb25cbmNvbnN0IGlzUHJvZHVjdGlvbiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbic7XG5jb25zdCBpc0RldmVsb3BtZW50ID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcgfHwgIWlzUHJvZHVjdGlvbjtcblxuLyoqXG4gKiBJbml0aWFsaXplIHRoZSBESSBjb250YWluZXIgd2l0aCBiaW5kaW5nc1xuICovXG5mdW5jdGlvbiBpbml0aWFsaXplQ29udGFpbmVyKCk6IENvbnRhaW5lciB7XG4gIC8vIENsZWFyIGV4aXN0aW5nIGJpbmRpbmdzXG4gIGNvbnRhaW5lci51bmJpbmRBbGwoKTtcbiAgXG4gIC8vIENvcmUgc2VydmljZSBiaW5kaW5nc1xuICBiaW5kQ29yZVNlcnZpY2VzKCk7XG4gIFxuICAvLyBFbnZpcm9ubWVudC1zcGVjaWZpYyBiaW5kaW5nc1xuICBpZiAoaXNEZXZlbG9wbWVudCkge1xuICAgIGJpbmREZXZlbG9wbWVudFNlcnZpY2VzKCk7XG4gIH0gZWxzZSB7XG4gICAgYmluZFByb2R1Y3Rpb25TZXJ2aWNlcygpO1xuICB9XG4gIFxuICByZXR1cm4gY29udGFpbmVyO1xufVxuXG4vKipcbiAqIEJpbmQgY29yZSBzZXJ2aWNlc1xuICovXG5mdW5jdGlvbiBiaW5kQ29yZVNlcnZpY2VzKCk6IHZvaWQge1xuICAvLyBMYXp5IGxvYWQgdG8gYXZvaWQgY2lyY3VsYXIgZGVwZW5kZW5jaWVzXG4gIGNvbnN0IHsgXG4gICAgQW5hbHlzaXNFbmdpbmVJbXBsLFxuICAgIFNlY3VyaXR5QXVkaXRvckltcGwsXG4gICAgU3RydWN0dXJlZFJlcG9ydGVySW1wbCxcbiAgICBQbHVnaW5NYW5hZ2VySW1wbFxuICB9ID0gcmVxdWlyZSgnLi4vY29yZS9pbXBsZW1lbnRhdGlvbnMnKTtcbiAgXG4gIC8vIEludGVyZmFjZXMgYXJlIHR5cGVzLCBub3QgdmFsdWVzIC0gdXNlIGltcG9ydCB0eXBlIHN5bnRheFxuICBcbiAgLy8gQ29yZSBzZXJ2aWNlIGJpbmRpbmdzXG4gIGNvbnRhaW5lci5iaW5kPElBbmFseXNpc0VuZ2luZT4oVFlQRVMuQW5hbHlzaXNFbmdpbmUpXG4gICAgLnRvKEFuYWx5c2lzRW5naW5lSW1wbClcbiAgICAuaW5TaW5nbGV0b25TY29wZSgpO1xuICAgIFxuICBjb250YWluZXIuYmluZDxJU2VjdXJpdHlBdWRpdG9yPihUWVBFUy5TZWN1cml0eUF1ZGl0b3IpXG4gICAgLnRvKFNlY3VyaXR5QXVkaXRvckltcGwpXG4gICAgLmluU2luZ2xldG9uU2NvcGUoKTtcbiAgICBcbiAgY29udGFpbmVyLmJpbmQ8SVJlcG9ydGVyPihUWVBFUy5SZXBvcnRlcilcbiAgICAudG8oU3RydWN0dXJlZFJlcG9ydGVySW1wbClcbiAgICAuaW5TaW5nbGV0b25TY29wZSgpO1xuICAgIFxuICBjb250YWluZXIuYmluZDxJUGx1Z2luTWFuYWdlcj4oVFlQRVMuUGx1Z2luTWFuYWdlcilcbiAgICAudG8oUGx1Z2luTWFuYWdlckltcGwpXG4gICAgLmluU2luZ2xldG9uU2NvcGUoKVxuICAgIC5vbkFjdGl2YXRpb24oKGNvbnRleHQsIHBsdWdpbk1hbmFnZXIpID0+IHtcbiAgICAgIC8vIOODh+ODleOCqeODq+ODiOODl+ODqeOCsOOCpOODs+OCkueZu+mMslxuICAgICAgY29uc3QgVGVzdEV4aXN0ZW5jZVBsdWdpbiA9IHJlcXVpcmUoJy4uL3BsdWdpbnMvdGVzdEV4aXN0ZW5jZScpLlRlc3RFeGlzdGVuY2VQbHVnaW47XG4gICAgICBjb25zdCBBc3NlcnRpb25FeGlzdHNQbHVnaW4gPSByZXF1aXJlKCcuLi9wbHVnaW5zL2Fzc2VydGlvbkV4aXN0cycpLkFzc2VydGlvbkV4aXN0c1BsdWdpbjtcbiAgICAgIGNvbnN0IExlZ2FjeVBsdWdpbkFkYXB0ZXIgPSByZXF1aXJlKCcuLi9jb3JlL2ltcGxlbWVudGF0aW9ucy9MZWdhY3lQbHVnaW5BZGFwdGVyJykuTGVnYWN5UGx1Z2luQWRhcHRlcjtcbiAgICAgIFxuICAgICAgLy8g44Os44Ks44K344O844OX44Op44Kw44Kk44Oz44KS44Ki44OA44OX44K/44O857WM55Sx44Gn55m76YyyXG4gICAgICBwbHVnaW5NYW5hZ2VyLnJlZ2lzdGVyKG5ldyBMZWdhY3lQbHVnaW5BZGFwdGVyKG5ldyBUZXN0RXhpc3RlbmNlUGx1Z2luKCkpKTtcbiAgICAgIHBsdWdpbk1hbmFnZXIucmVnaXN0ZXIobmV3IExlZ2FjeVBsdWdpbkFkYXB0ZXIobmV3IEFzc2VydGlvbkV4aXN0c1BsdWdpbigpKSk7XG4gICAgICBcbiAgICAgIHJldHVybiBwbHVnaW5NYW5hZ2VyO1xuICAgIH0pO1xufVxuXG4vKipcbiAqIERldmVsb3BtZW50LXNwZWNpZmljIGJpbmRpbmdzXG4gKi9cbmZ1bmN0aW9uIGJpbmREZXZlbG9wbWVudFNlcnZpY2VzKCk6IHZvaWQge1xuICAvLyBEZXZlbG9wbWVudOeSsOWig+OBp+OBr+ips+e0sOOBquODreOCsOWHuuWKm+OCkuacieWKueWMllxuICBjb250YWluZXIuYmluZDxib29sZWFuPignRW5hYmxlRGVidWdMb2dnaW5nJykudG9Db25zdGFudFZhbHVlKHRydWUpO1xuICBjb250YWluZXIuYmluZDxib29sZWFuPignRW5hYmxlUGVyZm9ybWFuY2VNb25pdG9yaW5nJykudG9Db25zdGFudFZhbHVlKHRydWUpO1xufVxuXG4vKipcbiAqIFByb2R1Y3Rpb24tc3BlY2lmaWMgYmluZGluZ3NcbiAqL1xuZnVuY3Rpb24gYmluZFByb2R1Y3Rpb25TZXJ2aWNlcygpOiB2b2lkIHtcbiAgLy8gUHJvZHVjdGlvbueSsOWig+OBp+OBr+acgOmBqeWMluOCkumHjeimllxuICBjb250YWluZXIuYmluZDxib29sZWFuPignRW5hYmxlRGVidWdMb2dnaW5nJykudG9Db25zdGFudFZhbHVlKGZhbHNlKTtcbiAgY29udGFpbmVyLmJpbmQ8Ym9vbGVhbj4oJ0VuYWJsZVBlcmZvcm1hbmNlTW9uaXRvcmluZycpLnRvQ29uc3RhbnRWYWx1ZShmYWxzZSk7XG59XG5cbi8vIEV4cG9ydCBjb25maWd1cmVkIGNvbnRhaW5lclxuZXhwb3J0IHsgY29udGFpbmVyLCBpbml0aWFsaXplQ29udGFpbmVyLCBUWVBFUyB9OyJdLCJ2ZXJzaW9uIjozfQ==