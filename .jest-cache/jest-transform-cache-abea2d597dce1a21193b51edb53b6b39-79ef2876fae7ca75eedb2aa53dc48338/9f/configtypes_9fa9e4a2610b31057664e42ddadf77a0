fec9b01f9e254c7517731016717b900b
"use strict";
/**
 * Scoring configuration types
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.isJsonObject = isJsonObject;
exports.isJsonArray = isJsonArray;
exports.isJsonValue = isJsonValue;
exports.isLegacyConfig = isLegacyConfig;
exports.isPartialScoringConfig = isPartialScoringConfig;
/**
 * Type guards
 */
function isJsonObject(value) {
    return typeof value === 'object' &&
        value !== null &&
        !Array.isArray(value);
}
function isJsonArray(value) {
    return Array.isArray(value);
}
function isJsonValue(value) {
    if (value === null)
        return true;
    if (typeof value === 'string')
        return true;
    if (typeof value === 'number')
        return true;
    if (typeof value === 'boolean')
        return true;
    if (isJsonObject(value)) {
        return Object.values(value).every(isJsonValue);
    }
    if (isJsonArray(value)) {
        return value.every(isJsonValue);
    }
    return false;
}
function isLegacyConfig(value) {
    if (!isJsonObject(value))
        return false;
    const config = value;
    // Check optional properties have correct types
    if (config.plugins !== undefined && !isJsonObject(config.plugins))
        return false;
    if (config.quality !== undefined && !isJsonObject(config.quality))
        return false;
    if (config.strictMode !== undefined && typeof config.strictMode !== 'boolean')
        return false;
    if (config.scoring !== undefined && !isJsonObject(config.scoring))
        return false;
    return true;
}
function isPartialScoringConfig(value) {
    if (!isJsonObject(value))
        return false;
    const config = value;
    if (config.enabled !== undefined && typeof config.enabled !== 'boolean')
        return false;
    if (config.weights !== undefined && !isJsonObject(config.weights))
        return false;
    if (config.gradeThresholds !== undefined && !isJsonObject(config.gradeThresholds))
        return false;
    if (config.options !== undefined && !isJsonObject(config.options))
        return false;
    return true;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL3Nhc2FrYW1hL1Byb2plY3RzL1JpbW9yL3NyYy9zY29yaW5nL2NvbmZpZy10eXBlcy50cyIsIm1hcHBpbmdzIjoiO0FBQUE7O0dBRUc7O0FBaUZILG9DQUlDO0FBRUQsa0NBRUM7QUFFRCxrQ0FZQztBQUVELHdDQVdDO0FBRUQsd0RBVUM7QUFsREQ7O0dBRUc7QUFDSCxTQUFnQixZQUFZLENBQUMsS0FBYztJQUN6QyxPQUFPLE9BQU8sS0FBSyxLQUFLLFFBQVE7UUFDekIsS0FBSyxLQUFLLElBQUk7UUFDZCxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDL0IsQ0FBQztBQUVELFNBQWdCLFdBQVcsQ0FBQyxLQUFjO0lBQ3hDLE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUM5QixDQUFDO0FBRUQsU0FBZ0IsV0FBVyxDQUFDLEtBQWM7SUFDeEMsSUFBSSxLQUFLLEtBQUssSUFBSTtRQUFFLE9BQU8sSUFBSSxDQUFDO0lBQ2hDLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUTtRQUFFLE9BQU8sSUFBSSxDQUFDO0lBQzNDLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUTtRQUFFLE9BQU8sSUFBSSxDQUFDO0lBQzNDLElBQUksT0FBTyxLQUFLLEtBQUssU0FBUztRQUFFLE9BQU8sSUFBSSxDQUFDO0lBQzVDLElBQUksWUFBWSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7UUFDeEIsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBQ0QsSUFBSSxXQUFXLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQztRQUN2QixPQUFPLEtBQUssQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUNELE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQztBQUVELFNBQWdCLGNBQWMsQ0FBQyxLQUFjO0lBQzNDLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDO1FBQUUsT0FBTyxLQUFLLENBQUM7SUFDdkMsTUFBTSxNQUFNLEdBQUcsS0FBZ0MsQ0FBQztJQUVoRCwrQ0FBK0M7SUFDL0MsSUFBSSxNQUFNLENBQUMsT0FBTyxLQUFLLFNBQVMsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDO1FBQUUsT0FBTyxLQUFLLENBQUM7SUFDaEYsSUFBSSxNQUFNLENBQUMsT0FBTyxLQUFLLFNBQVMsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDO1FBQUUsT0FBTyxLQUFLLENBQUM7SUFDaEYsSUFBSSxNQUFNLENBQUMsVUFBVSxLQUFLLFNBQVMsSUFBSSxPQUFPLE1BQU0sQ0FBQyxVQUFVLEtBQUssU0FBUztRQUFFLE9BQU8sS0FBSyxDQUFDO0lBQzVGLElBQUksTUFBTSxDQUFDLE9BQU8sS0FBSyxTQUFTLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQztRQUFFLE9BQU8sS0FBSyxDQUFDO0lBRWhGLE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQztBQUVELFNBQWdCLHNCQUFzQixDQUFDLEtBQWM7SUFDbkQsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUM7UUFBRSxPQUFPLEtBQUssQ0FBQztJQUN2QyxNQUFNLE1BQU0sR0FBRyxLQUFnQyxDQUFDO0lBRWhELElBQUksTUFBTSxDQUFDLE9BQU8sS0FBSyxTQUFTLElBQUksT0FBTyxNQUFNLENBQUMsT0FBTyxLQUFLLFNBQVM7UUFBRSxPQUFPLEtBQUssQ0FBQztJQUN0RixJQUFJLE1BQU0sQ0FBQyxPQUFPLEtBQUssU0FBUyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUM7UUFBRSxPQUFPLEtBQUssQ0FBQztJQUNoRixJQUFJLE1BQU0sQ0FBQyxlQUFlLEtBQUssU0FBUyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUM7UUFBRSxPQUFPLEtBQUssQ0FBQztJQUNoRyxJQUFJLE1BQU0sQ0FBQyxPQUFPLEtBQUssU0FBUyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUM7UUFBRSxPQUFPLEtBQUssQ0FBQztJQUVoRixPQUFPLElBQUksQ0FBQztBQUNkLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL3Nhc2FrYW1hL1Byb2plY3RzL1JpbW9yL3NyYy9zY29yaW5nL2NvbmZpZy10eXBlcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFNjb3JpbmcgY29uZmlndXJhdGlvbiB0eXBlc1xuICovXG5cbmltcG9ydCB7IEdyYWRlVHlwZSwgV2VpZ2h0Q29uZmlnIH0gZnJvbSAnLi90eXBlcyc7XG5cbi8qKlxuICogTGVnYWN5IGNvbmZpZ3VyYXRpb24gc3RydWN0dXJlIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTGVnYWN5Q29uZmlnIHtcbiAgcGx1Z2lucz86IFJlY29yZDxzdHJpbmcsIHtcbiAgICB3ZWlnaHQ/OiBudW1iZXI7XG4gICAgW2tleTogc3RyaW5nXTogdW5rbm93bjtcbiAgfT47XG4gIHF1YWxpdHk/OiB7XG4gICAgdGhyZXNob2xkcz86IHtcbiAgICAgIGV4Y2VsbGVudD86IG51bWJlcjtcbiAgICAgIGdvb2Q/OiBudW1iZXI7XG4gICAgICBhY2NlcHRhYmxlPzogbnVtYmVyO1xuICAgICAgcG9vcj86IG51bWJlcjtcbiAgICB9O1xuICAgIHN0cmljdE1vZGU/OiBib29sZWFuO1xuICB9O1xuICBzdHJpY3RNb2RlPzogYm9vbGVhbjtcbiAgc2NvcmluZz86IHtcbiAgICBlbmFibGVkPzogYm9vbGVhbjtcbiAgICB3ZWlnaHRzPzogUGFydGlhbDxXZWlnaHRDb25maWc+O1xuICAgIGdyYWRlVGhyZXNob2xkcz86IFBhcnRpYWw8UmVjb3JkPEdyYWRlVHlwZSwgbnVtYmVyPj47XG4gICAgb3B0aW9ucz86IHtcbiAgICAgIGVuYWJsZVRyZW5kcz86IGJvb2xlYW47XG4gICAgICBlbmFibGVQcmVkaWN0aW9ucz86IGJvb2xlYW47XG4gICAgICBjYWNoZVJlc3VsdHM/OiBib29sZWFuO1xuICAgICAgcmVwb3J0Rm9ybWF0PzogJ2RldGFpbGVkJyB8ICdzdW1tYXJ5JyB8ICdtaW5pbWFsJztcbiAgICB9O1xuICB9O1xuICBba2V5OiBzdHJpbmddOiB1bmtub3duO1xufVxuXG4vKipcbiAqIEpTT04gdmFsdWUgdHlwZXMgZm9yIHNhZmUgcGFyc2luZ1xuICovXG5leHBvcnQgdHlwZSBKc29uVmFsdWUgPSBcbiAgfCBzdHJpbmcgXG4gIHwgbnVtYmVyIFxuICB8IGJvb2xlYW4gXG4gIHwgbnVsbCBcbiAgfCBKc29uT2JqZWN0IFxuICB8IEpzb25BcnJheTtcblxuZXhwb3J0IGludGVyZmFjZSBKc29uT2JqZWN0IHtcbiAgW2tleTogc3RyaW5nXTogSnNvblZhbHVlO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEpzb25BcnJheSBleHRlbmRzIEFycmF5PEpzb25WYWx1ZT4ge31cblxuLyoqXG4gKiBDb25maWd1cmF0aW9uIG9iamVjdCBhZnRlciBzYW5pdGl6YXRpb25cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTYW5pdGl6ZWRDb25maWcge1xuICBba2V5OiBzdHJpbmddOiBKc29uVmFsdWU7XG59XG5cbi8qKlxuICogUGFydGlhbCBzY29yaW5nIGNvbmZpZ3VyYXRpb24gZnJvbSByaW1vci5jb25maWcuanNvblxuICovXG5leHBvcnQgaW50ZXJmYWNlIFBhcnRpYWxTY29yaW5nQ29uZmlnIHtcbiAgZW5hYmxlZD86IGJvb2xlYW47XG4gIHdlaWdodHM/OiB7XG4gICAgcGx1Z2lucz86IFJlY29yZDxzdHJpbmcsIG51bWJlcj47XG4gICAgZGltZW5zaW9ucz86IFBhcnRpYWw8UmVjb3JkPHN0cmluZywgbnVtYmVyPj47XG4gIH07XG4gIGdyYWRlVGhyZXNob2xkcz86IFBhcnRpYWw8UmVjb3JkPEdyYWRlVHlwZSwgbnVtYmVyPj47XG4gIG9wdGlvbnM/OiB7XG4gICAgZW5hYmxlVHJlbmRzPzogYm9vbGVhbjtcbiAgICBlbmFibGVQcmVkaWN0aW9ucz86IGJvb2xlYW47XG4gICAgY2FjaGVSZXN1bHRzPzogYm9vbGVhbjtcbiAgICByZXBvcnRGb3JtYXQ/OiAnZGV0YWlsZWQnIHwgJ3N1bW1hcnknIHwgJ21pbmltYWwnO1xuICB9O1xufVxuXG4vKipcbiAqIFR5cGUgZ3VhcmRzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0pzb25PYmplY3QodmFsdWU6IHVua25vd24pOiB2YWx1ZSBpcyBKc29uT2JqZWN0IHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgXG4gICAgICAgICB2YWx1ZSAhPT0gbnVsbCAmJiBcbiAgICAgICAgICFBcnJheS5pc0FycmF5KHZhbHVlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzSnNvbkFycmF5KHZhbHVlOiB1bmtub3duKTogdmFsdWUgaXMgSnNvbkFycmF5IHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsdWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNKc29uVmFsdWUodmFsdWU6IHVua25vd24pOiB2YWx1ZSBpcyBKc29uVmFsdWUge1xuICBpZiAodmFsdWUgPT09IG51bGwpIHJldHVybiB0cnVlO1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykgcmV0dXJuIHRydWU7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSByZXR1cm4gdHJ1ZTtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nKSByZXR1cm4gdHJ1ZTtcbiAgaWYgKGlzSnNvbk9iamVjdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyh2YWx1ZSkuZXZlcnkoaXNKc29uVmFsdWUpO1xuICB9XG4gIGlmIChpc0pzb25BcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWUuZXZlcnkoaXNKc29uVmFsdWUpO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTGVnYWN5Q29uZmlnKHZhbHVlOiB1bmtub3duKTogdmFsdWUgaXMgTGVnYWN5Q29uZmlnIHtcbiAgaWYgKCFpc0pzb25PYmplY3QodmFsdWUpKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IGNvbmZpZyA9IHZhbHVlIGFzIFJlY29yZDxzdHJpbmcsIHVua25vd24+O1xuICBcbiAgLy8gQ2hlY2sgb3B0aW9uYWwgcHJvcGVydGllcyBoYXZlIGNvcnJlY3QgdHlwZXNcbiAgaWYgKGNvbmZpZy5wbHVnaW5zICE9PSB1bmRlZmluZWQgJiYgIWlzSnNvbk9iamVjdChjb25maWcucGx1Z2lucykpIHJldHVybiBmYWxzZTtcbiAgaWYgKGNvbmZpZy5xdWFsaXR5ICE9PSB1bmRlZmluZWQgJiYgIWlzSnNvbk9iamVjdChjb25maWcucXVhbGl0eSkpIHJldHVybiBmYWxzZTtcbiAgaWYgKGNvbmZpZy5zdHJpY3RNb2RlICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGNvbmZpZy5zdHJpY3RNb2RlICE9PSAnYm9vbGVhbicpIHJldHVybiBmYWxzZTtcbiAgaWYgKGNvbmZpZy5zY29yaW5nICE9PSB1bmRlZmluZWQgJiYgIWlzSnNvbk9iamVjdChjb25maWcuc2NvcmluZykpIHJldHVybiBmYWxzZTtcbiAgXG4gIHJldHVybiB0cnVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNQYXJ0aWFsU2NvcmluZ0NvbmZpZyh2YWx1ZTogdW5rbm93bik6IHZhbHVlIGlzIFBhcnRpYWxTY29yaW5nQ29uZmlnIHtcbiAgaWYgKCFpc0pzb25PYmplY3QodmFsdWUpKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IGNvbmZpZyA9IHZhbHVlIGFzIFJlY29yZDxzdHJpbmcsIHVua25vd24+O1xuICBcbiAgaWYgKGNvbmZpZy5lbmFibGVkICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGNvbmZpZy5lbmFibGVkICE9PSAnYm9vbGVhbicpIHJldHVybiBmYWxzZTtcbiAgaWYgKGNvbmZpZy53ZWlnaHRzICE9PSB1bmRlZmluZWQgJiYgIWlzSnNvbk9iamVjdChjb25maWcud2VpZ2h0cykpIHJldHVybiBmYWxzZTtcbiAgaWYgKGNvbmZpZy5ncmFkZVRocmVzaG9sZHMgIT09IHVuZGVmaW5lZCAmJiAhaXNKc29uT2JqZWN0KGNvbmZpZy5ncmFkZVRocmVzaG9sZHMpKSByZXR1cm4gZmFsc2U7XG4gIGlmIChjb25maWcub3B0aW9ucyAhPT0gdW5kZWZpbmVkICYmICFpc0pzb25PYmplY3QoY29uZmlnLm9wdGlvbnMpKSByZXR1cm4gZmFsc2U7XG4gIFxuICByZXR1cm4gdHJ1ZTtcbn0iXSwidmVyc2lvbiI6M30=