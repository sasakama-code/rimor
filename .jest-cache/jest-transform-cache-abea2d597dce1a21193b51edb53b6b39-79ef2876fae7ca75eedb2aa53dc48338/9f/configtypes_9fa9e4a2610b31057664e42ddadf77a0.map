{"file":"/Users/sasakama/Projects/Rimor/src/scoring/config-types.ts","mappings":";AAAA;;GAEG;;AAiFH,oCAIC;AAED,kCAEC;AAED,kCAYC;AAED,wCAWC;AAED,wDAUC;AAlDD;;GAEG;AACH,SAAgB,YAAY,CAAC,KAAc;IACzC,OAAO,OAAO,KAAK,KAAK,QAAQ;QACzB,KAAK,KAAK,IAAI;QACd,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;AAC/B,CAAC;AAED,SAAgB,WAAW,CAAC,KAAc;IACxC,OAAO,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;AAC9B,CAAC;AAED,SAAgB,WAAW,CAAC,KAAc;IACxC,IAAI,KAAK,KAAK,IAAI;QAAE,OAAO,IAAI,CAAC;IAChC,IAAI,OAAO,KAAK,KAAK,QAAQ;QAAE,OAAO,IAAI,CAAC;IAC3C,IAAI,OAAO,KAAK,KAAK,QAAQ;QAAE,OAAO,IAAI,CAAC;IAC3C,IAAI,OAAO,KAAK,KAAK,SAAS;QAAE,OAAO,IAAI,CAAC;IAC5C,IAAI,YAAY,CAAC,KAAK,CAAC,EAAE,CAAC;QACxB,OAAO,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;IACjD,CAAC;IACD,IAAI,WAAW,CAAC,KAAK,CAAC,EAAE,CAAC;QACvB,OAAO,KAAK,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;IAClC,CAAC;IACD,OAAO,KAAK,CAAC;AACf,CAAC;AAED,SAAgB,cAAc,CAAC,KAAc;IAC3C,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC;QAAE,OAAO,KAAK,CAAC;IACvC,MAAM,MAAM,GAAG,KAAgC,CAAC;IAEhD,+CAA+C;IAC/C,IAAI,MAAM,CAAC,OAAO,KAAK,SAAS,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,OAAO,CAAC;QAAE,OAAO,KAAK,CAAC;IAChF,IAAI,MAAM,CAAC,OAAO,KAAK,SAAS,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,OAAO,CAAC;QAAE,OAAO,KAAK,CAAC;IAChF,IAAI,MAAM,CAAC,UAAU,KAAK,SAAS,IAAI,OAAO,MAAM,CAAC,UAAU,KAAK,SAAS;QAAE,OAAO,KAAK,CAAC;IAC5F,IAAI,MAAM,CAAC,OAAO,KAAK,SAAS,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,OAAO,CAAC;QAAE,OAAO,KAAK,CAAC;IAEhF,OAAO,IAAI,CAAC;AACd,CAAC;AAED,SAAgB,sBAAsB,CAAC,KAAc;IACnD,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC;QAAE,OAAO,KAAK,CAAC;IACvC,MAAM,MAAM,GAAG,KAAgC,CAAC;IAEhD,IAAI,MAAM,CAAC,OAAO,KAAK,SAAS,IAAI,OAAO,MAAM,CAAC,OAAO,KAAK,SAAS;QAAE,OAAO,KAAK,CAAC;IACtF,IAAI,MAAM,CAAC,OAAO,KAAK,SAAS,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,OAAO,CAAC;QAAE,OAAO,KAAK,CAAC;IAChF,IAAI,MAAM,CAAC,eAAe,KAAK,SAAS,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,eAAe,CAAC;QAAE,OAAO,KAAK,CAAC;IAChG,IAAI,MAAM,CAAC,OAAO,KAAK,SAAS,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,OAAO,CAAC;QAAE,OAAO,KAAK,CAAC;IAEhF,OAAO,IAAI,CAAC;AACd,CAAC","names":[],"sources":["/Users/sasakama/Projects/Rimor/src/scoring/config-types.ts"],"sourcesContent":["/**\n * Scoring configuration types\n */\n\nimport { GradeType, WeightConfig } from './types';\n\n/**\n * Legacy configuration structure for backward compatibility\n */\nexport interface LegacyConfig {\n  plugins?: Record<string, {\n    weight?: number;\n    [key: string]: unknown;\n  }>;\n  quality?: {\n    thresholds?: {\n      excellent?: number;\n      good?: number;\n      acceptable?: number;\n      poor?: number;\n    };\n    strictMode?: boolean;\n  };\n  strictMode?: boolean;\n  scoring?: {\n    enabled?: boolean;\n    weights?: Partial<WeightConfig>;\n    gradeThresholds?: Partial<Record<GradeType, number>>;\n    options?: {\n      enableTrends?: boolean;\n      enablePredictions?: boolean;\n      cacheResults?: boolean;\n      reportFormat?: 'detailed' | 'summary' | 'minimal';\n    };\n  };\n  [key: string]: unknown;\n}\n\n/**\n * JSON value types for safe parsing\n */\nexport type JsonValue = \n  | string \n  | number \n  | boolean \n  | null \n  | JsonObject \n  | JsonArray;\n\nexport interface JsonObject {\n  [key: string]: JsonValue;\n}\n\nexport interface JsonArray extends Array<JsonValue> {}\n\n/**\n * Configuration object after sanitization\n */\nexport interface SanitizedConfig {\n  [key: string]: JsonValue;\n}\n\n/**\n * Partial scoring configuration from rimor.config.json\n */\nexport interface PartialScoringConfig {\n  enabled?: boolean;\n  weights?: {\n    plugins?: Record<string, number>;\n    dimensions?: Partial<Record<string, number>>;\n  };\n  gradeThresholds?: Partial<Record<GradeType, number>>;\n  options?: {\n    enableTrends?: boolean;\n    enablePredictions?: boolean;\n    cacheResults?: boolean;\n    reportFormat?: 'detailed' | 'summary' | 'minimal';\n  };\n}\n\n/**\n * Type guards\n */\nexport function isJsonObject(value: unknown): value is JsonObject {\n  return typeof value === 'object' && \n         value !== null && \n         !Array.isArray(value);\n}\n\nexport function isJsonArray(value: unknown): value is JsonArray {\n  return Array.isArray(value);\n}\n\nexport function isJsonValue(value: unknown): value is JsonValue {\n  if (value === null) return true;\n  if (typeof value === 'string') return true;\n  if (typeof value === 'number') return true;\n  if (typeof value === 'boolean') return true;\n  if (isJsonObject(value)) {\n    return Object.values(value).every(isJsonValue);\n  }\n  if (isJsonArray(value)) {\n    return value.every(isJsonValue);\n  }\n  return false;\n}\n\nexport function isLegacyConfig(value: unknown): value is LegacyConfig {\n  if (!isJsonObject(value)) return false;\n  const config = value as Record<string, unknown>;\n  \n  // Check optional properties have correct types\n  if (config.plugins !== undefined && !isJsonObject(config.plugins)) return false;\n  if (config.quality !== undefined && !isJsonObject(config.quality)) return false;\n  if (config.strictMode !== undefined && typeof config.strictMode !== 'boolean') return false;\n  if (config.scoring !== undefined && !isJsonObject(config.scoring)) return false;\n  \n  return true;\n}\n\nexport function isPartialScoringConfig(value: unknown): value is PartialScoringConfig {\n  if (!isJsonObject(value)) return false;\n  const config = value as Record<string, unknown>;\n  \n  if (config.enabled !== undefined && typeof config.enabled !== 'boolean') return false;\n  if (config.weights !== undefined && !isJsonObject(config.weights)) return false;\n  if (config.gradeThresholds !== undefined && !isJsonObject(config.gradeThresholds)) return false;\n  if (config.options !== undefined && !isJsonObject(config.options)) return false;\n  \n  return true;\n}"],"version":3}