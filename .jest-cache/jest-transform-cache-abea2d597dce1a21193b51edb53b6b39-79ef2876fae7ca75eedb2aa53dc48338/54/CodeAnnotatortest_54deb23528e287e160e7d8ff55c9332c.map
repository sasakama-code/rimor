{"file":"/Users/sasakama/Projects/Rimor/test/reporting/CodeAnnotator.test.ts","mappings":"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","names":[],"sources":["/Users/sasakama/Projects/Rimor/test/reporting/CodeAnnotator.test.ts"],"sourcesContent":["/**\n * CodeAnnotator Tests\n * v0.8.0 - Phase 4: Context Engineering\n * \n * コードアノテーション機能のテスト\n */\n\nimport { CodeAnnotator } from '../../src/reporting/CodeAnnotator';\nimport { AnnotationGenerator } from '../../src/reporting/AnnotationGenerator';\nimport {\n  StructuredAnalysisResult,\n  Issue,\n  Severity,\n  IssueType,\n  AnnotationOptions\n} from '../../src/reporting/types';\nimport * as fs from 'fs/promises';\nimport * as path from 'path';\nimport * as os from 'os';\n\n// モックファイルシステム\njest.mock('fs/promises');\nconst mockFs = fs as jest.Mocked<typeof fs>;\n\n// モックファイルの内容（グローバルに定義）\nconst mockFileContents: Record<string, string> = {\n  '/tmp/rimor-test/db.ts': `export class Database {\n  constructor(private config: any) {}\n  \n  async query(sql: string) {\n    // Some code before\n    console.log('Query:', sql);\n    \n    // Line 8\n    // Line 9\n    const result = await this.db.query(sql); // Line 10 - SQL injection here\n    // Line 11\n    return result;\n  }\n}`,\n  '/tmp/rimor-test/api.ts': `import express from 'express';\n\nexport function setupRoutes(app: express.Application) {\n  app.get('/user/:id', async (req, res) => {\n    const userId = req.params.id;\n    \n    // Some code...\n    // Line 7\n    // Line 8\n    // Line 9\n    // Line 10\n    // Line 11\n    // Line 12\n    // Line 13\n    // Line 14\n    // Line 15\n    // Line 16\n    // Line 17\n    // Line 18\n    // Line 19\n    res.send('<h1>Welcome ' + userId + '</h1>'); // Line 20 - XSS here\n    \n    // More code...\n    // Line 22\n    // Line 23\n    // Line 24\n    // Line 25\n    // Line 26\n    // Line 27\n    // Line 28\n    // Line 29\n    console.log('Test'); // Line 30 - Test quality issue\n  });\n}`\n};\n\ndescribe('CodeAnnotator', () => {\n  let annotator: CodeAnnotator;\n  let generator: AnnotationGenerator;\n  let tempDir: string = '/tmp/rimor-test';\n\n  beforeEach(() => {\n    generator = new AnnotationGenerator();\n    annotator = new CodeAnnotator(generator);\n    \n    // テスト用一時ディレクトリ（固定値にして予測可能にする）\n    tempDir = '/tmp/rimor-test';\n    \n    // fsモックのリセット\n    jest.clearAllMocks();\n    \n    // デフォルトのモック設定\n    mockFs.readFile.mockImplementation((filePath: any) => {\n      const normalizedPath = typeof filePath === 'string' ? filePath : filePath.toString();\n      const content = mockFileContents[normalizedPath];\n      if (content) {\n        return Promise.resolve(content);\n      }\n      return Promise.reject(new Error('File not found'));\n    });\n  });\n\n  afterEach(() => {\n    // モックをリセット\n    jest.clearAllMocks();\n  });\n\n  describe('annotateFiles', () => {\n    const mockResult: StructuredAnalysisResult = {\n      metadata: {\n        version: '0.8.0',\n        timestamp: new Date().toISOString(),\n        analyzedPath: tempDir,\n        duration: 1000\n      },\n      summary: {\n        totalFiles: 2,\n        totalIssues: 3,\n        issueBySeverity: {\n          critical: 1,\n          high: 1,\n          medium: 1,\n          low: 0,\n          info: 0\n        },\n        issueByType: {\n          'SQL_INJECTION': 1,\n          'XSS': 1,\n          'TEST_QUALITY': 1\n        }\n      },\n      issues: [\n        {\n          id: '1',\n          type: IssueType.SQL_INJECTION,\n          severity: Severity.CRITICAL,\n          category: 'security' as const,\n          location: {\n            file: path.join(tempDir, 'db.ts'),\n            startLine: 10,\n            endLine: 10\n          },\n          message: 'SQL Injection vulnerability'\n        },\n        {\n          id: '2',\n          type: IssueType.XSS,\n          severity: Severity.HIGH,\n          category: 'security' as const,\n          location: {\n            file: path.join(tempDir, 'api.ts'),\n            startLine: 20,\n            endLine: 20\n          },\n          message: 'XSS vulnerability'\n        },\n        {\n          id: '3',\n          type: IssueType.TEST_QUALITY,\n          severity: Severity.MEDIUM,\n          category: 'test-quality' as const,\n          location: {\n            file: path.join(tempDir, 'api.ts'),\n            startLine: 30,\n            endLine: 30\n          },\n          message: 'Test quality issue'\n        }\n      ],\n      metrics: {\n        testCoverage: { overall: 80, byModule: {} },\n        codeQuality: {}\n      }\n    };\n\n\n\n    it('should annotate multiple files with issues', async () => {\n      // モックが正しく設定されていることを確認\n      mockFs.readFile.mockImplementation((filePath: any) => {\n        const normalizedPath = typeof filePath === 'string' ? filePath : filePath.toString();\n        const content = mockFileContents[normalizedPath];\n        if (content) {\n          return Promise.resolve(content);\n        }\n        return Promise.reject(new Error('File not found'));\n      });\n      \n      const annotations = await annotator.annotateFiles(mockResult);\n      \n      expect(annotations).toHaveLength(2); // 2つのファイル\n      \n      // db.tsのアノテーション\n      const dbAnnotation = annotations.find(a => a.filePath.endsWith('db.ts'));\n      expect(dbAnnotation).toBeDefined();\n      expect(dbAnnotation!.annotationCount).toBe(1);\n      expect(dbAnnotation!.annotatedContent).toContain('// RIMOR-CRITICAL:');\n      expect(dbAnnotation!.annotatedContent).toContain('SQL Injection vulnerability');\n      \n      // api.tsのアノテーション\n      const apiAnnotation = annotations.find(a => a.filePath.endsWith('api.ts'));\n      expect(apiAnnotation).toBeDefined();\n      expect(apiAnnotation!.annotationCount).toBe(2);\n      expect(apiAnnotation!.annotatedContent).toContain('// RIMOR-HIGH:');\n      expect(apiAnnotation!.annotatedContent).toContain('XSS vulnerability');\n      expect(apiAnnotation!.annotatedContent).toContain('// RIMOR-MEDIUM:');\n      expect(apiAnnotation!.annotatedContent).toContain('Test quality issue');\n    });\n\n    it('should preserve indentation when adding annotations', async () => {\n      const annotations = await annotator.annotateFiles(mockResult);\n      \n      const dbAnnotation = annotations.find(a => a.filePath.endsWith('db.ts'));\n      const lines = dbAnnotation!.annotatedContent.split('\\n');\n      \n      // アノテーションが正しいインデントで挿入されていることを確認\n      const annotationLine = lines.find(line => line.includes('RIMOR-CRITICAL'));\n      expect(annotationLine).toMatch(/^    \\/\\/ RIMOR-CRITICAL:/); // 4スペースのインデント\n    });\n\n    it('should handle files that cannot be read', async () => {\n      // 読み込みエラーをシミュレート - 特定のファイルのみエラー\n      mockFs.readFile.mockImplementation((filePath: any) => {\n        const normalizedPath = typeof filePath === 'string' ? filePath : filePath.toString();\n        if (normalizedPath.endsWith('db.ts')) {\n          return Promise.reject(new Error('Permission denied'));\n        }\n        const content = mockFileContents[normalizedPath];\n        if (content) {\n          return Promise.resolve(content);\n        }\n        return Promise.reject(new Error('File not found'));\n      });\n      \n      const annotations = await annotator.annotateFiles(mockResult);\n      \n      // エラーが発生したファイルはスキップされる\n      expect(annotations).toHaveLength(1); // api.tsのみ\n    });\n\n    it('should apply block format when specified', async () => {\n      // モックをリセットして正常な読み込みに戻す\n      mockFs.readFile.mockImplementation((filePath: any) => {\n        const normalizedPath = typeof filePath === 'string' ? filePath : filePath.toString();\n        const content = mockFileContents[normalizedPath];\n        if (content) {\n          return Promise.resolve(content);\n        }\n        return Promise.reject(new Error('File not found'));\n      });\n      \n      const options: AnnotationOptions = {\n        format: 'block'\n      };\n      \n      const annotations = await annotator.annotateFiles(mockResult, options);\n      \n      const dbAnnotation = annotations.find(a => a.filePath.endsWith('db.ts'));\n      expect(dbAnnotation!.annotatedContent).toContain('/*');\n      expect(dbAnnotation!.annotatedContent).toContain(' * RIMOR Security Analysis Report');\n      expect(dbAnnotation!.annotatedContent).toContain(' */');\n    });\n  });\n\n  describe('saveAnnotatedFiles', () => {\n    const mockAnnotations = [\n      {\n        filePath: path.join(tempDir, 'db.ts'),\n        originalContent: 'original db content',\n        annotatedContent: 'annotated db content',\n        annotationCount: 1\n      },\n      {\n        filePath: path.join(tempDir, 'api.ts'),\n        originalContent: 'original api content',\n        annotatedContent: 'annotated api content',\n        annotationCount: 2\n      }\n    ];\n\n    beforeEach(() => {\n      mockFs.writeFile.mockResolvedValue(undefined);\n      mockFs.mkdir.mockResolvedValue(undefined);\n      mockFs.access.mockRejectedValue(new Error('Not found')); // ディレクトリが存在しない\n    });\n\n    it('should save annotated files to original location when overwrite is true', async () => {\n      const options: AnnotationOptions = {\n        overwrite: true\n      };\n      \n      await annotator.saveAnnotatedFiles(mockAnnotations, undefined, options);\n      \n      expect(mockFs.writeFile).toHaveBeenCalledTimes(2);\n      expect(mockFs.writeFile).toHaveBeenCalledWith(\n        path.join(tempDir, 'db.ts'),\n        'annotated db content',\n        'utf-8'\n      );\n      expect(mockFs.writeFile).toHaveBeenCalledWith(\n        path.join(tempDir, 'api.ts'),\n        'annotated api content',\n        'utf-8'\n      );\n    });\n\n    it('should save to output directory when specified', async () => {\n      const outputDir = path.join(tempDir, 'annotated');\n      \n      await annotator.saveAnnotatedFiles(mockAnnotations, outputDir);\n      \n      expect(mockFs.mkdir).toHaveBeenCalled();\n      expect(mockFs.writeFile).toHaveBeenCalledTimes(2);\n      \n      // 実際の書き込み内容を確認\n      const calls = mockFs.writeFile.mock.calls;\n      \n      // ファイルが正しく書き込まれたことを確認\n      expect(calls).toHaveLength(2);\n      \n      // 各呼び出しが正しいコンテンツを持っているか確認\n      const dbCall = calls.find(call => call[1] === 'annotated db content');\n      const apiCall = calls.find(call => call[1] === 'annotated api content');\n      \n      expect(dbCall).toBeDefined();\n      expect(apiCall).toBeDefined();\n    });\n\n    it('should create .annotated suffix when no output directory specified', async () => {\n      await annotator.saveAnnotatedFiles(mockAnnotations);\n      \n      expect(mockFs.writeFile).toHaveBeenCalledWith(\n        path.join(tempDir, 'db.annotated.ts'),\n        'annotated db content',\n        'utf-8'\n      );\n      expect(mockFs.writeFile).toHaveBeenCalledWith(\n        path.join(tempDir, 'api.annotated.ts'),\n        'annotated api content',\n        'utf-8'\n      );\n    });\n  });\n\n  describe('generateAnnotationSummary', () => {\n    it('should generate summary report', () => {\n      const annotations = [\n        {\n          filePath: '/project/src/db.ts',\n          originalContent: 'content1',\n          annotatedContent: 'annotated1',\n          annotationCount: 3\n        },\n        {\n          filePath: '/project/src/api.ts',\n          originalContent: 'content2',\n          annotatedContent: 'annotated2',\n          annotationCount: 2\n        }\n      ];\n      \n      const summary = annotator.generateAnnotationSummary(annotations);\n      \n      expect(summary).toContain('# Annotation Summary');\n      expect(summary).toContain('Total files annotated: 2');\n      expect(summary).toContain('Total annotations added: 5');\n      expect(summary).toContain('- /project/src/db.ts: 3 annotations');\n      expect(summary).toContain('- /project/src/api.ts: 2 annotations');\n    });\n\n    it('should handle empty annotations array', () => {\n      const summary = annotator.generateAnnotationSummary([]);\n      \n      expect(summary).toContain('Total files annotated: 0');\n      expect(summary).toContain('Total annotations added: 0');\n      expect(summary).not.toContain('## Annotated Files:');\n    });\n  });\n\n  describe('previewAnnotations', () => {\n    const mockResult: StructuredAnalysisResult = {\n      metadata: {\n        version: '0.8.0',\n        timestamp: new Date().toISOString(),\n        analyzedPath: '/project',\n        duration: 1000\n      },\n      summary: {\n        totalFiles: 1,\n        totalIssues: 2,\n        issueBySeverity: {\n          critical: 1,\n          high: 1,\n          medium: 0,\n          low: 0,\n          info: 0\n        },\n        issueByType: {}\n      },\n      issues: [\n        {\n          id: '1',\n          type: IssueType.SQL_INJECTION,\n          severity: Severity.CRITICAL,\n          category: 'security' as const,\n          location: {\n            file: '/project/db.ts',\n            startLine: 10,\n            endLine: 10\n          },\n          message: 'SQL Injection'\n        },\n        {\n          id: '2',\n          type: IssueType.XSS,\n          severity: Severity.HIGH,\n          category: 'security' as const,\n          location: {\n            file: '/project/db.ts',\n            startLine: 20,\n            endLine: 20\n          },\n          message: 'XSS vulnerability'\n        }\n      ],\n      metrics: {\n        testCoverage: { overall: 80, byModule: {} },\n        codeQuality: {}\n      }\n    };\n\n    it('should generate preview of annotations', () => {\n      const preview = annotator.previewAnnotations(mockResult);\n      \n      expect(preview).toContain('# Annotation Preview');\n      expect(preview).toContain('The following annotations would be added:');\n      expect(preview).toContain('## /project/db.ts');\n      expect(preview).toContain('Line 10:');\n      expect(preview).toContain('// RIMOR-CRITICAL:');\n      expect(preview).toContain('SQL Injection');\n      expect(preview).toContain('Line 20:');\n      expect(preview).toContain('// RIMOR-HIGH:');\n      expect(preview).toContain('XSS vulnerability');\n    });\n\n    it('should show block format in preview when specified', () => {\n      const options: AnnotationOptions = {\n        format: 'block'\n      };\n      \n      const preview = annotator.previewAnnotations(mockResult, options);\n      \n      expect(preview).toContain('/*');\n      expect(preview).toContain(' * RIMOR Security Analysis Report');\n      expect(preview).toContain(' */');\n    });\n  });\n\n  describe('cleanupAnnotations', () => {\n    beforeEach(() => {\n      mockFs.readFile.mockResolvedValue(`\nexport function test() {\n  // RIMOR-HIGH: [high] XSS - XSS vulnerability\n  const html = userInput;\n  \n  /* RIMOR Security Analysis Report\n   * Issue: SQL_INJECTION\n   */\n  const query = sql;\n  \n  # RIMOR-CRITICAL: SQL Injection\n  executeQuery(query);\n  \n  <!-- RIMOR-MEDIUM: Security issue -->\n  return html;\n}\n`);\n      mockFs.writeFile.mockResolvedValue(undefined);\n    });\n\n    it('should remove all RIMOR annotations', async () => {\n      const result = await annotator.cleanupAnnotations('/test/file.ts');\n      \n      expect(result).toBe(true);\n      expect(mockFs.writeFile).toHaveBeenCalled();\n      \n      const writtenContent = mockFs.writeFile.mock.calls[0][1] as string;\n      expect(writtenContent).not.toContain('RIMOR');\n      expect(writtenContent).toContain('const html = userInput;');\n      expect(writtenContent).toContain('const query = sql;');\n    });\n\n    it('should handle custom prefix', async () => {\n      mockFs.readFile.mockResolvedValue(`\n// SECURITY-HIGH: Custom annotation\nconst data = input;\n\n// RIMOR-HIGH: Default annotation\nconst other = value;\n`);\n      \n      await annotator.cleanupAnnotations('/test/file.ts', 'SECURITY');\n      \n      const writtenContent = mockFs.writeFile.mock.calls[0][1] as string;\n      expect(writtenContent).not.toContain('SECURITY-HIGH');\n      expect(writtenContent).toContain('RIMOR-HIGH'); // 他のプレフィックスは残る\n    });\n\n    it('should return false if no annotations found', async () => {\n      mockFs.readFile.mockResolvedValue(`\nexport function clean() {\n  return 'no annotations here';\n}\n`);\n      \n      const result = await annotator.cleanupAnnotations('/test/file.ts');\n      \n      expect(result).toBe(false);\n      expect(mockFs.writeFile).not.toHaveBeenCalled();\n    });\n\n    it('should handle file read errors', async () => {\n      mockFs.readFile.mockRejectedValue(new Error('File not found'));\n      \n      const result = await annotator.cleanupAnnotations('/test/missing.ts');\n      \n      expect(result).toBe(false);\n      expect(mockFs.writeFile).not.toHaveBeenCalled();\n    });\n  });\n});"],"version":3}