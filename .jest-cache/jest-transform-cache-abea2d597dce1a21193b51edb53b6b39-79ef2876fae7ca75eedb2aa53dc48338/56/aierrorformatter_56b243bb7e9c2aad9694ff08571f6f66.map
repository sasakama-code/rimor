{"file":"/Users/sasakama/Projects/Rimor/src/testing/ai-error-formatter.ts","mappings":"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","names":[],"sources":["/Users/sasakama/Projects/Rimor/src/testing/ai-error-formatter.ts"],"sourcesContent":["import { TestErrorContext } from './error-context';\nimport { UnifiedReportEngine } from '../reporting/core/UnifiedReportEngine';\nimport { AIJsonFormatter } from '../reporting/formatters/AIJsonFormatter';\nimport * as path from 'path';\nimport { sanitizeObject } from '../utils/stringSanitizer';\n\n/**\n * AI向けテストエラーフォーマット\n */\nexport interface AITestErrorReport {\n  version: string;\n  format: 'ai-test-error';\n  executionDate: string;\n  summary: ErrorSummary;\n  errorGroups: ErrorGroup[];\n  contextualInstructions: ContextualInstructions;\n  quickActions: QuickAction[];\n  ciTraceability?: CITraceabilityInfo;\n  executionInfo?: ExecutionInfo;\n}\n\ninterface ExecutionInfo {\n  startTime: string;\n  endTime?: string;\n  duration?: number;\n  environment: string;\n  totalFilesProcessed?: number;\n  totalErrorsCollected?: number;\n  jestReportedFailures?: number;\n}\n\ninterface CITraceabilityInfo {\n  runId: string;\n  runNumber: string;\n  workflow: string;\n  job?: string;\n  actor?: string;\n  repository: string;\n  branch: string;\n  sha: string;\n  prNumber?: string;\n  deepLink?: string;\n  prLink?: string;\n  nodeVersion: string;\n  os: string;\n  timestamp: string;\n}\n\ninterface ErrorSummary {\n  totalErrors: number;\n  criticalErrors: number;\n  testFileCount: number;\n  commonPatterns: string[];\n  estimatedFixTime: number; // 分単位\n}\n\ninterface ErrorGroup {\n  pattern: string;\n  priority: 'critical' | 'high' | 'medium' | 'low';\n  errors: FormattedError[];\n  commonSolution?: string;\n}\n\ninterface FormattedError {\n  id: string;\n  testFile: string;\n  testName: string;\n  errorMessage: string;\n  context: {\n    failedAssertion: string;\n    relevantCode: string;\n    stackTrace: string;\n  };\n  suggestedFix: {\n    explanation: string;\n    code: string;\n    confidence: number;\n  };\n  relatedInfo: {\n    sourceFile?: string;\n    dependencies: string[];\n  };\n  errorHash?: string; // CI環境でのエラー照合用\n}\n\ninterface ContextualInstructions {\n  forHuman: string;\n  forAI: string;\n  debuggingSteps: string[];\n}\n\ninterface QuickAction {\n  command: string;\n  description: string;\n  expectedOutcome: string;\n}\n\n/**\n * AI向けテストエラーフォーマッタ\n * Context Engineeringの原則に基づいてエラー情報を最適化\n */\nexport class AITestErrorFormatter {\n  private readonly VERSION = '0.8.0';\n  private reportEngine: UnifiedReportEngine;\n  \n  constructor() {\n    this.reportEngine = new UnifiedReportEngine();\n    this.reportEngine.setStrategy(new AIJsonFormatter());\n  }\n  \n  /**\n   * エラーコンテキストをAI向けにフォーマット\n   */\n  async formatErrors(\n    errorContexts: TestErrorContext[],\n    projectPath: string\n  ): Promise<AITestErrorReport> {\n    // エラーのグループ化（Context Isolation）\n    const errorGroups = this.groupErrors(errorContexts);\n    \n    // サマリーの生成（Context Compression）\n    const summary = this.generateSummary(errorContexts, errorGroups);\n    \n    // CIトレーサビリティ情報の抽出\n    const ciTraceability = this.extractCITraceability(errorContexts);\n    \n    // 文脈的な指示の生成\n    const contextualInstructions = this.generateInstructions(\n      errorContexts,\n      errorGroups\n    );\n    \n    // クイックアクションの生成\n    const quickActions = this.generateQuickActions(errorGroups);\n    \n    // 実行日時を取得\n    const executionDate = new Date().toISOString();\n    \n    return {\n      version: this.VERSION,\n      format: 'ai-test-error',\n      executionDate,\n      summary,\n      errorGroups,\n      contextualInstructions,\n      quickActions,\n      ciTraceability\n    };\n  }\n  \n  /**\n   * マークダウン形式で出力\n   */\n  formatAsMarkdown(report: AITestErrorReport): string {\n    // レポート全体をサニタイズ\n    const sanitizedReport = sanitizeObject(report) as AITestErrorReport;\n    \n    let markdown = '# テストエラー分析レポート\\n\\n';\n    \n    // 実行日時情報\n    markdown += '## 📅 実行情報\\n';\n    if (sanitizedReport.executionInfo) {\n      markdown += `- **実行開始**: ${new Date(sanitizedReport.executionInfo.startTime).toLocaleString('ja-JP', { timeZone: 'Asia/Tokyo' })}\\n`;\n      if (sanitizedReport.executionInfo.endTime) {\n        markdown += `- **実行終了**: ${new Date(sanitizedReport.executionInfo.endTime).toLocaleString('ja-JP', { timeZone: 'Asia/Tokyo' })}\\n`;\n        markdown += `- **実行時間**: ${sanitizedReport.executionInfo.duration}秒\\n`;\n      }\n      markdown += `- **実行環境**: ${sanitizedReport.executionInfo.environment}\\n`;\n      if (sanitizedReport.executionInfo.totalFilesProcessed) {\n        markdown += `- **処理ファイル数**: ${sanitizedReport.executionInfo.totalFilesProcessed}\\n`;\n      }\n      if (sanitizedReport.executionInfo.totalErrorsCollected !== undefined && sanitizedReport.executionInfo.jestReportedFailures !== undefined) {\n        markdown += `- **収集エラー数**: ${sanitizedReport.executionInfo.totalErrorsCollected} / Jest報告数: ${sanitizedReport.executionInfo.jestReportedFailures}\\n`;\n        if (sanitizedReport.executionInfo.totalErrorsCollected < sanitizedReport.executionInfo.jestReportedFailures) {\n          markdown += `- **⚠️ 警告**: 一部のエラーが収集されていない可能性があります\\n`;\n        }\n      }\n    } else {\n      markdown += `- **レポート生成日時**: ${new Date(sanitizedReport.executionDate).toLocaleString('ja-JP', { timeZone: 'Asia/Tokyo' })}\\n`;\n    }\n    markdown += '\\n';\n    \n    // CIトレーサビリティ情報またはローカル実行情報\n    if (sanitizedReport.ciTraceability) {\n      if (sanitizedReport.ciTraceability.runId === 'local') {\n        markdown += '## 💻 ローカル実行情報\\n';\n        markdown += `- **実行ユーザー**: ${sanitizedReport.ciTraceability.actor}\\n`;\n        markdown += `- **実行環境**: Node.js ${sanitizedReport.ciTraceability.nodeVersion} on ${sanitizedReport.ciTraceability.os}\\n`;\n        markdown += `- **実行時刻**: ${sanitizedReport.ciTraceability.timestamp}\\n`;\n      } else {\n        markdown += '## 🔍 CI実行情報\\n';\n        markdown += `- **ワークフロー**: ${sanitizedReport.ciTraceability.workflow} #${sanitizedReport.ciTraceability.runNumber}\\n`;\n        markdown += `- **リポジトリ**: ${sanitizedReport.ciTraceability.repository}\\n`;\n        markdown += `- **ブランチ**: ${sanitizedReport.ciTraceability.branch}\\n`;\n        markdown += `- **コミット**: ${sanitizedReport.ciTraceability.sha.substring(0, 7)}\\n`;\n        if (sanitizedReport.ciTraceability.prNumber) {\n          markdown += `- **PR**: [#${sanitizedReport.ciTraceability.prNumber}](${sanitizedReport.ciTraceability.prLink})\\n`;\n        }\n        if (sanitizedReport.ciTraceability.deepLink) {\n          markdown += `- **CI実行**: [${sanitizedReport.ciTraceability.runId}](${sanitizedReport.ciTraceability.deepLink})\\n`;\n        }\n        markdown += `- **実行環境**: Node.js ${sanitizedReport.ciTraceability.nodeVersion} on ${sanitizedReport.ciTraceability.os}\\n`;\n        markdown += `- **実行時刻**: ${sanitizedReport.ciTraceability.timestamp}\\n`;\n      }\n      markdown += '\\n';\n    }\n    \n    // サマリー\n    markdown += '## サマリー\\n';\n    markdown += `- **総エラー数**: ${sanitizedReport.summary.totalErrors}\\n`;\n    markdown += `- **重大エラー**: ${sanitizedReport.summary.criticalErrors}\\n`;\n    markdown += `- **影響テストファイル**: ${sanitizedReport.summary.testFileCount}\\n`;\n    markdown += `- **推定修正時間**: ${sanitizedReport.summary.estimatedFixTime}分\\n\\n`;\n    \n    if (sanitizedReport.summary.commonPatterns.length > 0) {\n      markdown += '### 共通パターン\\n';\n      sanitizedReport.summary.commonPatterns.forEach(pattern => {\n        markdown += `- ${pattern}\\n`;\n      });\n      markdown += '\\n';\n    }\n    \n    // クイックアクション\n    if (sanitizedReport.quickActions.length > 0) {\n      markdown += '## 推奨アクション\\n';\n      sanitizedReport.quickActions.forEach((action, index) => {\n        markdown += `### ${index + 1}. ${action.description}\\n`;\n        markdown += `\\`\\`\\`bash\\n${action.command}\\n\\`\\`\\`\\n`;\n        markdown += `期待される結果: ${action.expectedOutcome}\\n\\n`;\n      });\n    }\n    \n    // エラーグループ\n    markdown += '## エラー詳細\\n\\n';\n    sanitizedReport.errorGroups.forEach((group, groupIndex) => {\n      markdown += `### グループ ${groupIndex + 1}: ${group.pattern} (優先度: ${group.priority})\\n\\n`;\n      \n      if (group.commonSolution) {\n        markdown += `**共通の解決策**: ${group.commonSolution}\\n\\n`;\n      }\n      \n      group.errors.forEach((error, errorIndex) => {\n        markdown += `#### エラー ${groupIndex + 1}.${errorIndex + 1}: ${error.testName}\\n`;\n        markdown += `- **ファイル**: ${error.testFile}\\n`;\n        markdown += `- **エラー**: ${error.errorMessage}\\n\\n`;\n        \n        markdown += '**失敗コード**:\\n';\n        markdown += '```typescript\\n';\n        markdown += error.context.failedAssertion;\n        markdown += '\\n```\\n\\n';\n        \n        // 有効な修正案がある場合のみ修正案セクションを表示\n        const hasValidFix = error.suggestedFix.code && \n                           !error.suggestedFix.code.startsWith('// 自動修正案を生成できません') &&\n                           !error.suggestedFix.code.startsWith('// ') &&\n                           error.suggestedFix.confidence > 0.3;\n        \n        if (hasValidFix) {\n          markdown += '**修正案**:\\n';\n          markdown += '```typescript\\n';\n          markdown += error.suggestedFix.code;\n          markdown += '\\n```\\n';\n          markdown += `${error.suggestedFix.explanation} (信頼度: ${Math.round(error.suggestedFix.confidence * 100)}%)\\n\\n`;\n        } else {\n          // 修正案がない場合は説明のみ表示\n          markdown += `**対処方法**: ${error.suggestedFix.explanation}\\n\\n`;\n        }\n      });\n    });\n    \n    // AI向け指示\n    markdown += '## デバッグ手順\\n\\n';\n    sanitizedReport.contextualInstructions.debuggingSteps.forEach((step, index) => {\n      markdown += `${index + 1}. ${step}\\n`;\n    });\n    \n    markdown += '\\n---\\n\\n';\n    markdown += '## AI向け指示\\n\\n';\n    markdown += sanitizedReport.contextualInstructions.forAI;\n    \n    return markdown;\n  }\n  \n  /**\n   * JSON形式で出力\n   */\n  formatAsJSON(report: AITestErrorReport): string {\n    // 実行情報を含めてJSON出力\n    const reportWithExecutionInfo = {\n      ...report,\n      executionDate: report.executionDate || new Date().toISOString()\n    };\n    \n    // レポート全体をサニタイズしてからJSON化\n    const sanitizedReport = sanitizeObject(reportWithExecutionInfo);\n    return JSON.stringify(sanitizedReport, null, 2);\n  }\n  \n  /**\n   * PRコメント用の簡潔なサマリーマークダウンを生成\n   */\n  formatAsSummaryMarkdown(report: AITestErrorReport): string {\n    // レポート全体をサニタイズ\n    const sanitizedReport = sanitizeObject(report) as AITestErrorReport;\n    \n    let summary = '## 🤖 AI Error Report Summary\\n\\n';\n    \n    // エラー統計\n    summary += '### 📊 エラー統計\\n';\n    summary += `- **総エラー数**: ${sanitizedReport.summary.totalErrors}\\n`;\n    summary += `- **重大度別**:\\n`;\n    \n    // 優先度別のエラー数を集計\n    const priorityCounts = { critical: 0, high: 0, medium: 0, low: 0 };\n    sanitizedReport.errorGroups.forEach(group => {\n      priorityCounts[group.priority] += group.errors.length;\n    });\n    \n    if (priorityCounts.critical > 0) {\n      summary += `  - 🔴 Critical: ${priorityCounts.critical}\\n`;\n    }\n    if (priorityCounts.high > 0) {\n      summary += `  - 🟠 High: ${priorityCounts.high}\\n`;\n    }\n    if (priorityCounts.medium > 0) {\n      summary += `  - 🟡 Medium: ${priorityCounts.medium}\\n`;\n    }\n    if (priorityCounts.low > 0) {\n      summary += `  - 🟢 Low: ${priorityCounts.low}\\n`;\n    }\n    \n    summary += `- **影響ファイル数**: ${sanitizedReport.summary.testFileCount}\\n`;\n    summary += `- **推定修正時間**: ${sanitizedReport.summary.estimatedFixTime}分\\n\\n`;\n    \n    // CI情報（存在する場合）\n    if (sanitizedReport.ciTraceability) {\n      summary += '### 🔍 実行環境\\n';\n      summary += `- **Node.js**: ${sanitizedReport.ciTraceability.nodeVersion}\\n`;\n      summary += `- **OS**: ${sanitizedReport.ciTraceability.os}\\n\\n`;\n    }\n    \n    // 検出されたパターン\n    if (sanitizedReport.summary.commonPatterns.length > 0) {\n      summary += '### 🔍 検出されたエラーパターン\\n';\n      const topPatterns = sanitizedReport.summary.commonPatterns.slice(0, 5);\n      topPatterns.forEach(pattern => {\n        summary += `- ${pattern}\\n`;\n      });\n      if (sanitizedReport.summary.commonPatterns.length > 5) {\n        summary += `- _他 ${sanitizedReport.summary.commonPatterns.length - 5} パターン_\\n`;\n      }\n      summary += '\\n';\n    }\n    \n    // 最も重要なエラー（Critical/Highの最初の3つ）\n    const importantErrors = sanitizedReport.errorGroups\n      .filter(g => g.priority === 'critical' || g.priority === 'high')\n      .flatMap(g => g.errors)\n      .slice(0, 3);\n    \n    if (importantErrors.length > 0) {\n      summary += '### ⚠️ 最重要エラー\\n';\n      importantErrors.forEach((error, index) => {\n        summary += `${index + 1}. **${error.testName}**\\n`;\n        summary += `   - ファイル: \\`${error.testFile}\\`\\n`;\n        summary += `   - エラー: ${error.errorMessage.split('\\n')[0]}\\n`;\n      });\n      summary += '\\n';\n    }\n    \n    // クイックアクション（最初の2つ）\n    if (sanitizedReport.quickActions.length > 0) {\n      summary += '### 💡 推奨アクション\\n';\n      const topActions = sanitizedReport.quickActions.slice(0, 2);\n      topActions.forEach(action => {\n        summary += `- **${action.description}**: \\`${action.command}\\`\\n`;\n      });\n      summary += '\\n';\n    }\n    \n    // 詳細レポートへの案内\n    summary += '---\\n';\n    summary += '📄 **詳細レポート**: GitHub Actionsのアーティファクトから`ai-error-report-*`をダウンロードしてください。\\n';\n    \n    return summary;\n  }\n  \n  /**\n   * エラーのグループ化（類似エラーをまとめる）\n   */\n  private extractCITraceability(contexts: TestErrorContext[]): CITraceabilityInfo | undefined {\n    // 最初のコンテキストからCIトレーサビリティ情報を取得\n    const firstContextWithCI = contexts.find(ctx => (ctx as any).ciTraceability);\n    if (!firstContextWithCI) {\n      return undefined;\n    }\n    \n    const ci = (firstContextWithCI as any).ciTraceability;\n    const { CITraceabilityCollector } = require('./ci-traceability');\n    \n    return {\n      runId: ci.runId,\n      runNumber: ci.runNumber,\n      workflow: ci.workflow,\n      repository: ci.repository,\n      branch: ci.branch,\n      sha: ci.sha,\n      prNumber: ci.prNumber,\n      deepLink: CITraceabilityCollector.generateDeepLink(ci),\n      prLink: ci.prNumber ? CITraceabilityCollector.generatePRLink(ci) : undefined,\n      nodeVersion: ci.nodeVersion,\n      os: ci.os,\n      timestamp: ci.timestamp\n    };\n  }\n  \n  private groupErrors(contexts: TestErrorContext[]): ErrorGroup[] {\n    const groups = new Map<string, ErrorGroup>();\n    \n    contexts.forEach(context => {\n      const pattern = this.detectErrorPattern(context);\n      \n      if (!groups.has(pattern)) {\n        groups.set(pattern, {\n          pattern,\n          priority: this.calculatePriority(context),\n          errors: [],\n          commonSolution: this.findCommonSolution(pattern)\n        });\n      }\n      \n      const formattedError = this.formatSingleError(context);\n      groups.get(pattern)!.errors.push(formattedError);\n    });\n    \n    // 優先度でソート\n    return Array.from(groups.values()).sort((a, b) => {\n      const priorityOrder = { critical: 0, high: 1, medium: 2, low: 3 };\n      return priorityOrder[a.priority] - priorityOrder[b.priority];\n    });\n  }\n  \n  /**\n   * エラーパターンの検出\n   */\n  private detectErrorPattern(context: TestErrorContext): string {\n    const message = context.error.message.toLowerCase();\n    \n    // 一般的なパターンの検出\n    if (message.includes('cannot find module')) {\n      return 'モジュール未検出エラー';\n    }\n    if (message.includes('timeout')) {\n      return 'タイムアウトエラー';\n    }\n    if (message.includes('expected') && message.includes('received')) {\n      return 'アサーション不一致';\n    }\n    if (message.includes('typeerror')) {\n      return '型エラー';\n    }\n    if (message.includes('undefined') || message.includes('null')) {\n      return 'Null/Undefined参照エラー';\n    }\n    if (message.includes('mock')) {\n      return 'モック関連エラー';\n    }\n    \n    return 'その他のエラー';\n  }\n  \n  /**\n   * 優先度の計算\n   */\n  private calculatePriority(context: TestErrorContext): ErrorGroup['priority'] {\n    // TypeScriptコンパイルエラーは最優先\n    if (context.error.message.includes('TS') && context.error.message.match(/TS\\d{4}/)) {\n      return 'critical';\n    }\n    \n    // モジュール未検出やインポートエラーは高優先度\n    if (context.errorType === 'FILE_NOT_FOUND' || \n        context.error.message.includes('Cannot find module')) {\n      return 'high';\n    }\n    \n    // アサーション不一致は中優先度\n    if (context.error.message.includes('Expected')) {\n      return 'medium';\n    }\n    \n    return 'low';\n  }\n  \n  /**\n   * 単一エラーのフォーマット\n   */\n  private formatSingleError(context: TestErrorContext): FormattedError {\n    const id = `${context.testFile}-${context.testName}-${Date.now()}`.replace(/[^a-zA-Z0-9-]/g, '-');\n    \n    return {\n      id,\n      testFile: path.relative(process.cwd(), context.testFile),\n      testName: context.testName,\n      errorMessage: context.error.message,\n      context: {\n        failedAssertion: context.codeContext.failedCode,\n        relevantCode: this.extractRelevantCode(context),\n        stackTrace: context.error.stack || ''\n      },\n      suggestedFix: this.generateFixSuggestion(context),\n      relatedInfo: {\n        sourceFile: context.relatedFiles.sourceFile,\n        dependencies: context.relatedFiles.dependencies\n      },\n      errorHash: (context as any).ciTraceability?.errorHash\n    };\n  }\n  \n  /**\n   * 関連コードの抽出\n   */\n  private extractRelevantCode(context: TestErrorContext): string {\n    const { surroundingCode, failedCode } = context.codeContext;\n    \n    // 失敗した行を中心に前後のコードを含める\n    const before = surroundingCode.before.split('\\n').slice(-5).join('\\n');\n    const after = surroundingCode.after.split('\\n').slice(0, 5).join('\\n');\n    \n    return `${before}\\n>>> ${failedCode} <<<\\n${after}`;\n  }\n  \n  /**\n   * 修正提案の生成\n   */\n  private generateFixSuggestion(context: TestErrorContext): FormattedError['suggestedFix'] {\n    // 推奨アクションから最も優先度の高いものを選択\n    const topAction = context.suggestedActions\n      .sort((a, b) => {\n        const priority = { high: 0, medium: 1, low: 2 };\n        return priority[a.priority] - priority[b.priority];\n      })[0];\n    \n    if (topAction && topAction.codeSnippet) {\n      return {\n        explanation: topAction.reasoning,\n        code: topAction.codeSnippet,\n        confidence: topAction.priority === 'high' ? 0.9 : 0.7\n      };\n    }\n    \n    // パターンベースの修正提案生成\n    const pattern = this.detectErrorPattern(context);\n    const patternBasedFix = this.generatePatternBasedFix(context, pattern);\n    \n    if (patternBasedFix) {\n      return patternBasedFix;\n    }\n    \n    // デフォルトの提案（修正案なし）\n    return {\n      explanation: 'エラーメッセージとスタックトレースを確認して、問題の原因を特定してください。関連するソースファイルとテストコードの両方を確認することをお勧めします。',\n      code: '',\n      confidence: 0\n    };\n  }\n  \n  /**\n   * パターンベースの修正提案生成\n   */\n  private generatePatternBasedFix(\n    context: TestErrorContext,\n    pattern: string\n  ): FormattedError['suggestedFix'] | null {\n    const { failedCode } = context.codeContext;\n    const errorMessage = context.error.message;\n    \n    // アサーション不一致の場合\n    if (pattern === 'アサーション不一致') {\n      // expect().toContain()エラーの場合\n      if (errorMessage.includes('toContain') && failedCode.includes('expect')) {\n        const actualMatch = errorMessage.match(/Received: \\[(.*?)\\]/);\n        if (actualMatch && actualMatch[1]) {\n          return {\n            explanation: `配列に期待値が含まれていません。実際の配列の内容を確認して、期待値を修正してください。`,\n            code: `// 実際の配列: [${actualMatch[1]}]\\n// 期待値を配列の実際の要素に変更するか、\\n// テスト対象のコードを修正してください`,\n            confidence: 0.6\n          };\n        }\n      }\n      \n      // expect().toBe()エラーの場合\n      if (errorMessage.includes('Expected:') && errorMessage.includes('Received:')) {\n        const expectedMatch = errorMessage.match(/Expected: (.+?)(?:\\n|$)/);\n        const receivedMatch = errorMessage.match(/Received: (.+?)(?:\\n|$)/);\n        \n        if (expectedMatch && receivedMatch) {\n          return {\n            explanation: `期待値と実際の値が一致しません。期待値: ${expectedMatch[1]}, 実際: ${receivedMatch[1]}`,\n            code: `// 期待値を実際の値に合わせる場合:\\n// ${failedCode.replace(expectedMatch[1], receivedMatch[1])}\\n// または、テスト対象のコードを修正してください`,\n            confidence: 0.5\n          };\n        }\n      }\n    }\n    \n    // モジュール未検出エラーの場合\n    if (pattern === 'モジュール未検出エラー') {\n      const moduleMatch = errorMessage.match(/Cannot find module '(.+?)'/);\n      if (moduleMatch && moduleMatch[1]) {\n        const moduleName = moduleMatch[1];\n        return {\n          explanation: `モジュール '${moduleName}' が見つかりません。`,\n          code: `// 以下のいずれかを実行:\\n// 1. npm install ${moduleName}\\n// 2. インポートパスを修正\\n// 3. tsconfig.jsonのパスマッピングを確認`,\n          confidence: 0.7\n        };\n      }\n    }\n    \n    // TypeScriptエラーの場合\n    if (pattern === '型エラー' && errorMessage.includes('TS')) {\n      const tsErrorMatch = errorMessage.match(/TS(\\d{4}): (.+)/);\n      if (tsErrorMatch) {\n        const errorCode = tsErrorMatch[1];\n        const errorDesc = tsErrorMatch[2];\n        return {\n          explanation: `TypeScriptエラー TS${errorCode}: ${errorDesc}`,\n          code: `// TypeScriptエラーを修正してください\\n// 型定義の追加、型アサーションの使用、\\n// またはコードロジックの修正が必要です`,\n          confidence: 0.4\n        };\n      }\n    }\n    \n    return null;\n  }\n  \n  /**\n   * 共通の解決策を検索\n   */\n  private findCommonSolution(pattern: string): string | undefined {\n    const solutions: Record<string, string> = {\n      'モジュール未検出エラー': 'npm install を実行するか、インポートパスを確認してください',\n      'タイムアウトエラー': 'jest.setTimeout() でタイムアウト時間を延長するか、非同期処理を確認してください',\n      'アサーション不一致': '期待値と実際の値を確認し、テストロジックを修正してください',\n      '型エラー': 'TypeScriptの型定義を確認し、適切な型アノテーションを追加してください',\n      'Null/Undefined参照エラー': 'オプショナルチェイニング（?.）やnullチェックを追加してください',\n      'モック関連エラー': 'モックの設定を確認し、jest.mock() の呼び出しを適切に配置してください'\n    };\n    \n    return solutions[pattern];\n  }\n  \n  /**\n   * サマリーの生成\n   */\n  private generateSummary(\n    contexts: TestErrorContext[],\n    groups: ErrorGroup[]\n  ): ErrorSummary {\n    const testFiles = new Set(contexts.map(c => c.testFile));\n    const criticalErrors = groups\n      .filter(g => g.priority === 'critical')\n      .reduce((sum, g) => sum + g.errors.length, 0);\n    \n    // 修正時間の推定（エラータイプと数に基づく）\n    const estimatedTime = groups.reduce((total, group) => {\n      const timePerError = {\n        critical: 30,\n        high: 20,\n        medium: 10,\n        low: 5\n      };\n      return total + (group.errors.length * timePerError[group.priority]);\n    }, 0);\n    \n    // デバッグ情報：エラー数の不一致を警告\n    if (process.env.DEBUG_AI_REPORTER === 'true') {\n      console.log(`[AI Formatter Debug] Total errors to format: ${contexts.length}`);\n      console.log(`[AI Formatter Debug] Test files with errors: ${testFiles.size}`);\n      console.log(`[AI Formatter Debug] Error groups: ${groups.length}`);\n    }\n    \n    return {\n      totalErrors: contexts.length,\n      criticalErrors,\n      testFileCount: testFiles.size,\n      commonPatterns: groups.map(g => g.pattern),\n      estimatedFixTime: Math.ceil(estimatedTime)\n    };\n  }\n  \n  /**\n   * 文脈的な指示の生成\n   */\n  private generateInstructions(\n    contexts: TestErrorContext[],\n    groups: ErrorGroup[]\n  ): ContextualInstructions {\n    const hasTypeScriptErrors = groups.some(g => \n      g.errors.some(e => e.errorMessage.includes('TS'))\n    );\n    \n    const debuggingSteps = [\n      hasTypeScriptErrors ? 'TypeScriptコンパイルエラーを最初に修正' : null,\n      'criticalエラーから順に修正',\n      '各修正後にnpm testで確認',\n      '関連するソースファイルも確認',\n      'すべてのテストがパスすることを確認'\n    ].filter(Boolean) as string[];\n    \n    return {\n      forHuman: `${contexts.length}個のテストエラーが検出されました。` +\n        `推定修正時間は${groups[0].errors.length * 15}分です。` +\n        `優先度順に修正を進めてください。`,\n      \n      forAI: `以下のテストエラーを修正してください：\n\nプロジェクト: Rimor (テスト品質分析ツール)\n言語: TypeScript\nテストフレームワーク: Jest\n\n修正要件:\n- 既存のコードスタイルを維持\n- 型安全性を確保\n- テストの可読性を保持\n- 各修正後にテストを実行\n\n優先順位:\n1. TypeScriptコンパイルエラー（critical）\n2. モジュール未検出エラー（high）\n3. その他のエラー\n\n各エラーグループには共通の解決策が提示されています。\n効率的に修正を進めてください。`,\n      \n      debuggingSteps\n    };\n  }\n  \n  /**\n   * クイックアクションの生成\n   */\n  private generateQuickActions(groups: ErrorGroup[]): QuickAction[] {\n    const actions: QuickAction[] = [];\n    \n    // TypeScriptエラーがある場合\n    if (groups.some(g => g.pattern === '型エラー')) {\n      actions.push({\n        command: 'npx tsc --noEmit',\n        description: 'TypeScriptコンパイルチェック',\n        expectedOutcome: 'すべての型エラーが表示されます'\n      });\n    }\n    \n    // モジュール未検出エラーがある場合\n    if (groups.some(g => g.pattern === 'モジュール未検出エラー')) {\n      actions.push({\n        command: 'npm install',\n        description: '依存関係のインストール',\n        expectedOutcome: '不足しているモジュールがインストールされます'\n      });\n    }\n    \n    // 常に含めるアクション\n    actions.push({\n      command: 'npm test -- --no-coverage',\n      description: 'カバレッジなしでテスト実行（高速）',\n      expectedOutcome: '修正したテストの結果を素早く確認できます'\n    });\n    \n    return actions;\n  }\n}"],"version":3}