4ccb37611c07da248f93442584975648
"use strict";
/**
 * Checker Framework互換の型定義
 * arXiv:2504.18529v2 "Practical Type-Based Taint Checking and Inference" の実装
 *
 * このファイルは論文で提案されている型システムをTypeScriptで実装します。
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypeQualifierError = exports.PolyTaintInstantiation = exports.TypeCompatibility = exports.FlowSensitiveChecker = exports.TypePropagation = exports.TypePromotion = exports.SubtypingChecker = exports.TypeConstructors = exports.TypeGuards = void 0;
exports.isTainted = isTainted;
exports.isUntainted = isUntainted;
exports.sanitize = sanitize;
exports.taint = taint;
/**
 * 型クオリファイアのガード関数
 */
exports.TypeGuards = {
    isTainted(value) {
        return value !== null && typeof value === 'object' &&
            '__brand' in value && value.__brand === '@Tainted';
    },
    isUntainted(value) {
        return value !== null && typeof value === 'object' &&
            '__brand' in value && value.__brand === '@Untainted';
    },
    isPolyTaint(value) {
        return value !== null && typeof value === 'object' &&
            '__brand' in value && value.__brand === '@PolyTaint';
    }
};
/**
 * 型コンストラクタ
 * 論文のSection 3で説明されている型構築
 */
exports.TypeConstructors = {
    /**
     * 汚染された値を作成
     */
    tainted(value, source, confidence = 1.0) {
        return {
            __brand: '@Tainted',
            __value: value,
            __source: source,
            __confidence: confidence
        };
    },
    /**
     * 清浄な値を作成
     */
    untainted(value, sanitizedBy) {
        return {
            __brand: '@Untainted',
            __value: value,
            __sanitizedBy: sanitizedBy,
            __validatedAt: Date.now()
        };
    },
    /**
     * ポリモーフィック汚染値を作成
     */
    polyTaint(value, parameterIndices = [], propagationRule = 'any') {
        return {
            __brand: '@PolyTaint',
            __value: value,
            __parameterIndices: parameterIndices,
            __propagationRule: propagationRule
        };
    }
};
/**
 * サブタイピング関係のチェック
 * 論文のSection 2.2で定義されている規則
 */
class SubtypingChecker {
    /**
     * aがbのサブタイプかどうかをチェック
     * @Untainted <: @Tainted (untaintedはtaintedのサブタイプ)
     */
    static isSubtype(a, b) {
        if (a === b)
            return true;
        if (a === '@Untainted' && b === '@Tainted')
            return true;
        if (a === '@PolyTaint')
            return true; // PolyTaintは文脈依存
        return false;
    }
    /**
     * 代入の安全性をチェック
     * 右辺が左辺のサブタイプである必要がある
     */
    static isAssignmentSafe(lhs, rhs) {
        // @Untainted を @Tainted に代入するのは安全
        if (exports.TypeGuards.isUntainted(rhs) && exports.TypeGuards.isTainted(lhs)) {
            return true;
        }
        // @Tainted を @Untainted に代入するのは危険
        if (exports.TypeGuards.isTainted(rhs) && exports.TypeGuards.isUntainted(lhs)) {
            return false;
        }
        // 同じ型クオリファイア同士は安全
        if (lhs.__brand === rhs.__brand) {
            return true;
        }
        // PolyTaintは文脈依存
        if (exports.TypeGuards.isPolyTaint(lhs) || exports.TypeGuards.isPolyTaint(rhs)) {
            return true; // 実行時に判定
        }
        return false;
    }
}
exports.SubtypingChecker = SubtypingChecker;
/**
 * 型の昇格・降格
 * 論文のSection 3.2で説明されている操作
 */
class TypePromotion {
    /**
     * サニタイザーによる型の昇格
     * @Tainted -> @Untainted
     */
    static sanitize(tainted, sanitizerName) {
        return exports.TypeConstructors.untainted(tainted.__value, sanitizerName);
    }
    /**
     * 汚染源による型の降格
     * @Untainted -> @Tainted
     */
    static taint(untainted, source) {
        return exports.TypeConstructors.tainted(untainted.__value, source, 1.0);
    }
    /**
     * 条件付き昇格（検証による）
     */
    static conditionalPromote(value, condition, sanitizerName) {
        if (exports.TypeGuards.isTainted(value) && condition(value.__value)) {
            return exports.TypeConstructors.untainted(value.__value, sanitizerName);
        }
        return value;
    }
}
exports.TypePromotion = TypePromotion;
/**
 * 型の伝播規則
 * 論文のSection 3.3で定義されている規則
 */
class TypePropagation {
    /**
     * 二項演算の結果の型を決定
     * より制限的な型（@Tainted）が優先される
     */
    static binaryOperation(lhs, rhs, operation) {
        const result = operation(lhs.__value, rhs.__value);
        // どちらかが@Taintedなら結果も@Tainted
        if (exports.TypeGuards.isTainted(lhs) || exports.TypeGuards.isTainted(rhs)) {
            const source = exports.TypeGuards.isTainted(lhs) ? lhs.__source :
                exports.TypeGuards.isTainted(rhs) ? rhs.__source : 'unknown';
            return exports.TypeConstructors.tainted(result, source);
        }
        // 両方が@Untaintedなら結果も@Untainted
        if (exports.TypeGuards.isUntainted(lhs) && exports.TypeGuards.isUntainted(rhs)) {
            return exports.TypeConstructors.untainted(result);
        }
        // PolyTaintが含まれる場合は文脈依存
        return exports.TypeConstructors.polyTaint(result);
    }
    /**
     * メソッド呼び出しの結果の型を決定
     */
    static methodCall(receiver, methodName, args, method) {
        const argValues = args.map(arg => arg.__value);
        const result = method.apply(receiver.__value, argValues);
        // レシーバーまたは引数のいずれかが汚染されていれば結果も汚染
        const taintedInputs = [receiver, ...args].filter(exports.TypeGuards.isTainted);
        if (taintedInputs.length > 0) {
            return exports.TypeConstructors.tainted(result, taintedInputs[0].__source);
        }
        return exports.TypeConstructors.untainted(result);
    }
}
exports.TypePropagation = TypePropagation;
/**
 * フロー感度の型チェック
 * 論文のSection 4で説明されている手法
 */
class FlowSensitiveChecker {
    typeEnvironment;
    constructor() {
        this.typeEnvironment = new Map();
    }
    /**
     * 変数の型を更新
     */
    updateType(varName, type) {
        this.typeEnvironment.set(varName, type);
    }
    /**
     * 変数の現在の型を取得
     */
    getType(varName) {
        return this.typeEnvironment.get(varName);
    }
    /**
     * 条件分岐での型の精緻化
     */
    refineType(varName, condition, trueType, falseType) {
        const currentType = this.typeEnvironment.get(varName);
        if (!currentType)
            return;
        if (condition(currentType.__value)) {
            // 条件が真の場合の型
            if (trueType === '@Untainted') {
                this.typeEnvironment.set(varName, exports.TypeConstructors.untainted(currentType.__value, 'flow-refinement'));
            }
        }
        else {
            // 条件が偽の場合の型
            if (falseType === '@Tainted' && !exports.TypeGuards.isTainted(currentType)) {
                this.typeEnvironment.set(varName, exports.TypeConstructors.tainted(currentType.__value, 'flow-refinement'));
            }
        }
    }
}
exports.FlowSensitiveChecker = FlowSensitiveChecker;
/**
 * 簡便なヘルパー関数
 */
function isTainted(value) {
    return exports.TypeGuards.isTainted(value);
}
function isUntainted(value) {
    return exports.TypeGuards.isUntainted(value);
}
function sanitize(value, sanitizer) {
    return exports.TypeConstructors.untainted(sanitizer(value.__value), 'sanitized');
}
function taint(value, source) {
    return exports.TypeConstructors.tainted(value, source, 1.0);
}
/**
 * 型の互換性チェック
 * 論文のSection 5で定義されている規則
 */
class TypeCompatibility {
    /**
     * メソッドオーバーライドの安全性をチェック
     * 共変・反変の規則を適用
     */
    static isOverrideSafe(baseMethod, overrideMethod) {
        // パラメータは反変（より一般的な型を受け入れる）
        // オーバーライドメソッドは、ベースメソッドより一般的なパラメータを受け入れる必要がある
        // つまり、base param <: override param でなければならない
        for (let i = 0; i < baseMethod.params.length; i++) {
            if (!SubtypingChecker.isSubtype(baseMethod.params[i], overrideMethod.params[i])) {
                return false;
            }
        }
        // 戻り値は共変（より具体的な型を返す）
        // オーバーライドメソッドは、ベースメソッドより具体的な型を返す必要がある
        // つまり、override return <: base return でなければならない
        return SubtypingChecker.isSubtype(overrideMethod.return, baseMethod.return);
    }
}
exports.TypeCompatibility = TypeCompatibility;
/**
 * ポリモーフィック型のインスタンス化
 */
class PolyTaintInstantiation {
    /**
     * PolyTaint型を具体的な型にインスタンス化
     */
    static instantiate(polyType, argumentTypes) {
        const relevantArgs = polyType.__parameterIndices.map(i => argumentTypes[i]);
        if (polyType.__propagationRule === 'any') {
            // いずれかが@Taintedなら結果も@Tainted
            if (relevantArgs.some(arg => arg === '@Tainted')) {
                return exports.TypeConstructors.tainted(polyType.__value, 'poly-instantiation');
            }
        }
        else {
            // すべてが@Taintedなら結果も@Tainted
            if (relevantArgs.every(arg => arg === '@Tainted')) {
                return exports.TypeConstructors.tainted(polyType.__value, 'poly-instantiation');
            }
        }
        return exports.TypeConstructors.untainted(polyType.__value, 'poly-instantiation');
    }
}
exports.PolyTaintInstantiation = PolyTaintInstantiation;
/**
 * 型エラー
 */
class TypeQualifierError extends Error {
    expected;
    actual;
    location;
    constructor(message, expected, actual, location) {
        super(message);
        this.expected = expected;
        this.actual = actual;
        this.location = location;
        this.name = 'TypeQualifierError';
    }
}
exports.TypeQualifierError = TypeQualifierError;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,