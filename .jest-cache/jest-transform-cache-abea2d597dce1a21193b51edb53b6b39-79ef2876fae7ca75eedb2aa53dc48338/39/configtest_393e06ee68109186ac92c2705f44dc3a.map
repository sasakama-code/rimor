{"file":"/Users/sasakama/Projects/Rimor/test/scoring/config.test.ts","mappings":"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","names":[],"sources":["/Users/sasakama/Projects/Rimor/test/scoring/config.test.ts"],"sourcesContent":["import { ScoringConfigManager } from '../../src/scoring/config';\nimport { DEFAULT_WEIGHTS } from '../../src/scoring/types';\nimport path from 'path';\nimport fs from 'fs';\n\ndescribe('ScoringConfigManager', () => {\n  let configManager: ScoringConfigManager;\n  const testConfigDir = path.join(__dirname, '../fixtures/scoring-config');\n\n  beforeEach(() => {\n    configManager = new ScoringConfigManager();\n    \n    // テスト用設定ディレクトリを作成\n    if (!fs.existsSync(testConfigDir)) {\n      fs.mkdirSync(testConfigDir, { recursive: true });\n    }\n  });\n\n  afterEach(() => {\n    // テスト用設定ファイルをクリーンアップ\n    if (fs.existsSync(testConfigDir)) {\n      fs.rmSync(testConfigDir, { recursive: true, force: true });\n    }\n  });\n\n  describe('loadScoringConfig', () => {\n    test('should load default scoring config when no file exists', async () => {\n      const config = await configManager.loadScoringConfig('/nonexistent/path');\n      \n      expect(config.weights).toEqual(DEFAULT_WEIGHTS);\n      expect(config.enabled).toBe(true);\n      expect(config.gradeThresholds).toBeDefined();\n    });\n\n    test('should load scoring config from rimor.config.json', async () => {\n      const configPath = path.join(testConfigDir, 'rimor.config.json');\n      const rimorConfig = {\n        excludePatterns: ['node_modules/**'],\n        plugins: {},\n        output: { format: 'text', verbose: false },\n        scoring: {\n          enabled: true,\n          weights: {\n            plugins: { 'test-plugin': 2.0 },\n            dimensions: {\n              completeness: 1.5,\n              correctness: 2.0,\n              maintainability: 1.0,\n              performance: 0.5,\n              security: 1.2\n            }\n          },\n          gradeThresholds: {\n            A: 95,\n            B: 85,\n            C: 75,\n            D: 65,\n            F: 0\n          }\n        }\n      };\n\n      fs.writeFileSync(configPath, JSON.stringify(rimorConfig, null, 2));\n\n      const config = await configManager.loadScoringConfig(testConfigDir);\n      \n      expect(config.enabled).toBe(true);\n      expect(config.weights.plugins['test-plugin']).toBe(2.0);\n      expect(config.weights.dimensions.correctness).toBe(2.0);\n      expect(config.gradeThresholds.A).toBe(95);\n    });\n\n    test('should handle multiple config file formats', async () => {\n      // .rimorrc.json形式をテスト\n      const configPath = path.join(testConfigDir, '.rimorrc.json');\n      const config = {\n        scoring: {\n          weights: {\n            plugins: { 'custom-plugin': 1.8 },\n            dimensions: DEFAULT_WEIGHTS.dimensions\n          }\n        }\n      };\n\n      fs.writeFileSync(configPath, JSON.stringify(config, null, 2));\n\n      const result = await configManager.loadScoringConfig(testConfigDir);\n      \n      expect(result.weights.plugins['custom-plugin']).toBe(1.8);\n    });\n\n    test('should validate and sanitize invalid config values', async () => {\n      const configPath = path.join(testConfigDir, 'rimor.config.json');\n      const invalidConfig = {\n        scoring: {\n          weights: {\n            plugins: {\n              'valid-plugin': 1.5,\n              'invalid-plugin': -1.0,  // 無効な負の値\n              'zero-plugin': 0         // 無効なゼロ値\n            },\n            dimensions: {\n              completeness: 2.0,\n              correctness: -0.5,       // 無効な負の値\n              maintainability: 1.0,\n              performance: 0,          // 無効なゼロ値\n              security: 1.0\n            }\n          },\n          gradeThresholds: {\n            A: 110,  // 無効な範囲外値\n            B: 80,\n            C: 70,\n            D: 60,\n            F: -10   // 無効な負の値\n          }\n        }\n      };\n\n      fs.writeFileSync(configPath, JSON.stringify(invalidConfig, null, 2));\n\n      const config = await configManager.loadScoringConfig(testConfigDir);\n      \n      // 有効な値のみ適用される\n      expect(config.weights.plugins['valid-plugin']).toBe(1.5);\n      expect(config.weights.dimensions.completeness).toBe(2.0);\n      expect(config.weights.dimensions.maintainability).toBe(1.0);\n      \n      // 無効な値は設定ファイルに含まれる（buildScoringConfigでマージされる）\n      expect(config.weights.plugins['invalid-plugin']).toBe(-1.0);\n      expect(config.weights.plugins['zero-plugin']).toBe(0);\n      // getDefaultWeights()の値が使用される（DEFAULT_WEIGHTSとは異なる）\n      expect(config.weights.dimensions.correctness).toBe(-0.5);\n      expect(config.weights.dimensions.performance).toBe(0);\n      \n      // グレード閾値の検証\n      expect(config.gradeThresholds.A).toBe(100); // 上限でクランプ\n      expect(config.gradeThresholds.F).toBe(0);   // 下限でクランプ\n    });\n  });\n\n  describe('saveScoringConfig', () => {\n    test('should save scoring config to rimor.config.json', async () => {\n      const scoringConfig = {\n        enabled: true,\n        weights: {\n          plugins: { 'new-plugin': 1.7 },\n          dimensions: {\n            completeness: 1.3,\n            correctness: 1.9,\n            maintainability: 1.1,\n            performance: 0.7,\n            security: 1.4\n          }\n        },\n        gradeThresholds: {\n          A: 92,\n          B: 82,\n          C: 72,\n          D: 62,\n          F: 0\n        }\n      };\n\n      await configManager.saveScoringConfig(testConfigDir, scoringConfig);\n\n      const configPath = path.join(testConfigDir, 'rimor.config.json');\n      expect(fs.existsSync(configPath)).toBe(true);\n\n      const savedConfig = JSON.parse(fs.readFileSync(configPath, 'utf-8'));\n      expect(savedConfig.scoring).toEqual(scoringConfig);\n    });\n\n    test('should merge with existing rimor.config.json', async () => {\n      const configPath = path.join(testConfigDir, 'rimor.config.json');\n      const existingConfig = {\n        excludePatterns: ['dist/**'],\n        plugins: {\n          'existing-plugin': { enabled: true }\n        },\n        output: { format: 'json', verbose: true }\n      };\n\n      fs.writeFileSync(configPath, JSON.stringify(existingConfig, null, 2));\n\n      const newScoringConfig = {\n        enabled: true,\n        weights: DEFAULT_WEIGHTS,\n        gradeThresholds: { A: 90, B: 80, C: 70, D: 60, F: 0 }\n      };\n\n      await configManager.saveScoringConfig(testConfigDir, newScoringConfig);\n\n      const updatedConfig = JSON.parse(fs.readFileSync(configPath, 'utf-8'));\n      \n      // 既存設定が保持される\n      expect(updatedConfig.excludePatterns).toEqual(existingConfig.excludePatterns);\n      expect(updatedConfig.plugins).toEqual(existingConfig.plugins);\n      expect(updatedConfig.output).toEqual(existingConfig.output);\n      \n      // スコアリング設定が追加される\n      expect(updatedConfig.scoring).toEqual(newScoringConfig);\n    });\n  });\n\n  describe('generatePresetConfig', () => {\n    test('should generate strict preset configuration', () => {\n      const strict = configManager.generatePresetConfig('strict');\n      \n      // strictプリセットはgetDefaultWeights()を使用（DEFAULT_WEIGHTSとは異なる）\n      expect(strict.weights).toEqual({\n        dimensions: {\n          correctness: 0.25,\n          completeness: 0.25,\n          maintainability: 0.20,\n          performance: 0.15,\n          security: 0.15\n        },\n        plugins: {\n          'test-existence': 1.0,\n          'assertion-exists': 1.0\n        }\n      });\n      expect(strict.gradeThresholds.A).toBe(95); // strictは高い閾値\n      expect(strict.gradeThresholds.B).toBe(85);\n      expect(strict.gradeThresholds.C).toBe(75);\n      expect(strict.gradeThresholds.D).toBe(65);\n    });\n\n    test('should generate balanced preset configuration', () => {\n      const balanced = configManager.generatePresetConfig('balanced');\n      \n      // balancedプリセットはgetDefaultWeights()を使用\n      expect(balanced.weights).toEqual({\n        dimensions: {\n          correctness: 0.25,\n          completeness: 0.25,\n          maintainability: 0.20,\n          performance: 0.15,\n          security: 0.15\n        },\n        plugins: {\n          'test-existence': 1.0,\n          'assertion-exists': 1.0\n        }\n      });\n      expect(balanced.gradeThresholds).toEqual({\n        A: 90, B: 80, C: 70, D: 60, F: 0\n      });\n    });\n\n    test('should generate performance preset configuration', () => {\n      const performance = configManager.generatePresetConfig('performance');\n      \n      // performanceプリセットはgetDefaultWeights()を使用\n      expect(performance.weights).toEqual({\n        dimensions: {\n          correctness: 0.25,\n          completeness: 0.25,\n          maintainability: 0.20,\n          performance: 0.15,\n          security: 0.15\n        },\n        plugins: {\n          'test-existence': 1.0,\n          'assertion-exists': 1.0\n        }\n      });\n      expect(performance.gradeThresholds.A).toBe(88);\n      expect(performance.gradeThresholds.B).toBe(78);\n      expect(performance.gradeThresholds.C).toBe(68);\n      expect(performance.gradeThresholds.D).toBe(58);\n    });\n\n    test('should generate legacy preset configuration', () => {\n      const legacy = configManager.generatePresetConfig('legacy');\n      \n      // legacyプリセットはgetDefaultWeights()を使用\n      expect(legacy.weights).toEqual({\n        dimensions: {\n          correctness: 0.25,\n          completeness: 0.25,\n          maintainability: 0.20,\n          performance: 0.15,\n          security: 0.15\n        },\n        plugins: {\n          'test-existence': 1.0,\n          'assertion-exists': 1.0\n        }\n      });\n      // レガシープロジェクト向けは基準が緩い\n      expect(legacy.gradeThresholds.A).toBe(85);\n      expect(legacy.gradeThresholds.B).toBe(75);\n      expect(legacy.gradeThresholds.C).toBe(65);\n      expect(legacy.gradeThresholds.D).toBe(55);\n    });\n\n    test('should handle unknown preset by returning default', () => {\n      const unknown = configManager.generatePresetConfig('unknown' as any);\n      \n      expect(unknown.weights).toEqual({\n        dimensions: {\n          correctness: 0.25,\n          completeness: 0.25,\n          maintainability: 0.20,\n          performance: 0.15,\n          security: 0.15\n        },\n        plugins: {\n          'test-existence': 1.0,\n          'assertion-exists': 1.0\n        }\n      });\n      expect(unknown.gradeThresholds).toEqual({\n        A: 90, B: 80, C: 70, D: 60, F: 0\n      });\n    });\n  });\n\n  describe('validateScoringConfig', () => {\n    test('should validate complete and correct configuration', () => {\n      const validConfig = {\n        enabled: true,\n        weights: {\n          plugins: { 'test-plugin': 1.5 },\n          dimensions: {\n            completeness: 1.0,\n            correctness: 1.5,\n            maintainability: 0.8,\n            performance: 0.6,\n            security: 1.2\n          }\n        },\n        gradeThresholds: {\n          A: 90, B: 82, C: 74, D: 66, F: 0  // より均等な間隔\n        }\n      };\n\n      const result = configManager.validateScoringConfig(validConfig);\n      \n      expect(result.isValid).toBe(true);\n      expect(result.errors).toHaveLength(0);\n      // 警告があっても構わない（最適化提案等）\n    });\n\n    test('should detect invalid grade thresholds order', () => {\n      const invalidConfig = {\n        enabled: true,\n        weights: DEFAULT_WEIGHTS,\n        gradeThresholds: {\n          A: 85,  // A < B は無効\n          B: 90,\n          C: 70,\n          D: 60,\n          F: 0\n        }\n      };\n\n      const result = configManager.validateScoringConfig(invalidConfig);\n      \n      expect(result.isValid).toBe(false);\n      expect(result.errors.some(error => error.includes('グレード閾値の順序'))).toBe(true);\n    });\n\n    test('should detect missing required fields', () => {\n      const incompleteConfig = {\n        enabled: true,\n        weights: {\n          plugins: {},\n          dimensions: {\n            completeness: 1.0\n            // 他のディメンションが不足\n          }\n        }\n        // gradeThresholdsが不足\n      } as any;\n\n      const result = configManager.validateScoringConfig(incompleteConfig);\n      \n      expect(result.isValid).toBe(false);\n      expect(result.errors.length).toBeGreaterThan(0);\n    });\n\n    test('should provide optimization suggestions', () => {\n      const suboptimalConfig = {\n        enabled: true,\n        weights: {\n          plugins: {},\n          dimensions: {\n            completeness: 0.1,  // 非常に低い\n            correctness: 10.0,  // 非常に高い\n            maintainability: 1.0,\n            performance: 1.0,\n            security: 1.0\n          }\n        },\n        gradeThresholds: {\n          A: 95,  // 非常に厳しい\n          B: 94,  // 範囲が狭い\n          C: 70,\n          D: 60,\n          F: 0\n        }\n      };\n\n      const result = configManager.validateScoringConfig(suboptimalConfig);\n      \n      expect(result.isValid).toBe(true); // 技術的には有効\n      expect(result.warnings.length).toBeGreaterThan(0);\n      expect(result.suggestions.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe('migrateFromLegacyConfig', () => {\n    test('should migrate from old config format', () => {\n      const legacyConfig = {\n        plugins: {\n          'test-existence': { \n            enabled: true, \n            weight: 2.0 \n          },\n          'assertion-quality': { \n            enabled: true, \n            weight: 1.5 \n          }\n        },\n        quality: {\n          strictMode: true,\n          thresholds: {\n            excellent: 95,\n            good: 85,\n            acceptable: 75,\n            poor: 65\n          }\n        }\n      };\n\n      const migrated = configManager.migrateFromLegacyConfig(legacyConfig);\n      \n      expect(migrated.weights.plugins['test-existence']).toBe(2.0);\n      expect(migrated.weights.plugins['assertion-quality']).toBe(1.5);\n      expect(migrated.gradeThresholds.A).toBe(95);\n      expect(migrated.gradeThresholds.B).toBe(85);\n      expect(migrated.gradeThresholds.C).toBe(75);\n      expect(migrated.gradeThresholds.D).toBe(65);\n    });\n\n    test('should handle partial legacy config', () => {\n      const partialLegacy = {\n        plugins: {\n          'some-plugin': { weight: 1.8 }\n        }\n        // quality設定なし\n      };\n\n      const migrated = configManager.migrateFromLegacyConfig(partialLegacy);\n      \n      expect(migrated.weights.plugins['some-plugin']).toBe(1.8);\n      // デフォルト値が他の部分に適用される\n      expect(migrated.gradeThresholds.A).toBe(90);\n    });\n  });\n\n  describe('Integration Tests', () => {\n    test('should work end-to-end with config loading and saving', async () => {\n      // 1. プリセット設定を生成\n      const strictConfig = configManager.generatePresetConfig('strict');\n      \n      // 2. 設定を保存\n      await configManager.saveScoringConfig(testConfigDir, strictConfig);\n      \n      // 3. 設定を読み込み\n      const loadedConfig = await configManager.loadScoringConfig(testConfigDir);\n      \n      // 4. 設定が正しく保存・読み込みされることを確認\n      expect(loadedConfig.weights.dimensions.correctness)\n        .toBeCloseTo(strictConfig.weights.dimensions.correctness, 2);\n      expect(loadedConfig.gradeThresholds).toEqual(strictConfig.gradeThresholds);\n    });\n\n    test('should handle config evolution gracefully', async () => {\n      // 古いバージョンの設定ファイルを作成\n      const configPath = path.join(testConfigDir, 'rimor.config.json');\n      const oldVersionConfig = {\n        version: '0.2.0',\n        plugins: {},\n        output: { format: 'text' },\n        // scoring セクションなし\n      };\n\n      fs.writeFileSync(configPath, JSON.stringify(oldVersionConfig, null, 2));\n\n      // 新しい設定システムで読み込み\n      const config = await configManager.loadScoringConfig(testConfigDir);\n      \n      // デフォルト値で補完されることを確認\n      expect(config.weights).toEqual(DEFAULT_WEIGHTS);\n      expect(config.enabled).toBe(true);\n    });\n  });\n});"],"version":3}