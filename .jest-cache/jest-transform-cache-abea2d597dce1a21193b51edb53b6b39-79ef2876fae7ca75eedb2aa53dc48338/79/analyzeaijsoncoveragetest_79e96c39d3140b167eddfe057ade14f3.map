{"file":"/Users/sasakama/Projects/Rimor/test/cli/commands/analyze-ai-json.coverage.test.ts","mappings":"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","names":[],"sources":["/Users/sasakama/Projects/Rimor/test/cli/commands/analyze-ai-json.coverage.test.ts"],"sourcesContent":["/**\n * AI JSON Command カバレッジテスト\n * Issue #58: AIエージェント向けコンテキスト出力機能\n * \n * このファイルは統計的品質保証のためのカバレッジ最適化テストです\n */\n\nimport { AnalyzeCommandV8 } from '../../../src/cli/commands/analyze-v0.8';\nimport { TYPES } from '../../../src/container';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as os from 'os';\nimport {\n  createTestContainer,\n  createMockCliSecurity,\n  createTestProject,\n  createProcessExitSpy,\n  getRelativePath\n} from './analyze-ai-json.test.helper';\n\njest.mock('fs');\n\ndescribe('AI JSON Command Coverage Tests', () => {\n  let tempDir: string;\n  let command: AnalyzeCommandV8;\n\n  beforeEach(() => {\n    // モックをクリア\n    jest.clearAllMocks();\n    // fsモックを実際の実装にリセット\n    (fs.mkdtempSync as jest.Mock).mockImplementation(\n      jest.requireActual('fs').mkdtempSync\n    );\n    (fs.existsSync as jest.Mock).mockImplementation(\n      jest.requireActual('fs').existsSync\n    );\n    (fs.rmSync as jest.Mock).mockImplementation(\n      jest.requireActual('fs').rmSync\n    );\n    \n    tempDir = fs.mkdtempSync(path.join(os.tmpdir(), 'rimor-coverage-test-'));\n    const testContainer = createTestContainer();\n    const mockCliSecurity = createMockCliSecurity();\n    command = new AnalyzeCommandV8(testContainer, mockCliSecurity);\n  });\n\n  afterEach(() => {\n    if (fs.existsSync(tempDir)) {\n      fs.rmSync(tempDir, { recursive: true, force: true });\n    }\n  });\n\n  describe('AI JSON 生成カバレッジ', () => {\n    it('mapSeverityToRiskLevel関数の全パスをカバー', async () => {\n      // 異なるseverityレベルでのマッピング確認\n      const testProjectPath = createTestProject(tempDir);\n      const relativePath = getRelativePath(testProjectPath);\n      \n      // high severity issues のモック\n      const testContainer = createTestContainer();\n      testContainer.unbind(TYPES.AnalysisEngine);\n      testContainer.bind(TYPES.AnalysisEngine).toConstantValue({\n        analyze: jest.fn().mockResolvedValue({\n          projectPath: '',\n          issues: [\n            { file: 'test1.ts', line: 1, message: 'High severity issue', severity: 'high' },\n            { file: 'test2.ts', line: 2, message: 'Critical severity issue', severity: 'critical' },\n            { file: 'test3.ts', line: 3, message: 'Low severity issue', severity: 'low' }\n          ],\n          totalFiles: 3,\n          analysisTime: 100,\n          cacheHitRate: 0\n        })\n      });\n      \n      const commandWithCustomContainer = new AnalyzeCommandV8(testContainer, createMockCliSecurity());\n      const consoleSpy = jest.spyOn(console, 'log').mockImplementation();\n      \n      // Act\n      await commandWithCustomContainer.execute({\n        path: relativePath,\n        format: 'ai-json'\n      });\n      \n      // Assert - 異なるリスクレベルが生成されることを確認\n      expect(consoleSpy).toHaveBeenCalled();\n      const outputs = consoleSpy.mock.calls.map(call => call.join(' '));\n      const jsonOutput = outputs.find(output => {\n        try {\n          const parsed = JSON.parse(output);\n          return parsed && typeof parsed === 'object' && 'keyRisks' in parsed;\n        } catch {\n          return false;\n        }\n      });\n      \n      expect(jsonOutput).toBeDefined();\n      const json = JSON.parse(jsonOutput!);\n      expect(json.keyRisks).toHaveLength(3);\n      \n      consoleSpy.mockRestore();\n    });\n\n    it('AI JSON生成エラーパスのカバレッジ', async () => {\n      const testProjectPath = createTestProject(tempDir);\n      const relativePath = getRelativePath(testProjectPath);\n      \n      // ファイル書き込みエラーを模擬\n      (fs.writeFileSync as jest.Mock).mockImplementation(() => {\n        throw new Error('Write permission denied');\n      });\n      \n      const consoleSpy = jest.spyOn(console, 'error').mockImplementation();\n      const exitSpy = createProcessExitSpy();\n      \n      // Act & Assert\n      await expect(command.execute({\n        path: relativePath,\n        format: 'ai-json',\n        outputAiJson: path.join(tempDir, 'output.json')\n      })).rejects.toThrow(/Process\\.exit called/);\n      \n      expect(consoleSpy).toHaveBeenCalled();\n      \n      // Cleanup\n      jest.restoreAllMocks();\n    });\n\n    it('fullReportUrl生成の分岐カバレッジ', async () => {\n      const testProjectPath = createTestProject(tempDir);\n      const relativePath = getRelativePath(testProjectPath);\n      \n      // outputHtmlオプションありでの実行\n      const consoleSpy = jest.spyOn(console, 'log').mockImplementation();\n      \n      await command.execute({\n        path: relativePath,\n        format: 'ai-json',\n        outputHtml: 'custom-report.html'\n      });\n      \n      const outputs = consoleSpy.mock.calls.map(call => call.join(' '));\n      const jsonOutput = outputs.find(output => {\n        try {\n          const parsed = JSON.parse(output);\n          return parsed && typeof parsed === 'object' && 'fullReportUrl' in parsed;\n        } catch {\n          return false;\n        }\n      });\n      \n      expect(jsonOutput).toBeDefined();\n      const json = JSON.parse(jsonOutput!);\n      expect(json.fullReportUrl).toBe('custom-report.html');\n      \n      consoleSpy.mockRestore();\n    });\n\n    it('空のissues配列での実行パスカバレッジ', async () => {\n      const testProjectPath = createTestProject(tempDir);\n      const relativePath = getRelativePath(testProjectPath);\n      \n      // issues空配列のモック\n      const testContainer = createTestContainer();\n      testContainer.unbind(TYPES.AnalysisEngine);\n      testContainer.bind(TYPES.AnalysisEngine).toConstantValue({\n        analyze: jest.fn().mockResolvedValue({\n          projectPath: '',\n          issues: [], // 空の配列\n          totalFiles: 1,\n          analysisTime: 50,\n          cacheHitRate: 0\n        })\n      });\n      \n      const commandWithEmptyIssues = new AnalyzeCommandV8(testContainer, createMockCliSecurity());\n      const consoleSpy = jest.spyOn(console, 'log').mockImplementation();\n      \n      await commandWithEmptyIssues.execute({\n        path: relativePath,\n        format: 'ai-json'\n      });\n      \n      const outputs = consoleSpy.mock.calls.map(call => call.join(' '));\n      const jsonOutput = outputs.find(output => {\n        try {\n          const parsed = JSON.parse(output);\n          return parsed && typeof parsed === 'object' && 'overallAssessment' in parsed;\n        } catch {\n          return false;\n        }\n      });\n      \n      expect(jsonOutput).toBeDefined();\n      const json = JSON.parse(jsonOutput!);\n      expect(json.keyRisks).toHaveLength(0);\n      expect(json.overallAssessment).toContain('100/100'); // 完璧なスコア\n      \n      consoleSpy.mockRestore();\n    });\n  });\n});"],"version":3}