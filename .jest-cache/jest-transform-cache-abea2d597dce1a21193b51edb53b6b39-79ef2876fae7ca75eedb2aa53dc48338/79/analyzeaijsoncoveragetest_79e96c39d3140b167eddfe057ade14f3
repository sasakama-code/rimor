faae87286101fa211b2bf67253272a8b
"use strict";
/**
 * AI JSON Command カバレッジテスト
 * Issue #58: AIエージェント向けコンテキスト出力機能
 *
 * このファイルは統計的品質保証のためのカバレッジ最適化テストです
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock('fs');
const analyze_v0_8_1 = require("../../../src/cli/commands/analyze-v0.8");
const container_1 = require("../../../src/container");
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const os = __importStar(require("os"));
const analyze_ai_json_test_helper_1 = require("./analyze-ai-json.test.helper");
describe('AI JSON Command Coverage Tests', () => {
    let tempDir;
    let command;
    beforeEach(() => {
        // モックをクリア
        jest.clearAllMocks();
        // fsモックを実際の実装にリセット
        fs.mkdtempSync.mockImplementation(jest.requireActual('fs').mkdtempSync);
        fs.existsSync.mockImplementation(jest.requireActual('fs').existsSync);
        fs.rmSync.mockImplementation(jest.requireActual('fs').rmSync);
        tempDir = fs.mkdtempSync(path.join(os.tmpdir(), 'rimor-coverage-test-'));
        const testContainer = (0, analyze_ai_json_test_helper_1.createTestContainer)();
        const mockCliSecurity = (0, analyze_ai_json_test_helper_1.createMockCliSecurity)();
        command = new analyze_v0_8_1.AnalyzeCommandV8(testContainer, mockCliSecurity);
    });
    afterEach(() => {
        if (fs.existsSync(tempDir)) {
            fs.rmSync(tempDir, { recursive: true, force: true });
        }
    });
    describe('AI JSON 生成カバレッジ', () => {
        it('mapSeverityToRiskLevel関数の全パスをカバー', async () => {
            // 異なるseverityレベルでのマッピング確認
            const testProjectPath = (0, analyze_ai_json_test_helper_1.createTestProject)(tempDir);
            const relativePath = (0, analyze_ai_json_test_helper_1.getRelativePath)(testProjectPath);
            // high severity issues のモック
            const testContainer = (0, analyze_ai_json_test_helper_1.createTestContainer)();
            testContainer.unbind(container_1.TYPES.AnalysisEngine);
            testContainer.bind(container_1.TYPES.AnalysisEngine).toConstantValue({
                analyze: jest.fn().mockResolvedValue({
                    projectPath: '',
                    issues: [
                        { file: 'test1.ts', line: 1, message: 'High severity issue', severity: 'high' },
                        { file: 'test2.ts', line: 2, message: 'Critical severity issue', severity: 'critical' },
                        { file: 'test3.ts', line: 3, message: 'Low severity issue', severity: 'low' }
                    ],
                    totalFiles: 3,
                    analysisTime: 100,
                    cacheHitRate: 0
                })
            });
            const commandWithCustomContainer = new analyze_v0_8_1.AnalyzeCommandV8(testContainer, (0, analyze_ai_json_test_helper_1.createMockCliSecurity)());
            const consoleSpy = jest.spyOn(console, 'log').mockImplementation();
            // Act
            await commandWithCustomContainer.execute({
                path: relativePath,
                format: 'ai-json'
            });
            // Assert - 異なるリスクレベルが生成されることを確認
            expect(consoleSpy).toHaveBeenCalled();
            const outputs = consoleSpy.mock.calls.map(call => call.join(' '));
            const jsonOutput = outputs.find(output => {
                try {
                    const parsed = JSON.parse(output);
                    return parsed && typeof parsed === 'object' && 'keyRisks' in parsed;
                }
                catch {
                    return false;
                }
            });
            expect(jsonOutput).toBeDefined();
            const json = JSON.parse(jsonOutput);
            expect(json.keyRisks).toHaveLength(3);
            consoleSpy.mockRestore();
        });
        it('AI JSON生成エラーパスのカバレッジ', async () => {
            const testProjectPath = (0, analyze_ai_json_test_helper_1.createTestProject)(tempDir);
            const relativePath = (0, analyze_ai_json_test_helper_1.getRelativePath)(testProjectPath);
            // ファイル書き込みエラーを模擬
            fs.writeFileSync.mockImplementation(() => {
                throw new Error('Write permission denied');
            });
            const consoleSpy = jest.spyOn(console, 'error').mockImplementation();
            const exitSpy = (0, analyze_ai_json_test_helper_1.createProcessExitSpy)();
            // Act & Assert
            await expect(command.execute({
                path: relativePath,
                format: 'ai-json',
                outputAiJson: path.join(tempDir, 'output.json')
            })).rejects.toThrow(/Process\.exit called/);
            expect(consoleSpy).toHaveBeenCalled();
            // Cleanup
            jest.restoreAllMocks();
        });
        it('fullReportUrl生成の分岐カバレッジ', async () => {
            const testProjectPath = (0, analyze_ai_json_test_helper_1.createTestProject)(tempDir);
            const relativePath = (0, analyze_ai_json_test_helper_1.getRelativePath)(testProjectPath);
            // outputHtmlオプションありでの実行
            const consoleSpy = jest.spyOn(console, 'log').mockImplementation();
            await command.execute({
                path: relativePath,
                format: 'ai-json',
                outputHtml: 'custom-report.html'
            });
            const outputs = consoleSpy.mock.calls.map(call => call.join(' '));
            const jsonOutput = outputs.find(output => {
                try {
                    const parsed = JSON.parse(output);
                    return parsed && typeof parsed === 'object' && 'fullReportUrl' in parsed;
                }
                catch {
                    return false;
                }
            });
            expect(jsonOutput).toBeDefined();
            const json = JSON.parse(jsonOutput);
            expect(json.fullReportUrl).toBe('custom-report.html');
            consoleSpy.mockRestore();
        });
        it('空のissues配列での実行パスカバレッジ', async () => {
            const testProjectPath = (0, analyze_ai_json_test_helper_1.createTestProject)(tempDir);
            const relativePath = (0, analyze_ai_json_test_helper_1.getRelativePath)(testProjectPath);
            // issues空配列のモック
            const testContainer = (0, analyze_ai_json_test_helper_1.createTestContainer)();
            testContainer.unbind(container_1.TYPES.AnalysisEngine);
            testContainer.bind(container_1.TYPES.AnalysisEngine).toConstantValue({
                analyze: jest.fn().mockResolvedValue({
                    projectPath: '',
                    issues: [], // 空の配列
                    totalFiles: 1,
                    analysisTime: 50,
                    cacheHitRate: 0
                })
            });
            const commandWithEmptyIssues = new analyze_v0_8_1.AnalyzeCommandV8(testContainer, (0, analyze_ai_json_test_helper_1.createMockCliSecurity)());
            const consoleSpy = jest.spyOn(console, 'log').mockImplementation();
            await commandWithEmptyIssues.execute({
                path: relativePath,
                format: 'ai-json'
            });
            const outputs = consoleSpy.mock.calls.map(call => call.join(' '));
            const jsonOutput = outputs.find(output => {
                try {
                    const parsed = JSON.parse(output);
                    return parsed && typeof parsed === 'object' && 'overallAssessment' in parsed;
                }
                catch {
                    return false;
                }
            });
            expect(jsonOutput).toBeDefined();
            const json = JSON.parse(jsonOutput);
            expect(json.keyRisks).toHaveLength(0);
            expect(json.overallAssessment).toContain('100/100'); // 完璧なスコア
            consoleSpy.mockRestore();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,