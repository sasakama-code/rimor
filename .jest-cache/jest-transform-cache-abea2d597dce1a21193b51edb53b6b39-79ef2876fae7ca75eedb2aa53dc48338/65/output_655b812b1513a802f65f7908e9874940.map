{"file":"/Users/sasakama/Projects/Rimor/src/cli/output.ts","mappings":"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","names":[],"sources":["/Users/sasakama/Projects/Rimor/src/cli/output.ts"],"sourcesContent":["\ntype ChalkInstance = typeof import('chalk').default;\n\nlet chalkInstance: ChalkInstance | null = null;\nlet chalkPromise: Promise<any> | null = null;\n\nfunction getChalk() {\n  if (!chalkPromise) {\n    chalkPromise = loadChalk();\n  }\n  return chalkPromise;\n}\n\nasync function loadChalk() {\n  if (chalkInstance) {\n    return chalkInstance;\n  }\n\n  try {\n    if (process.env.NODE_ENV === 'test') {\n      const mockChalk: any = {\n        bold: Object.assign((s: string) => s, {\n          blue: (s: string) => s\n        }),\n        green: (s: string) => s,\n        red: (s: string) => s,\n        yellow: (s: string) => s,\n        blue: (s: string) => s,\n        gray: (s: string) => s\n      };\n      chalkInstance = mockChalk as ChalkInstance;\n    } else {\n      const chalk = await import('chalk');\n      chalkInstance = chalk.default;\n    }\n  } catch (error) {\n    const mockChalk: any = {\n      bold: Object.assign((s: string) => s, {\n        blue: (s: string) => s\n      }),\n      green: (s: string) => s,\n      red: (s: string) => s,\n      yellow: (s: string) => s,\n      blue: (s: string) => s,\n      gray: (s: string) => s\n    };\n    chalkInstance = mockChalk as ChalkInstance;\n  }\n  \n  return chalkInstance;\n}\n\nexport class OutputFormatter {\n  static async header(title: string): Promise<string> {\n    const c = await getChalk();\n    return c.bold.blue(`üîç ${title}\\n`) + \n           c.gray('‚îÅ'.repeat(title.length + 4));\n  }\n  \n  static async success(message: string): Promise<string> {\n    const c = await getChalk();\n    return c.green(`‚úÖ ${message}`);\n  }\n  \n  static async error(message: string): Promise<string> {\n    const c = await getChalk();\n    return c.red(`‚ùå ${message}`);\n  }\n  \n  static async warning(message: string): Promise<string> {\n    const c = await getChalk();\n    return c.yellow(`‚ö†Ô∏è  ${message}`);\n  }\n  \n  static async info(message: string): Promise<string> {\n    const c = await getChalk();\n    return c.blue(`‚ÑπÔ∏è  ${message}`);\n  }\n  \n  static async summary(filesAnalyzed: number, issuesFound: number, executionTime: number): Promise<string> {\n    const c = await getChalk();\n    const testCoverage = filesAnalyzed > 0 ? Math.round(((filesAnalyzed - issuesFound) / filesAnalyzed) * 100) : 0;\n    \n    return [\n      c.bold('\\nÂàÜÊûê„Çµ„Éû„É™„Éº'),\n      `ÂàÜÊûêÂØæË±°: ${filesAnalyzed}„Éï„Ç°„Ç§„É´`,\n      `${issuesFound > 0 ? '‚ùå' : '‚úÖ'} „ÉÜ„Çπ„Éà‰∏çË∂≥: ${issuesFound}‰ª∂`,\n      `„ÉÜ„Çπ„Éà„Ç´„Éê„É¨„ÉÉ„Ç∏: ${testCoverage}%`,\n      `ÂÆüË°åÊôÇÈñì: ${executionTime}ms`\n    ].join('\\n');\n  }\n  \n  static async issueList(issues: Array<{severity: string, message: string, line?: number, file?: string}>): Promise<string> {\n    const c = await getChalk();\n    if (issues.length === 0) {\n      return c.green('\\nÂïèÈ°å„ÅØË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„ÅüÔºÅ');\n    }\n    \n    const lines = [c.bold('\\nË¶ã„Å§„Åã„Å£„ÅüÂïèÈ°å:')];\n    issues.forEach((issue, index) => {\n      const severity = (issue.severity === 'error' || issue.severity === 'high') ? '‚ùå' : '‚ö†Ô∏è';\n      const location = issue.line ? ` (Ë°å: ${issue.line})` : '';\n      lines.push(`${index + 1}. ${severity} ${issue.message}${location}`);\n    });\n    \n    return lines.join('\\n');\n  }\n}"],"version":3}