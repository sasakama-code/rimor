{"file":"/Users/sasakama/Projects/Rimor/test/analyzers/structure.test.ts","mappings":"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","names":[],"sources":["/Users/sasakama/Projects/Rimor/test/analyzers/structure.test.ts"],"sourcesContent":["import { ProjectStructureAnalyzer } from '../../src/analyzers/structure';\nimport { \n  ProjectStructure, \n  ProjectOverview, \n  DirectoryInfo, \n  ArchitecturePattern,\n  NamingConventions,\n  ProjectMetrics,\n  DirectoryPurpose,\n  ArchitectureType,\n  NamingPattern \n} from '../../src/analyzers/types';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as os from 'os';\n\ndescribe('ProjectStructureAnalyzer', () => {\n  let analyzer: ProjectStructureAnalyzer;\n  let testProjectPath: string;\n\n  beforeEach(() => {\n    analyzer = new ProjectStructureAnalyzer();\n    \n    // テスト用プロジェクトディレクトリを作成\n    testProjectPath = fs.mkdtempSync(path.join(os.tmpdir(), 'rimor-structure-test-'));\n    \n    // 複雑なプロジェクト構造を作成\n    const projectStructure = {\n      'package.json': {\n        name: 'test-project',\n        version: '1.0.0',\n        description: 'Test project for structure analysis',\n        main: 'dist/index.js',\n        scripts: {\n          build: 'tsc',\n          test: 'jest',\n          start: 'node dist/index.js',\n          dev: 'nodemon src/index.ts',\n          lint: 'eslint src/**/*.ts'\n        },\n        dependencies: {\n          'express': '^4.18.0',\n          'mongoose': '^7.0.0',\n          'lodash': '^4.17.21'\n        },\n        devDependencies: {\n          'typescript': '^5.0.0',\n          'jest': '^29.0.0',\n          '@types/express': '^4.17.0',\n          'nodemon': '^2.0.0',\n          'eslint': '^8.0.0'\n        }\n      },\n      'tsconfig.json': {\n        compilerOptions: {\n          target: 'es2020',\n          module: 'commonjs',\n          outDir: './dist',\n          rootDir: './src',\n          strict: true,\n          esModuleInterop: true\n        },\n        include: ['src/**/*'],\n        exclude: ['node_modules', 'dist', 'test']\n      },\n      'README.md': `# Test Project\n\nThis is a test project for structure analysis.\n\n## Features\n- Express.js API\n- MongoDB with Mongoose\n- TypeScript\n- Jest testing\n\n## Installation\n\\`\\`\\`bash\nnpm install\n\\`\\`\\`\n\n## Usage\n\\`\\`\\`bash\nnpm start\n\\`\\`\\`\n`,\n      '.gitignore': `node_modules/\ndist/\n.env\n*.log\ncoverage/\n.nyc_output/\n`,\n      'jest.config.js': `module.exports = {\n  preset: 'ts-jest',\n  testEnvironment: 'node',\n  roots: ['<rootDir>/src', '<rootDir>/test'],\n  testMatch: ['**/*.test.ts'],\n  coverageDirectory: 'coverage'\n};`,\n      '.eslintrc.js': `module.exports = {\n  parser: '@typescript-eslint/parser',\n  extends: ['eslint:recommended', '@typescript-eslint/recommended'],\n  rules: {\n    'no-console': 'warn',\n    '@typescript-eslint/no-unused-vars': 'error'\n  }\n};`\n    };\n\n    // ディレクトリ構造とファイルを作成\n    const directories = {\n      'src': {\n        'controllers': {\n          'UserController.ts': `import { Request, Response } from 'express';\nimport { UserService } from '../services/UserService';\n\nexport class UserController {\n  private userService: UserService;\n\n  constructor() {\n    this.userService = new UserService();\n  }\n\n  async getUsers(req: Request, res: Response): Promise<void> {\n    try {\n      const users = await this.userService.getAllUsers();\n      res.json(users);\n    } catch (error) {\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  }\n\n  async createUser(req: Request, res: Response): Promise<void> {\n    try {\n      const userData = req.body;\n      const newUser = await this.userService.createUser(userData);\n      res.status(201).json(newUser);\n    } catch (error) {\n      res.status(400).json({ error: 'Bad request' });\n    }\n  }\n}`,\n          'ProductController.ts': `import { Request, Response } from 'express';\nimport { ProductService } from '../services/ProductService';\n\nexport class ProductController {\n  private productService: ProductService;\n\n  constructor() {\n    this.productService = new ProductService();\n  }\n\n  async getProducts(req: Request, res: Response): Promise<void> {\n    const products = await this.productService.getAllProducts();\n    res.json(products);\n  }\n}`\n        },\n        'services': {\n          'UserService.ts': `import { User } from '../models/User';\nimport { DatabaseConnection } from '../utils/database';\n\nexport class UserService {\n  private db: DatabaseConnection;\n\n  constructor() {\n    this.db = new DatabaseConnection();\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return await this.db.collection('users').find({}).toArray();\n  }\n\n  async createUser(userData: Partial<User>): Promise<User> {\n    const user = new User(userData);\n    return await this.db.collection('users').insertOne(user);\n  }\n\n  async findById(id: string): Promise<User | null> {\n    return await this.db.collection('users').findOne({ _id: id });\n  }\n}`,\n          'ProductService.ts': `import { Product } from '../models/Product';\nimport { DatabaseConnection } from '../utils/database';\n\nexport class ProductService {\n  private db: DatabaseConnection;\n\n  constructor() {\n    this.db = new DatabaseConnection();\n  }\n\n  async getAllProducts(): Promise<Product[]> {\n    return await this.db.collection('products').find({}).toArray();\n  }\n}`\n        },\n        'models': {\n          'User.ts': `export interface User {\n  id: string;\n  name: string;\n  email: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport class UserModel implements User {\n  id: string;\n  name: string;\n  email: string;\n  createdAt: Date;\n  updatedAt: Date;\n\n  constructor(data: Partial<User>) {\n    this.id = data.id || '';\n    this.name = data.name || '';\n    this.email = data.email || '';\n    this.createdAt = data.createdAt || new Date();\n    this.updatedAt = data.updatedAt || new Date();\n  }\n}`,\n          'Product.ts': `export interface Product {\n  id: string;\n  name: string;\n  price: number;\n  description: string;\n}`,\n          'index.ts': `export { User } from './User';\nexport { Product } from './Product';`\n        },\n        'routes': {\n          'userRoutes.ts': `import { Router } from 'express';\nimport { UserController } from '../controllers/UserController';\n\nconst router = Router();\nconst userController = new UserController();\n\nrouter.get('/users', userController.getUsers.bind(userController));\nrouter.post('/users', userController.createUser.bind(userController));\n\nexport { router as userRoutes };`,\n          'productRoutes.ts': `import { Router } from 'express';\nimport { ProductController } from '../controllers/ProductController';\n\nconst router = Router();\nconst productController = new ProductController();\n\nrouter.get('/products', productController.getProducts.bind(productController));\n\nexport { router as productRoutes };`,\n          'index.ts': `import { Router } from 'express';\nimport { userRoutes } from './userRoutes';\nimport { productRoutes } from './productRoutes';\n\nconst router = Router();\n\nrouter.use('/api', userRoutes);\nrouter.use('/api', productRoutes);\n\nexport { router };`\n        },\n        'middleware': {\n          'authMiddleware.ts': `import { Request, Response, NextFunction } from 'express';\nimport jwt from 'jsonwebtoken';\n\nexport function authMiddleware(req: Request, res: Response, next: NextFunction) {\n  const token = req.headers.authorization?.split(' ')[1];\n  \n  if (!token) {\n    return res.status(401).json({ error: 'Access token required' });\n  }\n\n  try {\n    const decoded = jwt.verify(token, process.env.JWT_SECRET || 'secret');\n    (req as any).user = decoded;\n    next();\n  } catch (error) {\n    return res.status(401).json({ error: 'Invalid token' });\n  }\n}`,\n          'errorHandler.ts': `import { Request, Response, NextFunction } from 'express';\n\nexport function errorHandler(err: Error, req: Request, res: Response, next: NextFunction) {\n  console.error(err.stack);\n  res.status(500).json({ error: 'Something went wrong!' });\n}`\n        },\n        'utils': {\n          'database.ts': `import { MongoClient, Db } from 'mongodb';\n\nexport class DatabaseConnection {\n  private client: MongoClient;\n  private db: Db;\n\n  constructor() {\n    const connectionString = process.env.MONGODB_URI || 'mongodb://localhost:27017';\n    this.client = new MongoClient(connectionString);\n  }\n\n  async connect(): Promise<void> {\n    await this.client.connect();\n    this.db = this.client.db('testproject');\n  }\n\n  collection(name: string) {\n    return this.db.collection(name);\n  }\n}`,\n          'validation_helpers.ts': `export function validateEmail(email: string): boolean {\n  const emailRegex = /^[^\\\\s@]+@[^\\\\s@]+\\\\.[^\\\\s@]+$/;\n  return emailRegex.test(email);\n}\n\nexport function validateRequired(value: any): boolean {\n  return value !== null && value !== undefined && value !== '';\n}`,\n          'logger.ts': `export class Logger {\n  static info(message: string): void {\n    console.log(\\`[INFO] \\${new Date().toISOString()}: \\${message}\\`);\n  }\n\n  static error(message: string): void {\n    console.error(\\`[ERROR] \\${new Date().toISOString()}: \\${message}\\`);\n  }\n\n  static warn(message: string): void {\n    console.warn(\\`[WARN] \\${new Date().toISOString()}: \\${message}\\`);\n  }\n}`\n        },\n        'config': {\n          'database.config.ts': `export const databaseConfig = {\n  uri: process.env.MONGODB_URI || 'mongodb://localhost:27017',\n  dbName: 'testproject',\n  options: {\n    useNewUrlParser: true,\n    useUnifiedTopology: true\n  }\n};`,\n          'app.config.ts': `export const appConfig = {\n  port: process.env.PORT || 3000,\n  env: process.env.NODE_ENV || 'development',\n  jwtSecret: process.env.JWT_SECRET || 'fallback-secret'\n};`\n        },\n        'index.ts': `import express from 'express';\nimport { router } from './routes';\nimport { errorHandler } from './middleware/errorHandler';\nimport { appConfig } from './config/app.config';\n\nconst app = express();\n\napp.use(express.json());\napp.use(router);\napp.use(errorHandler);\n\napp.listen(appConfig.port, () => {\n  console.log(\\`Server running on port \\${appConfig.port}\\`);\n});\n\nexport default app;`\n      },\n      'test': {\n        'controllers': {\n          'UserController.test.ts': `import { UserController } from '../../src/controllers/UserController';\nimport { Request, Response } from 'express';\n\ndescribe('UserController', () => {\n  let controller: UserController;\n  let req: Partial<Request>;\n  let res: Partial<Response>;\n\n  beforeEach(() => {\n    controller = new UserController();\n    req = {};\n    res = {\n      json: jest.fn(),\n      status: jest.fn().mockReturnThis()\n    };\n  });\n\n  describe('getUsers', () => {\n    it('should return users list', async () => {\n      await controller.getUsers(req as Request, res as Response);\n      expect(res.json).toHaveBeenCalled();\n    });\n  });\n});`,\n          'ProductController.test.ts': `import { ProductController } from '../../src/controllers/ProductController';\n\ndescribe('ProductController', () => {\n  let controller: ProductController;\n\n  beforeEach(() => {\n    controller = new ProductController();\n  });\n\n  it('should create controller instance', () => {\n    expect(controller).toBeInstanceOf(ProductController);\n  });\n});`\n        },\n        'services': {\n          'UserService.test.ts': `import { UserService } from '../../src/services/UserService';\n\ndescribe('UserService', () => {\n  let service: UserService;\n\n  beforeEach(() => {\n    service = new UserService();\n  });\n\n  describe('getAllUsers', () => {\n    it('should return array of users', async () => {\n      const users = await service.getAllUsers();\n      expect(Array.isArray(users)).toBe(true);\n    });\n  });\n});`\n        },\n        'utils': {\n          'validation_helpers.test.ts': `import { validateEmail, validateRequired } from '../../src/utils/validation_helpers';\n\ndescribe('Validation Helpers', () => {\n  describe('validateEmail', () => {\n    it('should validate correct email addresses', () => {\n      expect(validateEmail('test@example.com')).toBe(true);\n      expect(validateEmail('user.name@domain.co.uk')).toBe(true);\n    });\n\n    it('should reject invalid email addresses', () => {\n      expect(validateEmail('invalid-email')).toBe(false);\n      expect(validateEmail('@domain.com')).toBe(false);\n      expect(validateEmail('user@')).toBe(false);\n    });\n  });\n\n  describe('validateRequired', () => {\n    it('should return true for valid values', () => {\n      expect(validateRequired('test')).toBe(true);\n      expect(validateRequired(123)).toBe(true);\n      expect(validateRequired(true)).toBe(true);\n    });\n\n    it('should return false for invalid values', () => {\n      expect(validateRequired('')).toBe(false);\n      expect(validateRequired(null)).toBe(false);\n      expect(validateRequired(undefined)).toBe(false);\n    });\n  });\n});`\n        }\n      },\n      'docs': {\n        'API.md': `# API Documentation\n\n## Endpoints\n\n### Users\n- GET /api/users - Get all users\n- POST /api/users - Create new user\n\n### Products  \n- GET /api/products - Get all products\n`,\n        'DEVELOPMENT.md': `# Development Guide\n\n## Setup\n1. Install dependencies: \\`npm install\\`\n2. Set up environment variables\n3. Start development server: \\`npm run dev\\`\n\n## Testing\nRun tests with: \\`npm test\\`\n`,\n        'DEPLOYMENT.md': `# Deployment Guide\n\n## Production Build\n\\`\\`\\`bash\nnpm run build\nnpm start\n\\`\\`\\`\n\n## Environment Variables\n- MONGODB_URI\n- JWT_SECRET\n- PORT\n`\n      },\n      'scripts': {\n        'setup.sh': `#!/bin/bash\necho \"Setting up project...\"\nnpm install\ncp .env.example .env\necho \"Setup complete!\"`,\n        'deploy.sh': `#!/bin/bash\necho \"Deploying application...\"\nnpm run build\ndocker build -t test-project .\necho \"Deployment complete!\"`\n      },\n      'build': {},\n      'dist': {},\n      'coverage': {},\n      'assets': {\n        'images': {\n          'logo.png': 'binary-placeholder'\n        },\n        'styles': {\n          'main.css': `body {\n  font-family: Arial, sans-serif;\n  margin: 0;\n  padding: 20px;\n}`\n        }\n      }\n    };\n\n    // 基本設定ファイルを作成\n    Object.entries(projectStructure).forEach(([filename, content]) => {\n      if (typeof content === 'object') {\n        fs.writeFileSync(\n          path.join(testProjectPath, filename), \n          JSON.stringify(content, null, 2)\n        );\n      } else {\n        fs.writeFileSync(path.join(testProjectPath, filename), content);\n      }\n    });\n\n    // ディレクトリ構造を再帰的に作成\n    const createDirectory = (basePath: string, structure: any) => {\n      Object.entries(structure).forEach(([name, content]) => {\n        const fullPath = path.join(basePath, name);\n        \n        if (typeof content === 'object' && content !== null) {\n          fs.mkdirSync(fullPath, { recursive: true });\n          createDirectory(fullPath, content);\n        } else {\n          fs.writeFileSync(fullPath, content as string);\n        }\n      });\n    };\n\n    createDirectory(testProjectPath, directories);\n\n    // 空のディレクトリも作成\n    ['build', 'dist', 'coverage'].forEach(dir => {\n      fs.mkdirSync(path.join(testProjectPath, dir), { recursive: true });\n    });\n  });\n\n  afterEach(() => {\n    if (fs.existsSync(testProjectPath)) {\n      fs.rmSync(testProjectPath, { recursive: true, force: true });\n    }\n  });\n\n  describe('Class Instantiation', () => {\n    test('should create ProjectStructureAnalyzer instance', () => {\n      expect(analyzer).toBeInstanceOf(ProjectStructureAnalyzer);\n    });\n\n    test('should have required public methods', () => {\n      expect(typeof analyzer.analyzeProjectStructure).toBe('function');\n      expect(typeof analyzer.detectArchitecturePattern).toBe('function');\n      expect(typeof analyzer.analyzeNamingConventions).toBe('function');\n      expect(typeof analyzer.calculateProjectMetrics).toBe('function');\n      expect(typeof analyzer.categorizeDirectories).toBe('function');\n    });\n  });\n\n  describe('analyzeProjectStructure', () => {\n    test('should analyze complete project structure', async () => {\n      const structure = await analyzer.analyzeProjectStructure(testProjectPath);\n\n      expect(structure).toBeDefined();\n      expect(structure.overview).toBeDefined();\n      expect(structure.directories).toBeDefined();\n      expect(structure.architecture).toBeDefined();\n      expect(structure.conventions).toBeDefined();\n      expect(structure.metrics).toBeDefined();\n    });\n\n    test('should provide comprehensive project overview', async () => {\n      const structure = await analyzer.analyzeProjectStructure(testProjectPath);\n      const overview = structure.overview;\n\n      expect(overview.rootPath).toBe(testProjectPath);\n      expect(overview.totalFiles).toBeGreaterThan(20);\n      expect(overview.totalDirectories).toBeGreaterThan(10);\n      expect(overview.languages).toBeDefined();\n      expect(overview.frameworks).toBeDefined();\n      expect(overview.testingFrameworks).toBeDefined();\n      expect(overview.buildTools).toBeDefined();\n\n      // TypeScript should be detected\n      const tsLanguage = overview.languages.find(lang => lang.language === 'typescript');\n      expect(tsLanguage).toBeDefined();\n      expect(tsLanguage!.percentage).toBeGreaterThan(0);\n\n      // Express framework should be detected\n      const expressFramework = overview.frameworks.find(fw => fw.name === 'express');\n      expect(expressFramework).toBeDefined();\n      expect(expressFramework!.confidence).toBeGreaterThan(0.5);\n    });\n\n    test('should categorize directories correctly', async () => {\n      const structure = await analyzer.analyzeProjectStructure(testProjectPath);\n      const directories = structure.directories;\n\n      expect(directories.length).toBeGreaterThan(5);\n\n      // Check specific directory purposes\n      const srcDir = directories.find(dir => dir.path.includes('src'));\n      expect(srcDir).toBeDefined();\n      expect(srcDir!.purpose).toBe('source');\n\n      const testDir = directories.find(dir => dir.path.includes('test'));\n      expect(testDir).toBeDefined();\n      expect(testDir!.purpose).toBe('test');\n\n      const docsDir = directories.find(dir => dir.path.includes('docs'));\n      expect(docsDir).toBeDefined();\n      expect(docsDir!.purpose).toBe('documentation');\n\n      const buildDir = directories.find(dir => dir.path.includes('build'));\n      expect(buildDir).toBeDefined();\n      expect(buildDir!.purpose).toBe('build');\n    });\n\n    test('should detect MVC architecture pattern', async () => {\n      const structure = await analyzer.analyzeProjectStructure(testProjectPath);\n      const architecture = structure.architecture;\n\n      expect(architecture.type).toBe('mvc');\n      expect(architecture.confidence).toBeGreaterThan(0.7);\n      expect(architecture.evidence).toContain('controllers directory found');\n      expect(architecture.evidence).toContain('models directory found');\n      expect(architecture.suggestions).toBeDefined();\n    });\n\n    test('should analyze naming conventions', async () => {\n      const structure = await analyzer.analyzeProjectStructure(testProjectPath);\n      const conventions = structure.conventions;\n\n      expect(conventions.files.pattern).toBe('camelCase');\n      expect(conventions.files.confidence).toBeGreaterThan(0.4);\n      \n      expect(conventions.classes.pattern).toBe('PascalCase');\n      expect(conventions.classes.confidence).toBeGreaterThan(0.8);\n\n      expect(conventions.variables.pattern).toBe('camelCase');\n      expect(conventions.functions.pattern).toBe('camelCase');\n    });\n\n    test('should calculate comprehensive project metrics', async () => {\n      const structure = await analyzer.analyzeProjectStructure(testProjectPath);\n      const metrics = structure.metrics;\n\n      expect(metrics.complexity).toBeDefined();\n      expect(metrics.complexity.totalFunctions).toBeGreaterThan(10);\n      expect(metrics.complexity.averageCyclomaticComplexity).toBeGreaterThanOrEqual(1);\n\n      expect(metrics.maintainability).toBeDefined();\n      expect(metrics.maintainability.maintainabilityIndex).toBeGreaterThan(0);\n      expect(metrics.maintainability.averageFileSize).toBeGreaterThan(0);\n\n      expect(metrics.testability).toBeDefined();\n      expect(metrics.testability.testCoverage).toBeGreaterThanOrEqual(0);\n\n      expect(metrics.documentation).toBeDefined();\n      expect(metrics.documentation.readmeQuality).toBeGreaterThan(0);\n    });\n  });\n\n  describe('detectArchitecturePattern', () => {\n    test('should detect MVC pattern in organized project', async () => {\n      const pattern = await analyzer.detectArchitecturePattern(testProjectPath);\n\n      expect(pattern.type).toBe('mvc');\n      expect(pattern.confidence).toBeGreaterThan(0.7);\n      expect(pattern.evidence).toContain('controllers directory found');\n      expect(pattern.evidence).toContain('models directory found');\n      expect(pattern.evidence).toContain('views or routes directory found');\n    });\n\n    test('should provide appropriate suggestions', async () => {\n      const pattern = await analyzer.detectArchitecturePattern(testProjectPath);\n\n      expect(pattern.suggestions).toBeDefined();\n      expect(pattern.suggestions.length).toBeGreaterThan(0);\n      expect(pattern.suggestions.some(s => s.includes('Consider'))).toBe(true);\n    });\n\n    test('should handle unknown architecture gracefully', async () => {\n      // Create minimal project structure\n      const minimalProjectPath = fs.mkdtempSync(path.join(os.tmpdir(), 'minimal-'));\n      try {\n        fs.writeFileSync(path.join(minimalProjectPath, 'index.js'), 'console.log(\"hello\");');\n\n        const pattern = await analyzer.detectArchitecturePattern(minimalProjectPath);\n\n        expect(pattern.type).toBe('unknown');\n        expect(pattern.confidence).toBeLessThan(0.5);\n      } finally {\n        fs.rmSync(minimalProjectPath, { recursive: true, force: true });\n      }\n    });\n  });\n\n  describe('analyzeNamingConventions', () => {\n    test('should detect file naming patterns', async () => {\n      const conventions = await analyzer.analyzeNamingConventions(testProjectPath);\n\n      expect(conventions.files.pattern).toBe('camelCase');\n      expect(conventions.files.confidence).toBeGreaterThan(0.4);\n      expect(conventions.files.examples.length).toBeGreaterThan(0);\n    });\n\n    test('should detect class naming patterns', async () => {\n      const conventions = await analyzer.analyzeNamingConventions(testProjectPath);\n\n      expect(conventions.classes.pattern).toBe('PascalCase');\n      expect(conventions.classes.confidence).toBeGreaterThan(0.8);\n      expect(conventions.classes.examples).toContain('UserController');\n      expect(conventions.classes.examples).toContain('ProductController');\n    });\n\n    test('should detect variable and function naming patterns', async () => {\n      const conventions = await analyzer.analyzeNamingConventions(testProjectPath);\n\n      expect(conventions.variables.pattern).toBe('camelCase');\n      expect(conventions.functions.pattern).toBe('camelCase');\n    });\n\n    test('should identify naming violations', async () => {\n      // Create file with inconsistent naming\n      const inconsistentFile = path.join(testProjectPath, 'src/bad-naming-example.ts');\n      fs.writeFileSync(inconsistentFile, `\nclass bad_class_name {\n  BAD_VARIABLE = 'test';\n  \n  BAD_FUNCTION_NAME() {\n    return this.BAD_VARIABLE;\n  }\n}\n`);\n\n      const conventions = await analyzer.analyzeNamingConventions(testProjectPath);\n\n      expect(conventions.classes.violations.length).toBeGreaterThanOrEqual(0);\n    });\n  });\n\n  describe('calculateProjectMetrics', () => {\n    test('should calculate complexity metrics', async () => {\n      const metrics = await analyzer.calculateProjectMetrics(testProjectPath);\n\n      expect(metrics.complexity.totalFunctions).toBeGreaterThan(5);\n      expect(metrics.complexity.averageCyclomaticComplexity).toBeGreaterThanOrEqual(1);\n      expect(metrics.complexity.maxComplexity).toBeGreaterThanOrEqual(1);\n      expect(metrics.complexity.averageFunctionLength).toBeGreaterThan(0);\n    });\n\n    test('should calculate maintainability metrics', async () => {\n      const metrics = await analyzer.calculateProjectMetrics(testProjectPath);\n\n      expect(metrics.maintainability.maintainabilityIndex).toBeGreaterThan(0);\n      expect(metrics.maintainability.maintainabilityIndex).toBeLessThanOrEqual(100);\n      expect(metrics.maintainability.duplicatedCodePercentage).toBeGreaterThanOrEqual(0);\n      expect(metrics.maintainability.averageFileSize).toBeGreaterThan(0);\n    });\n\n    test('should calculate testability metrics', async () => {\n      const metrics = await analyzer.calculateProjectMetrics(testProjectPath);\n\n      expect(metrics.testability.testCoverage).toBeGreaterThanOrEqual(0);\n      expect(metrics.testability.testCoverage).toBeLessThanOrEqual(100);\n      expect(metrics.testability.testableClasses).toBeGreaterThanOrEqual(0);\n      expect(metrics.testability.mockability).toBeGreaterThanOrEqual(0);\n    });\n\n    test('should calculate documentation metrics', async () => {\n      const metrics = await analyzer.calculateProjectMetrics(testProjectPath);\n\n      expect(metrics.documentation.readmeQuality).toBeGreaterThan(0);\n      expect(metrics.documentation.documentationCoverage).toBeGreaterThanOrEqual(0);\n      expect(metrics.documentation.documentedFunctions).toBeGreaterThanOrEqual(0);\n      expect(metrics.documentation.documentedClasses).toBeGreaterThanOrEqual(0);\n    });\n  });\n\n  describe('categorizeDirectories', () => {\n    test('should categorize common directory types', async () => {\n      const directories = await analyzer.categorizeDirectories(testProjectPath);\n\n      expect(directories.length).toBeGreaterThan(5);\n\n      // Test specific categorizations\n      const sourceDir = directories.find(dir => dir.path.includes('src'));\n      expect(sourceDir?.purpose).toBe('source');\n\n      const testDir = directories.find(dir => dir.path.includes('test'));\n      expect(testDir?.purpose).toBe('test');\n\n      const docsDir = directories.find(dir => dir.path.includes('docs'));\n      expect(docsDir?.purpose).toBe('documentation');\n\n      const buildDir = directories.find(dir => dir.path.includes('build'));  \n      expect(buildDir?.purpose).toBe('build');\n\n      const assetsDir = directories.find(dir => dir.path.includes('assets'));\n      expect(assetsDir?.purpose).toBe('assets');\n    });\n\n    test('should provide directory metadata', async () => {\n      const directories = await analyzer.categorizeDirectories(testProjectPath);\n\n      directories.forEach(dir => {\n        expect(dir.path).toBeDefined();\n        expect(dir.purpose).toBeDefined();\n        expect(dir.fileCount).toBeGreaterThanOrEqual(0);\n        expect(Array.isArray(dir.subdirectories)).toBe(true);\n        expect(Array.isArray(dir.patterns)).toBe(true);\n        expect(Array.isArray(dir.conventions)).toBe(true);\n      });\n    });\n\n    test('should detect directory patterns and conventions', async () => {\n      const directories = await analyzer.categorizeDirectories(testProjectPath);\n\n      const controllersDir = directories.find(dir => dir.path.includes('controllers'));\n      expect(controllersDir).toBeDefined();\n      expect(controllersDir!.patterns).toContain('Controller suffix pattern');\n      expect(controllersDir!.conventions).toContain('PascalCase class names');\n    });\n  });\n\n  describe('Error Handling', () => {\n    test('should handle non-existent project path', async () => {\n      await expect(\n        analyzer.analyzeProjectStructure('/non/existent/path')\n      ).rejects.toThrow();\n    });\n\n    test('should handle empty project directory', async () => {\n      const emptyProjectPath = fs.mkdtempSync(path.join(os.tmpdir(), 'empty-project-'));\n      \n      try {\n        const structure = await analyzer.analyzeProjectStructure(emptyProjectPath);\n\n        expect(structure).toBeDefined();\n        expect(structure.overview.totalFiles).toBe(0);\n        expect(structure.directories).toHaveLength(0);\n        expect(structure.architecture.type).toBe('unknown');\n      } finally {\n        fs.rmSync(emptyProjectPath, { recursive: true, force: true });\n      }\n    });\n\n    test('should handle corrupted files gracefully', async () => {\n      // Create corrupted package.json\n      fs.writeFileSync(path.join(testProjectPath, 'corrupted.json'), '{ invalid json');\n\n      const structure = await analyzer.analyzeProjectStructure(testProjectPath);\n\n      // Should not throw, but may have limited analysis\n      expect(structure).toBeDefined();\n    });\n  });\n\n  describe('Performance', () => {\n    test('should complete analysis within reasonable time', async () => {\n      const startTime = Date.now();\n      const structure = await analyzer.analyzeProjectStructure(testProjectPath);\n      const endTime = Date.now();\n\n      expect(structure).toBeDefined();\n      expect(endTime - startTime).toBeLessThan(10000); // 10秒以内\n    });\n\n    test('should handle large projects efficiently', async () => {\n      // Create many files to simulate large project\n      const largeProjectPath = fs.mkdtempSync(path.join(os.tmpdir(), 'large-structure-'));\n      \n      try {\n        fs.mkdirSync(path.join(largeProjectPath, 'src'), { recursive: true });\n        \n        // Create 50 files\n        for (let i = 0; i < 50; i++) {\n          const content = `export class Class${i} {\n  method${i}() {\n    return ${i};\n  }\n}`;\n          fs.writeFileSync(path.join(largeProjectPath, `src/file${i}.ts`), content);\n        }\n\n        const startTime = Date.now();\n        const structure = await analyzer.analyzeProjectStructure(largeProjectPath);\n        const endTime = Date.now();\n\n        expect(structure.overview.totalFiles).toBeGreaterThan(40);\n        expect(endTime - startTime).toBeLessThan(15000); // 15秒以内\n      } finally {\n        fs.rmSync(largeProjectPath, { recursive: true, force: true });\n      }\n    });\n  });\n\n  describe('Integration Tests', () => {\n    test('should work with real-world project structure', async () => {\n      const structure = await analyzer.analyzeProjectStructure(testProjectPath);\n\n      // Comprehensive validation\n      expect(structure.overview.frameworks.some(f => f.name === 'express')).toBe(true);\n      expect(structure.overview.testingFrameworks.some(f => f.name === 'jest')).toBe(true);\n      expect(structure.overview.buildTools.some(f => f.name === 'typescript')).toBe(true);\n\n      expect(structure.architecture.type).toBe('mvc');\n      expect(structure.conventions.classes.pattern).toBe('PascalCase');\n      expect(structure.metrics.complexity.totalFunctions).toBeGreaterThan(10);\n    });\n\n    test('should provide actionable insights', async () => {\n      const structure = await analyzer.analyzeProjectStructure(testProjectPath);\n\n      // Architecture suggestions should be practical\n      expect(structure.architecture.suggestions.length).toBeGreaterThan(0);\n      \n      // Metrics should be realistic\n      expect(structure.metrics.maintainability.maintainabilityIndex).toBeGreaterThan(20);\n      expect(structure.metrics.maintainability.maintainabilityIndex).toBeLessThan(100);\n      \n      // Documentation quality should be reasonable\n      expect(structure.metrics.documentation.readmeQuality).toBeGreaterThan(0);\n    });\n  });\n});"],"version":3}