{"file":"/Users/sasakama/Projects/Rimor/src/security/CLISecurity.ts","mappings":"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","names":[],"sources":["/Users/sasakama/Projects/Rimor/src/security/CLISecurity.ts"],"sourcesContent":["/**\n * CLI引数セキュリティ - セキュリティ強化 v0.4.1\n * CLI引数の安全な処理と検証を提供\n */\n\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { PathSecurity } from '../utils/pathSecurity';\nimport { errorHandler, ErrorType } from '../utils/errorHandler';\n\n/**\n * CLI引数検証結果\n */\nexport interface CLIValidationResult {\n  isValid: boolean;\n  sanitizedValue?: string;\n  errors: string[];\n  warnings: string[];\n  securityIssues: string[];\n}\n\n/**\n * CLI引数セキュリティ制限\n */\nexport interface CLISecurityLimits {\n  /** 最大パス長 */\n  maxPathLength: number;\n  /** 最大出力ファイルサイズ (bytes) */\n  maxOutputFileSize: number;\n  /** 許可されるファイル拡張子 */\n  allowedOutputExtensions: string[];\n  /** 禁止されるディレクトリパターン */\n  forbiddenDirectoryPatterns: string[];\n  /** 環境変数検証有効化 */\n  validateEnvironmentVariables: boolean;\n}\n\n/**\n * デフォルトCLIセキュリティ制限\n */\nexport const DEFAULT_CLI_SECURITY_LIMITS: CLISecurityLimits = {\n  maxPathLength: 1000,\n  maxOutputFileSize: 100 * 1024 * 1024, // 100MB\n  allowedOutputExtensions: ['.json', '.txt', '.csv', '.html', '.md'],\n  forbiddenDirectoryPatterns: [\n    '/etc/',\n    '/root/',\n    '/home/',\n    '/var/log/',\n    '/usr/bin/',\n    '/bin/',\n    '/sbin/',\n    '/tmp/../',\n    'C:\\\\Windows\\\\',\n    'C:\\\\Program Files\\\\',\n    'C:\\\\Users\\\\Administrator\\\\'\n  ],\n  validateEnvironmentVariables: true\n};\n\n/**\n * CLI引数セキュリティクラス\n */\nexport class CLISecurity {\n  private limits: CLISecurityLimits;\n  private projectRoot: string;\n\n  constructor(projectRoot: string = process.cwd(), limits: CLISecurityLimits = DEFAULT_CLI_SECURITY_LIMITS) {\n    this.projectRoot = projectRoot;\n    this.limits = limits;\n  }\n\n  /**\n   * 分析対象パスの検証\n   */\n  validateAnalysisPath(inputPath: string): CLIValidationResult {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n    const securityIssues: string[] = [];\n\n    try {\n      // 基本検証\n      if (!inputPath || typeof inputPath !== 'string') {\n        errors.push('パスが指定されていません');\n        return { isValid: false, errors, warnings, securityIssues };\n      }\n\n      // パス長制限\n      if (inputPath.length > this.limits.maxPathLength) {\n        errors.push(`パス長が制限を超過: ${inputPath.length} > ${this.limits.maxPathLength}`);\n        securityIssues.push('DoS攻撃（長いパス）の可能性');\n        return { isValid: false, errors, warnings, securityIssues };\n      }\n\n      // 危険なパターンの検出\n      const dangerousPatterns = [\n        { pattern: /\\.\\.\\//g, issue: 'パストラバーサル攻撃' },\n        { pattern: /\\.\\.\\\\/g, issue: 'パストラバーサル攻撃（Windows）' },\n        { pattern: /\\/etc\\/|\\/root\\/|\\/home\\//gi, issue: 'システムディレクトリアクセス試行' },\n        { pattern: /C:\\\\Windows\\\\|C:\\\\Program Files\\\\/gi, issue: 'Windowsシステムディレクトリアクセス試行' },\n        { pattern: /^[a-zA-Z]:\\\\/gi, issue: '絶対パス使用（Windows）' },\n        { pattern: /^\\/[^.]/gi, issue: '絶対パス使用（Unix）' },\n        { pattern: /\\||\\&\\&|\\;|\\`/g, issue: 'コマンドインジェクション攻撃' },\n        { pattern: /\\$\\{|\\$\\(/g, issue: '変数展開攻撃' },\n        { pattern: /\\0|%00/g, issue: 'NULL文字攻撃' },\n        { pattern: /[<>\"|*?]/g, issue: '無効なファイル名文字' }\n      ];\n\n      for (const { pattern, issue } of dangerousPatterns) {\n        if (pattern.test(inputPath)) {\n          securityIssues.push(issue);\n          if (issue.includes('攻撃')) {\n            errors.push(`危険なパターンを検出: ${issue}`);\n          } else {\n            warnings.push(`疑わしいパターンを検出: ${issue}`);\n          }\n        }\n      }\n\n      // 禁止ディレクトリパターンのチェック\n      for (const forbiddenPattern of this.limits.forbiddenDirectoryPatterns) {\n        if (inputPath.includes(forbiddenPattern)) {\n          errors.push(`禁止されたディレクトリへのアクセス: ${forbiddenPattern}`);\n          securityIssues.push('システムディレクトリアクセス攻撃');\n        }\n      }\n\n      // パス解決と検証\n      let resolvedPath: string;\n      try {\n        resolvedPath = path.resolve(inputPath);\n      } catch (error) {\n        errors.push('パスの解決に失敗しました');\n        return { isValid: false, errors, warnings, securityIssues };\n      }\n\n      // プロジェクト範囲外アクセスの検証（相対パスの場合のみ）\n      if (!path.isAbsolute(inputPath)) {\n        const safePath = PathSecurity.safeResolve(inputPath, this.projectRoot, 'cli-analysis-path');\n        if (!safePath) {\n          errors.push('プロジェクト範囲外へのアクセスが検出されました');\n          securityIssues.push('パストラバーサル攻撃');\n          return { isValid: false, errors, warnings, securityIssues };\n        }\n        resolvedPath = safePath;\n      }\n\n      // ファイル/ディレクトリ存在確認\n      if (!fs.existsSync(resolvedPath)) {\n        warnings.push('指定されたパスは存在しません');\n      } else {\n        const stats = fs.statSync(resolvedPath);\n        if (!stats.isFile() && !stats.isDirectory()) {\n          warnings.push('指定されたパスは通常のファイルまたはディレクトリではありません');\n        }\n      }\n\n      return {\n        isValid: errors.length === 0,\n        sanitizedValue: resolvedPath,\n        errors,\n        warnings,\n        securityIssues\n      };\n\n    } catch (error) {\n      errors.push('パス検証中に予期しないエラーが発生しました');\n      securityIssues.push('パス検証攻撃の可能性');\n      return { isValid: false, errors, warnings, securityIssues };\n    }\n  }\n\n  /**\n   * 出力ファイルパスの検証\n   */\n  validateOutputPath(outputPath: string): CLIValidationResult {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n    const securityIssues: string[] = [];\n\n    try {\n      // 基本検証\n      if (!outputPath || typeof outputPath !== 'string') {\n        return { isValid: true, errors, warnings, securityIssues }; // 出力パスは任意\n      }\n\n      // パス長制限\n      if (outputPath.length > this.limits.maxPathLength) {\n        errors.push(`出力パス長が制限を超過: ${outputPath.length} > ${this.limits.maxPathLength}`);\n        securityIssues.push('DoS攻撃（長い出力パス）の可能性');\n        return { isValid: false, errors, warnings, securityIssues };\n      }\n\n      // 危険なパターンの検出\n      const dangerousPatterns = [\n        { pattern: /\\.\\.\\//g, issue: 'パストラバーサル攻撃' },\n        { pattern: /\\.\\.\\\\/g, issue: 'パストラバーサル攻撃（Windows）' },\n        { pattern: /\\/etc\\/|\\/root\\/|\\/home\\//gi, issue: 'システムディレクトリ書き込み試行' },\n        { pattern: /C:\\\\Windows\\\\|C:\\\\Program Files\\\\/gi, issue: 'Windowsシステムディレクトリ書き込み試行' },\n        { pattern: /\\||\\&\\&|\\;|\\`/g, issue: 'コマンドインジェクション攻撃' },\n        { pattern: /\\$\\{|\\$\\(/g, issue: '変数展開攻撃' },\n        { pattern: /\\0|%00/g, issue: 'NULL文字攻撃' },\n        { pattern: /[<>\"|*?]/g, issue: '無効なファイル名文字' }\n      ];\n\n      for (const { pattern, issue } of dangerousPatterns) {\n        if (pattern.test(outputPath)) {\n          securityIssues.push(issue);\n          if (issue.includes('攻撃') || issue.includes('試行')) {\n            errors.push(`危険なパターンを検出: ${issue}`);\n          } else {\n            warnings.push(`疑わしいパターンを検出: ${issue}`);\n          }\n        }\n      }\n\n      // 禁止ディレクトリパターンのチェック\n      for (const forbiddenPattern of this.limits.forbiddenDirectoryPatterns) {\n        if (outputPath.includes(forbiddenPattern)) {\n          errors.push(`禁止されたディレクトリへの出力: ${forbiddenPattern}`);\n          securityIssues.push('システムディレクトリ書き込み攻撃');\n        }\n      }\n\n      // 拡張子の検証\n      const extension = path.extname(outputPath).toLowerCase();\n      if (extension && !this.limits.allowedOutputExtensions.includes(extension)) {\n        errors.push(`許可されていない拡張子: ${extension}`);\n        securityIssues.push('実行可能ファイル生成攻撃の可能性');\n      }\n\n      // パス解決と検証\n      let resolvedPath: string;\n      try {\n        resolvedPath = path.resolve(outputPath);\n      } catch (error) {\n        errors.push('出力パスの解決に失敗しました');\n        return { isValid: false, errors, warnings, securityIssues };\n      }\n\n      // 出力ディレクトリの存在確認と作成権限チェック\n      const outputDir = path.dirname(resolvedPath);\n      if (!fs.existsSync(outputDir)) {\n        try {\n          // 親ディレクトリの書き込み権限チェック\n          const parentDir = path.dirname(outputDir);\n          if (fs.existsSync(parentDir)) {\n            fs.accessSync(parentDir, fs.constants.W_OK);\n          } else {\n            warnings.push('出力ディレクトリの親ディレクトリが存在しません');\n          }\n        } catch (error) {\n          errors.push('出力ディレクトリへの書き込み権限がありません');\n          securityIssues.push('権限昇格攻撃の可能性');\n        }\n      } else {\n        // 既存ファイルの上書き確認\n        if (fs.existsSync(resolvedPath)) {\n          const stats = fs.statSync(resolvedPath);\n          if (stats.size > this.limits.maxOutputFileSize) {\n            warnings.push('出力ファイルが大きすぎます（上書きされます）');\n            securityIssues.push('ディスク使用量攻撃の可能性');\n          }\n        }\n      }\n\n      // プロジェクト範囲外書き込みの検証（相対パスの場合のみ）\n      if (!path.isAbsolute(outputPath)) {\n        const safePath = PathSecurity.safeResolve(outputPath, this.projectRoot, 'cli-output-path');\n        if (!safePath) {\n          errors.push('プロジェクト範囲外への出力が検出されました');\n          securityIssues.push('パストラバーサル攻撃');\n          return { isValid: false, errors, warnings, securityIssues };\n        }\n        resolvedPath = safePath;\n      }\n\n      return {\n        isValid: errors.length === 0,\n        sanitizedValue: resolvedPath,\n        errors,\n        warnings,\n        securityIssues\n      };\n\n    } catch (error) {\n      errors.push('出力パス検証中に予期しないエラーが発生しました');\n      securityIssues.push('出力パス検証攻撃の可能性');\n      return { isValid: false, errors, warnings, securityIssues };\n    }\n  }\n\n  /**\n   * 環境変数の検証\n   */\n  validateEnvironmentVariables(): CLIValidationResult {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n    const securityIssues: string[] = [];\n\n    if (!this.limits.validateEnvironmentVariables) {\n      return { isValid: true, errors, warnings, securityIssues };\n    }\n\n    try {\n      // 危険な環境変数の検出\n      const dangerousEnvVars = [\n        'LD_PRELOAD',\n        'LD_LIBRARY_PATH',\n        'DYLD_INSERT_LIBRARIES',\n        'DYLD_LIBRARY_PATH',\n        'PATH_ORIGINAL',\n        'SHELL_OVERRIDE',\n        'NODE_OPTIONS'\n      ];\n\n      for (const envVar of dangerousEnvVars) {\n        if (process.env[envVar]) {\n          warnings.push(`危険な環境変数が設定されています: ${envVar}`);\n          securityIssues.push('環境変数インジェクション攻撃の可能性');\n        }\n      }\n\n      // RIMOR固有の環境変数の検証\n      const rimorLang = process.env.RIMOR_LANG;\n      if (rimorLang) {\n        // 言語設定の検証\n        const allowedLanguages = ['ja', 'en', 'zh', 'ko'];\n        if (!allowedLanguages.includes(rimorLang)) {\n          warnings.push(`未対応の言語設定: ${rimorLang}`);\n          securityIssues.push('環境変数操作攻撃の可能性');\n        }\n\n        // 危険なパターンの検出\n        if (/[^a-zA-Z_-]/.test(rimorLang)) {\n          errors.push('RIMOR_LANGに無効な文字が含まれています');\n          securityIssues.push('環境変数インジェクション攻撃');\n        }\n      }\n\n      // NODE_ENVの検証\n      const nodeEnv = process.env.NODE_ENV;\n      if (nodeEnv) {\n        const allowedEnvs = ['development', 'production', 'test'];\n        if (!allowedEnvs.includes(nodeEnv)) {\n          warnings.push(`未対応のNODE_ENV設定: ${nodeEnv}`);\n        }\n\n        if (/[^a-zA-Z_-]/.test(nodeEnv)) {\n          errors.push('NODE_ENVに無効な文字が含まれています');\n          securityIssues.push('環境変数インジェクション攻撃');\n        }\n      }\n\n      return {\n        isValid: errors.length === 0,\n        errors,\n        warnings,\n        securityIssues\n      };\n\n    } catch (error) {\n      errors.push('環境変数検証中に予期しないエラーが発生しました');\n      securityIssues.push('環境変数検証攻撃の可能性');\n      return { isValid: false, errors, warnings, securityIssues };\n    }\n  }\n\n  /**\n   * フォーマット引数の検証\n   */\n  validateFormat(format: string): CLIValidationResult {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n    const securityIssues: string[] = [];\n\n    try {\n      if (!format || typeof format !== 'string') {\n        return { isValid: true, sanitizedValue: 'text', errors, warnings, securityIssues };\n      }\n\n      // 許可されたフォーマット\n      const allowedFormats = ['text', 'json', 'csv', 'html', 'markdown', 'ai-json'];\n      \n      if (!allowedFormats.includes(format.toLowerCase())) {\n        errors.push(`未対応のフォーマット: ${format}`);\n        securityIssues.push('フォーマット指定攻撃の可能性');\n        return { isValid: false, errors, warnings, securityIssues };\n      }\n\n      // 危険なパターンの検出\n      if (/[^a-zA-Z0-9_-]/.test(format)) {\n        errors.push('フォーマット指定に無効な文字が含まれています');\n        securityIssues.push('フォーマットインジェクション攻撃');\n        return { isValid: false, errors, warnings, securityIssues };\n      }\n\n      return {\n        isValid: true,\n        sanitizedValue: format.toLowerCase(),\n        errors,\n        warnings,\n        securityIssues\n      };\n\n    } catch (error) {\n      errors.push('フォーマット検証中に予期しないエラーが発生しました');\n      securityIssues.push('フォーマット検証攻撃の可能性');\n      return { isValid: false, errors, warnings, securityIssues };\n    }\n  }\n\n  /**\n   * すべてのCLI引数を一括検証\n   */\n  validateAllArguments(args: {\n    path?: string;\n    format?: string;\n    outputFile?: string;\n  }): {\n    isValid: boolean;\n    sanitizedArgs: {\n      path?: string;\n      format?: 'text' | 'json' | 'csv' | 'html' | 'markdown' | 'ai-json';\n      outputFile?: string;\n    };\n    allErrors: string[];\n    allWarnings: string[];\n    allSecurityIssues: string[];\n  } {\n    const allErrors: string[] = [];\n    const allWarnings: string[] = [];\n    const allSecurityIssues: string[] = [];\n    const sanitizedArgs: {\n      path?: string;\n      format?: 'text' | 'json' | 'csv' | 'html' | 'markdown' | 'ai-json';\n      outputFile?: string;\n    } = {};\n\n    // 環境変数検証\n    const envValidation = this.validateEnvironmentVariables();\n    allErrors.push(...envValidation.errors);\n    allWarnings.push(...envValidation.warnings);\n    allSecurityIssues.push(...envValidation.securityIssues);\n\n    // パス検証\n    if (args.path) {\n      const pathValidation = this.validateAnalysisPath(args.path);\n      allErrors.push(...pathValidation.errors);\n      allWarnings.push(...pathValidation.warnings);\n      allSecurityIssues.push(...pathValidation.securityIssues);\n      if (pathValidation.isValid) {\n        sanitizedArgs.path = pathValidation.sanitizedValue;\n      }\n    }\n\n    // フォーマット検証\n    const formatValidation = this.validateFormat(args.format || 'text');\n    allErrors.push(...formatValidation.errors);\n    allWarnings.push(...formatValidation.warnings);\n    allSecurityIssues.push(...formatValidation.securityIssues);\n    if (formatValidation.isValid) {\n      sanitizedArgs.format = formatValidation.sanitizedValue as 'text' | 'json' | 'csv' | 'html';\n    }\n\n    // 出力ファイル検証\n    if (args.outputFile) {\n      const outputValidation = this.validateOutputPath(args.outputFile);\n      allErrors.push(...outputValidation.errors);\n      allWarnings.push(...outputValidation.warnings);\n      allSecurityIssues.push(...outputValidation.securityIssues);\n      if (outputValidation.isValid) {\n        sanitizedArgs.outputFile = outputValidation.sanitizedValue;\n      }\n    }\n\n    return {\n      isValid: allErrors.length === 0,\n      sanitizedArgs,\n      allErrors,\n      allWarnings,\n      allSecurityIssues\n    };\n  }\n\n  /**\n   * セキュリティ制限の更新\n   */\n  updateLimits(newLimits: Partial<CLISecurityLimits>): void {\n    this.limits = { ...this.limits, ...newLimits };\n  }\n}"],"version":3}