{"file":"/Users/sasakama/Projects/Rimor/src/security/analysis/inference.ts","mappings":"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","names":[],"sources":["/Users/sasakama/Projects/Rimor/src/security/analysis/inference.ts"],"sourcesContent":["/**\n * 型ベースセキュリティ解析 - シグネチャベースの要件推論\n * メソッドシグネチャから必要なセキュリティテストを推論\n */\n\nimport {\n  MethodSignature,\n  Parameter,\n  SecurityRequirement,\n  SecurityType,\n  AuthTestCoverage,\n  TaintLevel,\n  TaintSource,\n  SecurityTestMetrics,\n  TestMethod,\n  TypeInferenceResult,\n  SecurityTypeAnnotation\n} from '../types';\nimport { TypeConstructors } from '../types/checker-framework-types';\n\n/**\n * シグネチャベースの推論エンジン\n */\nexport class SignatureBasedInference {\n  private knowledgeBase: SecurityKnowledgeBase;\n\n  constructor() {\n    this.knowledgeBase = new SecurityKnowledgeBase();\n  }\n\n  /**\n   * メソッドシグネチャから必要なセキュリティテストを推論\n   */\n  inferRequirements(signature: MethodSignature): SecurityRequirement[] {\n    const requirements: SecurityRequirement[] = [];\n\n    // 認証関連の推論\n    const authRequirements = this.inferAuthRequirements(signature);\n    requirements.push(...authRequirements);\n\n    // 入力検証関連の推論\n    const inputRequirements = this.inferInputValidationRequirements(signature);\n    requirements.push(...inputRequirements);\n\n    // API関連の推論\n    const apiRequirements = this.inferApiSecurityRequirements(signature);\n    requirements.push(...apiRequirements);\n\n    // セッション管理関連の推論\n    const sessionRequirements = this.inferSessionManagementRequirements(signature);\n    requirements.push(...sessionRequirements);\n\n    return requirements;\n  }\n\n  /**\n   * セキュリティ型の推論\n   */\n  async inferSecurityTypes(method: TestMethod): Promise<TypeInferenceResult> {\n    const startTime = Date.now();\n    const annotations: SecurityTypeAnnotation[] = [];\n\n    // メソッドシグネチャからの推論\n    const sig: MethodSignature = (typeof method.signature === 'string') \n      ? { name: method.signature, parameters: [], returnType: 'void', annotations: [], isAsync: false }\n      : (method.signature || { name: method.name, parameters: [], returnType: 'void', annotations: [], isAsync: false });\n    const signatureAnnotations = this.inferFromSignature(sig);\n    annotations.push(...signatureAnnotations);\n\n    // メソッド内容からの推論\n    const contentAnnotations = this.inferFromContent(method.content || '');\n    annotations.push(...contentAnnotations);\n\n    // 汚染レベルの推論\n    const taintAnnotations = this.inferTaintTypes(method);\n    annotations.push(...taintAnnotations);\n\n    const totalVariables = this.countVariables(method.content || '');\n    const inferredCount = annotations.length;\n    const failedCount = Math.max(0, totalVariables - inferredCount);\n\n    return {\n      annotations,\n      statistics: {\n        totalVariables,\n        inferred: inferredCount,\n        failed: failedCount,\n        averageConfidence: this.calculateAverageConfidence(annotations)\n      },\n      inferenceTime: Date.now() - startTime\n    };\n  }\n\n  /**\n   * メソッド品質の予測\n   */\n  predictMethodQuality(signature: MethodSignature): QualityPrediction {\n    const complexity = this.calculateSignatureComplexity(signature);\n    const securityRelevance = this.calculateSecurityRelevance(signature);\n    const testingNeeds = this.assessTestingNeeds(signature);\n\n    return {\n      complexity,\n      securityRelevance,\n      testingNeeds,\n      recommendedTestTypes: this.recommendTestTypes(signature),\n      estimatedTestCount: this.estimateRequiredTestCount(signature),\n      riskLevel: this.assessRiskLevel(signature)\n    };\n  }\n\n  /**\n   * 認証要件の推論\n   */\n  private inferAuthRequirements(signature: MethodSignature): SecurityRequirement[] {\n    const requirements: SecurityRequirement[] = [];\n\n    // アノテーションによる判定（@RequiresAdmin, @Authenticated など）\n    const annotations = signature.annotations || [];\n    \n    const requiresAdmin = annotations.some(\n      annotation => annotation === '@RequiresAdmin'\n    );\n    \n    const requiresAuth = annotations.some(\n      annotation => annotation === '@Authenticated'\n    );\n    \n    if (requiresAdmin) {\n      requirements.push({\n        id: `admin-auth-req-${signature.name}`,\n        type: 'auth-test',\n        required: ['admin-role-verification', 'elevated-permission-check'],\n        minTaintLevel: TaintLevel.UNTAINTED,\n        applicableSources: [TaintSource.USER_INPUT],\n        severity: 'critical',\n        checks: ['admin_role_verification', 'permission_validation']\n      });\n    } else if (requiresAuth) {\n      requirements.push({\n        id: `auth-req-${signature.name}`,\n        type: 'auth-test',\n        required: ['authentication-verification', 'session-validation'],\n        minTaintLevel: TaintLevel.UNTAINTED,\n        applicableSources: [TaintSource.USER_INPUT],\n        severity: 'high',\n        checks: ['authentication', 'session_validation']\n      });\n    }\n\n    // メソッド名パターンによる判定\n    if (this.isAuthRelated(signature.name)) {\n      const authCoverageTypes = this.determineAuthCoverageTypes(signature);\n      \n      requirements.push({\n        id: `auth-req-${signature.name}`,\n        type: 'auth-test',\n        required: authCoverageTypes,\n        minTaintLevel: TaintLevel.UNTAINTED,\n        applicableSources: [TaintSource.USER_INPUT],\n        severity: 'high',\n        checks: authCoverageTypes\n      });\n    }\n\n    // パラメータによる判定\n    const hasCredentialParams = signature.parameters.some(p => \n      this.isCredentialParameter(p.name)\n    );\n\n    if (hasCredentialParams) {\n      requirements.push({\n        id: `credential-req-${signature.name}`,\n        type: 'auth-test',\n        required: ['credential-validation', 'brute-force-protection', 'timing-attack-protection'],\n        minTaintLevel: TaintLevel.DEFINITELY_TAINTED,\n        applicableSources: [TaintSource.USER_INPUT],\n        severity: 'critical',\n        checks: ['credential-validation', 'brute-force-protection', 'timing-attack-protection']\n      });\n    }\n\n    return requirements;\n  }\n\n  /**\n   * 入力検証要件の推論\n   */\n  private inferInputValidationRequirements(signature: MethodSignature): SecurityRequirement[] {\n    const requirements: SecurityRequirement[] = [];\n\n    // ユーザー入力パラメータの検出\n    const userInputParams = signature.parameters.filter(p => \n      p.source === 'user-input' || this.isUserInputParameter(p.name)\n    );\n\n    if (userInputParams.length > 0) {\n      const validationTypes = this.determineValidationTypes(userInputParams);\n      \n      requirements.push({\n        id: `input-validation-req-${signature.name}`,\n        type: 'input-validation',\n        required: validationTypes,\n        minTaintLevel: TaintLevel.POSSIBLY_TAINTED,\n        applicableSources: [TaintSource.USER_INPUT, TaintSource.EXTERNAL_API],\n        severity: 'medium',\n        checks: validationTypes\n      });\n    }\n\n    // 特殊なデータ型の検出\n    const hasFileParams = signature.parameters.some(p => \n      this.isFileParameter(p.type || p.name)\n    );\n\n    if (hasFileParams) {\n      requirements.push({\n        id: `file-validation-req-${signature.name}`,\n        type: 'input-validation',\n        required: ['file-type-validation', 'file-size-validation', 'malware-scanning'],\n        minTaintLevel: TaintLevel.LIKELY_TAINTED,\n        applicableSources: [TaintSource.FILE_SYSTEM],\n        severity: 'high',\n        checks: ['file-type-validation', 'file-size-validation', 'malware-scanning']\n      });\n    }\n\n    return requirements;\n  }\n\n  /**\n   * API セキュリティ要件の推論\n   */\n  private inferApiSecurityRequirements(signature: MethodSignature): SecurityRequirement[] {\n    const requirements: SecurityRequirement[] = [];\n\n    // API アノテーションの検出\n    const isApiEndpoint = (signature.annotations || []).some(annotation => \n      this.isApiAnnotation(annotation)\n    ) || this.isApiMethodName(signature.name);\n\n    if (isApiEndpoint) {\n      const securityFeatures = this.determineApiSecurityFeatures(signature);\n      \n      requirements.push({\n        id: `api-security-req-${signature.name}`,\n        type: 'api-security',\n        required: securityFeatures,\n        minTaintLevel: TaintLevel.POSSIBLY_TAINTED,\n        applicableSources: [TaintSource.USER_INPUT, TaintSource.NETWORK],\n        severity: 'high',\n        checks: securityFeatures\n      });\n    }\n\n    return requirements;\n  }\n\n  /**\n   * セッション管理要件の推論\n   */\n  private inferSessionManagementRequirements(signature: MethodSignature): SecurityRequirement[] {\n    const requirements: SecurityRequirement[] = [];\n\n    // セッション関連メソッドの検出\n    if (this.isSessionRelated(signature.name)) {\n      requirements.push({\n        id: `session-req-${signature.name}`,\n        type: 'session-management',\n        required: ['session-validation', 'session-timeout', 'concurrent-session-control'],\n        minTaintLevel: TaintLevel.POSSIBLY_TAINTED,\n        applicableSources: [TaintSource.USER_INPUT]\n      });\n    }\n\n    return requirements;\n  }\n\n  /**\n   * シグネチャからの型推論\n   */\n  private inferFromSignature(signature: MethodSignature): SecurityTypeAnnotation[] {\n    const annotations: SecurityTypeAnnotation[] = [];\n\n    // パラメータからの推論\n    signature.parameters.forEach(param => {\n      const securityType = this.inferParameterSecurityType(param);\n      const taintLevel = this.inferParameterTaintLevel(param);\n      \n      if (securityType) {\n        annotations.push({\n          target: param.name,\n          securityType,\n          taintLevel,\n          confidence: 0.85,\n          evidence: [`Parameter type: ${param.type}`, `Parameter source: ${param.source}`]\n        });\n      }\n    });\n\n    // メソッド名からの推論\n    const methodSecurityType = this.inferFromMethodName(signature.name);\n    if (methodSecurityType) {\n      annotations.push({\n        target: `method_${signature.name}`,\n        securityType: methodSecurityType,\n        taintLevel: TaintLevel.UNTAINTED,\n        confidence: 0.7,\n        evidence: [`Method name pattern: ${signature.name}`]\n      });\n    }\n\n    return annotations;\n  }\n\n  /**\n   * メソッド内容からの型推論\n   */\n  private inferFromContent(content: string): SecurityTypeAnnotation[] {\n    const annotations: SecurityTypeAnnotation[] = [];\n\n    // 変数宣言の検出\n    const variableDeclarations = this.extractVariableDeclarations(content);\n    variableDeclarations.forEach(decl => {\n      const securityType = this.inferVariableSecurityType(decl);\n      if (securityType) {\n        annotations.push({\n          target: decl.name,\n          securityType: securityType.type,\n          taintLevel: securityType.taintLevel,\n          confidence: securityType.confidence,\n          evidence: securityType.evidence\n        });\n      }\n    });\n\n    // セキュリティ関連API呼び出しの検出\n    const apiCalls = this.extractSecurityApiCalls(content);\n    apiCalls.forEach(call => {\n      annotations.push({\n        target: call.variable || call.method,\n        securityType: call.securityType,\n        taintLevel: call.resultTaintLevel,\n        confidence: 0.8,\n        evidence: [`Security API call: ${call.method}`]\n      });\n    });\n\n    return annotations;\n  }\n\n  /**\n   * 汚染レベルの推論（新型システム版）\n   */\n  private inferTaintTypes(method: TestMethod): SecurityTypeAnnotation[] {\n    const annotations: SecurityTypeAnnotation[] = [];\n    const content = method.content || '';\n\n    // ユーザー入力の検出\n    const userInputs = this.detectUserInputs(content);\n    userInputs.forEach(input => {\n      annotations.push({\n        target: input.variable,\n        securityType: SecurityType.USER_INPUT,\n        taintLevel: TaintLevel.DEFINITELY_TAINTED,\n        confidence: 0.9,\n        evidence: [`User input detected: ${input.source}`]\n      });\n    });\n\n    // サニタイザーの効果\n    const sanitizedVars = this.detectSanitizedVariables(content);\n    sanitizedVars.forEach(variable => {\n      annotations.push({\n        target: variable,\n        securityType: SecurityType.SANITIZED_DATA,\n        taintLevel: TaintLevel.UNTAINTED,\n        confidence: 0.85,\n        evidence: ['Sanitizer applied']\n      });\n    });\n\n    return annotations;\n  }\n\n  /**\n   * レガシー互換メソッド\n   * @deprecated inferTaintTypesを使用してください\n   */\n  private inferTaintLevels(method: TestMethod): SecurityTypeAnnotation[] {\n    return this.inferTaintTypes(method);\n  }\n\n  // ヘルパーメソッドの実装\n  private isAuthRelated(methodName: string): boolean {\n    const patterns = ['auth', 'login', 'logout', 'signin', 'signout', 'authenticate', 'authorize'];\n    return patterns.some(pattern => \n      methodName.toLowerCase().includes(pattern.toLowerCase())\n    );\n  }\n\n  private determineAuthCoverageTypes(signature: MethodSignature): string[] {\n    const types = ['success', 'failure'];\n    \n    if (signature.name.toLowerCase().includes('token')) {\n      types.push('token-expiry', 'token-validation');\n    }\n    \n    if (signature.name.toLowerCase().includes('password')) {\n      types.push('brute-force-protection');\n    }\n    \n    return types;\n  }\n\n  private isCredentialParameter(paramName: string): boolean {\n    const patterns = ['password', 'passwd', 'token', 'credential', 'auth', 'login'];\n    return patterns.some(pattern => \n      paramName.toLowerCase().includes(pattern)\n    );\n  }\n\n  private isUserInputParameter(paramName: string): boolean {\n    const patterns = ['input', 'data', 'value', 'param', 'body', 'query'];\n    return patterns.some(pattern => \n      paramName.toLowerCase().includes(pattern)\n    );\n  }\n\n  private isFileParameter(paramType: string): boolean {\n    const patterns = ['file', 'upload', 'attachment', 'document', 'image'];\n    return patterns.some(pattern => \n      paramType.toLowerCase().includes(pattern)\n    );\n  }\n\n  private determineValidationTypes(params: Parameter[]): string[] {\n    const types = ['input-validation', 'type-validation'];\n    \n    if (params.some(p => p.type?.includes('string'))) {\n      types.push('string-validation', 'length-validation');\n    }\n    \n    if (params.some(p => p.type?.includes('number'))) {\n      types.push('numeric-validation', 'range-validation');\n    }\n    \n    return types;\n  }\n\n  private isApiAnnotation(annotation: string): boolean {\n    const patterns = ['@api', '@endpoint', '@route', '@controller', '@restcontroller'];\n    return patterns.some(pattern => \n      annotation.toLowerCase().includes(pattern.toLowerCase())\n    );\n  }\n\n  private isApiMethodName(methodName: string): boolean {\n    const patterns = ['endpoint', 'api', 'route', 'handler', 'controller', 'payment', 'process'];\n    return patterns.some(pattern => \n      methodName.toLowerCase().includes(pattern)\n    );\n  }\n\n  private determineApiSecurityFeatures(signature: MethodSignature): string[] {\n    const features = ['authentication', 'authorization', 'input-validation'];\n    \n    if (signature.parameters.length > 0) {\n      features.push('parameter-validation');\n    }\n    \n    // Rate limiting の判定\n    const hasRateLimitAnnotation = (signature.annotations || []).some(\n      annotation => annotation === '@RateLimit'\n    );\n    \n    if (hasRateLimitAnnotation || signature.name.toLowerCase().includes('public')) {\n      features.push('rate_limiting');\n    }\n    \n    return features;\n  }\n\n  private isSessionRelated(methodName: string): boolean {\n    const patterns = ['session', 'cookie', 'state', 'context'];\n    return patterns.some(pattern => \n      methodName.toLowerCase().includes(pattern)\n    );\n  }\n\n  private inferParameterSecurityType(param: Parameter): SecurityType | undefined {\n    if (param.source === 'user-input') {\n      return SecurityType.USER_INPUT;\n    }\n    \n    if (this.isCredentialParameter(param.name)) {\n      return SecurityType.AUTH_TOKEN;\n    }\n    \n    return undefined;\n  }\n\n  private inferParameterTaintLevel(param: Parameter): TaintLevel {\n    if (param.source === 'user-input') {\n      return TaintLevel.DEFINITELY_TAINTED;\n    }\n    \n    if (param.source === 'database') {\n      return TaintLevel.POSSIBLY_TAINTED;\n    }\n    \n    return TaintLevel.UNTAINTED;\n  }\n\n  private inferFromMethodName(methodName: string): SecurityType | undefined {\n    if (this.isAuthRelated(methodName)) {\n      return SecurityType.AUTH_TOKEN;\n    }\n    \n    if (methodName.toLowerCase().includes('validate')) {\n      return SecurityType.VALIDATED_INPUT;\n    }\n    \n    return undefined;\n  }\n\n  private extractVariableDeclarations(content: string): VariableDeclaration[] {\n    const declarations: VariableDeclaration[] = [];\n    const lines = content.split('\\n');\n    \n    lines.forEach((line, index) => {\n      const match = line.match(/(const|let|var)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*=\\s*(.+);?/);\n      if (match) {\n        declarations.push({\n          name: match[2],\n          type: match[1],\n          initializer: match[3].trim(),\n          line: index + 1\n        });\n      }\n    });\n    \n    return declarations;\n  }\n\n  private inferVariableSecurityType(decl: VariableDeclaration): InferredSecurityType | undefined {\n    const initializer = decl.initializer.toLowerCase();\n    \n    if (initializer.includes('req.body') || initializer.includes('req.query')) {\n      return {\n        type: SecurityType.USER_INPUT,\n        taintLevel: TaintLevel.DEFINITELY_TAINTED,\n        confidence: 0.9,\n        evidence: ['Request parameter assignment']\n      };\n    }\n    \n    if (initializer.includes('sanitize') || initializer.includes('validate')) {\n      return {\n        type: SecurityType.SANITIZED_DATA,\n        taintLevel: TaintLevel.UNTAINTED,\n        confidence: 0.85,\n        evidence: ['Sanitization function call']\n      };\n    }\n    \n    return undefined;\n  }\n\n  private extractSecurityApiCalls(content: string): SecurityApiCall[] {\n    const calls: SecurityApiCall[] = [];\n    const lines = content.split('\\n');\n    \n    lines.forEach(line => {\n      // JWT トークン関連\n      if (line.includes('jwt.verify') || line.includes('jwt.sign')) {\n        calls.push({\n          method: 'jwt',\n          securityType: SecurityType.AUTH_TOKEN,\n          resultTaintLevel: TaintLevel.UNTAINTED,\n          variable: this.extractAssignmentTarget(line)\n        });\n      }\n      \n      // 暗号化関連\n      if (line.includes('bcrypt') || line.includes('crypto')) {\n        calls.push({\n          method: 'crypto',\n          securityType: SecurityType.SANITIZED_DATA,\n          resultTaintLevel: TaintLevel.UNTAINTED,\n          variable: this.extractAssignmentTarget(line)\n        });\n      }\n    });\n    \n    return calls;\n  }\n\n  private detectUserInputs(content: string): UserInputDetection[] {\n    const inputs: UserInputDetection[] = [];\n    const patterns = [\n      { pattern: /(\\w+)\\s*=\\s*req\\.body/g, source: 'request body' },\n      { pattern: /(\\w+)\\s*=\\s*req\\.query/g, source: 'query parameter' },\n      { pattern: /(\\w+)\\s*=\\s*req\\.params/g, source: 'path parameter' }\n    ];\n    \n    patterns.forEach(({ pattern, source }) => {\n      const matches = [...content.matchAll(pattern)];\n      matches.forEach(match => {\n        inputs.push({\n          variable: match[1],\n          source,\n          confidence: 0.9\n        });\n      });\n    });\n    \n    return inputs;\n  }\n\n  private detectSanitizedVariables(content: string): string[] {\n    const variables: string[] = [];\n    const lines = content.split('\\n');\n    \n    lines.forEach(line => {\n      if (line.includes('sanitize(') || line.includes('escape(') || line.includes('validate(')) {\n        const target = this.extractAssignmentTarget(line);\n        if (target) {\n          variables.push(target);\n        }\n      }\n    });\n    \n    return variables;\n  }\n\n  private extractAssignmentTarget(line: string): string | undefined {\n    const match = line.match(/^\\s*(const|let|var)?\\s*([a-zA-Z_][a-zA-Z0-9_]*)\\s*=/);\n    return match ? match[2] : undefined;\n  }\n\n  private countVariables(content: string): number {\n    const matches = content.match(/(const|let|var)\\s+[a-zA-Z_][a-zA-Z0-9_]*/g) || [];\n    return matches.length;\n  }\n\n  private calculateAverageConfidence(annotations: SecurityTypeAnnotation[]): number {\n    if (annotations.length === 0) return 0;\n    const total = annotations.reduce((sum, annotation) => sum + annotation.confidence, 0);\n    return total / annotations.length;\n  }\n\n  private calculateSignatureComplexity(signature: MethodSignature): number {\n    let complexity = 1; // base complexity\n    complexity += signature.parameters.length * 0.2;\n    complexity += (signature.annotations || []).length * 0.1;\n    return Math.min(10, complexity);\n  }\n\n  private calculateSecurityRelevance(signature: MethodSignature): number {\n    let relevance = 0;\n    \n    if (this.isAuthRelated(signature.name)) relevance += 0.4;\n    if (signature.parameters.some(p => p.source === 'user-input')) relevance += 0.3;\n    if ((signature.annotations || []).some(a => this.isApiAnnotation(a))) relevance += 0.2;\n    if (signature.parameters.some(p => this.isCredentialParameter(p.name))) relevance += 0.1;\n    \n    return Math.min(1.0, relevance);\n  }\n\n  private assessTestingNeeds(signature: MethodSignature): TestingNeeds {\n    const securityRelevance = this.calculateSecurityRelevance(signature);\n    const complexity = this.calculateSignatureComplexity(signature);\n    \n    return {\n      priority: securityRelevance > 0.5 ? 'high' : 'medium',\n      estimatedEffort: Math.ceil(complexity * securityRelevance * 10),\n      requiredCoverage: securityRelevance * 0.8 + 0.2\n    };\n  }\n\n  private recommendTestTypes(signature: MethodSignature): string[] {\n    const types: string[] = [];\n    \n    if (this.isAuthRelated(signature.name)) {\n      types.push('authentication-test', 'authorization-test');\n    }\n    \n    if (signature.parameters.some(p => p.source === 'user-input')) {\n      types.push('input-validation-test', 'boundary-test');\n    }\n    \n    if ((signature.annotations || []).some(a => this.isApiAnnotation(a))) {\n      types.push('api-security-test', 'integration-test');\n    }\n    \n    return types.length > 0 ? types : ['unit-test'];\n  }\n\n  private estimateRequiredTestCount(signature: MethodSignature): number {\n    const base = 2; // minimum tests\n    let count = base;\n    \n    count += signature.parameters.length; // parameter combinations\n    if (this.isAuthRelated(signature.name)) count += 3; // auth scenarios\n    if (signature.parameters.some(p => p.source === 'user-input')) count += 2; // input validation\n    \n    return Math.min(15, count); // reasonable upper limit\n  }\n\n  private assessRiskLevel(signature: MethodSignature): 'low' | 'medium' | 'high' | 'critical' {\n    const securityRelevance = this.calculateSecurityRelevance(signature);\n    const hasUserInput = signature.parameters.some(p => p.source === 'user-input');\n    const isAuthRelated = this.isAuthRelated(signature.name);\n    \n    if (isAuthRelated && hasUserInput && securityRelevance > 0.7) return 'critical';\n    if (securityRelevance > 0.5) return 'high';\n    if (hasUserInput || securityRelevance > 0.3) return 'medium';\n    return 'low';\n  }\n}\n\n/**\n * セキュリティ知識ベース\n */\nclass SecurityKnowledgeBase {\n  // セキュリティパターンや脅威モデルの知識を保持\n  // 現在は簡易実装\n}\n\n// 関連するインターフェースの定義\ninterface QualityPrediction {\n  complexity: number;\n  securityRelevance: number;\n  testingNeeds: TestingNeeds;\n  recommendedTestTypes: string[];\n  estimatedTestCount: number;\n  riskLevel: 'low' | 'medium' | 'high' | 'critical';\n}\n\ninterface TestingNeeds {\n  priority: 'low' | 'medium' | 'high';\n  estimatedEffort: number;\n  requiredCoverage: number;\n}\n\ninterface VariableDeclaration {\n  name: string;\n  type: string;\n  initializer: string;\n  line: number;\n}\n\ninterface InferredSecurityType {\n  type: SecurityType;\n  taintLevel: TaintLevel;\n  confidence: number;\n  evidence: string[];\n}\n\ninterface SecurityApiCall {\n  method: string;\n  securityType: SecurityType;\n  resultTaintLevel: TaintLevel;\n  variable?: string;\n}\n\ninterface UserInputDetection {\n  variable: string;\n  source: string;\n  confidence: number;\n}"],"version":3}