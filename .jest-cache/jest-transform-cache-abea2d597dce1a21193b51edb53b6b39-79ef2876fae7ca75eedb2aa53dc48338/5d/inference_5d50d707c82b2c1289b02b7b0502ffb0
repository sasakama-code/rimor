8350c089d0edbc3eb3120dea2a74e113
"use strict";
/**
 * 型ベースセキュリティ解析 - シグネチャベースの要件推論
 * メソッドシグネチャから必要なセキュリティテストを推論
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SignatureBasedInference = void 0;
const types_1 = require("../types");
/**
 * シグネチャベースの推論エンジン
 */
class SignatureBasedInference {
    knowledgeBase;
    constructor() {
        this.knowledgeBase = new SecurityKnowledgeBase();
    }
    /**
     * メソッドシグネチャから必要なセキュリティテストを推論
     */
    inferRequirements(signature) {
        const requirements = [];
        // 認証関連の推論
        const authRequirements = this.inferAuthRequirements(signature);
        requirements.push(...authRequirements);
        // 入力検証関連の推論
        const inputRequirements = this.inferInputValidationRequirements(signature);
        requirements.push(...inputRequirements);
        // API関連の推論
        const apiRequirements = this.inferApiSecurityRequirements(signature);
        requirements.push(...apiRequirements);
        // セッション管理関連の推論
        const sessionRequirements = this.inferSessionManagementRequirements(signature);
        requirements.push(...sessionRequirements);
        return requirements;
    }
    /**
     * セキュリティ型の推論
     */
    async inferSecurityTypes(method) {
        const startTime = Date.now();
        const annotations = [];
        // メソッドシグネチャからの推論
        const sig = (typeof method.signature === 'string')
            ? { name: method.signature, parameters: [], returnType: 'void', annotations: [], isAsync: false }
            : (method.signature || { name: method.name, parameters: [], returnType: 'void', annotations: [], isAsync: false });
        const signatureAnnotations = this.inferFromSignature(sig);
        annotations.push(...signatureAnnotations);
        // メソッド内容からの推論
        const contentAnnotations = this.inferFromContent(method.content || '');
        annotations.push(...contentAnnotations);
        // 汚染レベルの推論
        const taintAnnotations = this.inferTaintTypes(method);
        annotations.push(...taintAnnotations);
        const totalVariables = this.countVariables(method.content || '');
        const inferredCount = annotations.length;
        const failedCount = Math.max(0, totalVariables - inferredCount);
        return {
            annotations,
            statistics: {
                totalVariables,
                inferred: inferredCount,
                failed: failedCount,
                averageConfidence: this.calculateAverageConfidence(annotations)
            },
            inferenceTime: Date.now() - startTime
        };
    }
    /**
     * メソッド品質の予測
     */
    predictMethodQuality(signature) {
        const complexity = this.calculateSignatureComplexity(signature);
        const securityRelevance = this.calculateSecurityRelevance(signature);
        const testingNeeds = this.assessTestingNeeds(signature);
        return {
            complexity,
            securityRelevance,
            testingNeeds,
            recommendedTestTypes: this.recommendTestTypes(signature),
            estimatedTestCount: this.estimateRequiredTestCount(signature),
            riskLevel: this.assessRiskLevel(signature)
        };
    }
    /**
     * 認証要件の推論
     */
    inferAuthRequirements(signature) {
        const requirements = [];
        // アノテーションによる判定（@RequiresAdmin, @Authenticated など）
        const annotations = signature.annotations || [];
        const requiresAdmin = annotations.some(annotation => annotation === '@RequiresAdmin');
        const requiresAuth = annotations.some(annotation => annotation === '@Authenticated');
        if (requiresAdmin) {
            requirements.push({
                id: `admin-auth-req-${signature.name}`,
                type: 'auth-test',
                required: ['admin-role-verification', 'elevated-permission-check'],
                minTaintLevel: types_1.TaintLevel.UNTAINTED,
                applicableSources: [types_1.TaintSource.USER_INPUT],
                severity: 'critical',
                checks: ['admin_role_verification', 'permission_validation']
            });
        }
        else if (requiresAuth) {
            requirements.push({
                id: `auth-req-${signature.name}`,
                type: 'auth-test',
                required: ['authentication-verification', 'session-validation'],
                minTaintLevel: types_1.TaintLevel.UNTAINTED,
                applicableSources: [types_1.TaintSource.USER_INPUT],
                severity: 'high',
                checks: ['authentication', 'session_validation']
            });
        }
        // メソッド名パターンによる判定
        if (this.isAuthRelated(signature.name)) {
            const authCoverageTypes = this.determineAuthCoverageTypes(signature);
            requirements.push({
                id: `auth-req-${signature.name}`,
                type: 'auth-test',
                required: authCoverageTypes,
                minTaintLevel: types_1.TaintLevel.UNTAINTED,
                applicableSources: [types_1.TaintSource.USER_INPUT],
                severity: 'high',
                checks: authCoverageTypes
            });
        }
        // パラメータによる判定
        const hasCredentialParams = signature.parameters.some(p => this.isCredentialParameter(p.name));
        if (hasCredentialParams) {
            requirements.push({
                id: `credential-req-${signature.name}`,
                type: 'auth-test',
                required: ['credential-validation', 'brute-force-protection', 'timing-attack-protection'],
                minTaintLevel: types_1.TaintLevel.DEFINITELY_TAINTED,
                applicableSources: [types_1.TaintSource.USER_INPUT],
                severity: 'critical',
                checks: ['credential-validation', 'brute-force-protection', 'timing-attack-protection']
            });
        }
        return requirements;
    }
    /**
     * 入力検証要件の推論
     */
    inferInputValidationRequirements(signature) {
        const requirements = [];
        // ユーザー入力パラメータの検出
        const userInputParams = signature.parameters.filter(p => p.source === 'user-input' || this.isUserInputParameter(p.name));
        if (userInputParams.length > 0) {
            const validationTypes = this.determineValidationTypes(userInputParams);
            requirements.push({
                id: `input-validation-req-${signature.name}`,
                type: 'input-validation',
                required: validationTypes,
                minTaintLevel: types_1.TaintLevel.POSSIBLY_TAINTED,
                applicableSources: [types_1.TaintSource.USER_INPUT, types_1.TaintSource.EXTERNAL_API],
                severity: 'medium',
                checks: validationTypes
            });
        }
        // 特殊なデータ型の検出
        const hasFileParams = signature.parameters.some(p => this.isFileParameter(p.type || p.name));
        if (hasFileParams) {
            requirements.push({
                id: `file-validation-req-${signature.name}`,
                type: 'input-validation',
                required: ['file-type-validation', 'file-size-validation', 'malware-scanning'],
                minTaintLevel: types_1.TaintLevel.LIKELY_TAINTED,
                applicableSources: [types_1.TaintSource.FILE_SYSTEM],
                severity: 'high',
                checks: ['file-type-validation', 'file-size-validation', 'malware-scanning']
            });
        }
        return requirements;
    }
    /**
     * API セキュリティ要件の推論
     */
    inferApiSecurityRequirements(signature) {
        const requirements = [];
        // API アノテーションの検出
        const isApiEndpoint = (signature.annotations || []).some(annotation => this.isApiAnnotation(annotation)) || this.isApiMethodName(signature.name);
        if (isApiEndpoint) {
            const securityFeatures = this.determineApiSecurityFeatures(signature);
            requirements.push({
                id: `api-security-req-${signature.name}`,
                type: 'api-security',
                required: securityFeatures,
                minTaintLevel: types_1.TaintLevel.POSSIBLY_TAINTED,
                applicableSources: [types_1.TaintSource.USER_INPUT, types_1.TaintSource.NETWORK],
                severity: 'high',
                checks: securityFeatures
            });
        }
        return requirements;
    }
    /**
     * セッション管理要件の推論
     */
    inferSessionManagementRequirements(signature) {
        const requirements = [];
        // セッション関連メソッドの検出
        if (this.isSessionRelated(signature.name)) {
            requirements.push({
                id: `session-req-${signature.name}`,
                type: 'session-management',
                required: ['session-validation', 'session-timeout', 'concurrent-session-control'],
                minTaintLevel: types_1.TaintLevel.POSSIBLY_TAINTED,
                applicableSources: [types_1.TaintSource.USER_INPUT]
            });
        }
        return requirements;
    }
    /**
     * シグネチャからの型推論
     */
    inferFromSignature(signature) {
        const annotations = [];
        // パラメータからの推論
        signature.parameters.forEach(param => {
            const securityType = this.inferParameterSecurityType(param);
            const taintLevel = this.inferParameterTaintLevel(param);
            if (securityType) {
                annotations.push({
                    target: param.name,
                    securityType,
                    taintLevel,
                    confidence: 0.85,
                    evidence: [`Parameter type: ${param.type}`, `Parameter source: ${param.source}`]
                });
            }
        });
        // メソッド名からの推論
        const methodSecurityType = this.inferFromMethodName(signature.name);
        if (methodSecurityType) {
            annotations.push({
                target: `method_${signature.name}`,
                securityType: methodSecurityType,
                taintLevel: types_1.TaintLevel.UNTAINTED,
                confidence: 0.7,
                evidence: [`Method name pattern: ${signature.name}`]
            });
        }
        return annotations;
    }
    /**
     * メソッド内容からの型推論
     */
    inferFromContent(content) {
        const annotations = [];
        // 変数宣言の検出
        const variableDeclarations = this.extractVariableDeclarations(content);
        variableDeclarations.forEach(decl => {
            const securityType = this.inferVariableSecurityType(decl);
            if (securityType) {
                annotations.push({
                    target: decl.name,
                    securityType: securityType.type,
                    taintLevel: securityType.taintLevel,
                    confidence: securityType.confidence,
                    evidence: securityType.evidence
                });
            }
        });
        // セキュリティ関連API呼び出しの検出
        const apiCalls = this.extractSecurityApiCalls(content);
        apiCalls.forEach(call => {
            annotations.push({
                target: call.variable || call.method,
                securityType: call.securityType,
                taintLevel: call.resultTaintLevel,
                confidence: 0.8,
                evidence: [`Security API call: ${call.method}`]
            });
        });
        return annotations;
    }
    /**
     * 汚染レベルの推論（新型システム版）
     */
    inferTaintTypes(method) {
        const annotations = [];
        const content = method.content || '';
        // ユーザー入力の検出
        const userInputs = this.detectUserInputs(content);
        userInputs.forEach(input => {
            annotations.push({
                target: input.variable,
                securityType: types_1.SecurityType.USER_INPUT,
                taintLevel: types_1.TaintLevel.DEFINITELY_TAINTED,
                confidence: 0.9,
                evidence: [`User input detected: ${input.source}`]
            });
        });
        // サニタイザーの効果
        const sanitizedVars = this.detectSanitizedVariables(content);
        sanitizedVars.forEach(variable => {
            annotations.push({
                target: variable,
                securityType: types_1.SecurityType.SANITIZED_DATA,
                taintLevel: types_1.TaintLevel.UNTAINTED,
                confidence: 0.85,
                evidence: ['Sanitizer applied']
            });
        });
        return annotations;
    }
    /**
     * レガシー互換メソッド
     * @deprecated inferTaintTypesを使用してください
     */
    inferTaintLevels(method) {
        return this.inferTaintTypes(method);
    }
    // ヘルパーメソッドの実装
    isAuthRelated(methodName) {
        const patterns = ['auth', 'login', 'logout', 'signin', 'signout', 'authenticate', 'authorize'];
        return patterns.some(pattern => methodName.toLowerCase().includes(pattern.toLowerCase()));
    }
    determineAuthCoverageTypes(signature) {
        const types = ['success', 'failure'];
        if (signature.name.toLowerCase().includes('token')) {
            types.push('token-expiry', 'token-validation');
        }
        if (signature.name.toLowerCase().includes('password')) {
            types.push('brute-force-protection');
        }
        return types;
    }
    isCredentialParameter(paramName) {
        const patterns = ['password', 'passwd', 'token', 'credential', 'auth', 'login'];
        return patterns.some(pattern => paramName.toLowerCase().includes(pattern));
    }
    isUserInputParameter(paramName) {
        const patterns = ['input', 'data', 'value', 'param', 'body', 'query'];
        return patterns.some(pattern => paramName.toLowerCase().includes(pattern));
    }
    isFileParameter(paramType) {
        const patterns = ['file', 'upload', 'attachment', 'document', 'image'];
        return patterns.some(pattern => paramType.toLowerCase().includes(pattern));
    }
    determineValidationTypes(params) {
        const types = ['input-validation', 'type-validation'];
        if (params.some(p => p.type?.includes('string'))) {
            types.push('string-validation', 'length-validation');
        }
        if (params.some(p => p.type?.includes('number'))) {
            types.push('numeric-validation', 'range-validation');
        }
        return types;
    }
    isApiAnnotation(annotation) {
        const patterns = ['@api', '@endpoint', '@route', '@controller', '@restcontroller'];
        return patterns.some(pattern => annotation.toLowerCase().includes(pattern.toLowerCase()));
    }
    isApiMethodName(methodName) {
        const patterns = ['endpoint', 'api', 'route', 'handler', 'controller', 'payment', 'process'];
        return patterns.some(pattern => methodName.toLowerCase().includes(pattern));
    }
    determineApiSecurityFeatures(signature) {
        const features = ['authentication', 'authorization', 'input-validation'];
        if (signature.parameters.length > 0) {
            features.push('parameter-validation');
        }
        // Rate limiting の判定
        const hasRateLimitAnnotation = (signature.annotations || []).some(annotation => annotation === '@RateLimit');
        if (hasRateLimitAnnotation || signature.name.toLowerCase().includes('public')) {
            features.push('rate_limiting');
        }
        return features;
    }
    isSessionRelated(methodName) {
        const patterns = ['session', 'cookie', 'state', 'context'];
        return patterns.some(pattern => methodName.toLowerCase().includes(pattern));
    }
    inferParameterSecurityType(param) {
        if (param.source === 'user-input') {
            return types_1.SecurityType.USER_INPUT;
        }
        if (this.isCredentialParameter(param.name)) {
            return types_1.SecurityType.AUTH_TOKEN;
        }
        return undefined;
    }
    inferParameterTaintLevel(param) {
        if (param.source === 'user-input') {
            return types_1.TaintLevel.DEFINITELY_TAINTED;
        }
        if (param.source === 'database') {
            return types_1.TaintLevel.POSSIBLY_TAINTED;
        }
        return types_1.TaintLevel.UNTAINTED;
    }
    inferFromMethodName(methodName) {
        if (this.isAuthRelated(methodName)) {
            return types_1.SecurityType.AUTH_TOKEN;
        }
        if (methodName.toLowerCase().includes('validate')) {
            return types_1.SecurityType.VALIDATED_INPUT;
        }
        return undefined;
    }
    extractVariableDeclarations(content) {
        const declarations = [];
        const lines = content.split('\n');
        lines.forEach((line, index) => {
            const match = line.match(/(const|let|var)\s+([a-zA-Z_][a-zA-Z0-9_]*)\s*=\s*(.+);?/);
            if (match) {
                declarations.push({
                    name: match[2],
                    type: match[1],
                    initializer: match[3].trim(),
                    line: index + 1
                });
            }
        });
        return declarations;
    }
    inferVariableSecurityType(decl) {
        const initializer = decl.initializer.toLowerCase();
        if (initializer.includes('req.body') || initializer.includes('req.query')) {
            return {
                type: types_1.SecurityType.USER_INPUT,
                taintLevel: types_1.TaintLevel.DEFINITELY_TAINTED,
                confidence: 0.9,
                evidence: ['Request parameter assignment']
            };
        }
        if (initializer.includes('sanitize') || initializer.includes('validate')) {
            return {
                type: types_1.SecurityType.SANITIZED_DATA,
                taintLevel: types_1.TaintLevel.UNTAINTED,
                confidence: 0.85,
                evidence: ['Sanitization function call']
            };
        }
        return undefined;
    }
    extractSecurityApiCalls(content) {
        const calls = [];
        const lines = content.split('\n');
        lines.forEach(line => {
            // JWT トークン関連
            if (line.includes('jwt.verify') || line.includes('jwt.sign')) {
                calls.push({
                    method: 'jwt',
                    securityType: types_1.SecurityType.AUTH_TOKEN,
                    resultTaintLevel: types_1.TaintLevel.UNTAINTED,
                    variable: this.extractAssignmentTarget(line)
                });
            }
            // 暗号化関連
            if (line.includes('bcrypt') || line.includes('crypto')) {
                calls.push({
                    method: 'crypto',
                    securityType: types_1.SecurityType.SANITIZED_DATA,
                    resultTaintLevel: types_1.TaintLevel.UNTAINTED,
                    variable: this.extractAssignmentTarget(line)
                });
            }
        });
        return calls;
    }
    detectUserInputs(content) {
        const inputs = [];
        const patterns = [
            { pattern: /(\w+)\s*=\s*req\.body/g, source: 'request body' },
            { pattern: /(\w+)\s*=\s*req\.query/g, source: 'query parameter' },
            { pattern: /(\w+)\s*=\s*req\.params/g, source: 'path parameter' }
        ];
        patterns.forEach(({ pattern, source }) => {
            const matches = [...content.matchAll(pattern)];
            matches.forEach(match => {
                inputs.push({
                    variable: match[1],
                    source,
                    confidence: 0.9
                });
            });
        });
        return inputs;
    }
    detectSanitizedVariables(content) {
        const variables = [];
        const lines = content.split('\n');
        lines.forEach(line => {
            if (line.includes('sanitize(') || line.includes('escape(') || line.includes('validate(')) {
                const target = this.extractAssignmentTarget(line);
                if (target) {
                    variables.push(target);
                }
            }
        });
        return variables;
    }
    extractAssignmentTarget(line) {
        const match = line.match(/^\s*(const|let|var)?\s*([a-zA-Z_][a-zA-Z0-9_]*)\s*=/);
        return match ? match[2] : undefined;
    }
    countVariables(content) {
        const matches = content.match(/(const|let|var)\s+[a-zA-Z_][a-zA-Z0-9_]*/g) || [];
        return matches.length;
    }
    calculateAverageConfidence(annotations) {
        if (annotations.length === 0)
            return 0;
        const total = annotations.reduce((sum, annotation) => sum + annotation.confidence, 0);
        return total / annotations.length;
    }
    calculateSignatureComplexity(signature) {
        let complexity = 1; // base complexity
        complexity += signature.parameters.length * 0.2;
        complexity += (signature.annotations || []).length * 0.1;
        return Math.min(10, complexity);
    }
    calculateSecurityRelevance(signature) {
        let relevance = 0;
        if (this.isAuthRelated(signature.name))
            relevance += 0.4;
        if (signature.parameters.some(p => p.source === 'user-input'))
            relevance += 0.3;
        if ((signature.annotations || []).some(a => this.isApiAnnotation(a)))
            relevance += 0.2;
        if (signature.parameters.some(p => this.isCredentialParameter(p.name)))
            relevance += 0.1;
        return Math.min(1.0, relevance);
    }
    assessTestingNeeds(signature) {
        const securityRelevance = this.calculateSecurityRelevance(signature);
        const complexity = this.calculateSignatureComplexity(signature);
        return {
            priority: securityRelevance > 0.5 ? 'high' : 'medium',
            estimatedEffort: Math.ceil(complexity * securityRelevance * 10),
            requiredCoverage: securityRelevance * 0.8 + 0.2
        };
    }
    recommendTestTypes(signature) {
        const types = [];
        if (this.isAuthRelated(signature.name)) {
            types.push('authentication-test', 'authorization-test');
        }
        if (signature.parameters.some(p => p.source === 'user-input')) {
            types.push('input-validation-test', 'boundary-test');
        }
        if ((signature.annotations || []).some(a => this.isApiAnnotation(a))) {
            types.push('api-security-test', 'integration-test');
        }
        return types.length > 0 ? types : ['unit-test'];
    }
    estimateRequiredTestCount(signature) {
        const base = 2; // minimum tests
        let count = base;
        count += signature.parameters.length; // parameter combinations
        if (this.isAuthRelated(signature.name))
            count += 3; // auth scenarios
        if (signature.parameters.some(p => p.source === 'user-input'))
            count += 2; // input validation
        return Math.min(15, count); // reasonable upper limit
    }
    assessRiskLevel(signature) {
        const securityRelevance = this.calculateSecurityRelevance(signature);
        const hasUserInput = signature.parameters.some(p => p.source === 'user-input');
        const isAuthRelated = this.isAuthRelated(signature.name);
        if (isAuthRelated && hasUserInput && securityRelevance > 0.7)
            return 'critical';
        if (securityRelevance > 0.5)
            return 'high';
        if (hasUserInput || securityRelevance > 0.3)
            return 'medium';
        return 'low';
    }
}
exports.SignatureBasedInference = SignatureBasedInference;
/**
 * セキュリティ知識ベース
 */
class SecurityKnowledgeBase {
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,