{"file":"/Users/sasakama/Projects/Rimor/src/scoring/types.ts","mappings":";;;AAwKA,YAAY;AACC,QAAA,eAAe,GAAiB;IAC3C,OAAO,EAAE,EAAE,EAAE,WAAW;IACxB,UAAU,EAAE;QACV,YAAY,EAAE,GAAG;QACjB,WAAW,EAAE,GAAG;QAChB,eAAe,EAAE,GAAG;QACpB,WAAW,EAAE,GAAG;QAChB,QAAQ,EAAE,GAAG;KACd;CACF,CAAC;AA0EF,YAAY;AACC,QAAA,gBAAgB,GAAG;IAC9B,CAAC,EAAE,EAAE;IACL,CAAC,EAAE,EAAE;IACL,CAAC,EAAE,EAAE;IACL,CAAC,EAAE,EAAE;IACL,CAAC,EAAE,CAAC;CACI,CAAC","names":[],"sources":["/Users/sasakama/Projects/Rimor/src/scoring/types.ts"],"sourcesContent":["import { Issue, QualityScore } from '../core/types';\n\n/**\n * v0.4.0 品質スコア算出器の拡張型定義\n * 要件定義書に基づいた包括的なスコア管理システム\n */\n\n// プラグイン実行結果（既存システムとの連携用）\nexport interface PluginResult {\n  pluginId: string;\n  pluginName: string;\n  score: number; // 0-100\n  weight: number;\n  issues: Issue[];\n  metadata?: Record<string, any>;\n}\n\n// ディメンション別スコア\nexport interface DimensionScore {\n  score: number; // 0-100 (旧value)\n  weight: number; // 重み付け係数\n  issues: Issue[]; // 課題一覧\n  contributors?: {\n    pluginId: string;\n    contribution: number;\n  }[];\n  details?: string;\n}\n\n// スコアのトレンド情報\nexport interface ScoreTrend {\n  current: number;\n  previous: number;\n  change: number;\n  changePercent: number;\n  history: {\n    timestamp: Date;\n    score: number;\n    commit?: string;\n  }[];\n  prediction?: {\n    nextScore: number;\n    confidence: number;\n  };\n}\n\n// ファイル単位のスコア\nexport interface FileScore {\n  filePath: string;\n  overallScore: number; // 0-100\n  dimensions: {\n    completeness: DimensionScore;\n    correctness: DimensionScore;\n    maintainability: DimensionScore;\n    performance: DimensionScore;\n    security: DimensionScore;\n  };\n  grade: 'A' | 'B' | 'C' | 'D' | 'F';\n  weights: WeightConfig; // レポート生成で必要\n  metadata: {\n    analysisTime: number;\n    pluginResults: PluginResult[];\n    issueCount: number;\n  };\n  pluginScores?: {\n    [pluginId: string]: {\n      score: number;\n      weight: number;\n      issues: Issue[];\n    };\n  };\n  trend?: ScoreTrend;\n}\n\n// ディレクトリ単位のスコア\nexport interface DirectoryScore {\n  directoryPath: string;\n  overallScore: number;\n  grade: 'A' | 'B' | 'C' | 'D' | 'F';\n  fileCount: number;\n  fileScores: FileScore[];\n  dimensionScores: {\n    completeness: number;\n    correctness: number;\n    maintainability: number;\n    performance: number;\n    security: number;\n  };\n  // レガシーサポート\n  averageScore?: number;\n  dimensions?: {\n    completeness: DimensionScore;\n    correctness: DimensionScore;\n    maintainability: DimensionScore;\n    performance: DimensionScore;\n    security: DimensionScore;\n  };\n  trend?: ScoreTrend;\n}\n\n// プロジェクト全体のスコア\nexport interface ProjectScore {\n  projectPath: string;\n  overallScore: number;\n  grade: 'A' | 'B' | 'C' | 'D' | 'F';\n  totalFiles: number;\n  totalDirectories: number; // レポートで必要\n  fileScores: FileScore[];\n  directoryScores: DirectoryScore[];\n  weights: WeightConfig;\n  metadata: {\n    generatedAt: Date;\n    executionTime: number;\n    pluginCount: number;\n    issueCount: number;\n  };\n  // レガシーサポート\n  averageScore?: number;\n  dimensions?: {\n    completeness: DimensionScore;\n    correctness: DimensionScore;\n    maintainability: DimensionScore;\n    performance: DimensionScore;\n    security: DimensionScore;\n  };\n  distribution?: {\n    A: number;\n    B: number;\n    C: number;\n    D: number;\n    F: number;\n  };\n  trend?: ScoreTrend;\n}\n\n// 集約されたスコア結果\nexport interface AggregatedScore {\n  score: number;\n  confidence: number;\n  metadata: {\n    aggregatedFrom: number;\n    totalWeight: number;\n    algorithm: string;\n  };\n}\n\n// 重み付け設定\nexport interface WeightConfig {\n  // プラグイン重み\n  plugins: {\n    [pluginId: string]: number;\n  };\n  \n  // ディメンション重み\n  dimensions: {\n    completeness: number;\n    correctness: number;\n    maintainability: number;\n    performance: number;\n    security: number;\n  };\n  \n  // ファイルタイプ別重み\n  fileTypes?: {\n    [pattern: string]: number; // 例: \"*.critical.test.ts\": 2.0\n  };\n}\n\n// デフォルト重み設定\nexport const DEFAULT_WEIGHTS: WeightConfig = {\n  plugins: {}, // 全プラグイン均等\n  dimensions: {\n    completeness: 1.0,\n    correctness: 1.5,\n    maintainability: 0.8,\n    performance: 0.5,\n    security: 1.2\n  }\n};\n\n// 改善提案\nexport interface Improvement {\n  priority: 'critical' | 'high' | 'medium' | 'low';\n  target: string;\n  action: string;\n  expectedImprovement: number;\n  estimatedEffort: 'low' | 'medium' | 'high';\n  relatedIssues: Issue[];\n}\n\n// 品質レポート\nexport interface QualityReport {\n  version: string;\n  timestamp: Date;\n  summary: {\n    projectScore: number;\n    projectGrade: string;\n    totalFiles: number;\n    averageScore: number;\n    distribution: {\n      A: number;\n      B: number;\n      C: number;\n      D: number;\n      F: number;\n    };\n  };\n  \n  highlights: {\n    topFiles: FileScore[];\n    bottomFiles: FileScore[];\n    mostImproved: FileScore[];\n    mostDegraded: FileScore[];\n  };\n  \n  recommendations: Improvement[];\n  \n  trends: {\n    overall: ScoreTrend;\n    byDimension: Record<string, ScoreTrend>;\n  };\n  \n  projectScore: ProjectScore;\n}\n\n// スコア履歴の保存形式\nexport interface ScoreHistory {\n  version: string;\n  projectId: string;\n  entries: Array<{\n    timestamp: Date;\n    commit?: string;\n    branch?: string;\n    scores: {\n      project: ProjectScore;\n      files: Map<string, FileScore>;\n    };\n    metadata: {\n      rimorVersion: string;\n      plugins: string[];\n      duration: number;\n    };\n  }>;\n}\n\n// キャッシュ構造\nexport interface ScoreCache {\n  fileHash: Map<string, string>; // ファイルパス -> ハッシュ\n  scores: Map<string, FileScore>; // ハッシュ -> スコア\n  expiry: Date;\n}\n\n// グレード判定の基準\nexport const GRADE_THRESHOLDS = {\n  A: 90,\n  B: 80, \n  C: 70,\n  D: 60,\n  F: 0\n} as const;\n\n// ディメンションタイプ\nexport type DimensionType = 'completeness' | 'correctness' | 'maintainability' | 'performance' | 'security';\nexport type GradeType = 'A' | 'B' | 'C' | 'D' | 'F';\n\n// スコア計算メソッドインターフェース\nexport interface IScoreCalculator {\n  // ファイル単位のスコア算出\n  calculateFileScore(\n    file: string,\n    pluginResults: PluginResult[]\n  ): FileScore;\n  \n  // ディレクトリ単位のスコア算出\n  calculateDirectoryScore(\n    directory: string,\n    fileScores: FileScore[]\n  ): DirectoryScore;\n  \n  // プロジェクト全体のスコア算出\n  calculateProjectScore(\n    directoryScores: DirectoryScore[]\n  ): ProjectScore;\n  \n  // カスタム集約ロジック\n  aggregateScores(\n    scores: QualityScore[],\n    weights?: WeightConfig\n  ): AggregatedScore;\n}"],"version":3}