24e748ac171bfdd15f51f59ddd85e3ce
"use strict";
/**
 * Intent Analyze Command Tests
 * v0.9.0 - TDD Red Phase: 失敗するテストを最初に書く
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
// モックの設定（インポート前に設定）
jest.mock('fs');
jest.mock('fs/promises');
jest.mock('glob');
jest.mock('tree-sitter', () => ({
    default: jest.fn().mockImplementation(() => ({
        setLanguage: jest.fn(),
        parse: jest.fn()
    }))
}));
jest.mock('tree-sitter-javascript', () => ({}));
jest.mock('tree-sitter-typescript', () => ({
    typescript: {},
    tsx: {}
}));
jest.mock('../../../src/intent-analysis/TreeSitterParser', () => ({
    TreeSitterParser: {
        getInstance: jest.fn()
    }
}));
jest.mock('../../../src/intent-analysis/TestIntentExtractor');
jest.mock('../../../src/intent-analysis/TestIntentReporter');
jest.mock('../../../src/intent-analysis/TypeScriptAnalyzer');
jest.mock('../../../src/intent-analysis/DomainInferenceEngine');
jest.mock('../../../src/intent-analysis/BusinessLogicMapper');
const intent_analyze_1 = require("../../../src/cli/commands/intent-analyze");
const TreeSitterParser_1 = require("../../../src/intent-analysis/TreeSitterParser");
const TestIntentExtractor_1 = require("../../../src/intent-analysis/TestIntentExtractor");
const TestIntentReporter_1 = require("../../../src/intent-analysis/TestIntentReporter");
const TypeScriptAnalyzer_1 = require("../../../src/intent-analysis/TypeScriptAnalyzer");
const fs = __importStar(require("fs"));
const fsPromises = __importStar(require("fs/promises"));
const glob_1 = require("glob");
describe('IntentAnalyzeCommand', () => {
    let command;
    let mockParser;
    let mockExtractor;
    let mockReporter;
    beforeEach(() => {
        jest.clearAllMocks();
        // パーサーのモック
        mockParser = {
            parseFile: jest.fn(),
            parseContent: jest.fn(),
            findNodes: jest.fn(),
            findTestFunctions: jest.fn(),
            findAssertions: jest.fn()
        };
        TreeSitterParser_1.TreeSitterParser.getInstance.mockReturnValue(mockParser);
        // エクストラクターのモック
        mockExtractor = new TestIntentExtractor_1.TestIntentExtractor(mockParser);
        TestIntentExtractor_1.TestIntentExtractor.mockImplementation(() => mockExtractor);
        // レポーターのモック
        mockReporter = new TestIntentReporter_1.TestIntentReporter();
        TestIntentReporter_1.TestIntentReporter.mockImplementation(() => mockReporter);
        command = new intent_analyze_1.IntentAnalyzeCommand();
    });
    describe('execute', () => {
        it('指定されたパスのテストファイルを分析し、レポートを生成する', async () => {
            // Arrange
            const testPath = '/test/project';
            const options = {
                path: testPath,
                format: 'text'
            };
            // ファイルシステムのモック
            const mockStats = { isDirectory: () => true };
            fs.statSync.mockReturnValue(mockStats);
            fs.existsSync.mockReturnValue(true);
            // テストファイルの発見をモック
            const testFiles = ['test1.test.ts', 'test2.spec.js'];
            jest.spyOn(command, 'findTestFiles').mockResolvedValue(testFiles);
            // パーサーのモック
            const mockAST = { type: 'program', text: 'test code' };
            mockParser.parseFile.mockResolvedValue(mockAST);
            // エクストラクターのモック
            const mockIntent = { description: 'test intent', testType: 'unit' };
            const mockActual = { assertions: [], complexity: 1 };
            const mockResult = {
                intent: mockIntent,
                actual: mockActual,
                gaps: [],
                realizationScore: 90,
                riskLevel: 'low'
            };
            mockExtractor.extractIntent.mockResolvedValue(mockIntent);
            mockExtractor.analyzeActualTest.mockResolvedValue(mockActual);
            mockExtractor.evaluateRealization.mockResolvedValue(mockResult);
            // レポーターのモック
            const mockMarkdown = '# Test Report';
            mockReporter.generateMarkdownReport.mockReturnValue(mockMarkdown);
            // コンソール出力をモック
            const consoleLogSpy = jest.spyOn(console, 'log').mockImplementation();
            // Act
            await command.execute(options);
            // Assert
            expect(mockParser.parseFile).toHaveBeenCalledTimes(2); // 2つのテストファイル
            expect(mockExtractor.extractIntent).toHaveBeenCalledTimes(2);
            expect(mockExtractor.analyzeActualTest).toHaveBeenCalledTimes(2);
            expect(mockExtractor.evaluateRealization).toHaveBeenCalledTimes(2);
            expect(mockReporter.generateMarkdownReport).toHaveBeenCalled();
            expect(consoleLogSpy).toHaveBeenCalledWith(mockMarkdown);
            consoleLogSpy.mockRestore();
        });
        it('format=jsonの場合、JSON形式で出力する', async () => {
            // Arrange
            const options = {
                path: '/test/project',
                format: 'json'
            };
            // 基本的なモックセットアップ
            fs.statSync.mockReturnValue({ isDirectory: () => true });
            fs.existsSync.mockReturnValue(true);
            jest.spyOn(command, 'findTestFiles').mockResolvedValue(['test.test.ts']);
            const mockAST = { type: 'program' };
            mockParser.parseFile.mockResolvedValue(mockAST);
            const mockResult = {
                file: 'test.test.ts',
                intent: { description: 'test' },
                actual: { assertions: [] },
                gaps: [],
                realizationScore: 85,
                riskLevel: 'medium'
            };
            mockExtractor.extractIntent.mockResolvedValue({ description: 'test' });
            mockExtractor.analyzeActualTest.mockResolvedValue({ assertions: [] });
            mockExtractor.evaluateRealization.mockResolvedValue(mockResult);
            // レポーターのサマリーをモック
            mockReporter.generateSummary.mockReturnValue({
                totalFiles: 1,
                criticalRiskCount: 0,
                highRiskCount: 0,
                mediumRiskCount: 1,
                lowRiskCount: 0,
                averageRealizationScore: 85
            });
            const consoleLogSpy = jest.spyOn(console, 'log').mockImplementation();
            // Act
            await command.execute(options);
            // Assert
            const output = consoleLogSpy.mock.calls[0][0];
            const parsed = JSON.parse(output);
            expect(parsed).toHaveProperty('results');
            expect(parsed).toHaveProperty('summary');
            expect(parsed.results).toHaveLength(1);
            expect(parsed.results[0].realizationScore).toBe(85);
            consoleLogSpy.mockRestore();
        });
        it('HTML形式での出力をサポートする', async () => {
            // Arrange
            const options = {
                path: '/test/project',
                format: 'html',
                output: 'report.html'
            };
            // 基本的なモックセットアップ
            fs.statSync.mockReturnValue({ isDirectory: () => true });
            fs.existsSync.mockReturnValue(true);
            jest.spyOn(command, 'findTestFiles').mockResolvedValue(['test.test.ts']);
            const mockAST = { type: 'program' };
            mockParser.parseFile.mockResolvedValue(mockAST);
            mockExtractor.extractIntent.mockResolvedValue({});
            mockExtractor.analyzeActualTest.mockResolvedValue({});
            mockExtractor.evaluateRealization.mockResolvedValue({
                gaps: [],
                realizationScore: 100,
                riskLevel: 'minimal'
            });
            const mockHTML = '<!DOCTYPE html><html>...</html>';
            mockReporter.generateHTMLReport.mockReturnValue(mockHTML);
            const writeFileSyncSpy = fs.writeFileSync;
            // Act
            await command.execute(options);
            // Assert
            expect(mockReporter.generateHTMLReport).toHaveBeenCalled();
            expect(writeFileSyncSpy).toHaveBeenCalledWith('report.html', mockHTML);
        });
        it('エラーが発生した場合、適切にエラーハンドリングする', async () => {
            // Arrange
            const options = {
                path: '/invalid/path',
                format: 'text'
            };
            fs.existsSync.mockReturnValue(false);
            // Act & Assert
            await expect(command.execute(options)).rejects.toThrow('指定されたパスが存在しません');
        });
        it('verboseオプションで詳細情報を出力する', async () => {
            // Arrange
            const options = {
                path: '/test/project',
                format: 'text',
                verbose: true
            };
            // 基本的なモックセットアップ
            fs.statSync.mockReturnValue({ isDirectory: () => true });
            fs.existsSync.mockReturnValue(true);
            jest.spyOn(command, 'findTestFiles').mockResolvedValue(['test.test.ts']);
            mockParser.parseFile.mockResolvedValue({ type: 'program' });
            mockExtractor.extractIntent.mockResolvedValue({});
            mockExtractor.analyzeActualTest.mockResolvedValue({});
            mockExtractor.evaluateRealization.mockResolvedValue({
                gaps: [],
                realizationScore: 100,
                riskLevel: 'minimal'
            });
            const consoleLogSpy = jest.spyOn(console, 'log').mockImplementation();
            // Act
            await command.execute(options);
            // Assert
            const logs = consoleLogSpy.mock.calls.map(call => call[0]);
            expect(logs.some(log => log.includes('分析中:'))).toBeTruthy();
            expect(logs.some(log => log.includes('ファイル発見:'))).toBeTruthy();
            consoleLogSpy.mockRestore();
        });
        describe('Phase 2 高度な分析オプション', () => {
            it('--with-typesオプションで型情報を使った分析を実行する', async () => {
                // Arrange
                const options = {
                    path: '/test/project',
                    format: 'text',
                    withTypes: true
                };
                fs.statSync.mockReturnValue({ isDirectory: () => true });
                fs.existsSync.mockReturnValue(true);
                jest.spyOn(command, 'findTestFiles').mockResolvedValue(['test.test.ts']);
                mockParser.parseFile.mockResolvedValue({ type: 'program' });
                mockExtractor.extractIntent.mockResolvedValue({});
                mockExtractor.analyzeActualTest.mockResolvedValue({});
                // evaluateRealizationWithTypeInfoのモック
                mockExtractor.evaluateRealizationWithTypeInfo = jest.fn().mockResolvedValue({
                    gaps: [],
                    realizationScore: 95,
                    riskLevel: 'minimal',
                    domainRelevance: { domain: 'user-management', confidence: 0.9 },
                    businessImportance: 'high'
                });
                // TypeScriptAnalyzerのモック
                const mockTsAnalyzer = {
                    initialize: jest.fn().mockResolvedValue(undefined),
                    getFileTypeInfo: jest.fn().mockResolvedValue(new Map([
                        ['testVar', { typeName: 'string', isPrimitive: true }]
                    ]))
                };
                TypeScriptAnalyzer_1.TypeScriptAnalyzer.mockImplementation(() => mockTsAnalyzer);
                // fs/promisesのaccessをモック（tsconfig.json検索用）
                fsPromises.access.mockRejectedValue(new Error('File not found'));
                const consoleLogSpy = jest.spyOn(console, 'log').mockImplementation();
                // Act
                await command.execute(options);
                // Assert
                expect(mockExtractor.evaluateRealizationWithTypeInfo).toHaveBeenCalled();
                consoleLogSpy.mockRestore();
            });
            it('--with-domainオプションでドメイン推論を含む分析を実行する', async () => {
                // Arrange
                const options = {
                    path: '/test/project',
                    format: 'text',
                    withDomain: true
                };
                fs.statSync.mockReturnValue({ isDirectory: () => true });
                fs.existsSync.mockReturnValue(true);
                jest.spyOn(command, 'findTestFiles').mockResolvedValue(['test.test.ts']);
                mockParser.parseFile.mockResolvedValue({ type: 'program' });
                mockExtractor.extractIntent.mockResolvedValue({});
                mockExtractor.analyzeActualTest.mockResolvedValue({});
                mockExtractor.evaluateRealization.mockResolvedValue({
                    gaps: [],
                    realizationScore: 90,
                    riskLevel: 'low'
                });
                // ドメイン推論結果を含むレポートが生成されることを確認
                mockReporter.generateMarkdownReport = jest.fn().mockImplementation(results => {
                    return results.some((r) => r.domainRelevance)
                        ? '# レポート（ドメイン分析付き）'
                        : '# 通常レポート';
                });
                const consoleLogSpy = jest.spyOn(console, 'log').mockImplementation();
                // Act
                await command.execute(options);
                // Assert
                const output = consoleLogSpy.mock.calls[0][0];
                expect(output).toContain('ドメイン分析付き');
                consoleLogSpy.mockRestore();
            });
        });
    });
    describe('findTestFiles', () => {
        it('テストファイルパターンにマッチするファイルを検索する', async () => {
            // privateメソッドのテストのため、一時的にpublicとしてアクセス
            const findTestFiles = command.findTestFiles.bind(command);
            // ファイルシステムのモック
            fs.statSync.mockReturnValue({ isDirectory: () => true });
            // globのモック
            glob_1.glob.mockImplementation((pattern) => {
                // パターンに応じてマッチするファイルを返す
                if (pattern.includes('.test.')) {
                    return Promise.resolve(['test/example.test.ts']);
                }
                else if (pattern.includes('.spec.')) {
                    return Promise.resolve(['test/sample.spec.js']);
                }
                else if (pattern.includes('__tests__')) {
                    return Promise.resolve(['__tests__/unit.test.tsx']);
                }
                else {
                    return Promise.resolve([]);
                }
            });
            // Act
            const result = await findTestFiles('/project');
            // Assert
            expect(result).toEqual([
                '/project/test/example.test.ts',
                '/project/test/sample.spec.js',
                '/project/__tests__/unit.test.tsx'
            ]);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,