809f0ce7f5ea5eb93238de5ca84b5eac
"use strict";
/**
 * 型ベースセキュリティ解析 - 型システムエクスポート
 * v0.7.0: TaintTyperベースのモジュラー型解析システム
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecurityLattice = exports.SecurityType = exports.TaintLattice = exports.TaintedValue = exports.SanitizerType = exports.SecuritySink = exports.TaintSource = exports.TaintLevel = void 0;
// 型定義のインポート - 共通型定義から
const common_types_1 = require("../../types/common-types");
Object.defineProperty(exports, "TaintLevel", { enumerable: true, get: function () { return common_types_1.TaintLevel; } });
Object.defineProperty(exports, "TaintSource", { enumerable: true, get: function () { return common_types_1.TaintSource; } });
Object.defineProperty(exports, "SecuritySink", { enumerable: true, get: function () { return common_types_1.SecuritySink; } });
Object.defineProperty(exports, "SanitizerType", { enumerable: true, get: function () { return common_types_1.SanitizerType; } });
Object.defineProperty(exports, "SecurityType", { enumerable: true, get: function () { return common_types_1.SecurityType; } });
// ローカル型定義
const taint_1 = require("./taint");
Object.defineProperty(exports, "TaintedValue", { enumerable: true, get: function () { return taint_1.TaintedValue; } });
Object.defineProperty(exports, "TaintLattice", { enumerable: true, get: function () { return taint_1.TaintLattice; } });
const lattice_1 = require("./lattice");
Object.defineProperty(exports, "SecurityLattice", { enumerable: true, get: function () { return lattice_1.SecurityLattice; } });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,