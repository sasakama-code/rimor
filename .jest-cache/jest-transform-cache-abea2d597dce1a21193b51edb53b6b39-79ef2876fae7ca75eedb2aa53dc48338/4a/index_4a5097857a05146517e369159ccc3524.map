{"file":"/Users/sasakama/Projects/Rimor/src/security/types/index.ts","mappings":";AAAA;;;GAGG;;;AAEH,sBAAsB;AACtB,2DAMkC;AAyChC,2FA9CA,yBAAU,OA8CA;AACV,4FA9CA,0BAAW,OA8CA;AACX,6FA9CA,2BAAY,OA8CA;AACZ,8FA9CA,4BAAa,OA8CA;AAUb,6FAvDA,2BAAY,OAuDA;AApDd,UAAU;AACV,mCAMiB;AAsCf,6FAzCA,oBAAY,OAyCA;AAEZ,6FAzCA,oBAAY,OAyCA;AAhBd,uCAImB;AAuCjB,gGA1CA,yBAAe,OA0CA","names":[],"sources":["/Users/sasakama/Projects/Rimor/src/security/types/index.ts"],"sourcesContent":["/**\n * 型ベースセキュリティ解析 - 型システムエクスポート\n * v0.7.0: TaintTyperベースのモジュラー型解析システム\n */\n\n// 型定義のインポート - 共通型定義から\nimport {\n  TaintLevel,\n  TaintSource,\n  SecuritySink,\n  SanitizerType,\n  SecurityType\n} from '../../types/common-types';\n\n// ローカル型定義\nimport {\n  TaintMetadata,\n  TaintTraceStep,\n  TaintedValue,\n  SafeValue,\n  TaintLattice\n} from './taint';\n\nimport { SecurityMethodChange } from './flow-types';\n\nimport {\n  SecurityValidation,\n  SecurityRequirement,\n  SecureTest,\n  UnsafeTest,\n  ValidatedAuthTest,\n  ValidatedInputTest,\n  AuthTestCoverage,\n  BoundaryCondition,\n  PotentialVulnerability,\n  TestCase,\n  TestStatement,\n  Variable,\n  SecurityTypeAnnotation,\n  TypeInferenceResult,\n  CompileTimeResult,\n  SecurityIssue,\n  SecurityTestMetrics\n} from './security';\n\nimport {\n  SecurityLattice,\n  SecurityViolation,\n  LatticeAnalysisStats\n} from './lattice';\n\n// 汚染レベルと格子理論のエクスポート\nexport {\n  TaintLevel,\n  TaintSource,\n  SecuritySink,\n  SanitizerType,\n  TaintMetadata,\n  TaintTraceStep,\n  TaintedValue,\n  SafeValue,\n  TaintLattice\n};\n\n// セキュリティ型システムのエクスポート\nexport {\n  SecurityType,\n  SecurityValidation,\n  SecurityRequirement,\n  SecureTest,\n  UnsafeTest,\n  ValidatedAuthTest,\n  ValidatedInputTest,\n  AuthTestCoverage,\n  BoundaryCondition,\n  PotentialVulnerability,\n  TestCase,\n  TestStatement,\n  Variable,\n  SecurityTypeAnnotation,\n  TypeInferenceResult,\n  CompileTimeResult,\n  SecurityIssue,\n  SecurityTestMetrics\n};\n\n// セキュリティ格子システムのエクスポート\nexport {\n  SecurityLattice,\n  LatticeAnalysisStats\n};\n\n// SecurityViolationとSecurityImprovementは他のファイルでも定義されているため、\n// 明示的に lattice.ts からインポートして再エクスポート\nexport type { SecurityViolation } from './lattice';\nexport type { SecurityImprovement } from './flow-types';\n\n\n// TestMethodはcore/typesからインポート\nimport { TestMethod } from '../../core/types';\nexport { TestMethod };\n\n/**\n * メソッドシグネチャ\n */\nexport interface MethodSignature {\n  /** メソッド名 */\n  name: string;\n  /** パラメータ */\n  parameters: Parameter[];\n  /** 戻り値の型 */\n  returnType?: string;\n  /** アノテーション */\n  annotations: string[];\n  /** アクセス修飾子 */\n  visibility?: 'private' | 'protected' | 'public';\n  /** 非同期かどうか */\n  isAsync: boolean;\n}\n\n/**\n * パラメータ\n */\nexport interface Parameter {\n  /** パラメータ名 */\n  name: string;\n  /** 型 */\n  type?: string;\n  /** データソース */\n  source?: 'user-input' | 'database' | 'api' | 'constant';\n  /** アノテーション（セキュリティプラグイン用） */\n  annotations?: string[];\n}\n\n/**\n * メソッド解析結果\n */\nexport interface MethodAnalysisResult {\n  /** メソッド名 */\n  methodName: string;\n  /** 検出された問題 */\n  issues: SecurityIssue[];\n  /** 品質メトリクス */\n  metrics: SecurityTestMetrics;\n  /** 改善提案 */\n  suggestions: import('./flow-types').SecurityImprovement[];\n  /** 解析時間 */\n  analysisTime: number;\n}\n\n/**\n * メソッド変更\n */\nexport interface MethodChange {\n  /** 変更の種別 */\n  type: 'added' | 'modified' | 'deleted';\n  /** メソッド */\n  method: TestMethod;\n  /** 変更の詳細 */\n  details: string;\n}\n\n/**\n * インクリメンタル解析結果\n */\nexport interface IncrementalResult {\n  /** 解析されたメソッド数 */\n  analyzed: number;\n  /** キャッシュから取得されたメソッド数 */\n  cached: number;\n  /** 総実行時間 */\n  totalTime: number;\n  /** 結果 */\n  results: MethodAnalysisResult[];\n}\n\n/**\n * 解析結果\n */\nexport interface AnalysisResult {\n  /** メソッド名 */\n  methodName: string;\n  /** 結果 */\n  result: MethodAnalysisResult;\n  /** エラー（ある場合） */\n  error?: string;\n}\n\n/**\n * 汚染解析結果\n */\nexport interface TaintAnalysisResult {\n  /** セキュリティ格子 */\n  lattice: SecurityLattice;\n  /** セキュリティ違反 */\n  violations: SecurityViolation[];\n  /** 汚染パス */\n  taintPaths: any[];\n  /** クリティカルフロー */\n  criticalFlows: any[];\n}\n\n/**\n * インクリメンタル更新結果\n */\nexport interface IncrementalUpdate {\n  /** 更新されたメソッド */\n  updatedMethods: string[];\n  /** 無効化されたキャッシュ */\n  invalidatedCache: string[];\n  /** 新しい問題 */\n  newIssues: SecurityIssue[];\n  /** 解決された問題 */\n  resolvedIssues: string[];\n}\n\n// SecurityImprovement は flow-types.ts で定義されているため削除\n\n/**\n * 型ベースセキュリティ解析の設定\n */\nexport interface TypeBasedSecurityConfig {\n  /** 解析の厳密さ */\n  strictness: 'strict' | 'moderate' | 'lenient';\n  /** 最大解析時間（ms） */  \n  maxAnalysisTime: number;\n  /** 並列度 */\n  parallelism: number;\n  /** キャッシュの有効化 */\n  enableCache: boolean;\n  /** カスタムサニタイザー */\n  customSanitizers: string[];\n  /** カスタムシンク */\n  customSinks: string[];\n  /** 除外パターン */\n  excludePatterns: string[];\n  /** デバッグモード */\n  debug?: boolean;\n}\n\n/**\n * 型ベースセキュリティ解析のメインインターフェース\n */\nexport interface TypeBasedSecurityAnalysis {\n  /** 汚染レベルの推論 */\n  inferTaintLevels(testFile: TestCase): Promise<Map<string, TaintLevel>>;\n  \n  /** セキュリティ型の推論 */\n  inferSecurityTypes(testFile: TestCase): Promise<TypeInferenceResult>;\n  \n  /** セキュリティ不変条件の検証 */\n  verifyInvariants(testFile: TestCase): Promise<SecurityViolation[]>;\n  \n  /** コンパイル時解析の実行 */\n  analyzeAtCompileTime(testFiles: TestCase[]): Promise<CompileTimeResult>;\n}\n\n/**\n * モジュラー解析のインターフェース\n */\nexport interface ModularAnalysis {\n  /** テストメソッド単位の解析 */\n  analyzeMethod(method: TestMethod): Promise<MethodAnalysisResult>;\n  \n  /** インクリメンタル解析 */\n  incrementalAnalyze(changes: SecurityMethodChange[]): Promise<IncrementalResult>;\n  \n  /** 並列解析 */\n  analyzeInParallel(methods: TestMethod[]): Promise<MethodAnalysisResult[]>;\n}"],"version":3}