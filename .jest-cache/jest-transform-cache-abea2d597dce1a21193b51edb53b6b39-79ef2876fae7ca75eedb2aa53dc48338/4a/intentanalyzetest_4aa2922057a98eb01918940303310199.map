{"file":"/Users/sasakama/Projects/Rimor/test/cli/commands/intent-analyze.test.ts","mappings":"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","names":[],"sources":["/Users/sasakama/Projects/Rimor/test/cli/commands/intent-analyze.test.ts"],"sourcesContent":["/**\n * Intent Analyze Command Tests\n * v0.9.0 - TDD Red Phase: 失敗するテストを最初に書く\n */\n\n// モックの設定（インポート前に設定）\njest.mock('fs');\njest.mock('fs/promises');\njest.mock('glob');\njest.mock('tree-sitter', () => ({\n  default: jest.fn().mockImplementation(() => ({\n    setLanguage: jest.fn(),\n    parse: jest.fn()\n  }))\n}));\njest.mock('tree-sitter-javascript', () => ({}));\njest.mock('tree-sitter-typescript', () => ({\n  typescript: {},\n  tsx: {}\n}));\njest.mock('../../../src/intent-analysis/TreeSitterParser', () => ({\n  TreeSitterParser: {\n    getInstance: jest.fn()\n  }\n}));\njest.mock('../../../src/intent-analysis/TestIntentExtractor');\njest.mock('../../../src/intent-analysis/TestIntentReporter');\njest.mock('../../../src/intent-analysis/TypeScriptAnalyzer');\njest.mock('../../../src/intent-analysis/DomainInferenceEngine');\njest.mock('../../../src/intent-analysis/BusinessLogicMapper');\n\nimport { IntentAnalyzeCommand } from '../../../src/cli/commands/intent-analyze';\nimport { TreeSitterParser } from '../../../src/intent-analysis/TreeSitterParser';\nimport { TestIntentExtractor } from '../../../src/intent-analysis/TestIntentExtractor';\nimport { TestIntentReporter } from '../../../src/intent-analysis/TestIntentReporter';\nimport { TypeScriptAnalyzer } from '../../../src/intent-analysis/TypeScriptAnalyzer';\nimport { DomainInferenceEngine } from '../../../src/intent-analysis/DomainInferenceEngine';\nimport { BusinessLogicMapper } from '../../../src/intent-analysis/BusinessLogicMapper';\nimport * as fs from 'fs';\nimport * as fsPromises from 'fs/promises';\nimport * as path from 'path';\nimport { glob } from 'glob';\n\ndescribe('IntentAnalyzeCommand', () => {\n  let command: IntentAnalyzeCommand;\n  let mockParser: jest.Mocked<TreeSitterParser>;\n  let mockExtractor: jest.Mocked<TestIntentExtractor>;\n  let mockReporter: jest.Mocked<TestIntentReporter>;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // パーサーのモック\n    mockParser = {\n      parseFile: jest.fn(),\n      parseContent: jest.fn(),\n      findNodes: jest.fn(),\n      findTestFunctions: jest.fn(),\n      findAssertions: jest.fn()\n    } as any;\n    (TreeSitterParser.getInstance as jest.Mock).mockReturnValue(mockParser);\n    \n    // エクストラクターのモック\n    mockExtractor = new TestIntentExtractor(mockParser) as jest.Mocked<TestIntentExtractor>;\n    (TestIntentExtractor as jest.MockedClass<typeof TestIntentExtractor>).mockImplementation(() => mockExtractor);\n    \n    // レポーターのモック\n    mockReporter = new TestIntentReporter() as jest.Mocked<TestIntentReporter>;\n    (TestIntentReporter as jest.MockedClass<typeof TestIntentReporter>).mockImplementation(() => mockReporter);\n    \n    command = new IntentAnalyzeCommand();\n  });\n\n  describe('execute', () => {\n    it('指定されたパスのテストファイルを分析し、レポートを生成する', async () => {\n      // Arrange\n      const testPath = '/test/project';\n      const options = {\n        path: testPath,\n        format: 'text' as const\n      };\n      \n      // ファイルシステムのモック\n      const mockStats = { isDirectory: () => true };\n      (fs.statSync as jest.Mock).mockReturnValue(mockStats);\n      (fs.existsSync as jest.Mock).mockReturnValue(true);\n      \n      // テストファイルの発見をモック\n      const testFiles = ['test1.test.ts', 'test2.spec.js'];\n      jest.spyOn(command as any, 'findTestFiles').mockResolvedValue(testFiles);\n      \n      // パーサーのモック\n      const mockAST = { type: 'program', text: 'test code' };\n      mockParser.parseFile.mockResolvedValue(mockAST as any);\n      \n      // エクストラクターのモック\n      const mockIntent = { description: 'test intent', testType: 'unit' };\n      const mockActual = { assertions: [], complexity: 1 };\n      const mockResult = { \n        intent: mockIntent, \n        actual: mockActual, \n        gaps: [], \n        realizationScore: 90,\n        riskLevel: 'low'\n      };\n      mockExtractor.extractIntent.mockResolvedValue(mockIntent as any);\n      mockExtractor.analyzeActualTest.mockResolvedValue(mockActual as any);\n      mockExtractor.evaluateRealization.mockResolvedValue(mockResult as any);\n      \n      // レポーターのモック\n      const mockMarkdown = '# Test Report';\n      mockReporter.generateMarkdownReport.mockReturnValue(mockMarkdown);\n      \n      // コンソール出力をモック\n      const consoleLogSpy = jest.spyOn(console, 'log').mockImplementation();\n      \n      // Act\n      await command.execute(options);\n      \n      // Assert\n      expect(mockParser.parseFile).toHaveBeenCalledTimes(2); // 2つのテストファイル\n      expect(mockExtractor.extractIntent).toHaveBeenCalledTimes(2);\n      expect(mockExtractor.analyzeActualTest).toHaveBeenCalledTimes(2);\n      expect(mockExtractor.evaluateRealization).toHaveBeenCalledTimes(2);\n      expect(mockReporter.generateMarkdownReport).toHaveBeenCalled();\n      expect(consoleLogSpy).toHaveBeenCalledWith(mockMarkdown);\n      \n      consoleLogSpy.mockRestore();\n    });\n\n    it('format=jsonの場合、JSON形式で出力する', async () => {\n      // Arrange\n      const options = {\n        path: '/test/project',\n        format: 'json' as const\n      };\n      \n      // 基本的なモックセットアップ\n      (fs.statSync as jest.Mock).mockReturnValue({ isDirectory: () => true });\n      (fs.existsSync as jest.Mock).mockReturnValue(true);\n      jest.spyOn(command as any, 'findTestFiles').mockResolvedValue(['test.test.ts']);\n      \n      const mockAST = { type: 'program' };\n      mockParser.parseFile.mockResolvedValue(mockAST as any);\n      \n      const mockResult = {\n        file: 'test.test.ts',\n        intent: { description: 'test' },\n        actual: { assertions: [] },\n        gaps: [],\n        realizationScore: 85,\n        riskLevel: 'medium'\n      };\n      mockExtractor.extractIntent.mockResolvedValue({ description: 'test' } as any);\n      mockExtractor.analyzeActualTest.mockResolvedValue({ assertions: [] } as any);\n      mockExtractor.evaluateRealization.mockResolvedValue(mockResult as any);\n      \n      // レポーターのサマリーをモック\n      mockReporter.generateSummary.mockReturnValue({\n        totalFiles: 1,\n        criticalRiskCount: 0,\n        highRiskCount: 0,\n        mediumRiskCount: 1,\n        lowRiskCount: 0,\n        averageRealizationScore: 85\n      });\n      \n      const consoleLogSpy = jest.spyOn(console, 'log').mockImplementation();\n      \n      // Act\n      await command.execute(options);\n      \n      // Assert\n      const output = consoleLogSpy.mock.calls[0][0];\n      const parsed = JSON.parse(output);\n      expect(parsed).toHaveProperty('results');\n      expect(parsed).toHaveProperty('summary');\n      expect(parsed.results).toHaveLength(1);\n      expect(parsed.results[0].realizationScore).toBe(85);\n      \n      consoleLogSpy.mockRestore();\n    });\n\n    it('HTML形式での出力をサポートする', async () => {\n      // Arrange\n      const options = {\n        path: '/test/project',\n        format: 'html' as any,\n        output: 'report.html'\n      };\n      \n      // 基本的なモックセットアップ\n      (fs.statSync as jest.Mock).mockReturnValue({ isDirectory: () => true });\n      (fs.existsSync as jest.Mock).mockReturnValue(true);\n      jest.spyOn(command as any, 'findTestFiles').mockResolvedValue(['test.test.ts']);\n      \n      const mockAST = { type: 'program' };\n      mockParser.parseFile.mockResolvedValue(mockAST as any);\n      \n      mockExtractor.extractIntent.mockResolvedValue({} as any);\n      mockExtractor.analyzeActualTest.mockResolvedValue({} as any);\n      mockExtractor.evaluateRealization.mockResolvedValue({\n        gaps: [],\n        realizationScore: 100,\n        riskLevel: 'minimal'\n      } as any);\n      \n      const mockHTML = '<!DOCTYPE html><html>...</html>';\n      mockReporter.generateHTMLReport.mockReturnValue(mockHTML);\n      \n      const writeFileSyncSpy = fs.writeFileSync as jest.Mock;\n      \n      // Act\n      await command.execute(options);\n      \n      // Assert\n      expect(mockReporter.generateHTMLReport).toHaveBeenCalled();\n      expect(writeFileSyncSpy).toHaveBeenCalledWith('report.html', mockHTML);\n    });\n\n    it('エラーが発生した場合、適切にエラーハンドリングする', async () => {\n      // Arrange\n      const options = {\n        path: '/invalid/path',\n        format: 'text' as const\n      };\n      \n      (fs.existsSync as jest.Mock).mockReturnValue(false);\n      \n      // Act & Assert\n      await expect(command.execute(options)).rejects.toThrow('指定されたパスが存在しません');\n    });\n\n    it('verboseオプションで詳細情報を出力する', async () => {\n      // Arrange\n      const options = {\n        path: '/test/project',\n        format: 'text' as const,\n        verbose: true\n      };\n      \n      // 基本的なモックセットアップ\n      (fs.statSync as jest.Mock).mockReturnValue({ isDirectory: () => true });\n      (fs.existsSync as jest.Mock).mockReturnValue(true);\n      jest.spyOn(command as any, 'findTestFiles').mockResolvedValue(['test.test.ts']);\n      \n      mockParser.parseFile.mockResolvedValue({ type: 'program' } as any);\n      mockExtractor.extractIntent.mockResolvedValue({} as any);\n      mockExtractor.analyzeActualTest.mockResolvedValue({} as any);\n      mockExtractor.evaluateRealization.mockResolvedValue({\n        gaps: [],\n        realizationScore: 100,\n        riskLevel: 'minimal'\n      } as any);\n      \n      const consoleLogSpy = jest.spyOn(console, 'log').mockImplementation();\n      \n      // Act\n      await command.execute(options);\n      \n      // Assert\n      const logs = consoleLogSpy.mock.calls.map(call => call[0]);\n      expect(logs.some(log => log.includes('分析中:'))).toBeTruthy();\n      expect(logs.some(log => log.includes('ファイル発見:'))).toBeTruthy();\n      \n      consoleLogSpy.mockRestore();\n    });\n\n    describe('Phase 2 高度な分析オプション', () => {\n      it('--with-typesオプションで型情報を使った分析を実行する', async () => {\n        // Arrange\n        const options = {\n          path: '/test/project',\n          format: 'text' as const,\n          withTypes: true\n        };\n        \n        (fs.statSync as jest.Mock).mockReturnValue({ isDirectory: () => true });\n        (fs.existsSync as jest.Mock).mockReturnValue(true);\n        jest.spyOn(command as any, 'findTestFiles').mockResolvedValue(['test.test.ts']);\n        \n        mockParser.parseFile.mockResolvedValue({ type: 'program' } as any);\n        mockExtractor.extractIntent.mockResolvedValue({} as any);\n        mockExtractor.analyzeActualTest.mockResolvedValue({} as any);\n        \n        // evaluateRealizationWithTypeInfoのモック\n        mockExtractor.evaluateRealizationWithTypeInfo = jest.fn().mockResolvedValue({\n          gaps: [],\n          realizationScore: 95,\n          riskLevel: 'minimal',\n          domainRelevance: { domain: 'user-management', confidence: 0.9 },\n          businessImportance: 'high'\n        });\n        \n        // TypeScriptAnalyzerのモック\n        const mockTsAnalyzer = {\n          initialize: jest.fn().mockResolvedValue(undefined),\n          getFileTypeInfo: jest.fn().mockResolvedValue(new Map([\n            ['testVar', { typeName: 'string', isPrimitive: true }]\n          ]))\n        };\n        (TypeScriptAnalyzer as jest.MockedClass<typeof TypeScriptAnalyzer>).mockImplementation(() => mockTsAnalyzer as any);\n        \n        // fs/promisesのaccessをモック（tsconfig.json検索用）\n        (fsPromises.access as jest.Mock).mockRejectedValue(new Error('File not found'));\n        \n        const consoleLogSpy = jest.spyOn(console, 'log').mockImplementation();\n        \n        // Act\n        await command.execute(options);\n        \n        // Assert\n        expect(mockExtractor.evaluateRealizationWithTypeInfo).toHaveBeenCalled();\n        \n        consoleLogSpy.mockRestore();\n      });\n\n      it('--with-domainオプションでドメイン推論を含む分析を実行する', async () => {\n        // Arrange\n        const options = {\n          path: '/test/project',\n          format: 'text' as const,\n          withDomain: true\n        };\n        \n        (fs.statSync as jest.Mock).mockReturnValue({ isDirectory: () => true });\n        (fs.existsSync as jest.Mock).mockReturnValue(true);\n        jest.spyOn(command as any, 'findTestFiles').mockResolvedValue(['test.test.ts']);\n        \n        mockParser.parseFile.mockResolvedValue({ type: 'program' } as any);\n        mockExtractor.extractIntent.mockResolvedValue({} as any);\n        mockExtractor.analyzeActualTest.mockResolvedValue({} as any);\n        mockExtractor.evaluateRealization.mockResolvedValue({\n          gaps: [],\n          realizationScore: 90,\n          riskLevel: 'low'\n        } as any);\n        \n        // ドメイン推論結果を含むレポートが生成されることを確認\n        mockReporter.generateMarkdownReport = jest.fn().mockImplementation(results => {\n          return results.some((r: any) => r.domainRelevance) \n            ? '# レポート（ドメイン分析付き）' \n            : '# 通常レポート';\n        });\n        \n        const consoleLogSpy = jest.spyOn(console, 'log').mockImplementation();\n        \n        // Act\n        await command.execute(options);\n        \n        // Assert\n        const output = consoleLogSpy.mock.calls[0][0];\n        expect(output).toContain('ドメイン分析付き');\n        \n        consoleLogSpy.mockRestore();\n      });\n    });\n  });\n\n  describe('findTestFiles', () => {\n    it('テストファイルパターンにマッチするファイルを検索する', async () => {\n      // privateメソッドのテストのため、一時的にpublicとしてアクセス\n      const findTestFiles = (command as any).findTestFiles.bind(command);\n      \n      // ファイルシステムのモック\n      (fs.statSync as jest.Mock).mockReturnValue({ isDirectory: () => true });\n      \n      // globのモック\n      (glob as unknown as jest.Mock).mockImplementation((pattern: string) => {\n        // パターンに応じてマッチするファイルを返す\n        if (pattern.includes('.test.')) {\n          return Promise.resolve(['test/example.test.ts']);\n        } else if (pattern.includes('.spec.')) {\n          return Promise.resolve(['test/sample.spec.js']);\n        } else if (pattern.includes('__tests__')) {\n          return Promise.resolve(['__tests__/unit.test.tsx']);\n        } else {\n          return Promise.resolve([]);\n        }\n      });\n      \n      // Act\n      const result = await findTestFiles('/project');\n      \n      // Assert\n      expect(result).toEqual([\n        '/project/test/example.test.ts',\n        '/project/test/sample.spec.js',\n        '/project/__tests__/unit.test.tsx'\n      ]);\n    });\n  });\n});"],"version":3}