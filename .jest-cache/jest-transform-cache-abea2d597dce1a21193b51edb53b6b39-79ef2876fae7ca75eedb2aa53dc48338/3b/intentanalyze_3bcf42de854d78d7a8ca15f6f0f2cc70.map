{"file":"/Users/sasakama/Projects/Rimor/src/cli/commands/intent-analyze.ts","mappings":"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","names":[],"sources":["/Users/sasakama/Projects/Rimor/src/cli/commands/intent-analyze.ts"],"sourcesContent":["/**\n * Intent Analyze Command\n * v0.9.0 - テスト意図実現度監査のCLIコマンド\n * TDD Green Phase - テストを通す最小限の実装\n */\n\nimport { CoreTypes, TypeGuards, TypeUtils } from '../../core/types/core-definitions';\nimport { TreeSitterParser } from '../../intent-analysis/TreeSitterParser';\nimport { TestIntentExtractor } from '../../intent-analysis/TestIntentExtractor';\nimport { TestIntentReporter } from '../../intent-analysis/TestIntentReporter';\nimport { TestRealizationResult, IntentRiskLevel } from '../../intent-analysis/ITestIntentAnalyzer';\nimport { TypeScriptAnalyzer } from '../../intent-analysis/TypeScriptAnalyzer';\nimport { DomainInferenceEngine } from '../../intent-analysis/DomainInferenceEngine';\nimport { BusinessLogicMapper } from '../../intent-analysis/BusinessLogicMapper';\nimport * as fs from 'fs/promises';\nimport * as fsSync from 'fs';\nimport * as path from 'path';\nimport { glob } from 'glob';\nimport { Worker } from 'worker_threads';\nimport * as os from 'os';\n\nexport interface IntentAnalyzeOptions {\n  path: string;\n  format?: 'text' | 'json' | 'html';\n  verbose?: boolean;\n  output?: string;\n  parallel?: boolean;\n  maxWorkers?: number;\n  // Phase 2 高度な分析オプション\n  withTypes?: boolean;    // 型情報を使った分析\n  withDomain?: boolean;   // ドメイン推論を含む分析\n  withBusiness?: boolean; // ビジネスロジックマッピングを含む分析\n}\n\n/**\n * テスト意図分析コマンド\n * KISS原則: シンプルなコマンド構造から開始\n */\nexport class IntentAnalyzeCommand {\n  private parser: TreeSitterParser;\n  private extractor: TestIntentExtractor;\n  private reporter: TestIntentReporter;\n  // Phase 2コンポーネント\n  private tsAnalyzer?: TypeScriptAnalyzer;\n  private domainEngine?: DomainInferenceEngine;\n  private businessMapper?: BusinessLogicMapper;\n\n  constructor() {\n    this.parser = TreeSitterParser.getInstance();\n    this.extractor = new TestIntentExtractor(this.parser);\n    this.reporter = new TestIntentReporter();\n  }\n\n  /**\n   * コマンドを実行\n   * YAGNI原則: 必要最小限の実装\n   */\n  async execute(options: IntentAnalyzeOptions): Promise<void> {\n    // パスの存在確認\n    if (!fsSync.existsSync(options.path)) {\n      throw new Error('指定されたパスが存在しません');\n    }\n\n    // 詳細ログ\n    if (options.verbose) {\n      console.log(`分析中: ${options.path}`);\n    }\n\n    // テストファイルの検索\n    const testFiles = await this.findTestFiles(options.path);\n    \n    if (options.verbose) {\n      console.log(`ファイル発見: ${testFiles.length}件`);\n    }\n\n    // Phase 2コンポーネントの初期化（必要な場合）\n    if (options.withTypes || options.withDomain || options.withBusiness) {\n      await this.initializePhase2Components(options);\n    }\n\n    // 各ファイルを分析\n    let results: TestRealizationResult[] = [];\n    \n    if (options.parallel) {\n      // 並列処理\n      if (options.verbose) {\n        console.log(`並列処理モード: ${options.maxWorkers || os.cpus().length} ワーカー`);\n      }\n      results = await this.analyzeInParallel(testFiles, options);\n    } else {\n      // 逐次処理\n      for (const file of testFiles) {\n        if (options.verbose) {\n          console.log(`分析中: ${file}`);\n        }\n        \n        // 高度な分析を実行するか通常の分析を実行\n        const result = await this.analyzeFile(file, options);\n        results.push(result);\n      }\n    }\n\n    // レポート生成と出力\n    this.outputResults(results, options);\n  }\n\n  /**\n   * 結果を出力\n   * DRY原則: 出力ロジックの共通化\n   */\n  private outputResults(results: TestRealizationResult[], options: IntentAnalyzeOptions): void {\n    const format = options.format || 'text';\n    \n    switch (format) {\n      case 'json':\n        const jsonOutput = {\n          results,\n          summary: this.reporter.generateSummary(results),\n          totalFiles: results.length,\n          totalTests: results.reduce((sum, r) => sum + (r.actual?.assertions?.length || 0), 0),\n          averageRealizationScore: results.reduce((sum, r) => sum + r.realizationScore, 0) / results.length,\n          highRiskTests: results.filter(r => r.riskLevel === IntentRiskLevel.HIGH || r.riskLevel === IntentRiskLevel.CRITICAL).length\n        };\n        \n        if (options.output) {\n          fsSync.writeFileSync(options.output, JSON.stringify(jsonOutput, null, 2));\n        } else {\n          console.log(JSON.stringify(jsonOutput, null, 2));\n        }\n        break;\n        \n      case 'html':\n        const html = this.reporter.generateHTMLReport(results);\n        if (options.output) {\n          fsSync.writeFileSync(options.output, html);\n        } else {\n          console.log(html);\n        }\n        break;\n        \n      case 'text':\n      default:\n        const markdown = this.reporter.generateMarkdownReport(results);\n        console.log(markdown);\n        break;\n    }\n  }\n\n  /**\n   * テストファイルを検索\n   * KISS原則: 基本的なパターンマッチング\n   */\n  private async findTestFiles(targetPath: string): Promise<string[]> {\n    const stats = fsSync.statSync(targetPath);\n    \n    if (stats.isDirectory()) {\n      // ディレクトリの場合、テストファイルパターンで検索\n      const patterns = [\n        '**/*.test.{js,jsx,ts,tsx}',\n        '**/*.spec.{js,jsx,ts,tsx}',\n        '**/__tests__/**/*.{js,jsx,ts,tsx}'\n      ];\n      \n      const files: string[] = [];\n      for (const pattern of patterns) {\n        const matches = await glob(pattern, {\n          cwd: targetPath,\n          ignore: ['**/node_modules/**', '**/dist/**', '**/build/**']\n        });\n        files.push(...matches.map(f => path.join(targetPath, f)));\n      }\n      \n      return files;\n    } else {\n      // ファイルの場合、そのまま返す\n      return [targetPath];\n    }\n  }\n\n  /**\n   * 並列処理でファイルを分析\n   * YAGNI原則: 必要最小限の並列処理実装\n   */\n  private async analyzeInParallel(\n    files: string[], \n    options: IntentAnalyzeOptions\n  ): Promise<TestRealizationResult[]> {\n    const workerCount = options.maxWorkers || os.cpus().length;\n    const chunkSize = Math.ceil(files.length / workerCount);\n    const chunks: string[][] = [];\n    \n    // ファイルをチャンクに分割\n    for (let i = 0; i < files.length; i += chunkSize) {\n      chunks.push(files.slice(i, i + chunkSize));\n    }\n    \n    // 各チャンクをワーカーで処理\n    const promises = chunks.map((chunk, index) => {\n      return new Promise<TestRealizationResult[]>((resolve, reject) => {\n        // 開発環境（Jest）とビルド環境の両方に対応\n        const isTestEnv = process.env.NODE_ENV === 'test' || process.env.JEST_WORKER_ID;\n        const workerFile = isTestEnv ? 'analysis-worker.ts' : 'analysis-worker.js';\n        const workerPath = path.join(__dirname, '../../intent-analysis/workers', workerFile);\n        // Worker の作成\n        const worker = new Worker(workerPath, {\n          workerData: { files: chunk }\n        });\n        \n        if (options.verbose) {\n          console.log(`ワーカー ${index + 1} 開始: ${chunk.length} ファイル`);\n        }\n        \n        worker.on('message', (result: unknown) => {\n          const workerResult = result as any;\n          if (workerResult && workerResult.error) {\n            reject(new Error(workerResult.error));\n          } else {\n            if (options.verbose) {\n              console.log(`ワーカー ${index + 1} 完了`);\n            }\n            resolve(workerResult && workerResult.results ? workerResult.results : []);\n          }\n        });\n        \n        worker.on('error', reject);\n        worker.on('exit', (code) => {\n          if (code !== 0) {\n            reject(new Error(`ワーカーが異常終了しました: ${code}`));\n          }\n        });\n      });\n    });\n    \n    // すべてのワーカーの結果を待機\n    const results = await Promise.all(promises);\n    \n    // 結果をフラット化\n    return results.flat();\n  }\n\n  /**\n   * globパターンでファイルを検索（モック用）\n   */\n  private async glob(pattern: string): Promise<string[]> {\n    // テスト用のメソッド（実際にはglobライブラリを使用）\n    return glob(pattern, { cwd: process.cwd() });\n  }\n\n  /**\n   * Phase 2コンポーネントの初期化\n   * YAGNI原則: 必要なコンポーネントのみ初期化\n   */\n  private async initializePhase2Components(options: IntentAnalyzeOptions): Promise<void> {\n    if (options.withTypes || options.withDomain || options.withBusiness) {\n      this.tsAnalyzer = new TypeScriptAnalyzer();\n      \n      // TypeScriptプロジェクトの設定ファイルを探す\n      const tsconfigPath = await this.findTsConfig(options.path);\n      if (tsconfigPath && options.verbose) {\n        console.log(`TypeScript設定ファイル: ${tsconfigPath}`);\n      }\n      \n      // TypeScript Analyzerを初期化\n      if (tsconfigPath) {\n        await this.tsAnalyzer.initialize(tsconfigPath);\n      }\n    }\n    \n    if (options.withDomain) {\n      this.domainEngine = new DomainInferenceEngine();\n      if (options.verbose) {\n        console.log('ドメイン推論エンジンを初期化しました');\n      }\n    }\n    \n    if (options.withBusiness) {\n      this.businessMapper = new BusinessLogicMapper();\n      if (options.verbose) {\n        console.log('ビジネスロジックマッパーを初期化しました');\n      }\n    }\n  }\n\n  /**\n   * tsconfig.jsonを検索\n   * DRY原則: ファイル検索ロジックの共通化\n   */\n  private async findTsConfig(startPath: string): Promise<string | null> {\n    let currentPath = path.resolve(startPath);\n    \n    while (currentPath !== path.parse(currentPath).root) {\n      const tsconfigPath = path.join(currentPath, 'tsconfig.json');\n      \n      try {\n        await fs.access(tsconfigPath);\n        return tsconfigPath;\n      } catch {\n        // ファイルが存在しない場合は親ディレクトリを検索\n      }\n      \n      currentPath = path.dirname(currentPath);\n    }\n    \n    return null;\n  }\n\n  /**\n   * ファイルを分析\n   * SOLID原則: 単一責任の原則（高度な分析と通常分析の分離）\n   */\n  private async analyzeFile(file: string, options: IntentAnalyzeOptions): Promise<TestRealizationResult> {\n    // ASTを生成\n    const ast = await this.parser.parseFile(file);\n    \n    // 意図を抽出\n    const intent = await this.extractor.extractIntent(file, ast);\n    \n    // 実際のテストを分析\n    const actual = await this.extractor.analyzeActualTest(file, ast);\n    \n    let result: TestRealizationResult;\n    \n    // Phase 2の高度な分析を実行\n    if (options.withTypes && this.tsAnalyzer) {\n      // 型情報を取得\n      const typeInfo = await this.tsAnalyzer.getFileTypeInfo(file);\n      \n      // 型情報を使った評価\n      result = await this.extractor.evaluateRealizationWithTypeInfo(intent, actual, typeInfo);\n      \n      if (options.verbose) {\n        console.log(`  型情報を使った分析完了: ${file}`);\n      }\n    } else if (options.withBusiness && this.businessMapper && this.tsAnalyzer) {\n      // ビジネスロジックマッピング\n      const callGraph = await this.tsAnalyzer.analyzeCallGraph(file);\n      result = await (this.extractor as any).analyzeWithBusinessContext(file, ast, callGraph);\n      \n      if (options.verbose) {\n        console.log(`  ビジネスロジック分析完了: ${file}`);\n      }\n    } else {\n      // 通常の評価\n      result = await this.extractor.evaluateRealization(intent, actual);\n    }\n    \n    // ファイル情報を追加\n    result.file = file;\n    result.description = intent.description;\n    \n    // ドメイン推論を追加（オプション）\n    if (options.withDomain && this.domainEngine && result) {\n      const domainInfo = await this.enhanceWithDomainInfo(result);\n      Object.assign(result, domainInfo);\n    }\n    \n    return result;\n  }\n\n  /**\n   * ドメイン情報で結果を拡張\n   * KISS原則: シンプルなドメイン情報の追加\n   */\n  private async enhanceWithDomainInfo(result: TestRealizationResult): Promise<any> {\n    // 既存の結果にドメイン情報を追加\n    return {\n      domainRelevance: {\n        domain: 'inferred-domain',\n        confidence: 0.8,\n        businessImportance: 'medium'\n      }\n    };\n  }\n}"],"version":3}