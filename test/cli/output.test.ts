import { OutputFormatter } from '../../src/cli/output';
import chalk from 'chalk';

// chalk„ÅÆËâ≤„ÇíÁÑ°ÂäπÂåñ„Åó„Å¶„ÉÜ„Çπ„Éà„Åó„ÇÑ„Åô„Åè„Åô„Çã
chalk.level = 0;

describe('OutputFormatter', () => {
  test('header should format title with emoji and line', () => {
    const result = OutputFormatter.header('Test Title');
    expect(result).toContain('üîç Test Title');
    expect(result).toContain('‚îÅ');
  });

  test('success should format with checkmark', () => {
    const result = OutputFormatter.success('Task completed');
    expect(result).toContain('‚úÖ Task completed');
  });

  test('error should format with cross mark', () => {
    const result = OutputFormatter.error('Something went wrong');
    expect(result).toContain('‚ùå Something went wrong');
  });

  test('summary should calculate coverage correctly', () => {
    const result = OutputFormatter.summary(10, 3, 150);
    expect(result).toContain('ÂàÜÊûêÂØæË±°: 10„Éï„Ç°„Ç§„É´');
    expect(result).toContain('„ÉÜ„Çπ„Éà‰∏çË∂≥: 3‰ª∂');
    expect(result).toContain('„ÉÜ„Çπ„Éà„Ç´„Éê„É¨„ÉÉ„Ç∏: 70%');
    expect(result).toContain('ÂÆüË°åÊôÇÈñì: 150ms');
  });

  test('issueList should handle no issues', () => {
    const result = OutputFormatter.issueList([]);
    expect(result).toContain('ÂïèÈ°å„ÅØË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„ÅüÔºÅ');
  });

  test('issueList should format multiple issues', () => {
    const issues = [
      { severity: 'error', message: 'Error 1' },
      { severity: 'warning', message: 'Warning 1' }
    ];
    const result = OutputFormatter.issueList(issues);
    expect(result).toContain('1. ‚ùå Error 1');
    expect(result).toContain('2. ‚ö†Ô∏è Warning 1');
  });
});