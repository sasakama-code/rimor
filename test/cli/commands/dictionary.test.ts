import * as fs from 'fs';
import * as path from 'path';
import { DictionaryCommand, registerDictionaryCommands } from '../../../src/cli/commands/dictionary';
import { DomainDictionaryManager } from '../../../src/dictionary/core/dictionary';
import { DomainTermManager } from '../../../src/dictionary/core/term';
import { BusinessRuleManager } from '../../../src/dictionary/core/rule';
import { LinterKnowledgeExtractor } from '../../../src/dictionary/extractors/linter';
import { ContextAnalyzer } from '../../../src/dictionary/context/analyzer';
import { OutputFormatter } from '../../../src/cli/output';
import { errorHandler } from '../../../src/utils/errorHandler';

// „É¢„ÉÉ„ÇØË®≠ÂÆö
jest.mock('fs');
jest.mock('path');
jest.mock('../../../src/dictionary/core/dictionary');
jest.mock('../../../src/dictionary/core/term');
jest.mock('../../../src/dictionary/core/rule');
jest.mock('../../../src/dictionary/extractors/linter');
jest.mock('../../../src/dictionary/context/analyzer');
jest.mock('../../../src/cli/output');
jest.mock('../../../src/utils/errorHandler');

const mockFs = fs as jest.Mocked<typeof fs>;
const mockPath = path as jest.Mocked<typeof path>;
const mockErrorHandler = errorHandler as jest.Mocked<typeof errorHandler>;

describe('DictionaryCommand', () => {
  let dictionaryCommand: DictionaryCommand;
  let mockDictionaryManager: any;
  let processExitSpy: jest.SpyInstance;
  let consoleSpy: jest.SpyInstance;

  beforeEach(() => {
    jest.clearAllMocks();
    
    // DomainDictionaryManager„ÅÆ„É¢„ÉÉ„ÇØ
    mockDictionaryManager = {
      addTerm: jest.fn(),
      addBusinessRule: jest.fn(),
      getDictionary: jest.fn(),
      evaluateQuality: jest.fn(),
      getStatistics: jest.fn(),
      searchTerms: jest.fn()
    };
    
    (DomainDictionaryManager as jest.MockedClass<typeof DomainDictionaryManager>)
      .mockImplementation(() => mockDictionaryManager);
    
    // path„ÅÆ„É¢„ÉÉ„ÇØ
    mockPath.join.mockImplementation((...args) => args.join('/'));
    mockPath.dirname.mockImplementation((path) => path.substring(0, path.lastIndexOf('/')));
    mockPath.basename.mockImplementation((path) => path.substring(path.lastIndexOf('/') + 1));
    
    // process.cwd()„ÅÆ„É¢„ÉÉ„ÇØ
    jest.spyOn(process, 'cwd').mockReturnValue('/test/project');
    
    // process.exit„ÅÆ„É¢„ÉÉ„ÇØ
    processExitSpy = jest.spyOn(process, 'exit').mockImplementation();
    
    // console„ÅÆ„É¢„ÉÉ„ÇØ
    consoleSpy = jest.spyOn(console, 'log').mockImplementation();
    
    // OutputFormatter„ÅÆ„É¢„ÉÉ„ÇØ
    (OutputFormatter.header as jest.Mock).mockReturnValue('=== HEADER ===');
    (OutputFormatter.info as jest.Mock).mockImplementation((text) => `INFO: ${text}`);
    (OutputFormatter.success as jest.Mock).mockImplementation((text) => `SUCCESS: ${text}`);
    (OutputFormatter.warning as jest.Mock).mockImplementation((text) => `WARNING: ${text}`);
    (OutputFormatter.error as jest.Mock).mockImplementation((text) => `ERROR: ${text}`);
    
    dictionaryCommand = new DictionaryCommand('/test/project');
  });

  afterEach(() => {
    processExitSpy.mockRestore();
    consoleSpy.mockRestore();
  });

  describe('constructor', () => {
    test('„Éó„É≠„Ç∏„Çß„ÇØ„Éà„É´„Éº„Éà„ÅåÊ≠£„Åó„ÅèË®≠ÂÆö„Åï„Çå„Çã', () => {
      const command = new DictionaryCommand('/custom/path');
      expect(DomainDictionaryManager).toHaveBeenCalled();
    });

    test('„Éá„Éï„Ç©„É´„Éà„Åßprocess.cwd()„Çí‰ΩøÁî®„Åô„Çã', () => {
      const processCwdSpy = jest.spyOn(process, 'cwd').mockReturnValue('/default/path');
      new DictionaryCommand();
      expect(processCwdSpy).toHaveBeenCalled();
      processCwdSpy.mockRestore();
    });
  });

  describe('init', () => {
    beforeEach(() => {
      jest.spyOn(dictionaryCommand as any, 'promptDomain').mockResolvedValue('test-domain');
      jest.spyOn(dictionaryCommand as any, 'extractFromExistingConfigs').mockResolvedValue(undefined);
      jest.spyOn(dictionaryCommand as any, 'runInteractiveSetup').mockResolvedValue(undefined);
      jest.spyOn(dictionaryCommand as any, 'saveDictionary').mockResolvedValue(undefined);
      jest.spyOn(dictionaryCommand as any, 'getDictionaryPath').mockReturnValue('/test/project/.rimor/dictionary.json');
      jest.spyOn(dictionaryCommand as any, 'showInitializationSummary').mockImplementation(() => {});
    });

    test('Âü∫Êú¨ÁöÑ„Å™ÂàùÊúüÂåñ„ÅåÂÆüË°å„Åï„Çå„Çã', async () => {
      await dictionaryCommand.init({});
      
      expect(OutputFormatter.header).toHaveBeenCalledWith('üßô Rimor„Éâ„É°„Ç§„É≥ËæûÊõ∏ÂàùÊúüÂåñ„Ç¶„Ç£„Ç∂„Éº„Éâ');
      expect(DomainDictionaryManager).toHaveBeenCalledWith(
        expect.objectContaining({
          domain: 'test-domain',
          language: 'ja',
          version: '1.0.0'
        })
      );
    });

    test('„Éâ„É°„Ç§„É≥„Ç™„Éó„Ç∑„Éß„É≥„ÅåÊåáÂÆö„Åï„Çå„ÅüÂ†¥Âêà„ÄÅ„Éó„É≠„É≥„Éó„Éà„Çí„Çπ„Ç≠„ÉÉ„Éó', async () => {
      await dictionaryCommand.init({ domain: 'custom-domain' });
      
      // „Éâ„É°„Ç§„É≥„ÅåÊåáÂÆö„Åï„Çå„ÅüÂ†¥Âêà„ÄÅÂàùÊúüÂåñ„ÅåÊ≠£Â∏∏„Å´ÂÆå‰∫Ü„Åô„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
      expect(dictionaryCommand).toBeDefined();
    });

    test('fromLinters„Ç™„Éó„Ç∑„Éß„É≥„Ååfalse„ÅÆÂ†¥Âêà„ÄÅÁü•Ë≠òÊäΩÂá∫„Çí„Çπ„Ç≠„ÉÉ„Éó', async () => {
      await dictionaryCommand.init({ fromLinters: false });
      
      // LinterKnowledgeExtractor„ÅåÂëº„Å∞„Çå„Å™„ÅÑ„Åì„Å®„ÇíÁ¢∫Ë™ç
      expect(LinterKnowledgeExtractor).not.toHaveBeenCalled();
    });

    test('interactive„Ç™„Éó„Ç∑„Éß„É≥„Ååtrue„ÅÆÂ†¥Âêà„ÄÅ„Ç§„É≥„Çø„É©„ÇØ„ÉÜ„Ç£„Éñ„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó„ÇíÂÆüË°å', async () => {
      await dictionaryCommand.init({ interactive: true });
      
      expect(dictionaryCommand as any).toHaveProperty('runInteractiveSetup');
    });

    test('„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„ÅüÂ†¥Âêà„ÄÅÈÅ©Âàá„Å´„Éè„É≥„Éâ„É™„É≥„Ç∞„Åï„Çå„Çã', async () => {
      const testError = new Error('Init failed');
      jest.spyOn(dictionaryCommand as any, 'promptDomain').mockRejectedValue(testError);
      
      await dictionaryCommand.init({});
      
      expect(mockErrorHandler.handleError).toHaveBeenCalledWith(
        testError,
        expect.any(String),
        'ËæûÊõ∏ÂàùÊúüÂåñ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü'
      );
      // process.exit is not called in test environment
    });
  });

  describe('addTerm', () => {
    const mockTerm = {
      id: 'test-term',
      term: 'TestTerm',
      definition: 'Test definition',
      category: 'test',
      importance: 'medium' as const,
      aliases: [],
      examples: [],
      relatedPatterns: [],
      testRequirements: []
    };

    beforeEach(() => {
      jest.spyOn(dictionaryCommand as any, 'loadDictionary').mockResolvedValue(undefined);
      jest.spyOn(dictionaryCommand as any, 'generateTermId').mockReturnValue('test-term');
      jest.spyOn(dictionaryCommand as any, 'promptTermDetails').mockResolvedValue(mockTerm);
      jest.spyOn(dictionaryCommand as any, 'saveDictionary').mockResolvedValue(undefined);
      jest.spyOn(dictionaryCommand as any, 'showTermSummary').mockImplementation(() => {});
      
      (DomainTermManager.createTerm as jest.Mock).mockReturnValue(mockTerm);
    });

    test('Âü∫Êú¨ÁöÑ„Å™Áî®Ë™ûËøΩÂä†„ÅåÂÆüË°å„Åï„Çå„Çã', async () => {
      await dictionaryCommand.addTerm({
        term: 'TestTerm',
        definition: 'Test definition'
      });
      
      expect(DomainTermManager.createTerm).toHaveBeenCalledWith(
        expect.objectContaining({
          term: 'TestTerm',
          definition: 'Test definition'
        })
      );
      expect(mockDictionaryManager.addTerm).toHaveBeenCalledWith(mockTerm);
      expect(OutputFormatter.success).toHaveBeenCalledWith(
        expect.stringContaining('Áî®Ë™û„ÄåTestTerm„Äç„ÇíËøΩÂä†„Åó„Åæ„Åó„Åü')
      );
    });

    test('„Ç™„Éó„Ç∑„Éß„É≥„Éë„É©„É°„Éº„Çø„ÅåÊ≠£„Åó„ÅèÈÅ©Áî®„Åï„Çå„Çã', async () => {
      await dictionaryCommand.addTerm({
        term: 'TestTerm',
        definition: 'Test definition',
        category: 'business',
        importance: 'high',
        aliases: ['test', 'term']
      });
      
      expect(DomainTermManager.createTerm).toHaveBeenCalledWith(
        expect.objectContaining({
          category: 'business',
          importance: 'high',
          aliases: ['test', 'term']
        })
      );
    });

    test('interactive„É¢„Éº„Éâ„ÅßË©≥Á¥∞ÂÖ•Âäõ„ÅåÂÆüË°å„Åï„Çå„Çã', async () => {
      await dictionaryCommand.addTerm({
        term: 'TestTerm',
        definition: 'Test definition',
        interactive: true
      });
      
      expect(dictionaryCommand as any).toHaveProperty('promptTermDetails');
    });

    test('„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„ÅüÂ†¥Âêà„ÄÅÈÅ©Âàá„Å´„Éè„É≥„Éâ„É™„É≥„Ç∞„Åï„Çå„Çã', async () => {
      const testError = new Error('Add term failed');
      jest.spyOn(dictionaryCommand as any, 'loadDictionary').mockRejectedValue(testError);
      
      await dictionaryCommand.addTerm({
        term: 'TestTerm',
        definition: 'Test definition'
      });
      
      expect(mockErrorHandler.handleError).toHaveBeenCalledWith(
        testError,
        expect.any(String),
        'Áî®Ë™ûËøΩÂä†„Å´Â§±Êïó„Åó„Åæ„Åó„Åü'
      );
      // process.exit is not called in test environment
    });
  });

  describe('addRule', () => {
    const mockRule = {
      id: 'test-rule',
      name: 'TestRule',
      description: 'Test rule description',
      domain: 'test',
      condition: {
        type: 'code-pattern' as const,
        pattern: 'test.*',
        scope: 'file' as const
      },
      requirements: [],
      priority: 100
    };

    beforeEach(() => {
      jest.spyOn(dictionaryCommand as any, 'loadDictionary').mockResolvedValue(undefined);
      jest.spyOn(dictionaryCommand as any, 'generateRuleId').mockReturnValue('test-rule');
      jest.spyOn(dictionaryCommand as any, 'saveDictionary').mockResolvedValue(undefined);
      jest.spyOn(dictionaryCommand as any, 'showRuleSummary').mockImplementation(() => {});
      
      mockDictionaryManager.getDictionary.mockReturnValue({ domain: 'test' });
      (BusinessRuleManager.createRule as jest.Mock).mockReturnValue(mockRule);
    });

    test('Âü∫Êú¨ÁöÑ„Å™„É´„Éº„É´ËøΩÂä†„ÅåÂÆüË°å„Åï„Çå„Çã', async () => {
      await dictionaryCommand.addRule({
        name: 'TestRule',
        description: 'Test rule description',
        pattern: 'test.*'
      });
      
      expect(BusinessRuleManager.createRule).toHaveBeenCalledWith(
        expect.objectContaining({
          name: 'TestRule',
          description: 'Test rule description',
          condition: expect.objectContaining({
            pattern: 'test.*'
          })
        })
      );
      expect(mockDictionaryManager.addBusinessRule).toHaveBeenCalledWith(mockRule);
    });

    test('„Ç™„Éó„Ç∑„Éß„É≥„Éë„É©„É°„Éº„Çø„ÅåÊ≠£„Åó„ÅèÈÅ©Áî®„Åï„Çå„Çã', async () => {
      await dictionaryCommand.addRule({
        name: 'TestRule',
        description: 'Test rule description',
        pattern: 'test.*',
        scope: 'function',
        type: 'function-name',
        priority: 50
      });
      
      expect(BusinessRuleManager.createRule).toHaveBeenCalledWith(
        expect.objectContaining({
          condition: expect.objectContaining({
            type: 'function-name',
            scope: 'function'
          }),
          priority: 50
        })
      );
    });

    test('„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„ÅüÂ†¥Âêà„ÄÅÈÅ©Âàá„Å´„Éè„É≥„Éâ„É™„É≥„Ç∞„Åï„Çå„Çã', async () => {
      const testError = new Error('Add rule failed');
      jest.spyOn(dictionaryCommand as any, 'loadDictionary').mockRejectedValue(testError);
      
      await dictionaryCommand.addRule({
        name: 'TestRule',
        description: 'Test rule description',
        pattern: 'test.*'
      });
      
      expect(mockErrorHandler.handleError).toHaveBeenCalledWith(
        testError,
        expect.any(String),
        '„Éì„Ç∏„Éç„Çπ„É´„Éº„É´ËøΩÂä†„Å´Â§±Êïó„Åó„Åæ„Åó„Åü'
      );
      // process.exit is not called in test environment
    });
  });

  describe('list', () => {
    const mockDictionary = {
      domain: 'test',
      terms: [
        { id: 'term1', term: 'Term1', definition: 'Definition 1', category: 'business', importance: 'high', aliases: [] },
        { id: 'term2', term: 'Term2', definition: 'Definition 2', category: 'technical', importance: 'medium', aliases: ['t2'] }
      ],
      businessRules: [
        { id: 'rule1', name: 'Rule1', description: 'Rule description', condition: { pattern: 'rule.*' }, priority: 100 }
      ]
    };

    beforeEach(() => {
      jest.spyOn(dictionaryCommand as any, 'loadDictionary').mockResolvedValue(undefined);
      jest.spyOn(dictionaryCommand as any, 'displayTerms').mockImplementation(() => {});
      jest.spyOn(dictionaryCommand as any, 'displayRules').mockImplementation(() => {});
      jest.spyOn(dictionaryCommand as any, 'displayStatistics').mockImplementation(() => {});
      jest.spyOn(dictionaryCommand as any, 'outputJson').mockImplementation(() => {});
      
      mockDictionaryManager.getDictionary.mockReturnValue(mockDictionary);
    });

    test('„ÉÜ„Éº„Éñ„É´ÂΩ¢Âºè„ÅßÂÖ®‰ΩìË°®Á§∫', async () => {
      await dictionaryCommand.list({});
      
      expect(OutputFormatter.header).toHaveBeenCalledWith('üìö „Éâ„É°„Ç§„É≥ËæûÊõ∏ÂÜÖÂÆπ (test)');
      expect(dictionaryCommand as any).toHaveProperty('displayTerms');
      expect(dictionaryCommand as any).toHaveProperty('displayRules');
      expect(dictionaryCommand as any).toHaveProperty('displayStatistics');
    });

    test('Áî®Ë™û„ÅÆ„ÅøË°®Á§∫', async () => {
      await dictionaryCommand.list({ type: 'terms' });
      
      // Áî®Ë™û„ÅÆ„Åø„ÅÆË°®Á§∫Âá¶ÁêÜ„ÅåÂÆüË°å„Åï„Çå„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
      expect(mockDictionaryManager.getDictionary).toHaveBeenCalled();
    });

    test('„É´„Éº„É´„ÅÆ„ÅøË°®Á§∫', async () => {
      await dictionaryCommand.list({ type: 'rules' });
      
      // „É´„Éº„É´„ÅÆ„Åø„ÅÆË°®Á§∫Âá¶ÁêÜ„ÅåÂÆüË°å„Åï„Çå„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
      expect(mockDictionaryManager.getDictionary).toHaveBeenCalled();
    });

    test('JSONÂΩ¢Âºè„ÅßÂá∫Âäõ', async () => {
      await dictionaryCommand.list({ format: 'json' });
      
      expect(dictionaryCommand as any).toHaveProperty('outputJson');
    });

    test('„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„ÅüÂ†¥Âêà„ÄÅÈÅ©Âàá„Å´„Éè„É≥„Éâ„É™„É≥„Ç∞„Åï„Çå„Çã', async () => {
      const testError = new Error('List failed');
      jest.spyOn(dictionaryCommand as any, 'loadDictionary').mockRejectedValue(testError);
      
      await dictionaryCommand.list({});
      
      expect(mockErrorHandler.handleError).toHaveBeenCalledWith(
        testError,
        expect.any(String),
        'ËæûÊõ∏‰∏ÄË¶ßË°®Á§∫„Å´Â§±Êïó„Åó„Åæ„Åó„Åü'
      );
      // process.exit is not called in test environment
    });
  });

  describe('validate', () => {
    const mockQualityMetrics = {
      overall: 75.5,
      completeness: 80,
      accuracy: 90,
      consistency: 70,
      coverage: 60
    };

    const mockStatistics = {
      totalTerms: 10,
      totalRules: 5,
      totalRelationships: 3
    };

    beforeEach(() => {
      jest.spyOn(dictionaryCommand as any, 'loadDictionary').mockResolvedValue(undefined);
      jest.spyOn(dictionaryCommand as any, 'displayQualityReport').mockImplementation(() => {});
      jest.spyOn(dictionaryCommand as any, 'displayImprovementSuggestions').mockImplementation(() => {});
      
      mockDictionaryManager.evaluateQuality.mockReturnValue(mockQualityMetrics);
      mockDictionaryManager.getStatistics.mockReturnValue(mockStatistics);
    });

    test('ÂìÅË≥™Ê§úË®º„ÅåÊ≠£Â∏∏„Å´ÂÆüË°å„Åï„Çå„Çã', async () => {
      await dictionaryCommand.validate();
      
      expect(OutputFormatter.header).toHaveBeenCalledWith('üîç „Éâ„É°„Ç§„É≥ËæûÊõ∏ÂìÅË≥™Ê§úË®º');
      expect(mockDictionaryManager.evaluateQuality).toHaveBeenCalled();
      expect(mockDictionaryManager.getStatistics).toHaveBeenCalled();
      expect(OutputFormatter.success).toHaveBeenCalledWith(expect.stringContaining('ËæûÊõ∏„ÅÆÂìÅË≥™„ÅØËâØÂ•Ω„Åß„Åô'));
    });

    test('ÂìÅË≥™„Çπ„Ç≥„Ç¢„Åå‰Ωé„ÅÑÂ†¥Âêà„ÄÅË≠¶Âëä„ÇíË°®Á§∫', async () => {
      mockDictionaryManager.evaluateQuality.mockReturnValue({ ...mockQualityMetrics, overall: 50 });
      
      await dictionaryCommand.validate();
      
      expect(OutputFormatter.warning).toHaveBeenCalledWith(expect.stringContaining('ËæûÊõ∏„ÅÆÂìÅË≥™Âêë‰∏ä„ÅåÊé®Â•®„Åï„Çå„Åæ„Åô'));
      // process.exit is not called in test environment
    });

    test('„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„ÅüÂ†¥Âêà„ÄÅÈÅ©Âàá„Å´„Éè„É≥„Éâ„É™„É≥„Ç∞„Åï„Çå„Çã', async () => {
      const testError = new Error('Validate failed');
      jest.spyOn(dictionaryCommand as any, 'loadDictionary').mockRejectedValue(testError);
      
      await dictionaryCommand.validate();
      
      expect(mockErrorHandler.handleError).toHaveBeenCalledWith(
        testError,
        expect.any(String),
        'ËæûÊõ∏Ê§úË®º„Å´Â§±Êïó„Åó„Åæ„Åó„Åü'
      );
      // process.exit is not called in test environment
    });
  });

  describe('search', () => {
    const mockSearchResults = [
      {
        id: 'term1',
        term: 'SearchTerm1',
        definition: 'First search result',
        category: 'business',
        importance: 'high',
        aliases: ['st1']
      },
      {
        id: 'term2',
        term: 'SearchTerm2',
        definition: 'Second search result',
        category: 'technical',
        importance: 'medium',
        aliases: []
      }
    ];

    beforeEach(() => {
      jest.spyOn(dictionaryCommand as any, 'loadDictionary').mockResolvedValue(undefined);
    });

    test('Ê§úÁ¥¢ÁµêÊûú„ÅåË°®Á§∫„Åï„Çå„Çã', async () => {
      mockDictionaryManager.searchTerms.mockReturnValue(mockSearchResults);
      
      await dictionaryCommand.search('search');
      
      expect(mockDictionaryManager.searchTerms).toHaveBeenCalledWith('search');
      expect(OutputFormatter.header).toHaveBeenCalledWith('üîç Ê§úÁ¥¢ÁµêÊûú: "search"');
      expect(consoleSpy).toHaveBeenCalledWith(expect.stringContaining('2‰ª∂„ÅÆÁî®Ë™û„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åó„Åü'));
    });

    test('Ê§úÁ¥¢ÁµêÊûú„Åå„Å™„ÅÑÂ†¥Âêà„ÄÅË≠¶Âëä„ÇíË°®Á§∫', async () => {
      mockDictionaryManager.searchTerms.mockReturnValue([]);
      
      await dictionaryCommand.search('notfound');
      
      expect(OutputFormatter.warning).toHaveBeenCalledWith(
        expect.stringContaining('„Äånotfound„Äç„Å´‰∏ÄËá¥„Åô„ÇãÁî®Ë™û„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü')
      );
    });

    test('„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„ÅüÂ†¥Âêà„ÄÅÈÅ©Âàá„Å´„Éè„É≥„Éâ„É™„É≥„Ç∞„Åï„Çå„Çã', async () => {
      const testError = new Error('Search failed');
      jest.spyOn(dictionaryCommand as any, 'loadDictionary').mockRejectedValue(testError);
      
      await dictionaryCommand.search('test');
      
      expect(mockErrorHandler.handleError).toHaveBeenCalledWith(
        testError,
        expect.any(String),
        'Áî®Ë™ûÊ§úÁ¥¢„Å´Â§±Êïó„Åó„Åæ„Åó„Åü'
      );
      // process.exit is not called in test environment
    });
  });

  describe('analyze', () => {
    const mockAnalysisResult = {
      qualityScore: 85.5,
      context: {
        domainRelevance: 0.75,
        filePath: '/test/file.ts',
        functions: ['func1', 'func2'],
        classes: ['Class1'],
        imports: ['import1'],
        language: 'typescript'
      },
      relevantTerms: [
        { term: { term: 'Term1' }, relevance: 0.9 },
        { term: { term: 'Term2' }, relevance: 0.7 }
      ],
      applicableRules: [
        { name: 'Rule1' },
        { name: 'Rule2' }
      ],
      requiredTests: [
        { type: 'unit', description: 'Test description 1' },
        { type: 'integration', description: 'Test description 2' }
      ]
    };

    beforeEach(() => {
      jest.spyOn(dictionaryCommand as any, 'loadDictionary').mockResolvedValue(undefined);
      jest.spyOn(dictionaryCommand as any, 'displayAnalysisResults').mockImplementation(() => {});
      jest.spyOn(dictionaryCommand as any, 'saveAnalysisResults').mockResolvedValue(undefined);
      
      mockFs.existsSync.mockReturnValue(true);
      mockFs.readFileSync.mockReturnValue('test code content');
      mockDictionaryManager.getDictionary.mockReturnValue({ domain: 'test' });
      
      const mockAnalyzer = {
        engine: {},
        performContextualAnalysis: jest.fn().mockResolvedValue(mockAnalysisResult),
        analyzeTermRelevance: jest.fn().mockResolvedValue([]),
        identifyApplicableRules: jest.fn().mockReturnValue([]),
        calculateContextualQualityScore: jest.fn().mockReturnValue(85),
        analyzeBatch: jest.fn().mockResolvedValue([]),
        generateAnalysisStatistics: jest.fn().mockReturnValue({
          totalFiles: 0,
          avgQualityScore: 0,
          avgDomainRelevance: 0,
          mostRelevantTerms: [],
          commonRules: [],
          testCoverage: { mustHave: 0, shouldHave: 0, niceToHave: 0 }
        }),
        // „Éó„É©„Ç§„Éô„Éº„Éà„É°„ÇΩ„ÉÉ„Éâ„ÅÆ„É¢„ÉÉ„ÇØÔºà„ÉÜ„Çπ„ÉàÁî®Ôºâ
        extractEvidence: jest.fn().mockReturnValue([]),
        findTermLocations: jest.fn().mockReturnValue([]),
        isRuleApplicableToContext: jest.fn().mockReturnValue(true),
        calculateCodeSimilarity: jest.fn().mockReturnValue(0.5),
        escapeRegex: jest.fn().mockImplementation((text: string) => text),
        createEmptyAnalysis: jest.fn().mockReturnValue(mockAnalysisResult)
      } as any;
      (ContextAnalyzer as jest.MockedClass<typeof ContextAnalyzer>)
        .mockImplementation(() => mockAnalyzer);
    });

    test('„Éï„Ç°„Ç§„É´ÂàÜÊûê„ÅåÊ≠£Â∏∏„Å´ÂÆüË°å„Åï„Çå„Çã', async () => {
      await dictionaryCommand.analyze('/test/file.ts', {});
      
      expect(mockFs.existsSync).toHaveBeenCalledWith('/test/file.ts');
      expect(mockFs.readFileSync).toHaveBeenCalledWith('/test/file.ts', 'utf-8');
      expect(ContextAnalyzer).toHaveBeenCalled();
      expect(OutputFormatter.header).toHaveBeenCalledWith(expect.stringContaining('ÊñáËÑàÁêÜËß£ÂàÜÊûê'));
    });

    test('verbose„Ç™„Éó„Ç∑„Éß„É≥„ÅßË©≥Á¥∞ÂàÜÊûê„ÅåÂÆüË°å„Åï„Çå„Çã', async () => {
      await dictionaryCommand.analyze('/test/file.ts', { verbose: true });
      
      expect(dictionaryCommand as any).toHaveProperty('displayAnalysisResults');
    });

    test('Âá∫Âäõ„Éï„Ç°„Ç§„É´„Ç™„Éó„Ç∑„Éß„É≥„ÅßÁµêÊûú„Åå‰øùÂ≠ò„Åï„Çå„Çã', async () => {
      await dictionaryCommand.analyze('/test/file.ts', { output: '/test/output.json' });
      
      expect(dictionaryCommand as any).toHaveProperty('saveAnalysisResults');
      expect(OutputFormatter.success).toHaveBeenCalledWith(
        expect.stringContaining('ÂàÜÊûêÁµêÊûú„Çí /test/output.json „Å´‰øùÂ≠ò„Åó„Åæ„Åó„Åü')
      );
    });

    test('„Éï„Ç°„Ç§„É´„ÅåÂ≠òÂú®„Åó„Å™„ÅÑÂ†¥Âêà„ÄÅ„Ç®„É©„Éº„ÅåÁô∫Áîü', async () => {
      mockFs.existsSync.mockReturnValue(false);
      
      await dictionaryCommand.analyze('/test/nonexistent.ts', {});
      
      expect(mockErrorHandler.handleError).toHaveBeenCalledWith(
        expect.any(Error),
        expect.any(String),
        '„Ç≥„Éº„ÉâÂàÜÊûê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü'
      );
      // process.exit is not called in test environment
    });
  });

  describe('private methods', () => {
    describe('generateTermId', () => {
      test('Áî®Ë™ûÂêç„Åã„ÇâID„ÇíÁîüÊàê„Åô„Çã', () => {
        const result = (dictionaryCommand as any).generateTermId('Test Term');
        expect(result).toBe('term-test-term');
      });

      test('ÁâπÊÆäÊñáÂ≠ó„ÇíÈÅ©Âàá„Å´Âá¶ÁêÜ„Åô„Çã', () => {
        const result = (dictionaryCommand as any).generateTermId('Test-Term@123!');
        expect(result).toBe('term-test-term-123-');
      });
    });

    describe('generateRuleId', () => {
      test('„É´„Éº„É´Âêç„Åã„ÇâID„ÇíÁîüÊàê„Åô„Çã', () => {
        const result = (dictionaryCommand as any).generateRuleId('Test Rule');
        expect(result).toBe('rule-test-rule');
      });
    });

    describe('getDictionaryPath', () => {
      test('ËæûÊõ∏„Éï„Ç°„Ç§„É´„Éë„Çπ„ÇíÂèñÂæó„Åô„Çã', () => {
        const result = (dictionaryCommand as any).getDictionaryPath();
        expect(result).toBe('/test/project/.rimor/dictionaries/default.yaml');
      });
    });

    describe('loadDictionary', () => {
      test('ËæûÊõ∏„Éï„Ç°„Ç§„É´„ÅåÂ≠òÂú®„Åó„Å™„ÅÑÂ†¥Âêà„ÄÅ„Ç®„É©„Éº„ÅåÁô∫Áîü', async () => {
        mockFs.existsSync.mockReturnValue(false);
        
        await expect((dictionaryCommand as any).loadDictionary()).rejects.toThrow(
          'ËæûÊõ∏„Éï„Ç°„Ç§„É´„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇÂÖà„Å´ `rimor dictionary init` „ÇíÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ'
        );
      });

      test('ËæûÊõ∏„Éï„Ç°„Ç§„É´„ÅåÂ≠òÂú®„Åô„ÇãÂ†¥Âêà„ÄÅÊ≠£Â∏∏„Å´Ë™≠„ÅøËæº„Åæ„Çå„Çã', async () => {
        mockFs.existsSync.mockReturnValue(true);
        
        await expect((dictionaryCommand as any).loadDictionary()).resolves.not.toThrow();
      });
    });

    describe('saveDictionary', () => {
      test('ËæûÊõ∏„Éá„Ç£„É¨„ÇØ„Éà„É™„Åå‰ΩúÊàê„Åï„Çå„Çã', async () => {
        mockFs.existsSync.mockReturnValue(false);
        mockDictionaryManager.getDictionary.mockReturnValue({ test: 'data' });
        
        await (dictionaryCommand as any).saveDictionary();
        
        expect(mockFs.mkdirSync).toHaveBeenCalledWith(
          expect.stringContaining('.rimor'),
          { recursive: true }
        );
      });

      test('ËæûÊõ∏„Éï„Ç°„Ç§„É´„Åå‰øùÂ≠ò„Åï„Çå„Çã', async () => {
        mockFs.existsSync.mockReturnValue(true);
        const mockDictionary = { test: 'data' };
        mockDictionaryManager.getDictionary.mockReturnValue(mockDictionary);
        
        await (dictionaryCommand as any).saveDictionary();
        
        expect(mockFs.writeFileSync).toHaveBeenCalledWith(
          expect.stringContaining('dictionaries/default.yaml'),
          'test: data\n',
          'utf-8'
        );
      });
    });
  });

  describe('registerDictionaryCommands', () => {
    test('yargs„Ç≥„Éû„É≥„Éâ„ÅåÊ≠£„Åó„ÅèÁôªÈå≤„Åï„Çå„Çã', () => {
      const mockYargs = {
        command: jest.fn().mockReturnThis()
      };
      
      const result = registerDictionaryCommands(mockYargs as any);
      
      expect(mockYargs.command).toHaveBeenCalledWith(
        'dictionary',
        expect.any(String),
        expect.any(Function)
      );
      expect(result).toBe(mockYargs);
    });
  });
});