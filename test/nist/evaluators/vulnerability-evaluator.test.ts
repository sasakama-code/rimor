/**
 * VulnerabilityEvaluator テスト
 * 脆弱性評価システムのテスト仕様
 * 
 * TDD Red Phase: 失敗するテストを最初に作成
 * Defensive Programming: 異常系のテストも網羅
 */

import { VulnerabilityEvaluator } from '../../../src/nist/evaluators/VulnerabilityEvaluator';
import { RiskLevel } from '../../../src/nist/types/unified-analysis-result';
import { 
  Vulnerability,
  SeverityLevel
} from '../../../src/nist/types/nist-types';

describe('VulnerabilityEvaluator', () => {
  let evaluator: VulnerabilityEvaluator;

  beforeEach(() => {
    evaluator = new VulnerabilityEvaluator();
  });

  describe('CVSSスコア変換', () => {
    it('CVSSスコアをSeverityLevelに変換する', () => {
      expect(evaluator.cvssToSeverity(9.5)).toBe('CRITICAL');
      expect(evaluator.cvssToSeverity(7.5)).toBe('HIGH');
      expect(evaluator.cvssToSeverity(5.0)).toBe('MODERATE');
      expect(evaluator.cvssToSeverity(3.0)).toBe('LOW');
      expect(evaluator.cvssToSeverity(0.5)).toBe('VERY_LOW');
    });

    it('無効なCVSSスコアを適切に処理する', () => {
      expect(() => evaluator.cvssToSeverity(-1)).toThrow('Invalid CVSS score');
      expect(() => evaluator.cvssToSeverity(11)).toThrow('Invalid CVSS score');
    });

    it('CVSSスコアをリスクレベルに変換する', () => {
      expect(evaluator.cvssToRiskLevel(9.0)).toBe('CRITICAL');
      expect(evaluator.cvssToRiskLevel(7.0)).toBe('HIGH');
      expect(evaluator.cvssToRiskLevel(4.0)).toBe('MEDIUM');
      expect(evaluator.cvssToRiskLevel(1.0)).toBe('LOW');
    });
  });

  describe('脆弱性評価', () => {
    it('単一の脆弱性を評価する', () => {
      const vulnerability: Vulnerability = {
        id: 'VULN-001',
        description: 'SQLインジェクション脆弱性',
        severity: 'HIGH',
        exploitability: 'HIGH',
        detectability: 'EASY',
        affectedAssets: ['database'],
        cveId: 'CVE-2024-0001',
        cvssScore: 8.5
      };

      const assessment = evaluator.assessVulnerability(vulnerability);
      expect(assessment.riskLevel).toBe('HIGH');
      expect(assessment.exploitProbability).toBeGreaterThan(0.6);
      expect(assessment.overallScore).toBeGreaterThan(70);
    });

    it('複数の脆弱性を総合評価する', () => {
      const vulnerabilities: Vulnerability[] = [
        {
          id: 'VULN-001',
          description: '重大なセキュリティ脆弱性',
          severity: 'CRITICAL',
          exploitability: 'VERY_HIGH',
          detectability: 'VERY_EASY',
          affectedAssets: ['auth-system']
        },
        {
          id: 'VULN-002',
          description: '中程度の脆弱性',
          severity: 'MODERATE',
          exploitability: 'LOW',
          detectability: 'HARD',
          affectedAssets: ['logging']
        }
      ];

      const combined = evaluator.assessCombinedVulnerabilities(vulnerabilities);
      expect(combined.overallRiskLevel).toBe('CRITICAL');
      expect(combined.vulnerabilityCount).toBe(2);
      expect(combined.criticalCount).toBe(1);
    });

    it('脆弱性チェーンを検出する', () => {
      const vulnerabilities: Vulnerability[] = [
        {
          id: 'VULN-001',
          description: '入力検証不足',
          severity: 'MODERATE',
          exploitability: 'HIGH',
          detectability: 'EASY',
          affectedAssets: ['input-handler']
        },
        {
          id: 'VULN-002',
          description: 'SQLインジェクション',
          severity: 'HIGH',
          exploitability: 'HIGH',
          detectability: 'MODERATE',
          affectedAssets: ['database']
        }
      ];

      const chains = evaluator.detectVulnerabilityChains(vulnerabilities);
      expect(chains.length).toBeGreaterThan(0);
      expect(chains[0].chainedRisk).toBe('CRITICAL');
      expect(chains[0].description).toContain('連鎖的な脆弱性');
    });
  });

  describe('脆弱性の優先順位付け', () => {
    it('リスクレベルに基づいて脆弱性を優先順位付けする', () => {
      const vulnerabilities: Vulnerability[] = [
        {
          id: 'VULN-003',
          description: '低リスク',
          severity: 'LOW',
          exploitability: 'LOW',
          detectability: 'HARD',
          affectedAssets: []
        },
        {
          id: 'VULN-001',
          description: '高リスク',
          severity: 'CRITICAL',
          exploitability: 'VERY_HIGH',
          detectability: 'VERY_EASY',
          affectedAssets: []
        },
        {
          id: 'VULN-002',
          description: '中リスク',
          severity: 'MODERATE',
          exploitability: 'MODERATE',
          detectability: 'MODERATE',
          affectedAssets: []
        }
      ];

      const prioritized = evaluator.prioritizeVulnerabilities(vulnerabilities);
      expect(prioritized[0].id).toBe('VULN-001');
      expect(prioritized[1].id).toBe('VULN-002');
      expect(prioritized[2].id).toBe('VULN-003');
    });

    it('悪用可能性の高い脆弱性を識別する', () => {
      const vulnerabilities: Vulnerability[] = [
        {
          id: 'VULN-001',
          description: '容易に悪用可能',
          severity: 'HIGH',
          exploitability: 'VERY_HIGH',
          detectability: 'VERY_EASY',
          affectedAssets: []
        },
        {
          id: 'VULN-002',
          description: '悪用困難',
          severity: 'HIGH',
          exploitability: 'VERY_LOW',
          detectability: 'VERY_HARD',
          affectedAssets: []
        }
      ];

      const exploitable = evaluator.getHighlyExploitableVulnerabilities(vulnerabilities);
      expect(exploitable.length).toBe(1);
      expect(exploitable[0].id).toBe('VULN-001');
    });
  });

  describe('推奨事項生成', () => {
    it('脆弱性に対する推奨事項を生成する', () => {
      const vulnerability: Vulnerability = {
        id: 'VULN-001',
        description: 'SQLインジェクション脆弱性',
        severity: 'CRITICAL',
        exploitability: 'HIGH',
        detectability: 'EASY',
        affectedAssets: ['database'],
        cveId: 'CVE-2024-0001'
      };

      const recommendations = evaluator.generateRecommendations(vulnerability);
      expect(recommendations.length).toBeGreaterThan(0);
      expect(recommendations[0].priority).toBe('CRITICAL');
      expect(recommendations[0].action).toContain('パラメータ化クエリ');
    });

    it('脆弱性タイプに応じた具体的な対策を提案する', () => {
      const xssVuln: Vulnerability = {
        id: 'VULN-002',
        description: 'XSS脆弱性',
        severity: 'HIGH',
        exploitability: 'HIGH',
        detectability: 'EASY',
        affectedAssets: ['web-ui']
      };

      const recommendations = evaluator.generateRecommendations(xssVuln);
      const hasEscapingRecommendation = recommendations.some(r => 
        r.action.includes('エスケープ') || r.action.includes('サニタイズ')
      );
      expect(hasEscapingRecommendation).toBe(true);
    });
  });

  describe('エラーハンドリング', () => {
    it('nullの脆弱性を適切に処理する', () => {
      expect(() => evaluator.assessVulnerability(null as any)).toThrow('Vulnerability is required');
    });

    it('空の脆弱性リストを適切に処理する', () => {
      const result = evaluator.assessCombinedVulnerabilities([]);
      expect(result.overallRiskLevel).toBe('MINIMAL');
      expect(result.vulnerabilityCount).toBe(0);
    });

    it('不正な脆弱性データを検証する', () => {
      const invalidVuln = {
        id: 'INVALID',
        description: 'Invalid vulnerability'
        // 必須フィールドが欠落
      } as any;

      expect(() => evaluator.assessVulnerability(invalidVuln))
        .toThrow('Invalid vulnerability data');
    });
  });
});