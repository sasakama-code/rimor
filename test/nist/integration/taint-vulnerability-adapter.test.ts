/**
 * TaintVulnerabilityAdapter テスト
 * TaintAnalysisとVulnerabilityEvaluatorを統合するアダプターのテスト
 * 
 * TDD Red Phase: 失敗するテストを先に作成
 * t_wadaのTDD原則に従う
 */

import { TaintVulnerabilityAdapter } from '../../../src/nist/adapters/TaintVulnerabilityAdapter';
import { VulnerabilityEvaluator } from '../../../src/nist/evaluators/VulnerabilityEvaluator';
import { RiskLevel } from '../../../src/nist/types/unified-analysis-result';
import { 
  Vulnerability,
  SeverityLevel,
  ExploitabilityLevel,
  DetectabilityLevel
} from '../../../src/nist/types/nist-types';
import { TaintAnalysisResult, TaintLevel } from '../../../src/security/types/taint-analysis-types';

describe('TaintVulnerabilityAdapter', () => {
  let adapter: TaintVulnerabilityAdapter;
  let vulnerabilityEvaluator: VulnerabilityEvaluator;

  beforeEach(() => {
    vulnerabilityEvaluator = new VulnerabilityEvaluator();
    adapter = new TaintVulnerabilityAdapter(vulnerabilityEvaluator);
  });

  describe('Taint解析結果から脆弱性への変換', () => {
    it('CRITICALなTaintFlowをCRITICAL脆弱性に変換する', () => {
      const taintResult: TaintAnalysisResult = {
        flows: [
          {
            id: 'FLOW-001',
            sourceLocation: { file: 'input.ts', line: 10, column: 5 },
            sinkLocation: { file: 'database.ts', line: 50, column: 10 },
            taintLevel: TaintLevel.CRITICAL,
            confidence: 0.95,
            path: ['input.ts:10', 'processor.ts:25', 'database.ts:50'],
            description: 'ユーザー入力が直接SQLクエリに使用されています'
          }
        ],
        summary: {
          totalFlows: 1,
          criticalFlows: 1,
          highFlows: 0,
          mediumFlows: 0,
          lowFlows: 0
        }
      };

      const vulnerabilities = adapter.convertTaintToVulnerabilities(taintResult);

      expect(vulnerabilities).toHaveLength(1);
      expect(vulnerabilities[0].severity).toBe('CRITICAL');
      expect(vulnerabilities[0].type).toBe('TAINT_FLOW');
      expect(vulnerabilities[0].exploitability).toBe('VERY_HIGH');
      expect(vulnerabilities[0].description).toContain('SQLクエリ');
    });

    it('複数のTaintFlowを複数の脆弱性に変換する', () => {
      const taintResult: TaintAnalysisResult = {
        flows: [
          {
            id: 'FLOW-001',
            sourceLocation: { file: 'input.ts', line: 10, column: 5 },
            sinkLocation: { file: 'exec.ts', line: 30, column: 8 },
            taintLevel: TaintLevel.HIGH,
            confidence: 0.9,
            path: ['input.ts:10', 'exec.ts:30'],
            description: 'コマンドインジェクションの可能性'
          },
          {
            id: 'FLOW-002',
            sourceLocation: { file: 'request.ts', line: 15, column: 10 },
            sinkLocation: { file: 'response.ts', line: 40, column: 15 },
            taintLevel: TaintLevel.MEDIUM,
            confidence: 0.7,
            path: ['request.ts:15', 'response.ts:40'],
            description: 'XSSの可能性'
          }
        ],
        summary: {
          totalFlows: 2,
          criticalFlows: 0,
          highFlows: 1,
          mediumFlows: 1,
          lowFlows: 0
        }
      };

      const vulnerabilities = adapter.convertTaintToVulnerabilities(taintResult);

      expect(vulnerabilities).toHaveLength(2);
      expect(vulnerabilities[0].severity).toBe('HIGH');
      expect(vulnerabilities[1].severity).toBe('MODERATE');
    });

    it('TaintLevelを適切なSeverityLevelにマッピングする', () => {
      const mappings = [
        { taintLevel: TaintLevel.CRITICAL, expectedSeverity: 'CRITICAL' },
        { taintLevel: TaintLevel.HIGH, expectedSeverity: 'HIGH' },
        { taintLevel: TaintLevel.MEDIUM, expectedSeverity: 'MODERATE' },
        { taintLevel: TaintLevel.LOW, expectedSeverity: 'LOW' },
        { taintLevel: TaintLevel.SAFE, expectedSeverity: 'VERY_LOW' }
      ];

      mappings.forEach(({ taintLevel, expectedSeverity }) => {
        const severity = adapter.mapTaintLevelToSeverity(taintLevel);
        expect(severity).toBe(expectedSeverity);
      });
    });

    it('信頼度スコアを検出可能性にマッピングする', () => {
      const mappings = [
        { confidence: 0.95, expectedDetectability: 'VERY_EASY' },
        { confidence: 0.75, expectedDetectability: 'EASY' },
        { confidence: 0.5, expectedDetectability: 'MODERATE' },
        { confidence: 0.25, expectedDetectability: 'HARD' },
        { confidence: 0.1, expectedDetectability: 'VERY_HARD' }
      ];

      mappings.forEach(({ confidence, expectedDetectability }) => {
        const detectability = adapter.mapConfidenceToDetectability(confidence);
        expect(detectability).toBe(expectedDetectability);
      });
    });
  });

  describe('脆弱性評価の統合', () => {
    it('Taint解析結果から総合リスク評価を生成する', async () => {
      const taintResult: TaintAnalysisResult = {
        flows: [
          {
            id: 'FLOW-001',
            sourceLocation: { file: 'api.ts', line: 20, column: 5 },
            sinkLocation: { file: 'db.ts', line: 100, column: 10 },
            taintLevel: TaintLevel.HIGH,
            confidence: 0.85,
            path: ['api.ts:20', 'service.ts:50', 'db.ts:100'],
            description: 'SQLインジェクションの脆弱性'
          }
        ],
        summary: {
          totalFlows: 1,
          criticalFlows: 0,
          highFlows: 1,
          mediumFlows: 0,
          lowFlows: 0
        }
      };

      const assessment = await adapter.evaluateTaintVulnerabilities(taintResult);

      expect(assessment.overallRiskLevel).toBe('HIGH');
      expect(assessment.vulnerabilityCount).toBe(1);
      expect(assessment.highCount).toBe(1);
      expect(assessment.recommendations).toBeDefined();
      expect(assessment.recommendations!).toHaveLength(1);
      expect(assessment.recommendations![0].priority).toBe('HIGH');
    });

    it('複数のTaintFlowから連鎖リスクを検出する', async () => {
      const taintResult: TaintAnalysisResult = {
        flows: [
          {
            id: 'FLOW-001',
            sourceLocation: { file: 'auth.ts', line: 10, column: 5 },
            sinkLocation: { file: 'session.ts', line: 30, column: 10 },
            taintLevel: TaintLevel.HIGH,
            confidence: 0.9,
            path: ['auth.ts:10', 'session.ts:30'],
            description: '認証バイパスの可能性'
          },
          {
            id: 'FLOW-002',
            sourceLocation: { file: 'session.ts', line: 30, column: 10 },
            sinkLocation: { file: 'admin.ts', line: 50, column: 15 },
            taintLevel: TaintLevel.HIGH,
            confidence: 0.85,
            path: ['session.ts:30', 'admin.ts:50'],
            description: '権限昇格の可能性'
          }
        ],
        summary: {
          totalFlows: 2,
          criticalFlows: 0,
          highFlows: 2,
          mediumFlows: 0,
          lowFlows: 0
        }
      };

      const assessment = await adapter.evaluateTaintVulnerabilities(taintResult);
      const chainedRisks = await adapter.detectChainedRisks(taintResult);

      expect(chainedRisks).toHaveLength(1);
      expect(chainedRisks[0].chainedRisk).toBe('CRITICAL');
      expect(chainedRisks[0].description).toContain('連鎖');
      expect(chainedRisks[0].vulnerabilityIds).toContain('FLOW-001');
      expect(chainedRisks[0].vulnerabilityIds).toContain('FLOW-002');
    });
  });

  describe('推奨事項の生成', () => {
    it('Taint脆弱性に対する適切な推奨事項を生成する', () => {
      const vulnerability: Vulnerability = {
        id: 'VULN-001',
        type: 'TAINT_FLOW',
        severity: 'HIGH',
        exploitability: 'HIGH',
        detectability: 'EASY',
        description: 'SQLインジェクション脆弱性',
        affectedComponent: 'database.ts',
        cvss: 8.5
      };

      const recommendations = adapter.generateRecommendations([vulnerability]);

      expect(recommendations).toHaveLength(1);
      expect(recommendations[0].priority).toBe('HIGH');
      expect(recommendations[0].action).toContain('サニタイズ');
      expect(recommendations[0].technicalDetails).toContain('パラメータ化クエリ');
      expect(recommendations[0].timeline).toBe('1週間以内');
    });

    it('複数の脆弱性に対して優先順位付けされた推奨事項を生成する', () => {
      const vulnerabilities: Vulnerability[] = [
        {
          id: 'VULN-001',
          type: 'TAINT_FLOW',
          severity: 'CRITICAL',
          exploitability: 'VERY_HIGH',
          detectability: 'VERY_EASY',
          description: 'リモートコード実行',
          affectedComponent: 'exec.ts',
          cvss: 9.8
        },
        {
          id: 'VULN-002',
          type: 'TAINT_FLOW',
          severity: 'MODERATE',
          exploitability: 'MODERATE',
          detectability: 'MODERATE',
          description: 'XSS脆弱性',
          affectedComponent: 'view.ts',
          cvss: 5.5
        }
      ];

      const recommendations = adapter.generateRecommendations(vulnerabilities);

      expect(recommendations).toHaveLength(2);
      expect(recommendations[0].priority).toBe('CRITICAL');
      expect(recommendations[0].action).toContain('即座');
      expect(recommendations[1].priority).toBe('MEDIUM');
      expect(recommendations[1].timeline).not.toBe(recommendations[0].timeline);
    });
  });

  describe('エラーハンドリング', () => {
    it('空のTaint解析結果を適切に処理する', () => {
      const emptyTaintResult: TaintAnalysisResult = {
        flows: [],
        summary: {
          totalFlows: 0,
          criticalFlows: 0,
          highFlows: 0,
          mediumFlows: 0,
          lowFlows: 0
        }
      };

      const vulnerabilities = adapter.convertTaintToVulnerabilities(emptyTaintResult);

      expect(vulnerabilities).toHaveLength(0);
    });

    it('無効なTaintLevelに対してエラーを返す', () => {
      expect(() => {
        adapter.mapTaintLevelToSeverity('INVALID' as any);
      }).toThrow('Invalid taint level');
    });

    it('信頼度が範囲外の場合に適切にハンドリングする', () => {
      const detectabilityHigh = adapter.mapConfidenceToDetectability(1.5);
      expect(detectabilityHigh).toBe('VERY_EASY');

      const detectabilityLow = adapter.mapConfidenceToDetectability(-0.5);
      expect(detectabilityLow).toBe('VERY_HARD');
    });
  });
});